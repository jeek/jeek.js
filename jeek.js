
export class Augmentations {
	constructor(ns, Game, settings = {}) {
		this.ns = ns
		this.Game = Game ? Game : new WholeGame(ns);
		this.settings = settings;
	}
	async createDisplay() {
		this.augWindow = await makeNewWindow("Augmentations", this.ns.ui.getTheme());
		this.augs = {};
		let graftableaugs = await Do(this.ns, "ns.grafting.getGraftableAugmentations");
		for (let faction of Object.keys(FACTIONS)) {
			for (let aug of await Do(this.ns, "ns.singularity.getAugmentationsFromFaction", faction)) {
				if (!Object.keys(this.augs).includes(aug)) {
					this.augs[aug] = {
						'base_price': await Do(this.ns, "ns.singularity.getAugmentationBasePrice", aug),
						'price': await Do(this.ns, "ns.singularity.getAugmentationPrice", aug),
						'prereqs': await Do(this.ns, "ns.singularity.getAugmentationPrereq", aug),
						'rep_req': await Do(this.ns, "ns.singularity.getAugmentationRepReq", aug),
						'stats': await Do(this.ns, "ns.singularity.getAugmentationStats", aug),
						'factions': [faction]
					};
					if (graftableaugs.includes(aug)) {
						this.augs[aug]['graftprice'] = await Do(this.ns, "ns.grafting.getAugmentationGraftPrice", aug);
						this.augs[aug]['grafttime'] = await Do(this.ns, "ns.grafting.getAugmentationGraftTime", aug);
					}
				} else {
					this.augs[aug]['factions'].push(faction);
				}
			}
		}
	}
	async updateDisplay() {
		let ownedaugs = await Do(this.ns, "ns.singularity.getOwnedAugmentations");
		//		let factfavor = await DoAll(this.ns, "ns.singularity.getFactionFavor", Object.keys(FACTIONS));
		//		let factfavorgain = await DoAll(this.ns, "ns.singularity.getFactionFavorGain", Object.keys(FACTIONS));
		let factrep = await DoAll(this.ns, "ns.singularity.getFactionRep", Object.keys(FACTIONS));
		let update = "<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0>"
		let owned = "<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0>"
		for (let aug of Object.keys(this.augs).sort((a, b) => this.augs[a]['rep_req'] - this.augs[b]['rep_req'])) {
			let skip = false;
			if (this.augs[aug].factions.includes("Church of the Machine God") && ownedaugs.length > 0 && !ownedaugs.includes("Stanek's Gift - Genesis")) {
				skip = true;
			}
			if (this.augs[aug].factions.includes("Bladeburners") && !((await Do(this.ns, "ns.getPlayer")).factions.includes("Bladeburners"))) {
				skip = true;
			}
			if (this.augs[aug].factions.includes("Shadows of Anarchy") && !((await Do(this.ns, "ns.getPlayer")).factions.includes("Shadows of Anarchy"))) {
				skip = true;
			}
			if (!skip) {
				let myupdate = "<TR VALIGN=TOP>"
				myupdate += td(aug) + td(jFormat(this.augs[aug]['price'], "$"), "RIGHT");
				myupdate += "<TD ALIGN=RIGHT>" + jFormat(this.augs[aug]['rep_req']) + "<BR><TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0>";
				let nothing = [];
				for (let faction of this.augs[aug]['factions'].sort((a, b) => factrep[b] - factrep[a])) {
					if (factrep[faction] > 0) {
						myupdate += tr(td(FACTIONS[faction]['abbrev'] + "&nbsp;", "RIGHT") + td(jFormat(factrep[faction]), "RIGHT"));
					} else {
						nothing.push(FACTIONS[faction]['abbrev']);
					}
				}
				myupdate += "</TABLE>"
				if (nothing.length > 0) {
					myupdate += "<SMALL>" + nothing.join(" ");
				}
				myupdate += "</TD>";
				try {
					myupdate += td(jFormat(this.augs[aug]['graftprice'], "$"), "RIGHT");
				} catch { myupdate += td("&nbsp;"); }
				try {
					myupdate += td(timeFormat(Math.floor(this.augs[aug]['grafttime'] / 1000 + .5)), "RIGHT");
				} catch { myupdate += td("&nbsp;"); }
				myupdate += "</TR>";
				if (ownedaugs.includes(aug)) {
					owned += myupdate;
				} else {
					update += myupdate;
				}
			}
		}
		update += "</TABLE>";
		owned += "</TABLE>";
		this.augWindow.update(update + "<BR>" + owned);
		await this.ns.asleep(1000);
	}
}

let bbTypes = {
	"Tracking": "Contract",
	"Bounty Hunter": "Contract",
	"Retirement": "Contract",
	"Investigation": "Operation",
	"Undercover Operation": "Operation",
	"Sting Operation": "Operation",
	"Raid": "Operation",
	"Stealth Retirement Operation": "Operation",
	"Assassination": "Operation",
	"Operation Typhoon": "Black Op",
	"Operation X": "Black Op",
	"Operation Titan": "Black Op",
	"Operation Ares": "Black Op",
	"Operation Archangel": "Black Op",
	"Operation Juggernaut": "Black Op",
	"Operation Red Dragon": "Black Op",
	"Operation K": "Black Op",
	"Operation Deckard": "Black Op",
	"Operation Tyrell": "Black Op",
	"Operation Wallace": "Black Op",
	"Operation Hyron": "Black Op",
	"Operation Ion Storm": "Black Op",
	"Operation Annihilus": "Black Op",
	"Operation Ultron": "Black Op",
	"Operation Centurion": "Black Op",
	"Operation Vindictus": "Black Op",
	"Operation Daedalus": "Black Op",
	"Operation Zero": "Black Op",
	"Operation Shoulder of Orion": "Black Op",
	"Operation Morpheus": "Black Op"
}

export class Bladeburner {
	constructor(ns, Game, settings = {}) {
		this.ns = ns;
		this.settings = settings;
		this.raid = Object.keys(this.settings).includes("raid") ? this.settings.raid : true;
		this.sting = Object.keys(this.settings).includes("sting") ? this.settings.string : true;
		this.maxChaos = Object.keys(this.settings).includes("maxChaos") ? this.settings.maxChaos : 30;
		this.minStamina = Object.keys(this.settings).includes("minStamina") ? this.settings.minStamina : .6;
		this.maxStamina = Object.keys(this.settings).includes("maxStamina") ? this.settings.maxStamina : .9;
		this.Game = Game ? Game : new WholeGame(ns);
		this.log = ns.tprint.bind(ns);
		if (ns.flags(cmdlineflags)['logbox']) {
			this.log = this.Game.sidebar.querySelector(".bladebox") || this.Game.createSidebarItem("Bladeburner", "", "B", "bladebox");
			this.log = this.log.log;
		}
	}
	get chaosHere() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getCityChaos", await (this.city));
			} catch (e) {
				return [];
			}
		})();
	}
	get stamina() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getStamina");
			} catch (e) {
				return [];
			}
		})();
	}
	get currentAction() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getCurrentAction");
			} catch (e) {
				return [];
			}
		})();
	}
	async getChance(name) {
		return await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", bbTypes[name], name);
	}
	async maxLevel(name) {
		return await Do(this.ns, "ns.bladeburner.getActionMaxLevel", bbTypes[name], name);
	}
	async setLevel(name, level) {
		return await Do(this.ns, "ns.bladeburner.setActionLevel", bbTypes[name], name, level);
	}
	async fieldAnal() {
		return await Do(this.ns, "ns.bladeburner.startAction", "General", "Field Analysis");
	}
	async start() {
		return await Do(this.ns, "ns.bladeburner.joinBladeburnerDivision");
	}
	async successChance(op) {
		if (op != 0 && op != "")
    		return await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", bbTypes[op], op);
		return 0;
	}
	async teamSize(op, size) {
		if (op != 0 && op != "")
		    return await Do(this.ns, "ns.bladeburner.setTeamSize", bbTypes[op], op, size);
		return false;
	}
	async setAutoLevel(op, level) {
		return await Do(this.ns, "ns.bladeburner.setActionAutolevel", bbTypes[op], op, level);
	}
	async actionStart(op) {
		return await Do(this.ns, "ns.bladeburner.startAction", bbTypes[op], op);
	}
	isKillOp(nextOp) {
		if (["Operation Typhoon", "Operation X", "Operation Titan", "Operation Ares", "Operation Archangel", "Operation Juggernaut", "Operation Red Dragon", "Operation K", "Operation Deckard", "Operation Tyrell", "Operation Wallace", "Operation Hyron", "Operation Ion Storm", "Operation Annihilus", "Operation Ultron"].includes(nextOp)) {
			return true;
		}
		return false;
	}
	isStealthOp(nextOp) {
		if (["Operation Zero", "Operation Shoulder of Orion", "Operation Morpheus"].includes(nextOp)) {
			return true;
		}
		return false;
	}
	async UpgradeSkills(count=1) {
		while (await Do(this.ns, "ns.bladeburner.upgradeSkill", "Overclock", count)) {
			this.log("Upgraded Overclock" + " " + count.toString());
			return true;
		}
		let skillmods = { };
		if ((1 > (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Operation", "Assassination"))[1]) || (1 > (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Black Op", "Operation Daedalus"))[0])) {
			skillmods["Blade's Intuition"] = 3;
			skillmods["Digital Observer"] = 4;
		} else {
			if (Math.max((await Do(this.ns, "ns.bladeburner.getActionTime", "Operation", "Assassination")),(await Do(this.ns, "ns.bladeburner.getActionTime", "Operation", "Investigation")),(await Do(this.ns, "ns.bladeburner.getActionTime", "Operation", "Undercover Operation")),(await Do(this.ns, "ns.bladeburner.getActionTime", "Operation", "Stealth Retirement Operation"))) > 1000) {
			    skillmods["Reaper"] = 2;
			    skillmods["Evasive System"] = 4;
			}
		}
		let nextOp = await (this.nextBlackOp);
		if ((1 > (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Operation", "Assassination"))[1]) || (1 > (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Black Op", "Operation Ultron"))[0])) {
			skillmods["Short-Circuit"] = 5.5;
		}
		if ((1 > (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Operation", "Assassination"))[1]) || ((await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Black Op", "Operation Ultron"))[0] > (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Black Op", "Operation Morpheus"))[0])) {
			skillmods["Cloak"] = 5.5;
		}
		let currentrank = await DoAll(this.ns, "ns.bladeburner.getSkillLevel", Object.keys(skillmods));
		let cost = await DoAll(this.ns, "ns.bladeburner.getSkillUpgradeCost", Object.keys(skillmods));
		let current = 1;
		for (let skill of Object.keys(skillmods)) {
			current *= skillmods[skill] * (1 + currentrank[skill] / 100);
		}
		let upgrade = {};
		if (Object.keys(skillmods).length > 0) {
	    	for (let skill of Object.keys(skillmods)) {
		    	currentrank[skill] += 1;
			    upgrade[skill] = 1;
			    for (let skill2 of Object.keys(skillmods)) {
				    upgrade[skill] *= skillmods[skill2] * (1 + currentrank[skill2] / 100);
    			}
	    		upgrade[skill] = (upgrade[skill] - current) / cost[skill];
		    	currentrank[skill] -= 1;
    		}
	    	upgrade = Object.entries(upgrade).sort((a, b) => -a[1] + b[1])[0][0];
		    while (await Do(this.ns, "ns.bladeburner.upgradeSkill", upgrade, count)) {
		    	this.log("Upgraded " + upgrade + " " + count.toString());
			    return true;
    		}
		}
		upgrade = "Hyperdrive";
		while (await Do(this.ns, "ns.bladeburner.upgradeSkill", upgrade, count)) {
			this.log("Upgraded " + upgrade + " " + count.toString());
			await (this.UpgradeSkills(count * 2));
			return true;
		}
		return false;
	}
	get hasSimulacrum() {
		return (async () => {
			try {
				return await (this.Game.Player.hasAug("The Blade's Simulacrum"));
			} catch (e) {
				return [];
			}
		})();
	}
	async hardStop() {
		if (!await (this.hasSimulacrum))
    		await Do(this.ns, "ns.singularity.stopAction");
		await (this.bbStop());
	}
	async bbStop() {
		await Do(this.ns, "ns.bladeburner.stopBladeburnerAction");
	}
	async bbCity(city) {
		await Do(this.ns, "ns.bladeburner.switchCity", city);
	}
	async bbOpCount(operation) {
		return await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Operation", operation);
	}
	async repGain(action, level) {
		return await Do(this.ns, "ns.bladeburner.getActionRepGain", bbTypes[action], action, level);
	}
	async bbActionTime(action) {
		return await Do(this.ns, "ns.bladeburner.getActionTime", bbTypes[action], action);
	}
	async bbActionCount(action) {
		return await Do(this.ns, "ns.bladeburner.getActionCountRemaining", bbTypes[action], action);
	}
	async inciteViolence() {
		let city = Object.entries(await DoAll(this.ns, "ns.bladeburner.getCityEstimatedPopulation", CITIES)).sort((a, b) => b[1] - a[1])[0][0]
		this.log("Inciting Violence in " + city);
		await Do(this.ns, "ns.bladeburner.switchCity", city);
		await this.Game.Sleeves.bbEverybody("Infiltrate synthoids");
		while (500 > await (this.operationCount)) {
		    await Do(this.ns, "ns.bladeburner.startAction", "General", "Incite Violence");
        	await this.ns.asleep(await Do(this.ns, "ns.bladeburner.getActionTime", "General", "Incite Violence"));
	    }
	}
	async recoverIfNecessary(lower = -1, upper = -1) {
		lower = lower == -1 ? this.minStamina : lower;
		upper = upper == -1 ? this.maxStamina : upper;
		if (lower > (await Do(this.ns, "ns.bladeburner.getStamina")).reduce((a, b) => a / b)) {
			this.log("Recovering Stamina...");
			await this.hardStop();
			await Do(this.ns, "ns.bladeburner.startAction", "General", "Hyperbolic Regeneration Chamber");
			await this.Game.Sleeves.bbEverybody("Hyperbolic Regeneration Chamber")
			while (upper > (await Do(this.ns, "ns.bladeburner.getStamina")).reduce((a, b) => a / b)) {
				await this.ns.asleep(1000);
			}
			await this.hardStop();
			this.log("...done");
			return true;
		}
		return false;
	}
	async deescalate(goal = -1) {
		goal = goal == -1 ? this.maxChaos : goal;
		if (goal < (await Do(this.ns, "ns.bladeburner.getCityChaos", await Do(this.ns, "ns.bladeburner.getCity")))) {
			this.log("Deescalating " + await Do(this.ns, "ns.bladeburner.getCity"));
			await this.hardStop();
			await Do(this.ns, "ns.bladeburner.startAction", "General", "Diplomacy");
			await this.Game.Sleeves.bbEverybody("Diplomacy");
			while (goal < (await Do(this.ns, "ns.bladeburner.getCityChaos", await Do(this.ns, "ns.bladeburner.getCity")))) {
				await this.ns.asleep(1000);
			}
			return true;
		}
		return false;
	}
	get contractCount() {
		return (async () => {
			try {
				return ((await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Contract", "Tracking"))) + ((await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Contract", "Bounty Hunter"))) + ((await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Contract", "Retirement")));
			} catch (e) {
				return 0;
			}
		})();
	}
	async actionCount(op) {
		return await Do(this.ns, "ns.bladeburner.getActionCountRemaining", bbTypes[op], op);
	}
	get operationCount() {
		return (async () => {
			try {
				return (await(this.bbOpCount("Investigation")))+(await(this.bbOpCount("Undercover Operation")))+(await(this.bbOpCount("Stealth Retirement Operation")))+(await(this.bbOpCount("Assassination")));
			} catch (e) {
				return 0;
			}
		})();
	}
	get opNames() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.bladeburner.getOperationNames")).filter(x => this.raid ? true : x != "Raid").filter(x => this.sting ? true : x != "Sting Operation");
			} catch (e) {
				return [];
			}
		})();
	}
	get city() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getCity");
			} catch (e) {
				return [];
			}
		})();
	}
	get skillPoints() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getSkillPoints");
			} catch (e) {
				return [];
			}
		})();
	}
	get contractNames() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getContractNames");
			} catch (e) {
				return [];
			}
		})();
	}
	get rank() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.bladeburner.getRank");
			} catch (e) {
				return [];
			}
		})();
	}
	async blackOpRank(op) {
		return await Do(this.ns, "ns.bladeburner.getBlackOpRank", op);
	}
	async joinTheFaction() {
		return await Do(this.ns, "ns.bladeburner.joinBladeburnerFaction");
	}
	get nextBlackOp() {
		return (async () => {
			try {
				return Object.entries(await DoAllComplex(this.ns, "ns.bladeburner.getActionCountRemaining", ((await Do(this.ns, "ns.bladeburner.getBlackOpNames")).map(x => ["Black Op", x])))).map(x => [x[0].split(",")[1], x[1]]).filter(x => x[1] > 0)[0][0];
			} catch (e) {
				return 0;
			}
		})();
	}
	async actionMaxLevel(op) {
		return await Do(this.ns, "ns.bladeburner.getActionMaxLevel", bbTypes[op], op);
	}
	async createDisplay() {
		this.bbWindow = await makeNewWindow("Bladeburner", this.ns.ui.getTheme());

		eval('window').listenUp = (message) => { globalThis.bbQueue.push(message); };
		if (typeof globalThis.bbQueue === 'undefined') {
			globalThis.bbQueue = [];
		}
	}
	get killicon() {
		return '<svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewBox="-22 0 511 511.99561" class="" style="fill: rgb(173, 255, 47);"><path d="m.496094 466.242188 39.902344-39.902344 45.753906 45.753906-39.898438 39.902344zm0 0"></path><path d="m468.421875 89.832031-1.675781-89.832031-300.265625 300.265625 45.753906 45.753906zm0 0"></path><path d="m95.210938 316.785156 16.84375 16.847656h.003906l83.65625 83.65625 22.753906-22.753906-100.503906-100.503906zm0 0"></path><path d="m101.445312 365.300781-39.902343 39.902344 45.753906 45.753906 39.902344-39.902343-39.90625-39.902344zm0 0"></path></svg>';
	}
	get stealthicon() {
		return '<svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" viewBox="0 0 166 132" class="" style="fill: rgb(173, 255, 47);"><g><path d="M132.658-0.18l-24.321,24.321c-7.915-2.71-16.342-4.392-25.087-4.392c-45.84,0-83,46-83,46   s14.1,17.44,35.635,30.844L12.32,120.158l12.021,12.021L144.68,11.841L132.658-0.18z M52.033,80.445   c-2.104-4.458-3.283-9.438-3.283-14.695c0-19.054,15.446-34.5,34.5-34.5c5.258,0,10.237,1.179,14.695,3.284L52.033,80.445z"></path><path d="M134.865,37.656l-18.482,18.482c0.884,3.052,1.367,6.275,1.367,9.612c0,19.055-15.446,34.5-34.5,34.5   c-3.337,0-6.56-0.483-9.611-1.367l-10.124,10.124c6.326,1.725,12.934,2.743,19.735,2.743c45.84,0,83-46,83-46   S153.987,50.575,134.865,37.656z"></path></g></svg>';
	}
	async updateDisplay() {
		if (!await Do(this.ns, "ns.bladeburner.joinBladeburnerDivision")) {
			this.bbWindow.update("<H1>Not in Bladeburner yet</H1>");
			return;
		}
		let myrank = await Do(this.ns, "ns.bladeburner.getRank");
		let mycity = await Do(this.ns, "ns.bladeburner.getCity");
		let answer = "<TABLE WIDTH=100%><TR VALIGN=TOP><TD WIDTH=50%>";
		answer += "<H1>Rank: " + Math.floor(.5 + myrank).toString() + "<BR>";
		answer += "City: " + mycity + "<BR>";
		let chaos = await Do(this.ns, "ns.bladeburner.getCityChaos", mycity);
		answer += "Chaos: " + "<FONT COLOR=" + this.ns.ui.getTheme()[chaos < 40 ? 'success' : (chaos < 50 ? 'warning' : 'error')] + ">" + jFormat(chaos) + "</FONT><BR>";
		answer += "Communities: " + (await Do(this.ns, "ns.bladeburner.getCityCommunities", mycity)).toString() + "<BR>";
		answer += "Estimated Population: " + jFormat(await Do(this.ns, "ns.bladeburner.getCityEstimatedPopulation", mycity)) + "</H1></TD><TD><H1>";

		if (0 < await (this.Game.Sleeves.numSleeves)) {
			answer += "Sleeves:<BR>";
					let wildcard = true;
					for (let i = 0; i < await (this.Game.Sleeves.numSleeves); i++) {
						try {
							if (((await Do(this.ns, "ns.sleeve.getTask", i)).actionName) != ((await Do(this.ns, "ns.sleeve.getTask", 0))).actionName)
								wildcard = false;
						} catch { }
					}
					if (wildcard) {
						for (let i = 0; i < 1; i++) {
								let z = (await Do(this.ns, "ns.sleeve.getTask", i));
								if (null != z) {
									if (z.type == "INFILTRATE") {
										answer += "*" + ": Infiltrate" + "<BR>";
									} else {
										if (z.type == "SUPPORT") {
											answer += "*" + ": Support main sleeve" + "<BR>";
										} else {
											answer += "*" + ": " + z.actionName + "<BR>"
										}
									}
								} else {
									answer += i.toString() + "<BR>";
								}
						}
					} else {
						for (let i = 0; i < await (this.Game.Sleeves.numSleeves); i++) {
								if (null != (await Do(this.ns, "ns.sleeve.getTask", i))) {
									let z = (await Do(this.ns, "ns.sleeve.getTask", i));
									if (z.type == "INFILTRATE") {
										answer += i.toString() + ": Infiltrate" + "<BR>";
									} else {
										if (z.type == "SUPPORT") {
											answer += i.toString() + ": Support main sleeve" + "<BR>";
										} else {
											answer += i.toString() + ": " + z.actionName + "<BR>"
										}
									}
								} else {
									answer += "*" + "<BR>";
								}
						}
					}
				}

		answer += "</H1></TD></TR></TABLE>";
		answer += "<TABLE WIDTH=100% BORDER=1>";
		answer += "<TR><TH>&nbsp;</TH><TH WIDTH=16%>" + CITIES.sort().filter(x => x != mycity).join("</TH><TH WIDTH=16%>") + "</TH></TR>";
		answer += "<TR><TD VALIGN=TOP>Chaos</TD>";
		for (let city of CITIES.sort()) {
			if (city != mycity) {
				chaos = await Do(this.ns, "ns.bladeburner.getCityChaos", city);
				answer += td("<FONT COLOR=" + this.ns.ui.getTheme()[chaos < 40 ? 'success' : (chaos < 50 ? 'warning' : 'error')] + ">" + jFormat(chaos) + "</FONT>", "RIGHT");
			}
		}
		answer += "</TR>";

		answer += "<TR><TD VALIGN=TOP>Communities</TD>";
		for (let city of CITIES.sort()) {
			if (city != mycity)
				answer += td(await Do(this.ns, "ns.bladeburner.getCityCommunities", city), "RIGHT");
		}
		answer += "</TR>";

		answer += "<TR><TD VALIGN=TOP>Est. Pop</TD>";
		for (let city of CITIES.sort()) {
			if (city != mycity)
				answer += td(jFormat(await Do(this.ns, "ns.bladeburner.getCityEstimatedPopulation", city)), "RIGHT");
		}
		answer += "</TR>";
		
		answer += "</TABLE>";
		let currentAction = await Do(this.ns, "ns.bladeburner.getCurrentAction");
		if (currentAction.type != "Idle") {
			answer += "<CENTER><H1>" + currentAction.type.replace("BlackOp", "Black Op") + ": " + currentAction.name + " " + timeFormat(((await Do(this.ns, "ns.bladeburner.getActionTime", currentAction.type, currentAction.name)) - (await Do(this.ns, "ns.bladeburner.getActionCurrentTime"))) / 1000) + "</H1></CENTER><BR>";
			answer += "<TABLE WIDTH=100% BORDER=0><TR>";
			let percentage = 100 * (await Do(this.ns, "ns.bladeburner.getActionCurrentTime")) / (await Do(this.ns, "ns.bladeburner.getActionTime", currentAction.type, currentAction.name));
			answer += "<TD WIDTH=" + Math.floor(percentage).toString() + "% style='background-color:" + this.ns.ui.getTheme()['success'] + "'>&nbsp;</TD><TD style='background-color:" + this.ns.ui.getTheme()['info'] + "'>&nbsp;</TD>";
			//			this.ns.tprint("<TD WIDTH=" + Math.floor(percentage).toString() + "% BGCOLOR=" + this.ns.ui.getTheme()['success'] + ">&nbsp;</TD><TD BGCOLOR=" + this.ns.ui.getTheme()['info'] + ">&nbsp;</TD>");
			answer += "</TR></TABLE>";
		}
		answer += "<TABLE WIDTH=100% BORDER=1><TR><TH>Jobs</TH><TH>Skills " + (await Do(this.ns, "ns.bladeburner.getSkillPoints")).toString() + "</TH></TR>";
		answer += "<TR VALIGN=TOP>";
		//		answer += td((await Do(this.ns, "ns.bladeburner.getGeneralActionNames")).join("<BR>"));
		answer += "<TD WIDTH=50%>";
		for (let contract of await (this.contractNames)) {
			let remainingActions = await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Contract", contract);
			if (remainingActions <= 0) {
				answer += "<FONT COLOR=" + this.ns.ui.getTheme()['disabled'] + ">" + contract + ": " + Math.floor((await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Contract", contract))[0] * 100).toString() + "% (" + remainingActions.toString() + ")</FONT><BR>";
			} else {
				answer += contract + ": " + Math.floor((await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Contract", contract))[0] * 100).toString() + "% (" + remainingActions.toString() + ")<BR>";
			}
		}
		for (let operation of await (this.opNames)) {
			let remainingActions = await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Operation", operation);
			if (remainingActions <= 0) {
				answer += "<FONT COLOR=" + this.ns.ui.getTheme()['disabled'] + ">" + operation.replace(" Operation", "") + ": " + Math.floor((await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Operation", operation))[0] * 100).toString() + "% (" + remainingActions.toString() + ")</FONT><BR>";
			} else {
				answer += operation.replace(" Operation", "") + ": " + Math.floor((await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Operation", operation))[0] * 100).toString() + "% (" + remainingActions.toString() + ")<BR>";
			}
		}
		for (let op of await Do(this.ns, "ns.bladeburner.getBlackOpNames")) {
			if (0 == (await Do(this.ns, "ns.bladeburner.getActionCountRemaining", "Black Op", op))) {
				//answer += "<FONT COLOR=" + this.ns.ui.getTheme()['disabled'] + ">" + op + ": " + (await Do(this.ns, "ns.bladeburner.getBlackOpRank", op)) + " (" + (Math.floor(100 * (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Black Op", op))[0])).toString() + "%)</FONT> " + (this.isKillOp(op) ? this.killicon : "") + (this.isStealthOp(op) ? this.stealthicon : "") + "<BR>";
			} else {
				answer += op.replace("Operation ", "") + ": ";
				let oprank = (await Do(this.ns, "ns.bladeburner.getBlackOpRank", op));
				answer += "<FONT COLOR=" + this.ns.ui.getTheme()[myrank < oprank ? 'warning' : 'success'] + ">" + oprank.toString() + "</FONT>";
				answer += " (" + (Math.floor(100 * (await Do(this.ns, "ns.bladeburner.getActionEstimatedSuccessChance", "Black Op", op))[0])).toString() + "%) " + (this.isKillOp(op) ? this.killicon : "") + (this.isStealthOp(op) ? this.stealthicon : "") + "<BR>";
			}
		}
		answer += "</TD>"
		answer += "<TD WIDTH=50%>";
		for (let skill of await Do(this.ns, "ns.bladeburner.getSkillNames")) {
			if ((await Do(this.ns, "ns.bladeburner.getSkillLevel", skill)) > 0) {
			    answer += skill + ": " + (await Do(this.ns, "ns.bladeburner.getSkillLevel", skill)).toString() + " (" + (await Do(this.ns, "ns.bladeburner.getSkillUpgradeCost", skill)) + ")<BR>";
			}
		}
		for (let skill of await Do(this.ns, "ns.bladeburner.getSkillNames")) {
			if ((await Do(this.ns, "ns.bladeburner.getSkillLevel", skill)) == 0) {
			    answer += skill + ": " + (await Do(this.ns, "ns.bladeburner.getSkillLevel", skill)).toString() + " (" + (await Do(this.ns, "ns.bladeburner.getSkillUpgradeCost", skill)) + ")<BR>";
			}
		}
		answer += "</TD>"
		answer += "</TR></TABLE>";
		this.bbWindow.update(answer);
		await this.ns.asleep(1000);
	}
}

// Set the members to their tasks.
async function bn2setTasks(Game, memberData, settings) {
    if (!await (Game['Gang']['inGang']())) {
        return {};
    }
    let gangInfo = await (Game['Gang']['getGangInformation'])
    let members = Object.keys(memberData);
    let minimumDefense = members.length * 500;
    let nextTask = {};
/*    for (let member of members) {
        if (gangInfo.wantedLevel >= settings.wantedThreshold && gangInfo.wantedPenalty <= settings.wantedPenaltyThreshold) {
            nextTask[member] = "Vigilante Justice";
        } else {
            if (memberData[member].def < minimumDefense) {
                nextTask[member] = "Train Combat";
            } else {
                nextTask[member] = Math.random() <= settings.traffickChance ? "Traffick Illegal Arms" : "Terrorism";
            }
        }
    } */
    members.sort((a, b) => { return memberData[a].earnedRespect - memberData[b].earnedRespect; });
    members.map(x => nextTask[x] = "Traffick Illegal Arms");
    nextTask[members[0]] = "Terrorism";
    if (members.length > 6) {
        nextTask[members[1]] = "Terrorism";
    }
    if (gangInfo.wantedLevel >= settings.wantedLevel && gangInfo.wantedPenalty <= settings.wantedPenaltyThreshold) {
        members.map(x => nextTask[x] = "Vigilante Justice");
    } else {
        if (await Do(Game.ns, "ns.fileExists", 'Formulas.exe')) {
            let remaining = members.filter(x => memberData[x].def_exp >= minimumDefense && memberData[x].str_exp >= minimumDefense && memberData[x].dex_exp >= minimumDefense && memberData[x].agi_exp >= minimumDefense && memberData[x].hack_exp >= minimumDefense && memberData[x].cha_exp >= minimumDefense);
            members.filter(x => !remaining.includes(x)).filter(x => memberData[x].cha_exp < minimumDefense).map(x => nextTask[x] = "Train Charisma");
            members.filter(x => !remaining.includes(x)).filter(x => memberData[x].hack_exp < minimumDefense).map(x => nextTask[x] = "Train Hacking");
            members.filter(x => !remaining.includes(x)).filter(x => memberData[x].dex_exp < minimumDefense).map(x => nextTask[x] = "Train Combat");
            members.filter(x => !remaining.includes(x)).filter(x => memberData[x].str_exp < minimumDefense).map(x => nextTask[x] = "Train Combat");
            members.filter(x => !remaining.includes(x)).filter(x => memberData[x].agi_exp < minimumDefense).map(x => nextTask[x] = "Train Combat");
            members.filter(x => !remaining.includes(x)).filter(x => memberData[x].def_exp < minimumDefense).map(x => nextTask[x] = "Train Combat");
            for (let i = 0; i < members.length; i++) {
                let total = memberData[members[i]].str + memberData[members[i]].def + memberData[members[i]].dex + memberData[members[i]].cha + memberData[members[i]]['hack'];
                if (total > 700) {
                    remaining.push(members[i]);
                }
            }
            let moneylist = [];

            for (let i = 0; i < await (Game['Gang']['getTaskNames']()); i++) {
                for (let j = 0; j < remaining.length; j++) {
                    moneylist.push([(await (Game['Gang']['getTaskNames']()))[i], remaining[j], Game.ns.formulas.gang.moneyGain(gangInfo, memberData[remaining[j]], (await (Game['Gang']['getTaskNames']()))[i])])
                }
            }
            moneylist = moneylist.sort((a, b) => { return a[2] - b[2] }).filter(x => x[2] > 0);
              let replist = [];
              for (let i = 0; i < await (Game['Gang']['getTaskNames']()); i++) {
                for (let j = 0; j < remaining.length; j++) {
                    replist.push([(await (Game['Gang']['getTaskNames']()))[i], remaining[j], Game.ns.formulas.gang.respectGain(gangInfo, memberData[remaining[j]], (await (Game['Gang']['getTaskNames']()))[i])]);
                }
            }
            replist = replist.sort((a, b) => { return a[2] - b[2] }).filter(x => x[2] > 0);
            for (let i = 0; i < members.length; i++) {
                let total = memberData[members[i]].str + memberData[members[i]].def + memberData[members[i]].dex + memberData[members[i]].cha + memberData[members[i]]['hack'];
                if (total >= 630 && total <= 700) {
                    replist = replist.filter(x => x[0] != "Terrorism" || x[1] != members[i]);
                    moneylist = moneylist.filter(x => x[0] != "Terrorism" || x[1] != members[i]);
                }
            }
            while (moneylist.length > 0 || replist.length > 0) {
                if (gangInfo.territory >= .98 && [...new Set(moneylist.map(x => x[1]))].length == 1) {
                    nextTask[moneylist[0][1]] = "Train Combat";
                    moneylist = [];
                    replist = [];
                }
                if (moneylist.length > 0 && members.length == 12) {
                    nextTask[moneylist[moneylist.length - 1][1]] = moneylist[moneylist.length - 1][0];
                    remaining = remaining.filter(x => x != moneylist[moneylist.length - 1][1]);
                    replist = replist.filter(x => x[1] != moneylist[moneylist.length - 1][1]);
                    moneylist = moneylist.filter(x => x[1] != moneylist[moneylist.length - 1][1]);
                }
                if (gangInfo.territory >= .98 && [...new Set(moneylist.map(x => x[1]))].length == 1) {
                    nextTask[moneylist[0][1]] = "Train Combat";
                    moneylist = [];
                    replist = [];
                }
                if (replist.length > 0) {
                    nextTask[replist[replist.length - 1][1]] = replist[replist.length - 1][0];
                    remaining = remaining.filter(x => x != replist[replist.length - 1][1]);
                    moneylist = moneylist.filter(x => x[1] != replist[replist.length - 1][1]);
                    replist = replist.filter(x => x[1] != replist[replist.length - 1][1]);
                }
                if (gangInfo.territory >= .98 && [...new Set(moneylist.map(x => x[1]))].length == 1) {
                    nextTask[moneylist[0][1]] = "Train Combat";
                    moneylist = [];
                    replist = [];
                }
                if (moneylist.length > 0 && members.length == 12) {
                    nextTask[moneylist[moneylist.length - 1][1]] = moneylist[moneylist.length - 1][0];
                    remaining = remaining.filter(x => x != moneylist[moneylist.length - 1][1]);
                    replist = replist.filter(x => x[1] != moneylist[moneylist.length - 1][1]);
                    moneylist = moneylist.filter(x => x[1] != moneylist[moneylist.length - 1][1]);
                }
                if (gangInfo.territory >= .98 && [...new Set(moneylist.map(x => x[1]))].length == 1) {
                    nextTask[moneylist[0][1]] = "Train Combat";
                    moneylist = [];
                    replist = [];
                }
            }
            if (remaining.length > 0) {
                remaining.map(x => nextTask[x] = "Train Combat");
            }
        }
    }
    return nextTask;
}

async function bn2ascendMembers(Game, memberData, settings) {
    let members = Object.keys(memberData);
    let avgrespect = members.map(x => memberData[x].earnedRespect).reduce((a, b) => a + b, 0) / members.length;
    if (avgrespect >= settings.minimumRespect) {
        let ascendable = [...members];
        ascendable = ascendable.filter(x => (["hack_exp", "str_exp", "def_exp", "dex_exp", "agi_exp", "cha_exp"].map(y => memberData[x][y] > 1000).reduce((a, b) => a || b)));
        let ascResult = {};
        ascendable.map(x => ascResult[x] = Game['Gang']['getAscensionResult'](x));
        await Promise.all(Object.values(ascResult));
        let check = {};
        ascendable.forEach(x => check[x] = 1.66-.62/Math.exp(((2/memberData[x].agi_asc_mult)**2.24)));
        ascendable = ascendable.filter(x => check[x] < ascResult[x]['agi']);
        ascendable = ascendable.filter(x => memberData[x].respectGain < avgrespect);
        ascendable.sort((a, b) => check[b] - check[a]);
        if (ascendable.length > 0) {
            for (let k = 0; k < ascendable.length; k++) {
                if (await (Game['Gang']['ascendMember'](ascendable[k]))) {
                    Game['Gang'].log(ascendable[k] + " ascended!");
                    k = 1000;
                }
            }
        }
    }
}

async function bn2getGear(Game, memberData, settings) {
    let members = Object.keys(memberData);
    // Buy equipment, but only if SQLInject.exe exists or the gang has under 12 people
    members.sort((a, b) => { return memberData[a].str_mult - memberData[b].str_mult; });
    let funds = (await (Game['Player']['money'])) / (members.length < 12 ? 1 : 1) / Math.max(1, Math.min(12, ((await Do(Game.ns, "ns.getTimeSinceLastAug")) / 3600000)) ** 2);
    //Game.ns.toast(funds);
    if ((await Do(Game.ns, "ns.fileExists", "SQLInject.exe")) || members.length < 12) {
        let equip = await (Game['Gang']['getEquipmentNames']())
        let equipCost = {};
        equip.map(x => equipCost[x] = Game['Gang']['getEquipmentCost'](x));
        for (let j = 0; j < equip.length; j++) {
            for (let i of members) {
                let total = memberData[i] + memberData[i] + memberData[i] + memberData[i].cha + memberData[i]['hack'];
                // Buy the good stuff only once the terrorism stats are over 700.
                if (total >= 700) {
                    if ((await (equipCost[equip[j]])) < funds) {
                        if (await (Game['Gang']['purchaseEquipment'](i, equip[j]))) {
                            Game.log(i + " now owns " + equip[j]);
                            funds -= equipCost[equip[j]];
                            i = -1;
                            memberData[i] = await (Game['Gang']['getMemberInformation'](i));
                            members.sort((a, b) => { return memberData[a].str_mult - memberData[b].str_mult; });
                        }
                    }
                } else {
                    if (await (Game['Gang']['purchaseEquipment'](i, "Glock 18C"))) {
                        Game['Gang'].log(i + " now owns Glock 18C");
                    }
                }
            }
        }
    }
}

export async function bn2(Game, settings={}) {
    settings['faction'] = settings['faction'] ?? "Slum Snakes";
    settings['membernames'] = settings['membernames'] ?? [];
    while (settings.membernames.length < 12) {
        settings['membernames'].push([
            'Rat',
            'Ox',
            'Tiger',
            'Rabbit',
            'Dragon',
            'Snake',
            'Horse',
            'Goat',
            'Monkey',
            'Rooster',
            'Dog',
            'Pig'].filter(x => !settings.membernames.includes(x))[0]);
    }
    settings['wantedThreshold'] = settings['wantedThreshold'] ?? 10;
    settings['clashTarget'] = settings['clashTarget'] ?? .5;
    settings['minimumRespect'] = settings['minimumRespect'] ?? 0;
    settings['traffickChance'] = settings['traffickChance'] ?? .8;
    settings['wantedPenaltyThreshold'] = settings['wantedPenaltyThreshold'] ?? .9;
    let equip = await (Game['Gang']['getEquipmentNames']());
    let equipCost = {}
    equip.map(x => equipCost[x] = Game['Gang']['getEquipmentCost'](x));
    await Promise.all(Object.values(equipCost));
    equip.sort((a, b) => { return equipCost[a] - equipCost[b] });

    let clashTime = Date.now(); // Placeholder, set for real during first loop

    await (Game['Gang']['recruitMembers'](settings.membernames));
    while (true) {
        let members = Game['Gang']['getMemberNames']();
        equip.map(x => equipCost[x] = Game['Gang']['getEquipmentCost'](x));
        let memberData = {};
        (await members).map(x => memberData[x] = Game['Gang']['getMemberInformation'](x));
        await Promise.all(Object.values(equipCost));
        await Promise.all(Object.values(memberData));
        let nextTask = bn2setTasks(Game, memberData, settings);
        bn2ascendMembers(Game, memberData, settings);
        bn2getGear(Game, memberData, equipCost, settings);
        Game['Gang']['recruitMembers'](settings.membernames);

        // Wait until clash time
        while (Date.now() <= clashTime) {
            await Game.ns.asleep(Math.floor((clashTime-Date.now())/2));
        }

        // Clash time
        (await members).map(x => Game['Gang']['setMemberTask'](x, "Territory Warfare"));

        let othergangs = await (Game['Gang']['getOtherGangInformation']());
        let oldterritory = 100 * (await (Game['Gang']['getGangInformation']())).territory;
        let startpower = (await (Game['Gang']['getGangInformation'])()).power;
        if (Object.keys(othergangs).filter(x => othergangs[x].territory > 0).length > 0) {
            let chances = {}
            Object.keys(othergangs).map(x => chances[x] = Game['Gang']['getChanceToWinClash'](x))
            await Promise.all(Object.values(chances));
            let total = Object.keys(othergangs).map(x => chances[x] * othergangs[x].territory).reduce((a, b) => a + b);
            if ((total / (1 - (await (Game['Gang']['getGangInformation']())).territory) >= settings['clashTarget']) || (Object.keys(chances).every(x => chances[x] >= settings['clashTarget'])));
                Game['Gang']['setTerritoryWarfare'](true);

        }
    
        // Wait until the clash tick processes.
        while ((await (Game['Gang']['getGangInformation'])).power == startpower) {
            await Game.ns.asleep(0);
        }

        // Set the goal time for the next clash at 19 seconds from now.
        clashTime = Date.now() + 19000;

        Game['Gang']['setTerritoryWarfare'](false);
        await nextTask;
        (await members).map(x => Game['Gang']['setMemberTask'](x, nextTask[x] ?? "Train Combat"));
        if (oldterritory != 100 * (await (Game['Gang']['getGangInformation']())).territory) {
            Game['Gang'].log("Territory now " + 100 * (await (Game['Gang']['getGangInformation']())).territory.toString());
        }
    }
}

export async function bn7(Game) {
    Game.Bladeburner.raid = false;
    Game.Bladeburner.sting = false;
    let numberOfSleeves = await (Game.Sleeves.numSleeves);
    await Game.Sleeves.bbCombatAugs();
    await Game.Player.trainCombatStatsUpTo(100, true); // The true indicates to drag sleeves along
    await Game.Sleeves.startAGangFirst();
    if (!await Game.Bladeburner.start())
        return false;
    Game.Bladeburner.log("Start.")
    while (true) {
        let zc = 1;
    while (await Game.Bladeburner.UpgradeSkills(zc))
        zc += 1;
            await Game.Sleeves.bbEverybody("Field analysis");
    await Game.Bladeburner.hardStop();
    while (((await (Game.Bladeburner.contractCount))+((await (Game.Bladeburner.operationCount)))) > 0) {
        Game.Hacknet.goal = (1000 > (await (Game.Bladeburner.skillPoints)) ? "Exchange for Bladeburner SP" : "Generate Coding Contract");
        if (await (Game.Player.hospitalizeIfNeeded()))
            Game.Bladeburner.log("Hospitalized.."); // HP
        if (await (Game.Player.joinFactionIfInvited("Bladeburners")))
            Game.Bladeburner.log("Joined Bladeburner Faction..");
        if (((await (Game.Bladeburner.rank)) >= 25) && !((await (Game.Player.factions))).includes("Bladeburners"))
            await Game.Bladeburner.joinTheFaction();
        await Game.Bladeburner.recoverIfNecessary(); // Stamina
        while (await Game.Bladeburner.UpgradeSkills());
        let best = [];
        for (let city of CITIES) {
            await (Game.Bladeburner.bbCity(city));
            await (Game.Bladeburner.deescalate(30)); // Reduces Chaos to 30 if higher
            for (let action of (await (Game.Bladeburner.opNames)).concat(await (Game.Bladeburner.contractNames))) {
                if ((await (Game.Bladeburner.bbActionCount(action))) > 0) {
                    let maxlevel = await (Game.Bladeburner.maxLevel(action));
                    for (let level = maxlevel; level >= 1 ; level -= Math.ceil(maxlevel/10)) {
                        let chance = await (Game.Bladeburner.getChance(action));
                        if (chance[0] + .01 < chance[1]) {
                            await (Game.Bladeburner.hardStop());
                            await (Game.Bladeburner.fieldAnal());
                            await (Game.Sleeves.bbEverybody("Field Analysis"));
                            while (chance[0] + .01 < chance[1]) {
                                await Game.ns.asleep(1000);
                                chance = await (Game.Bladeburner.getChance(action));
                            }
                        }
                        await (Game.Bladeburner.setLevel(action, level));
                        if (bbTypes[action] == "Contract" || (await (Game.Bladeburner.getChance(action)))[0] > .95)
                            best.push([level, bbTypes[action], action, city, (await (Game.Bladeburner.bbActionCount(action)))*((await (Game.Bladeburner.getChance(action))).reduce((a, b) => (a + b) / 2) * (await (Game.Bladeburner.repGain(action, level))) / (await (Game.Bladeburner.bbActionTime(action))))]);
                    }
                    await (Game.Bladeburner.setLevel(action, maxlevel))
                }
            }
        }
        best = best.sort((a, b) => a[4] - b[4]);
        best = best.sort((a, b) => { if (a[2] == "Assassination" && b[2] != "Assassination") return 1; if (a[2] != "Assassination" && b[2] == "Assassination") return -1; if (a[1] == "Operation" && b[1] != "Operation") return 1; if (a[1] != "Operation" && b[1] == "Operation") return -1; return 0; });
        await Game.Sleeves.bbEverybody("Support main sleeve");
        let nextBlackOp = await (Game.Bladeburner.nextBlackOp);
        await Game.Bladeburner.teamSize(nextBlackOp, 1000);
		if (nextBlackOp != "0" && nextBlackOp != 0) {
			if ((await (Game.Bladeburner.rank)) >= (await Game.Bladeburner.blackOpRank(nextBlackOp))) {
				if ((await Game.Bladeburner.successChance("Operation Ultron"))[0] > .99) {
					if ((await Game.Bladeburner.successChance(nextBlackOp))[0] > (["Operation Centurion", "Operation Vindictus", "Operation Daedalus"].includes(nextBlackOp) ? .2 : .99)) {
						best.push([0, "Black Op", nextBlackOp, "Sector-12"]);
					}
				}
			}
		} else {
            Game.ns.write("/temp/bootstrap.js", `export function killModal() {let doc = eval('document');let modal = doc.evaluate("//div[contains(@class,'MuiBackdrop-root')]", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;modal[Object.keys(modal)[1]].onClick({ isTrusted: true });}export async function main(ns){killModal(); ns.run('jeek.js', 1, '--roulettestart', '--bn7', '--bn8', '--logbox');}`, 'w');
            await Do(Game.ns, "ns.singularity.destroyW0r1dD43m0n", 12, "/temp/bootstrap.js");
        }
        if (best[best.length - 1][1] != "Black Op") {
            await Game.Bladeburner.setAutoLevel(best[best.length - 1][2], 1e6 < (await (Game.Bladeburner.rank)));
            if (best[best.length - 1][3] != await (Game.Bladeburner.city)) {
                await Game.Bladeburner.bbCity(best[best.length - 1][3]);
            }
        }
        await Game.Bladeburner.deescalate();
        if (best[best.length - 1][1] != "Black Op") {
            await Game.Bladeburner.setLevel(best[best.length - 1][2], best[best.length - 1][0]);
        }
        await (Game.Bladeburner.hardStop());
        if (best[best.length - 1][1] == "Black Op") {
            await Game.Sleeves.bbEverybody("Support main sleeve");
        }
        await Game.Bladeburner.log(best[best.length - 1].slice(0, 4).join(" "));
        await Game.Bladeburner.actionStart(best[best.length - 1][2]);
        if (best[best.length - 1][1] != "Black Op") {
            await (Game.Sleeves.bbEverybody("Field Analysis"));
            let shox = await Game.Sleeves.bbCombatSort();
            let cur = 0;
            if ((await Game.Bladeburner.actionCount("Retirement")) >= 30) {
                await Game.Sleeves.bbDo(shox[cur], "Take on contracts", best.filter(x => x[2] == "Retirement").reverse()[0][2]);
                cur += 1;
            }
            if ((await  Game.Bladeburner.actionCount("Bounty Hunter")) >= 30) {
                await Game.Sleeves.bbDo(shox[cur], "Take on contracts", best.filter(x => x[2] == "Bounty Hunter").reverse()[0][2]);
                cur += 1;
            }
            if ((await  Game.Bladeburner.actionCount("Tracking")) >= 100) {
                await Game.Sleeves.bbDo(shox[cur], "Take on contracts", best.filter(x => x[2] == "Tracking").reverse()[0][2]);
                cur += 1;
            }
            if (shox.length > cur) {
                let cityChaos = await (Game.Bladeburner.chaosHere);
                await Game.Sleeves.bbDo(shox[cur], "Infiltrate synthoids");
                let ii = 0;
                for (let i = cur + 1; i < shox.length; i++) {
                    await Game.Sleeves.bbDo(shox[i], cityChaos < 20 ? "Field analysis" : "Diplomacy");
                    ii += 1;
                }
            }
        }
        while ((await (Game.Bladeburner.currentAction)).type != "Idle" && (Game.Bladeburner.minStamina < (await (Game.Bladeburner.stamina)).reduce((a, b) => a / b)) && ((await Game.Bladeburner.actionCount(best[best.length - 1][2])) > 0)) {
            if (best[best.length - 1][0] == "Black Op" && .2 > ((await Game.Bladeburner.successChance(nextBlackOp))[0]))
                break;
            await Game.Sleeves.bbCombatAugs();
            await Game.Player.hospitalizeIfNeeded();
            while (await Game.Bladeburner.UpgradeSkills());
            if (await (Game.Bladeburner.hasSimulacrum))
                await Game.Grafting.checkIn("Combat", true);
                if (await (Game.Bladeburner.hasSimulacrum))
                await Game.Grafting.checkIn("Charisma", true);
            Game.Hacknet.goal = (1000 > (await (Game.Bladeburner.skillPoints)) ? "Exchange for Bladeburner SP" : "Generate Coding Contract");
            if (.999 < await Game.Bladeburner.successChance(nextBlackOp))
                break;
            if (best[best.length - 1][0] < await Game.Bladeburner.actionMaxLevel(best[best.length - 1][2])) {
                if (1 == (await Game.Bladeburner.successChance(best[best.length - 1][2]))[0]) {
                    best[best.length - 1][0] += 1;
                    await Game.Bladeburner.setLevel(best[best.length - 1][2], best[best.length - 1][0]);
                }
            }
            if (best[best.length - 1][1] == "Operation") {
                if (.94 > (((await Game.Bladeburner.successChance(best[best.length - 1][2])))[0])) {
                    break;
                }
            }
            if (10 + (await (Game.Bladeburner.cityChaos)) <= await (Game.Bladeburner.chaosHere))
                break;
            await Game.ns.asleep(1000);
        }
        await (Game.Bladeburner.hardStop());
    }
    await Game.Bladeburner.inciteViolence();
}
}

export async function bn8(Game) {
    let shorts = false;
    let stall = {};
    let prices = [];
    let symbols = await (Game.StockMarket.symbols);
    let tickPrice = 0;
    let filesize = {
        "grow.js": await Do(Game.ns, "ns.getScriptRam", "/temp/grow.js"),
        "growstock.js": await Do(Game.ns, "ns.getScriptRam", "/temp/growstock.js"),
        "hack.js": await Do(Game.ns, "ns.getScriptRam", "/temp/back.js"),
        "hackstock.js": await Do(Game.ns, "ns.getScriptRam", "/temp/hackstock.js"),
        "weaken.js": await Do(Game.ns, "ns.getScriptRam", "/temp/weaken.js")
    }
    let maxram = {};
    let neededports = {};
    let reqhackinglevel = {};
    maxram["home"] = await (Game.Servers['home'].maxRam);
    for (let server of Object.keys(stockMapping)) {
        neededports[stockMapping[server]] = await Do(Game.ns, "ns.getServerNumPortsRequired", stockMapping[server]);
        reqhackinglevel[stockMapping[server]] = await Do(Game.ns, "ns.getServerRequiredHackingLevel", stockMapping[server]);
    }
    let scores = {};
    let report = {};
    let starttime = Date.now();
    while ((!await Do(Game.ns, "ns.stock.has4SDataTIXAPI", ""))) {
        if ((await (Game.StockMarket.portfolioValue)) + (await Do(Game.ns, "ns.getPlayer")).money > 25000000000 * ((await Do(Game.ns, "ns.getBitNodeMultipliers"))).FourSigmaMarketDataApiCost) {
            Game.ns.write('/temp/4s.js', "export async function main(ns) { for (let stock of ns.stock.getSymbols()) { ns.stock.getPosition(stock)[0] ? ns.stock.sellStock(stock, ns.stock.getPosition(stock)[0]) : 0; ns.stock.getPosition(stock)[2] ? ns.stock.sellShort(stock, ns.stock.getPosition(stock)[2]) : 0; } ns.stock.purchase4SMarketDataTixApi(); }",'w')
            await Game.ns.asleep(0);
            Game.ns.run('/temp/4s.js');
        };
        await Game.ns.asleep([2000-(Date.now()-starttime), 0].reduce((a, b) => a > b ? a : b));
        starttime = Date.now();
        while (tickPrice == await Do(Game.ns, "ns.stock.getPurchaseCost", 'ECP', 1, "Long")) {
            await Game.ns.asleep(1000);
        }
        tickPrice = await Do(Game.ns, "ns.stock.getPurchaseCost", 'ECP', 1, "Long");
        prices.push({});
        if (prices.length > 75) {
            prices.shift();
        }
        let guess = (new Array(76)).fill(0);
        for (let stock of symbols) {
            prices[prices.length - 1][stock] = [await Do(Game.ns, "ns.stock.getPurchaseCost", stock, 1, "Long"), await Do(Game.ns, "ns.stock.getPurchaseCost", stock, 1, "Short")];
            let dir = "";
            let up = 0;
            let count = 0;
            for (let i = 0; i + 1 < prices.length; i++) {
                if (Math.sign(prices[prices.length - 1 - i][stock][0] - prices[prices.length - 2 - i][stock][0]) > 0) {
                    if (i < 20)
                        up += 1;
                    if (i + 20 >= prices.length) {
                        up -= .5;
                    }
                    dir = "+".concat(dir);
                } else {
                    dir = "-".concat(dir);
                }
                if (i < 20)
                    count += 1;
                if (i + 20 >= prices.length)
                    count += 1;
            }
            while (prices.length > 2 && prices[prices.length - 1][stock][0] == 0) {
                prices.pop();
            }
            for (let i = 0; i < prices.length; i++) {
                let j = Math.min(i, 10);
                for (let k = 0; k < j && i + k < prices.length; k++) {
                    if ((prices[i - k][stock][0] < prices[i][stock][0] && prices[i][stock][0] > prices[i + k][stock][0])) {
                        guess[i] += 1;
                    }
                    if ((prices[i - k][stock][0] > prices[i][stock][0] && prices[i][stock][0] < prices[i + k][stock][0])) {
                        guess[i] += 1;
                    }
                }
            }
            scores[stock] = up / count;
            report[stock] = dir.concat(" ").concat(Math.floor(up * 100 / count).toString());
            if (Math.floor(up * 100 / count) > 60)
                Game.ns.run("/temp/hack.js", 1)
        }
        let ordered = Object.keys(scores).sort((a, b) => scores[b] - scores[a]);
        let z = 0;
        let totalfunds = 0;
        let startmoney = await Do(Game.ns, "ns.getServerMoneyAvailable", 'home');
        let sorted = Object.keys(scores).sort((a, b) => scores[b] - scores[a]);
        try {
            sorted = sorted.sort((a, b) => { return prices[prices.length - 1][b][0] / prices[prices.length - 11][b][0] - prices[prices.length - 1][a][0] / prices[prices.length - 11][a][0] })
        } catch { }
        for (let program of [
            ["BruteSSH.exe", "ns.brutessh"],
            ["FTPCrack.exe", "ns.ftpcrack"],
            ["relaySMTP.exe", "ns.relaysmtp"],
            ["HTTPWorm.exe", "ns.httpworm"],
            ["SQLInject.exe", "ns.sqlinject"]]) {
            if (await Do(Game.ns, "ns.singularity.purchaseTor", "")) {
                let cost = await Do(Game.ns, "ns.singularity.getDarkwebProgramCost", program[0]);
                if ((0 < cost) && (cost * 2 < ((await Do(Game.ns, "ns.getPlayer", "")).money))) {
                    await Do(Game.ns, "ns.singularity.purchaseProgram", program[0]);
                }
            }
        }
        for (let stock of sorted) {
            if (Object.keys(stockMapping).includes(stock) && !await Do(Game.ns, "ns.hasRootAccess", stockMapping[stock])) {
                let files = await Do(Game.ns, "ns.ls", "home");
                let z = 0;
                if (files.includes("BruteSSH.exe")) {
                    await Do(Game.ns, "ns.brutessh", stockMapping[stock]);
                    z += 1;
                }
                if (files.includes("SQLInject.exe")) {
                    await Do(Game.ns, "ns.sqlinject", stockMapping[stock]);
                    z += 1;
                }
                if (files.includes("HTTPWorm.exe")) {
                    await Do(Game.ns, "ns.httpworm", stockMapping[stock]);
                    z += 1;
                }
                if (files.includes("FTPCrack.exe")) {
                    await Do(Game.ns, "ns.ftpcrack", stockMapping[stock]);
                    z += 1;
                }
                if (files.includes("relaySMTP.exe")) {
                    await Do(Game.ns, "ns.relaysmtp", stockMapping[stock]);
                    z += 1;
                }
                if (z >= neededports[stockMapping[stock]]) {
                    await Do(Game.ns, "ns.nuke", stockMapping[stock]);
                }
            }
            if (!(stall[stock] > 0)) {
                stall[stock] = 0;
            }
            if (Object.keys(stockMapping).includes(stock) && await Do(Game.ns, "ns.hasRootAccess", stockMapping[stock]) && ((await (Game.Player.hacking)) >= reqhackinglevel[stockMapping[stock]])) {
                if (z == 0) {
                    Game.ns.run("/temp/growstock.js", Math.max(1, Math.floor(.5 * (maxram["home"] - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - 10) / filesize["growstock.js"])), stockMapping[stock]);
                } else {
                    if (z == sorted.length - 1) {
                        Game.ns.run("/temp/hackstock.js", Math.max(1, Math.floor(.5 * (maxram["home"] - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - 10) / filesize["hackstock.js"])), stockMapping[stock]);
                    } else {
                        Game.ns.run("/temp/weaken.js", Math.max(1, Math.floor(.5 * (maxram["home"] - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - 10) / filesize["weaken.js"])), stockMapping[stock]);
                    }
                }
            }
            stall[stock] -= z / 10;
            let data = await Game.StockMarket.position(stock);
            if ((scores[stock] > .5 || z < 20) && data[2] > 0) {
                await Do(Game.ns, "ns.stock.sellShort", stock, data[2]);
                if (data[2] > 0) Game.StockMarket.log("Unshorted " + data[2].toString() + " of " + stock);
                data[2] = 0;
            }
            if (prices.length > 20 && !Game.StockMarket.liquidate) {
                if (z < 5) {
                    let shares = Math.floor((-100000 + await Do(Game.ns, "ns.getServerMoneyAvailable", 'home')) / (await Do(Game.ns, "ns.stock.getAskPrice", stock)) / [2, 1, 1, 1, 1][z] / (shorts ? 2 : 1));
                    if (shares * (prices[prices.length - 1][stock][0] - prices[prices.length - 11][stock][0]) / 10 * 75 > 200000) {
                        while ((shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) && (!await Do(Game.ns, "ns.stock.buyStock", stock, shares))) {
                            shares = Math.floor(shares * .9);
                        }
                        if (shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) {
                            if (shares > 0) Game.StockMarket.log("Bought " + shares.toString() + " of " + stock);
                            if (shares > 10) {
                                stall[stock] = 21;
                            }
                        }
                    }
                } else {
                    if (data[0] > 0 && stall[stock] <= 0) {
                        Do(Game.ns, "ns.stock.sellStock", stock, data[0]);
                        if (data[0] > 0) Game.StockMarket.log("Sold " + data[0].toString() + " of " + stock);
                    }
                }
            }
            z += 1;
            data = await Do(Game.ns, "ns.stock.getPosition", stock);
            totalfunds += data[0] * await Do(Game.ns, "ns.stock.getBidPrice", stock);
            if (prices.length > 20 && !Game.StockMarket.liquidate) {
                if (shorts && (z + 1 == Object.keys(scores).length)) {
                    let shares = Math.floor((-100000 + await Do(Game.ns, "ns.getServerMoneyAvailable", 'home')) / (await Do(Game.ns, "ns.stock.getAskPrice", stock)));
                    while ((shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) && (!await Do(Game.ns, "ns.stock.buyShort", stock, shares))) {
                        shares *= .99;
                    }
                    if (shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) {
                        if (shares > 0) Game.StockMarket.log("Shorted " + shares.toString() + " of " + stock);
                    }
                }
            }
            totalfunds += data[2] * (2 * data[3] - (await Do(Game.ns, "ns.stock.getAskPrice", stock)));

        }
        if (!await Do(Game.ns, "ns.stock.has4SData")) {
            try {
                await Do(Game.ns, "ns.stock.purchase4SMarketData", "");
            } catch { }
        }
        if (!await Do(Game.ns, "ns.stock.has4SDataTIXAPI")) {
            try {
                await Do(Game.ns, "ns.stock.purchase4SMarketDataTixApi", "");
            } catch { }
        }
        await Game.ns.asleep(0);
    }
    Game.bn8hackloop();
    let z = 0;
    while (true) {
        for (let program of [
            ["BruteSSH.exe", "ns.brutessh"],
            ["FTPCrack.exe", "ns.ftpcrack"],
            ["relaySMTP.exe", "ns.relaysmtp"],
            ["HTTPWorm.exe", "ns.httpworm"],
            ["SQLInject.exe", "ns.sqlinject"]]) {
            if (await Do(Game.ns, "ns.singularity.purchaseTor", "")) {
                let cost = await Do(Game.ns, "ns.singularity.getDarkwebProgramCost", program[0]);
                if ((0 < cost) && (cost * 2 < await (Game.Player.money))) {
                    await Do(Game.ns, "ns.singularity.purchaseProgram", program[0]);
                }
            }
        }
        let files = await Do(Game.ns, "ns.ls", "home");
        let zz = 0;
        if (files.includes("BruteSSH.exe")) {
            zz += 1;
        }
        if (files.includes("SQLInject.exe")) {
            zz += 1;
        }
        if (files.includes("HTTPWorm.exe")) {
            zz += 1;
        }
        if (files.includes("FTPCrack.exe")) {
            zz += 1;
        }
        if (files.includes("relaySMTP.exe")) {
            zz += 1;
        }
        if (zz >= 5 && ((await (Game.Player.hacking)) > 3000) && (await Do(Game.ns, "ns.singularity.getOwnedAugmentations")).includes("The Red Pill")) {
            await Game.winGame();
        }
        while (tickPrice == await Do(Game.ns, "ns.stock.getPurchaseCost", 'ECP', 1, "Long")) {
            await Game.ns.asleep(0);
        }
        tickPrice = await Do(Game.ns, "ns.stock.getPurchaseCost", 'ECP', 1, "Long");

        if (8 == await (Game.Player.bitNodeN))
            await (Game.Grafting.checkIn());

        while ((await Do(Game.ns, "ns.singularity.getUpgradeHomeRamCost")) * 2 < await Do(Game.ns, "ns.getServerMoneyAvailable", "home") && await Do(Game.ns, "ns.singularity.upgradeHomeRam", ""));
        let chances = {};
        let portvalue = 0;
        for (let stock of symbols) {
            chances[stock] = (-.5 + await Do(Game.ns, "ns.stock.getForecast", stock)) * (await Do(Game.ns, "ns.stock.getVolatility", stock)) * (await Do(Game.ns, "ns.stock.getPrice", stock));
        }
        symbols = symbols.sort((a, b) => { return chances[b] - chances[a] });
        z = 1 - z;
        for (let stock of symbols) {
            if (z == 1 && !Game.StockMarket.liquidate) {
                let data = await Do(Game.ns, "ns.stock.getPosition", stock);
                if (chances[stock] > 0) {
                    let shares = Math.floor((-100000 + await Do(Game.ns, "ns.getServerMoneyAvailable", 'home')) / (await Do(Game.ns, "ns.stock.getAskPrice", stock)));
                    shares = Math.min(((await Do(Game.ns, "ns.stock.getMaxShares", stock))) - data[0] - data[2], shares);
                    //						if (shares > 100 && (200000 < await Do(Game.ns, "ns.getServerMoneyAvailable", "home"))) {
                    //							ns.toast("Trying to buy " + shares.toString() + " of " + stock);
                    //						}
                    while ((shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) && (!await Do(Game.ns, "ns.stock.buyStock", stock, shares))) {
                        shares = Math.floor(shares * .99);
                    }
                    if (shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) {
                        if (shares > 0) Game.StockMarket.log("Bought " + shares.toString() + " of " + stock);
                    }
                } else {
                    if (data[0] > 0) {
                        Do(Game.ns, "ns.stock.sellStock", stock, data[0]);
                        if (data[0] > 0) Game.StockMarket.log("Sold " + data[0].toString() + " of " + stock);
                    }
                }
            }
            portvalue += (await Do(Game.ns, "ns.stock.getPosition", stock))[0] * (await Do(Game.ns, "ns.stock.getPrice", stock));

        }
        symbols = symbols.reverse();
        for (let stock of symbols) {
            if (0 == z && !Game.StockMarket.liquidate) {
                let data = await Do(Game.ns, "ns.stock.getPosition", stock);
                if (chances[stock] < 0) {
                    let shares = Math.floor((-100000 + await Do(Game.ns, "ns.getServerMoneyAvailable", 'home')) / (await Do(Game.ns, "ns.stock.getAskPrice", stock)));
                    shares = Math.min(((await Do(Game.ns, "ns.stock.getMaxShares", stock))) - data[0] - data[2], shares);
                    //						if (shares > 100 && (200000 < await Do(Game.ns, "ns.getServerMoneyAvailable", "home"))) {
                    //							ns.toast("Trying to short " + shares.toString() + " of " + stock);
                    //						}
                    while ((shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) && (!await Do(Game.ns, "ns.stock.buyShort", stock, shares))) {
                        shares *= .99;
                    }
                    if (shares * (await Do(Game.ns, "ns.stock.getBidPrice", stock)) > 200000) {
                        if (shares > 0) Game.StockMarket.log("Shorted " + shares.toString() + " of " + stock);
                    }
                } else {
                    if (data[2] > 0) {
                        //							ns.toast("Unshorting " + stock);
                        Do(Game.ns, "ns.stock.sellShort", stock, data[2]);
                        if (data[2] > 0) Game.StockMarket.log("Unshorted " + data[2].toString() + " of " + stock);
                    }
                }
            }
            let data = await Do(Game.ns, "ns.stock.getPosition", stock);
            portvalue += (data[2] * (2 * data[3] - await Do(Game.ns, "ns.stock.getAskPrice", stock)));
        }
        //			ns.tprint(z ? "Long " : "Short", " ", ns.nFormat((await Do(ns, "ns.getServerMoneyAvailable", "home")) + portvalue, "$0.000a"));
        //			ns.toast(ns.nFormat((await Do(ns, "ns.getServerMoneyAvailable", "home")) + portvalue, "$0.000a"));
        let ownedAugs = await Do(Game.ns, "ns.singularity.getOwnedAugmentations");
        let playerhack = (await Do(Game.ns, "ns.getPlayer")).skills.hacking;
        if (8 == await (Game.Player.bitNodeN)) {
            if (playerhack > 3000 && ownedAugs.length >= 30 && !ownedAugs.includes("The Red Pill")) {
                while (((await (Game.Player.money)) > 100e9) && (!((await Do(Game.ns, "ns.singularity.checkFactionInvitations")).includes("Daedalus"))) && (!((await Do(Game.ns, "ns.getPlayer")).factions.includes("Daedalus")))) {
                    await Game.ns.asleep(1000);
                }
                if ((await Do(Game.ns, "ns.singularity.checkFactionInvitations")).includes("Daedalus")) {
                    await Do(Game.ns, "ns.singularity.joinFaction", "Daedalus");
                }
                if ((await Do(Game.ns, "ns.getPlayer")).factions.includes("Daedalus")) {
                    if ((await Do(Game.ns, "ns.singularity.getFactionRep", "Daedalus")) < ((await Do(Game.ns, "ns.singularity.getAugmentationRepReq", "The Red Pill")))) {
                        if ((await Do(Game.ns, "ns.getPlayer")).money > 1e9) {
                            await Do(Game.ns, "ns.singularity.donateToFaction", "Daedalus", Math.floor(.1 * ((await Do(Game.ns, "ns.getPlayer")).money)));
                        }
                    }
                    if ((await Do(Game.ns, "ns.singularity.getFactionRep", "Daedalus")) >= ((await Do(Game.ns, "ns.singularity.getAugmentationRepReq", "The Red Pill")))) {
                        await Do(Game.ns, "ns.singularity.purchaseAugmentation", "Daedalus", "The Red Pill");
                    }
                }
            }
            if (playerhack > 3000 && ownedAugs.length >= 30 && !ownedAugs.includes("The Red Pill") && ((await Do(Game.ns, "ns.singularity.getOwnedAugmentations", true))).includes("The Red Pill")) {
                await Game.SoftReset();
            }
        }
    }
}
export async function bn8hackloop(Game) {
    let filesize = {
        "grow.js": await Do(Game.ns, "ns.getScriptRam", "/temp/grow.js"),
        "growstock.js": await Do(Game.ns, "ns.getScriptRam", "/temp/growstock.js"),
        "hack.js": await Do(Game.ns, "ns.getScriptRam", "/temp/back.js"),
        "hackstock.js": await Do(Game.ns, "ns.getScriptRam", "/temp/hackstock.js"),
        "weaken.js": await Do(Game.ns, "ns.getScriptRam", "/temp/weaken.js")
    }
    let minsec = await DoAll(Game.ns, "ns.getServerMinSecurityLevel", Object.keys(stockMapping).map(x => stockMapping[x]));
    let volatility = await DoAll(Game.ns, "ns.stock.getVolatility", Object.keys(stockMapping));
    let player = await Do(Game.ns, "ns.getPlayer");
    let serverdata = await DoAll(Game.ns, "ns.getServer", Object.values(stockMapping));
    let weakentime = {};
    for (let server of Object.values(stockMapping)) {
        weakentime[server] = await Do(Game.ns, "ns.formulas.hacking.weakenTime", await Do(Game.ns, "ns.getServer", server), player);
    }
    for (let i of Object.keys(stockMapping).sort((a, b) => { return weakentime[stockMapping[a]] - weakentime[stockMapping[b]] })) {
        //    for (let i of Object.keys(mapping).sort((a, b) => { return minsec[a] - minsec[b] })) {
        let files = await Do(Game.ns, "ns.ls", "home");
        let z = 0;
        if (files.includes("BruteSSH.exe")) {
            await Do(Game.ns, "ns.brutessh", stockMapping[i]);
            z += 1;
        }
        if (files.includes("SQLInject.exe")) {
            await Do(Game.ns, "ns.sqlinject", stockMapping[i]);
            z += 1;
        }
        if (files.includes("HTTPWorm.exe")) {
            await Do(Game.ns, "ns.httpworm", stockMapping[i]);
            z += 1;
        }
        if (files.includes("FTPCrack.exe")) {
            await Do(Game.ns, "ns.ftpcrack", stockMapping[i]);
            z += 1;
        }
        if (files.includes("relaySMTP.exe")) {
            await Do(Game.ns, "ns.relaysmtp", stockMapping[i]);
            z += 1;
        }
        let buffer = 10;
        if (1e6 < await Do(Game.ns, "ns.getServerMaxRam", "home")) {
            buffer = 100;
        }
        if ((z >= await Do(Game.ns, "ns.getServerNumPortsRequired", stockMapping[i])) && ((await Do(Game.ns, "ns.getPlayer")).skills.hacking) >= ((await Do(Game.ns, "ns.getServerRequiredHackingLevel", stockMapping[i])))) {
            await Do(Game.ns, "ns.nuke", stockMapping[i]);
            await (Game.Servers[stockMapping[i]].prep());
            while ((await Do(Game.ns, "ns.stock.getForecast", i)) > .1 && (await Do(Game.ns, "ns.stock.getForecast", i)) < .9) {
                while (minsec[i] < await Do(Game.ns, "ns.getServerSecurityLevel", stockMapping[i])) {
                    //                   ns.tprint("Weaken " + i + " " + mapping[i], " ", ns.stock.getForecast(i));
                    let threads = Math.max(1, Math.floor(((await Do(Game.ns, "ns.getServerMaxRam", "home")) - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - buffer) / filesize["weaken.js"]));
                    let pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                    while (pid == 0 && threads > 1) {
                        await Game.ns.asleep(0);
                        threads -= 1;
                        pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                    }
                    while (await Do(Game.ns, "ns.isRunning", pid)) { await Game.ns.asleep(0); }
                }
                //Game.ns.tprint(((await Do(Game.ns, "ns.stock.getForecast", i)) > .5 ? "Grow " : "Hack ") + i + " " + stockMapping[i], " ", (await Do(Game.ns, "ns.stock.getForecast", i)));
                while ((await Do(Game.ns, "ns.getServerMoneyAvailable", stockMapping[i])) * 4 / 3 > (await Do(Game.ns, "ns.getServerMaxMoney", stockMapping[i]))) {
                    let threads = Math.floor(((await Do(Game.ns, "ns.getServerMaxRam", "home")) - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - buffer) / filesize["hackstock.js"]);
                    if (threads > 0) {
                        let pid = Game.ns.run((await Do(Game.ns, "ns.stock.getForecast", i)) > .5 ? "/temp/hack.js" : "/temp/hackstock.js", threads, stockMapping[i]);
                        while (pid == 0 && threads > 0) {
                            await Game.ns.asleep(0);
                            threads -= 1;
                            pid = Game.ns.run((await Do(Game.ns, "ns.stock.getForecast", i)) > .5 ? "/temp/hack.js" : "/temp/hackstock.js", threads, stockMapping[i]);
                        }
                        while (await Do(Game.ns, "ns.isRunning", pid)) { await Game.ns.asleep(0); }
                    }
                    while ((await Do(Game.ns, "ns.getServerMinSecurityLevel", stockMapping[i])) < (await Do(Game.ns, "ns.getServerSecurityLevel", stockMapping[i]))) {
                        //            ns.tprint("Weaken " + i + " " + mapping[i], " ", ns.stock.getForecast(i));
                        let threads = Math.floor(((await Do(Game.ns, "ns.getServerMaxRam", "home")) - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - buffer) / filesize["weaken.js"]);
                        let pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                        while (pid == 0 && threads > 1) {
                            await Game.ns.asleep(0);
                            threads -= 1;
                            pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                        }
                        while (await Do(Game.ns, "ns.isRunning", pid)) { await Game.ns.asleep(0); }
                    }
                }
                while ((await Do(Game.ns, "ns.getServerMoneyAvailable", stockMapping[i])) < (await Do(Game.ns, "ns.getServerMaxMoney", stockMapping[i]))) {
                    let threads = Math.floor(((await Do(Game.ns, "ns.getServerMaxRam", "home")) - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - buffer) / filesize["growstock.js"]);
                    let pid = threads > 0 ? Game.ns.run((await Do(Game.ns, "ns.stock.getForecast", i)) > .5 ? "/temp/growstock.js" : "/temp/grow.js", threads, stockMapping[i]) : 0;
                    while (pid == 0 && threads > 0) {
                        await Game.ns.asleep(0);
                        threads -= 1;
                        pid = Game.ns.run((await Do(Game.ns, "ns.stock.getForecast", i)) > .5 ? "/temp/growstock.js" : "/temp/grow.js", threads, stockMapping[i]);
                    }
                    while (await Do(Game.ns, "ns.isRunning", pid)) { await Game.ns.asleep(0); }
                    while ((await Do(Game.ns, "ns.getServerMinSecurityLevel", stockMapping[i])) < (await Do(Game.ns, "ns.getServerSecurityLevel", stockMapping[i]))) {
                        //                     ns.tprint("Weaken " + i + " " + mapping[i], " ", ns.stock.getForecast(i));
                        let threads = Math.floor(((await Do(Game.ns, "ns.getServerMaxRam", "home")) - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - buffer) / filesize["weaken.js"]);
                        let pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                        while (pid == 0 && threads > 1) {
                            await Game.ns.asleep(0);
                            threads -= 1;
                            pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                        }
                        while (await Do(Game.ns, "ns.isRunning", pid)) { await Game.ns.asleep(0); }
                    }
                }
                while ((await Do(Game.ns, "ns.getServerMinSecurityLevel", stockMapping[i])) < (await Do(Game.ns, "ns.getServerSecurityLevel", stockMapping[i]))) {
                    let threads = Math.floor(((await Do(Game.ns, "ns.getServerMaxRam", "home")) - (await Do(Game.ns, "ns.getServerUsedRam", "home")) - buffer) / filesize["weaken.js"]);
                    let pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                    while (pid == 0 && threads > 1) {
                        await Game.ns.asleep(0);
                        threads -= 1;
                        pid = Game.ns.run("/temp/weaken.js", threads, stockMapping[i]);
                    }
                    while (await Do(Game.ns, "ns.isRunning", pid)) { await Game.ns.asleep(0); }
                }
                await Game.ns.asleep(0);
            }
        }
    }
}import { WholeGame } from "WholeGame.js";

export class CacheServer {
	constructor(ns, name = "home", game) {
		this.ns = ns;
		this.name = name;
		this.game = game ? game : new WholeGame(ns);
		this.server = new Server(ns, this.name, game);
	}
	async init() {
		this.backdoorInstalled = await this.server.backdoorInstalled;
		this.baseDifficulty = await this.server.baseDifficulty;
		this.cpuCores = await this.server.cpuCores;
		this.ftpPortOpen = await this.server.ftpPortOpen;
		this.hackDifficulty = await this.server.hackDifficulty;
		this.hasAdminRights = await this.server.hasAdminRights;
		this.hostname = await this.server.hostname;
		this.httpPortOpen = await this.server.httpPortOpen;
		this.ip = await this.server.ip;
		this.isConnectedTo = await this.server.isConnectedTo;
		this.maxRam = await this.server.maxRam;
		this.minDifficulty = await this.server.minDifficulty;
		this.moneyAvailable = await this.server.moneyAvailable;
		this.moneyMax = await this.server.moneyMax;
		this.numOpenPortsRequired = await this.server.numOpenPortsRequired;
		this.openPortCount = await this.server.openPortCount;
		this.organizationName = await this.server.organizationName;
		this.purchasedByPlayer = await this.server.purchasedByPlayer;
		this.ramUsed = await this.server.ramUsed;
		this.requiredHackingSkill = await this.server.requiredHackingSkill;
		this.serverGrowth = await this.server.serverGrowth;
		this.smtpPortOpen = await this.server.smtpPortOpen;
		this.sqlPortOpen = await this.server.sqlPortOpen;
		this.sshPortOpen = await this.server.sshPortOpen;
	}
	async update() {
		this.backdoorInstalled = await this.server.backdoorInstalled;
		this.cpuCores = await this.server.cpuCores;
		this.ftpPortOpen = await this.server.ftpPortOpen;
		this.hackDifficulty = await this.server.hackDifficulty;
		this.hasAdminRights = await this.server.hasAdminRights;
		this.httpPortOpen = await this.server.httpPortOpen;
		this.isConnectedTo = await this.server.isConnectedTo;
		this.moneyAvailable = await this.server.moneyAvailable;
		this.openPortCount = await this.server.openPortCount;
		this.ramUsed = await this.server.ramUsed;
		this.serverGrowth = await this.server.serverGrowth;
		this.smtpPortOpen = await this.server.smtpPortOpen;
		this.sqlPortOpen = await this.server.sqlPortOpen;
		this.sshPortOpen = await this.server.sshPortOpen;
	}
}

export async function roulettestart(Game) {
	if ((await Do(Game.ns, "ns.getPlayer")).bitNodeN == 8) {
		if ((await Do(Game.ns, "ns.singularity.getOwnedSourceFiles")).filter(x => x.n == 10).length > 0) {
			for (let i = 0; i < await Do(Game.ns, "ns.sleeve.getNumSleeves"); i++) {
				await Do(Game.ns, "ns.sleeve.setToCommitCrime", i, "Mug");
			}
		}
	}
	await Do(Game.ns, "ns.nuke", "n00dles");
	Game.ns.run("/temp/weaken.js", Math.floor((await (Game.Servers['home'].maxRam)) / 2), "n00dles");
	await Game.Casino.roulette();
	let restart = false;
	for (let city of ["Chongqing", "New Tokyo", "Volhaven", "Ishima"]) {
		if (((["Chongqing", "New Tokyo", "Ishima"].includes(city)) && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Sector-12") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Aevum") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Volhaven")) || ((["Sector-12", "Aevum"].includes(city)) && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Chongqing") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Ishima") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("New Tokyo") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Volhaven")) || ((["Volhaven"].includes(city)) && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Chongqing") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Ishima") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("New Tokyo") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Sector-12") && !((await Do(Game.ns, "ns.getPlayer"))).factions.includes("Aevum"))) {
			if (!(await Do(Game.ns, "ns.getPlayer")).factions.includes(city)) {
				await Do(Game.ns, "ns.singularity.travelToCity", city);
				while (!(await Do(Game.ns, "ns.singularity.checkFactionInvitations")).includes(city))
					await Game.ns.asleep(0);
			}
			if (city == "Chongqing")
				while ((await (Game.Player.hacking)) >= 50 && !(await Do(Game.ns, "ns.singularity.checkFactionInvitations")).includes("Tian Di Hui")) {
					await Game.ns.asleep(0);
				}
		}
	}
	if ((await Do(Game.ns, "ns.getPlayer")).bitNodeN == 8) {
		if (!await Do(Game.ns, "ns.stock.has4SData")) {
			await Do(Game.ns, "ns.stock.purchase4SMarketData");
			restart = true;
		}
	}
	while (await Do(Game.ns, "ns.singularity.upgradeHomeRam")) {
		restart = true;
	}
	while (await Do(Game.ns, "ns.singularity.upgradeHomeCores")) {
		restart = true;
	}
	if ((await Do(Game.ns, "ns.getPlayer")).bitNodeN == 8) {
		for (let faction of (await Do(Game.ns, "ns.singularity.checkFactionInvitations")).map(value => ({ value, sort: Math.random() })).sort((a, b) => a.sort - b.sort).map(({ value }) => value)) {
			if ((await Do(Game.ns, "ns.singularity.checkFactionInvitations")).includes(faction)) {
				await Do(Game.ns, "ns.singularity.joinFaction", faction);
			}
		}
		for (let faction of (await Do(Game.ns, "ns.getPlayer")).factions) {
			let factfavor = await Do(Game.ns, "ns.singularity.getFactionFavor", faction);
			for (let aug of (await Do(Game.ns, "ns.singularity.getAugmentationsFromFaction", faction)).reverse()) {
				if (aug == "NeuroFlux Governor" || !(await Do(Game.ns, "ns.singularity.getOwnedAugmentations", true)).includes(aug)) {
					let neededrep = Math.max(0, (await Do(Game.ns, "ns.singularity.getAugmentationRepReq", aug)) - (await Do(Game.ns, "ns.singularity.getFactionRep", faction)) / 1e6 * (1 + factfavor / 100));
					if ((await Do(Game.ns, "ns.singularity.getAugmentationPrice", aug)) + neededrep * 1e6 / (1 + factfavor / 100) <= await (Game.Player.money)) {
						await Do(Game.ns, "ns.singularity.donateToFaction", faction, Math.ceil(neededrep * 1e6 / (1 + factfavor / 100)));
						await Do(Game.ns, "ns.singularity.purchaseAugmentation", faction, aug);
						Game.ns.toast("Installing " + aug + " from " + faction);
						restart = true;
					}
				}
			}
		}
		let cash = await (Game.Player.money);
		if (cash < 10000000000) {
			for (let faction of (await Do(Game.ns, "ns.getPlayer")).factions) {
				await Do(Game.ns, "ns.singularity.donateToFaction", faction, cash / ((await Do(Game.ns, "ns.getPlayer")).factions.length));
			}
		}
	}
	if (restart) {
		await Game.SoftReset();
	}
}

export class Casino {
	constructor(ns, Game) {
		this.ns = ns;
		this.Game = Game ? Game : new WholeGame(ns);
	}
	async roulette() {
		while (!((await Do(this.ns, "ns.getPlayer")).city == "Aevum" || (await Do(this.ns, "ns.singularity.travelToCity", 'Aevum')))) {
			if ((!await Do(this.ns, "ns.singularity.isBusy")) && (await Do(this.ns, "ns.getPlayer")).cash < 200000)
				await Do(this.ns, "ns.singularity.commitCrime", "Mug");
			await this.ns.asleep(0);
		}

		let initseed = Date.now();
		if (await Do(this.ns, "ns.singularity.goToLocation", 'Iker Molina Casino')) {
			let doc = eval('document');
			let buttons = doc.evaluate("//button[contains(text(),'roulette')]", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
			//				ns.tprint(buttons);
			buttons[Object.keys(buttons)[1]].onClick({ isTrusted: true });
			let z = 0
		}
		let z = 0;
		let doc = eval('document');
		while (!doc.body.innerText.includes("1 to 12")) {
			await this.ns.asleep(1); // Sleep until you find a libertarian's ideal dating partner
		}
		let buttons = Array.from(doc.evaluate("//button[text()='Stop playing']", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.parentElement.children[6].getElementsByTagName('button')).map(x => [parseInt(x.innerText), x]).filter(x => x[0].toString() == x[1].innerText).sort((a, b) => { return a[0] - b[0] });
		let wheels = [];
		for (let i = initseed; i < initseed + 15000; i++) {
			wheels.push([[(i / 1000) % 30000, (i / 1000) % 30000, (i / 1000) % 30000]]);
			while (wheels[wheels.length - 1].length < 75) {
				let curseed = wheels[wheels.length - 1].pop();
				let s1 = curseed[0]; let s2 = curseed[1]; let s3 = curseed[2];
				s1 = (171 * s1) % 30269; s2 = (172 * s2) % 30307; s3 = (170 * s3) % 30323;
				wheels[wheels.length - 1].push(Math.floor(37 * ((s1 / 30269.0 + s2 / 30307.0 + s3 / 30323.0) % 1.0)));
				wheels[wheels.length - 1].push([s1, s2, s3]);

			}
		}
		let seen = [];
		while (!doc.body.innerText.includes("You're not allowed here anymore.")) {
			if (z > 10) {
				let wagerField = doc.evaluate("//button[text()='Stop playing']", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.parentElement.children[4].firstChild.firstChild;
				Object.getOwnPropertyDescriptor(eval('window').HTMLInputElement.prototype, "value").set.call(wagerField, '10000000')
				wagerField.dispatchEvent(new Event('input', { bubbles: true }));
				await this.ns.asleep(0);
				//				return;
			}
			let wheels2 = wheels.filter(x => levenshteinDistance(x.slice(0, seen.length - 1), seen.slice(0, seen.length - 1)) < Math.max(5, seen.length / 2));
			if (wheels2.length > 10) {
				wheels = wheels2;
			}
			if (seen.length > 0) {
				wheels.sort((a, b) => levenshteinDistance(seen, a) - levenshteinDistance(seen, b));
			}
			let nextguess = [...wheels[0]];
			for (let i = 0; i < seen.length; i++) {
				nextguess.splice(0, 1 + nextguess.indexOf(seen[i]));
			}
			if (nextguess.length < 1) {
				nextguess = [0];
			}
			//			this.ns.print("Guessing... " + nextguess[0].toString());
			try {
				buttons[nextguess[0]][1][Object.keys(buttons[nextguess[0]][1])[1]].onClick({ isTrusted: true });
			} catch {
				await Do(this.ns, "ns.singularity.commitCrime", "Mug");
				await this.roulette();
				return;
			};
			z = z + 1;
			await this.ns.asleep(5000);
			seen.push(parseInt(doc.evaluate("//button[text()='Stop playing']", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.parentElement.children[3].innerText));
		}
		let endgame = doc.evaluate("//button[contains(text(),'Stop playing')]", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
		endgame[Object.keys(endgame)[1]].onClick({ isTrusted: true });
		await this.ns.asleep(0);
		endgame = doc.evaluate("//button[contains(text(),'Return to World')]", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
		endgame[Object.keys(endgame)[1]].onClick({ isTrusted: true });
		killModal();
	}
}

let workerCode = `
function minpathsum(data) {
	while (data.length > 1) {
		for (let i = 0; i < (data[data.length - 2]).length; i++) {
			data[data.length - 2][i] += Math.min(data[data.length - 1][i], Math.min(data[data.length - 1][i + 1]));
		}
		data.pop();
	}
	return data[0][0];
}

function uniquepathsI(data) {
	let numbers = []
	for (let i = 0; i < data[0]; i++) {
		numbers.push([]);
		for (let j = 0; j < data[1]; j++) {
			numbers[numbers.length - 1].push(1);
			if (i > 0 && j != 0) {
				numbers[i][j] = numbers[i - 1][j] + numbers[i][j - 1];
			}
		}
	}
	return numbers[data[0] - 1][data[1] - 1];
}

function uniquepathsII(data) {
	let answer = [];
	for (let i = 0; i < data.length; i++) {
		answer.push(new Array(data[0].length).fill(0));
	}
	for (let i = data.length - 1; i >= 0; i--) {
		for (let j = data[0].length - 1; j >= 0; j--) {
			if (data[i][j] == 0) {
				answer[i][j] = (i + 1 < data.length ? answer[i + 1][j] : 0) + (j + 1 < data[0].length ? answer[i][j + 1] : 0);
				answer[data.length - 1][data[0].length - 1] = 1;
			}
		}
	}
	return answer[0][0];
}

function largestprimefactor(data) {
	let i = 2;
	while (data > 1) {
		while (data % i == 0) {
			data /= i;
		}
		i += 1;
	}
	return i - 1;
}

function mergeoverlappingintervals(data) {
	let intervals = (new Array(data.map(x => x[1]).reduce((a, b) => { return Math.max(a, b) }))).fill(0);
	for (let interval of data) {
		for (let i = interval[0]; i < interval[1]; i++) {
			intervals[i] = 1;
		}
	}
	if (intervals.indexOf(1) == -1) {
		return [];
	}
	let answer = [[intervals.indexOf(1), intervals.indexOf(0, intervals.indexOf(1))]];
	while ((answer[answer.length - 1][0] != -1) && (answer[answer.length - 1][1] != -1)) {
		let a = intervals.indexOf(1, 1 + answer[answer.length - 1][1]);
		answer.push([a, intervals.indexOf(0, a)]);
	}
	if (answer[answer.length - 1][1] == -1) {
		answer[answer.length - 1][1] = intervals.length;
	}
	if (answer[answer.length - 1][0] == -1) {
		answer.pop();
	}
	return answer;
}

function caesarcipher(data) {
	return data[0].split("").map(x => { return x === " " ? " " : "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[(("ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(x) + 26 - data[1]) % 26)] }).join("");
	// return data[0].split("").map(x => x.charCodeAt(0)).map(x => x == 32 ? 32 : (x + 65 - data[1])%26 + 65).map(x => String.fromCharCode(x)).join("");
}

function vigenere(data) {
	return data[0].split("").map((x, i) => { return "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[(("ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(x) + 13 + data[1].charCodeAt(i % data[1].length))) % 26] }).join("");
}

function totalwaystosum(data) {
	let answer = [1].concat((new Array(data + 1)).fill(0));
	for (let i = 1; i < data; i++) {
		for (let j = i; j <= data; j++) {
			answer[j] += answer[j - i];
		}
	}
	return answer[data];
}

function totalwaystosumII(data) {
	let answer = [1].concat((new Array(data[0])).fill(0));
	for (let i of data[1]) {
		for (let j = i; j <= data[0]; j++) {
			answer[j] += answer[j - i];
		}
	}
	return answer[data[0]];
}

function spiralizematrix(data) {
	let answer = [];
	while (data.length > 0 && data[0].length > 0) {
		answer = answer.concat(data.shift());
		if (data.length > 0 && data[0].length > 0) {
			answer = answer.concat(data.map(x => x.pop()));
			if (data.length > 0 && data[0].length > 0) {
				answer = answer.concat(data.pop().reverse());
				if (data.length > 0 && data[0].length > 0) {
					answer = answer.concat(data.map(x => x.shift()).reverse());
				}
			}
		}
	}
	return answer;
}

function subarraywithmaximumsum(data) {
	let answer = -1e308;
	for (let i = 0; i < data.length; i++) {
		for (let j = i; j < data.length; j++) {
			answer = Math.max(answer, data.slice(i, j + 1).reduce((a, b) => { return a + b }));
		}
	}
	return answer;
}

function twocolor(data) {
	for (let i = 0; i < 2 ** data[0]; i++) {
		let answer = [];
		for (let j = 0; j < data[0]; j++) {
			answer[j] = (2 ** j & i) > 0 ? 1 : 0;
		}
		if (data[1].map(x => answer[x[0]] != answer[x[1]]).reduce((a, b) => { return a + b }) == data[1].length) {
			return answer;
		}
	}
	return [];
}

function rlecompression(data) {
	let answer = "";
	data = data.split("");
	while (data.length > 0) {
		let z = data.splice(0, 1);
		let i = 1;
		while (i < 9 && data[0] == z & data.length > 0) {
			i += 1;
			data.splice(0, 1);
		}
		answer = answer.concat(i.toString()).concat(z);
	}
	return answer;
}

function lzdecompression(data) {
	if (data.length == 0) {
		return "";
	}
	data = data.split("");
	let answer = "";
	while (data.length > 0) {
		let chunklength = parseInt(data.shift());
		if (chunklength > 0) {
			answer = answer.concat(data.splice(0, chunklength).join(""));
		}
		if (data.length > 0) {
			chunklength = parseInt(data.shift());
			if (chunklength != 0) {
				let rewind = parseInt(data.shift());
				for (let i = 0; i < chunklength; i++) {
					answer = answer.concat(answer[answer.length - rewind]);
				}
			}
		}
	}
	return answer;
}

function lzcompression(data) {
	let z = 0;
	let queue = [[], [], []];
	while (queue[1].length <= data.length) {
		queue[1].push([]);
	}
	while (queue[2].length <= data.length) {
		queue[2].push([]);
	}
	for (let i = 0; i <= 9 && i < data.length; i++) {
		queue[1][i].push(i.toString() + data.substring(0, i));
		queue[2][i].push(i.toString() + data.substring(0, i));
	}
	while (queue[1][data.length].length == 0 && queue[2][data.length].length == 0) {
		let i = (new Array(data.length)).fill(0).map((_, i) => i).map(i => [i, queue[1][i].length + queue[2][i].length]).filter(x => x[1] > 0).reduce((a, b) => b)[0];
		if (queue[2][i].length > 0) queue[2][i].map(x => queue[1][i].push(x + "0"));
		if (queue[1][i].length > 0) queue[1][i].map(x => queue[2][i].push(x + "0"));
		queue[1][i] = Array.from(...new Set([queue[1][i].filter(x => (lzdecompression(x).length == i) && (lzdecompression(x) === data.substring(0, i))).sort((a, b) => { return a.length - b.length; })]));
		queue[2][i] = Array.from(...new Set([queue[2][i].filter(x => (lzdecompression(x).length == i) && (lzdecompression(x) === data.substring(0, i))).sort((a, b) => { return a.length - b.length; })]));
		queue[1][i] = queue[1][i].sort((a, b) => { return a.length - b.length; });
		queue[2][i] = queue[2][i].sort((a, b) => { return a.length - b.length; });
		ns.tprint(i, " ", queue[1][i], " ", queue[2][i]);
		if (queue[1][i].length > 0) {
			for (let current of queue[1][i].splice(0, 10)) {
				for (let l = 0; l <= 10; l++) {
					for (let j = 0; j <= 10; j++) {
						let temp = lzdecompression(current.concat(l.toString()).concat(j.toString()));
						if (temp === data.substring(0, temp.length)) {
							queue[2][temp.length].push(current.concat(l.toString()).concat(j.toString()));
						}
					}
				}
			}
			//			queue[1][i] = [];
		}
		if (queue[2][i].length > 0) {
			for (let current of queue[2][i].splice(0, 10)) {
				for (let j = 0; j <= 10; j++) {
					let temp = lzdecompression(current.concat(j.toString()).concat(data.substring(current.length, current.length + j)));
					if (temp === data.substring(0, temp.length)) {
						queue[1][temp.length].push(current.concat(j.toString()).concat(data.substring(current.length, current.length + j)));
					}
				}
			}
			//			queue[2][i] = [];
		}
	}
	queue[1][data.length] = queue[1][data.length].sort((a, b) => { return a.length - b.length; });
	queue[2][data.length] = queue[2][data.length].sort((a, b) => { return a.length - b.length; });
}

function stonks1(data) {
	let best = 0;
	for (let i = 0; i < data.length; i++) {
		for (let j = i + 1; j < data.length; j++) {
			best = Math.max(best, data[j] - data[i]);
		}
	}
	return best;
}

function stonks2(data) {
	let best = 0;
	let queue = {};
	queue[JSON.stringify(data)] = 0;
	while (Object.keys(queue).length > 0) {
		let current = Object.keys(queue)[0];
		let value = queue[current];
		delete queue[current];
		let stonks = JSON.parse(current);
		for (let i = 0; i < stonks.length; i++) {
			for (let j = i + 1; j < stonks.length; j++) {
				best = Math.max(best, value + stonks[j] - stonks[i]);
				let remaining = stonks.slice(j + 1);
				if (remaining.length > 0) {
					if (!Object.keys(queue).includes(JSON.stringify(remaining))) {
						queue[JSON.stringify(remaining)] = -1e308;
					}
					queue[JSON.stringify(remaining)] = Math.max(queue[JSON.stringify(remaining)], value + stonks[j] - stonks[i]);
				}
			}
		}
	}
	return best;
}

function stonks3(data) {
	let best = 0;
	for (let i = 0; i < data.length; i++) {
		for (let j = i + 1; j < data.length; j++) {
			best = Math.max(best, data[j] - data[i]);
			for (let k = j + 1; k < data.length; k++) {
				for (let l = k + 1; l < data.length; l++) {
					best = Math.max(best, data[j] - data[i] + data[l] - data[k]);
				}
			}
		}
	}
	return best;
}

function stonks4(data) {
	let best = 0;
	let queue = {};
	queue[0] = {};
	queue[0][JSON.stringify(data[1])] = 0;
	for (let ii = 0; ii < data[0]; ii++) {
		queue[ii + 1] = {};
		while (Object.keys(queue[ii]).length > 0) {
			let current = Object.keys(queue[ii])[0];
			let value = queue[ii][current];
			delete queue[ii][current];
			let stonks = JSON.parse(current);
			for (let i = 0; i < stonks.length; i++) {
				for (let j = i + 1; j < stonks.length; j++) {
					best = Math.max(best, value + stonks[j] - stonks[i]);
					let remaining = stonks.slice(j + 1);
					if (remaining.length > 0) {
						if (!Object.keys(queue[ii + 1]).includes(JSON.stringify(remaining))) {
							queue[ii + 1][JSON.stringify(remaining)] = -1e308;
						}
						queue[ii + 1][JSON.stringify(remaining)] = Math.max(queue[ii + 1][JSON.stringify(remaining)], value + stonks[j] - stonks[i]);
					}
				}
			}
		}
	}
	return best;
}

function generateips(data) {
	let answer = [];
	for (let i = 1; i + 1 < data.length; i++) {
		for (let j = i + 1; j + 1 < data.length; j++) {
			for (let k = j + 1; k < data.length; k++) {
				answer.push([data.substring(0, i), data.substring(i, j), data.substring(j, k), data.substring(k)]);
			}
		}
	}
	for (let i = 0; i < 4; i++) {
		answer = answer.filter(x => 0 <= parseInt(x[i]) && parseInt(x[i]) <= 255 && (x[i] == "0" || x[i].substring(0, 1) != "0"));
	}
	return answer.map(x => x.join("."));
}

function arrayjumpinggame(data) {
	let queue = new Set();
	if (data[0] == 0) {
		return 0;
	}
	queue.add("[" + data.toString() + "]");
	while (queue.size > 0) {
		let current = Array.from(queue)[0];
		queue.delete(current);
		current = JSON.parse(current);
		if (current[0] != 0) {
			if (current[0] + 1 > current.length) {
				return 1;
			}
			for (let i = 1; i <= current[0] && i < current.length; i++) {
				queue.add(("[".concat(current.slice(i)).toString()).concat("]"));
			}
		}
	}
	return 0;
}

function arrayjumpinggameII(data) {
	let queue = {};
	let best = 1e308;
	queue[data.toString()] = 0;
	while (Object.keys(queue).length > 0) {
		let current = Object.keys(queue)[0];
		let value = queue[current];
		delete queue[current];
		current = current.split(",").map(i => parseInt(i));
		if (current[0] + 1 >= current.length) {
			best = Math.min(best, value + 1);
		} else {
			for (let i = 1; i <= current[0]; i++) {
				let newIndex = current.slice(i).toString();
				if (!Object.keys(queue).includes(newIndex)) queue[newIndex] = 1e308;
				queue[newIndex] = Math.min(queue[newIndex], value + 1);
			}
		}
	}
	return best == 1e308 ? 0 : best;
}

function hammingencode(data) {
	let answer = [];

	// Convert the data to a bit array. Can't use & due to data possibly being larger than a 32-bit int.
	let encoded = [];
	let remaining = data;
	while (remaining > 0) {
		encoded = [remaining % 2].concat(encoded);
		remaining = Math.floor((remaining - remaining % 2) / 2 + .4);
	}

	// Set up the answer array, skipping over the entries with an index that is a power of 2, as they'll be the parity bits
	let powersoftwo = (new Array(Math.ceil(Math.log2(data)))).fill(0).map((_, i) => 2 ** i);
	let a_i = 0; let e_i = 0;
	for (let e_i = 0; e_i < encoded.length; e_i++) {
		a_i += 1;
		while (powersoftwo.includes(a_i)) {
			a_i += 1;
		}
		answer[a_i] = encoded[e_i];
	}

	// Calculate the parity bits
	for (let i of powersoftwo.filter(x => x < answer.length)) {
		// Generate a list of indexes from 0 to answer.length-1
		answer[i] = (new Array(answer.length)).fill(0).map((_, i) => i);
		// Keep only the indexes that share a bit with i, which is a power of 2
		answer[i] = answer[i].filter(x => x > i && (i & x));
		// Map the indexes onto the values the represent
		answer[i] = answer[i].map(x => answer[x]);
		// Bitwise XOR reduction to a single value
		answer[i] = answer[i].reduce((a, b) => a ^ b, 0);
	}

	// Calculate the final parity bit and send it home
	answer[0] = answer.slice(1).reduce((a, b) => a ^ b);
	return answer.map(x => x.toString()).join("");
}

function hammingdecode(data) {
	let powersoftwo = (new Array(Math.ceil(Math.log2(data)))).fill(0).map((_, i) => 2 ** i);
	let badbits = [];
	for (let i of powersoftwo.filter(x => x < data.length)) {
		let checksum = (new Array(data.length)).fill(0).map((_, i) => i).filter(x => x > i && (i & x)).map(x => parseInt(data.substring(x, x + 1))).reduce((a, b) => a ^ b);
		if (parseInt(data.substring(i, i + 1)) != checksum) {
			badbits.push(i);
		}
	}
	if (badbits.length == 0) { // No error in the data
		let checksum = data.substring(1).split("").map(x => parseInt(x)).reduce((a, b) => a ^ b);
		if (checksum == parseInt(data.substring(0, 1))) {
			let number = data.split("").map(x => parseInt(x));
			for (let i of powersoftwo.filter(x => x < data.length).reverse()) {
				number.splice(i, 1);
			}
			number.splice(0, 1);
			return number.reduce((a, b) => a * 2 + b);
		}
	}
	let badindex = badbits.reduce((a, b) => a | b, 0);
	return hammingdecode(data.substring(0, badindex).concat(data.substring(badindex, badindex + 1) == "0" ? "1" : "0").concat(data.substring(badindex + 1)));
}

function findallvalidmathexpressions(data) {
	let queue = new Set();
	queue.add(data[0]);
	for (let current of queue) {
		let splitted = current.split("");
		for (let i = 1; i < splitted.length; i++) {
			if (!("+-*".includes(splitted[i - 1])) && !("+-*".includes(splitted[i]))) {
				queue.add((splitted.slice(0, i).concat("+").concat(splitted.slice(i))).join(""));
				queue.add((splitted.slice(0, i).concat("-").concat(splitted.slice(i))).join(""));
				queue.add((splitted.slice(0, i).concat("*").concat(splitted.slice(i))).join(""));
				//				queue.add((splitted.slice(0, i).concat("*-").concat(splitted.slice(i))).join(""));
			}
		}
	}
	let zeroes = Array.from(queue) //.concat(Array.from(queue).map(x => "-".concat(x)));
	for (let i = 0; i < 10; i++) {
		zeroes = zeroes.filter(x => !x.includes("+0".concat(i.toString())));
		zeroes = zeroes.filter(x => !x.includes("-0".concat(i.toString())));
		zeroes = zeroes.filter(x => !x.includes("*0".concat(i.toString())));
		zeroes = zeroes.filter(x => x.substring(0, 1) != "0" || "+-*".includes(x.substring(1, 2)));
	}
	return zeroes.filter(x => eval(x) == data[1]);
}

function sanitizeparentheses(data) {
	let queue = new Set();
	queue.add(data);
	while (Array.from(queue).length > 0 && (Array.from(queue)[0].split("").includes("(") || Array.from(queue)[0].split("").includes(")"))) {
		let answer = [];
		let nextqueue = new Set();
		for (let current of Array.from(queue)) {
			let good = true;
			let goodsofar = 0;
			for (let i = 0; i < current.length; i++) {
				if (current.substring(i, i + 1) == "(") {
					goodsofar += 1;
				}
				if (current.substring(i, i + 1) == ")") {
					goodsofar -= 1;
				}
				if (goodsofar < 0) {
					good = false;
				}
			}
			if (goodsofar != 0) {
				good = false;
			}
			if (good) {
				answer.push(current);
			}
			for (let i = 0; i < current.length; i++) {
				if ("()".includes(current.substring(i, i + 1))) {
					nextqueue.add(current.substring(0, i).concat(current.substring(i + 1)));
				}
			}
		}
		if (answer.length > 0) {
			return answer;
		}
		queue = JSON.parse(JSON.stringify(Array.from(nextqueue)));
	}
	return [Array.from(queue)[0]];
}

function shortestpathinagrid(data) {
	let solutions = { "0,0": "" };
	let queue = new Set();
	queue.add("0,0");
	for (let current of queue) {
		let x = parseInt(current.split(",")[0]);
		let y = parseInt(current.split(",")[1]);
		if (x > 0) {
			if (data[x - 1][y] == 0) {
				let key = (x - 1).toString().concat(",").concat(y.toString());
				if (!Array.from(queue).includes(key)) {
					solutions[key] = solutions[current] + "U";
					queue.add(key);
				}
			}
		}
		if (x + 1 < data.length) {
			if (data[x + 1][y] == 0) {
				let key = (x + 1).toString().concat(",").concat(y.toString());
				if (!Array.from(queue).includes(key)) {
					solutions[key] = solutions[current] + "D";
					queue.add(key);
				}
			}
		}
		if (y > 0) {
			if (data[x][y - 1] == 0) {
				let key = x.toString().concat(",").concat((y - 1).toString());
				if (!Array.from(queue).includes(key)) {
					solutions[key] = solutions[current] + "L";
					queue.add(key);
				}
			}
		}
		if (y + 1 < data[0].length) {
			if (data[x][y + 1] == 0) {
				let key = x.toString().concat(",").concat((y + 1).toString());
				if (!Array.from(queue).includes(key)) {
					solutions[key] = solutions[current] + "R";
					queue.add(key);
				}
			}
		}
	}
	let finalkey = (data.length - 1).toString().concat(",").concat((data[0].length - 1).toString());
	if (Object.keys(solutions).includes(finalkey)) {
		return solutions[finalkey];
	}
	return "";
}

onmessage = (event) => {postMessage([eval(event.data[0])(event.data[1]), event.data[2], event.data[3], event.data[0]]);}
`;

export class Contracts {
	constructor(ns, game) {
		this.ns = ns;
		this.game = game ? game : new WholeGame(ns);
		this.contracts = {};
		this.times = {};
		this.log = ns.tprint.bind(ns);
		if (ns.flags(cmdlineflags)['logbox']) {
			this.log = this.game.sidebar.querySelector(".contractbox") || this.game.createSidebarItem("Contracts", "", "C", "contractbox");
			this.log = this.log.log;
		}
		this.y = 0;
		this.z = 0;
		this.procs = [];
		this.solutions = [];
		this.blob = new Blob([workerCode], { type: "application/javascript" });
		for (let i = 0; i < 16; i++) {
			this.procs.push(new Worker(URL.createObjectURL(this.blob)));
			this.procs[this.procs.length - 1].onmessage = (event) => {
				this.solutions.push(event);
				this.z -= 1;
			};
		}
		this.ns.atExit(() => this.procs.map(x => x.terminate()));
	}
	async list() {
		//		this['window'] = this['window'] || await makeNewWindow("Contracts", this.ns.ui.getTheme())
		let files = [];
		for (let server of this.game['Servers'].serverlist) {
			files = files.concat((await Do(this.ns, "ns.ls", server)).filter(x => x.includes(".cct")).map(filename => [server, filename]));
		}
		// this.ns.tprint(files);
		for (let i = 0; i < files.length; i++) {
			this.contracts[files[i][1]] = {};
			this.contracts[files[i][1]].server = files[i][0];
			this.contracts[files[i][1]].type = await Do(this.ns, "ns.codingcontract.getContractType", files[i][1], files[i][0]);
			this.contracts[files[i][1]].data = await Do(this.ns, "ns.codingcontract.getData", files[i][1], files[i][0]);
			this.contracts[files[i][1]].description = await Do(this.ns, "ns.codingcontract.getDescription", files[i][1], files[i][0]);
			while (this.contracts[files[i][1]].description.indexOf("\n") > -1) {
				this.contracts[files[i][1]].description = this.contracts[files[i][1]].description.replace("\n", "<BR>");
			}
		}
		//		let output = "<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0>";
		//		for (let i of Object.keys(this.contracts)) {
		//			output += "<TR><TD>" + this.contracts[i].description.replace("\n", "<BR>") + "</TD><TD>" + this.contracts[i].server + "</TD><TD>" + this.contracts[i].type + "</TD><TD>" + JSON.stringify(this.contracts[i].data) + "</TD></TR>";
		//		}
		//		output += "</TABLE>";
		//		this['window'].update(output);
		return this.contracts;
	}
	async loop() {
		while (true) {
    		await this.solve();
    		await this.ns.asleep(60000);
		}
	}
	async solve() {
		await this.list();
		for (let contract of Object.keys(this.contracts)) {
			let done = false;
			//this.ns.tprint(contract);
			for (let types of [
				["Minimum Path Sum in a Triangle", "minpathsum"],
				["Unique Paths in a Grid I", "uniquepathsI"],
				["Unique Paths in a Grid II", "uniquepathsII"],
				["Find Largest Prime Factor", "largestprimefactor"],
				["Merge Overlapping Intervals", "mergeoverlappingintervals"],
				["Encryption I: Caesar Cipher", "caesarcipher"],
				["Total Ways to Sum", "totalwaystosum"],
				["Total Ways to Sum II", "totalwaystosumII"],
				["Spiralize Matrix", "spiralizematrix"],
				["Subarray with Maximum Sum", "subarraywithmaximumsum"],
				["Proper 2-Coloring of a Graph", "twocolor"],
				["Compression I: RLE Compression", "rlecompression"],
				["Compression II: LZ Decompression", "lzdecompression"],
				//["Compression III: LZ Compression", "lzcompression"],
				["Algorithmic Stock Trader I", "stonks1"],
				["Algorithmic Stock Trader II", "stonks2"],
				["Algorithmic Stock Trader III", "stonks3"],
				["Algorithmic Stock Trader IV", "stonks4"],
				["Encryption II: Vigenère Cipher", "vigenere"],
				["Generate IP Addresses", "generateips"],
				["Array Jumping Game", "arrayjumpinggame"],
				["Array Jumping Game II", "arrayjumpinggameII"],
				["HammingCodes: Integer to Encoded Binary", "hammingencode"],
				["HammingCodes: Encoded Binary to Integer", "hammingdecode"],
				["Find All Valid Math Expressions", "findallvalidmathexpressions"],
				["Sanitize Parentheses in Expression", "sanitizeparentheses"],
				["Shortest Path in a Grid", "shortestpathinagrid"]
			]) {
				if (!Object.keys(this.times).includes(types[0])) {
					this.times[types[0]] = [];
				}
				if (!done) {
					if (this.contracts[contract].type === types[0]) {
						this.log("Starting " + types[0] + " on " + this.contracts[contract].server);
						this.procs[this.y % 16].postMessage([types[1], this.contracts[contract].data, contract, this.contracts[contract].server]);
						this.z += 1;
						this.y += 1;
						await this.ns.asleep(0);
						//						let starttime = Date.now();
						//						this.times[types[0]].push(Date.now() - starttime);
						//						this.log(types[0] + " average time: " + (this.times[types[0]].reduce((a, b) => a + b) / this.times[types[0]].length).toString());
					}
				}
			}
		}
		while (this.z > 0 || this.solutions.length > 0) {
			await this.ns.asleep(1000);
			while (this.solutions.length > 0) {
				let success = await Do(this.ns, "ns.codingcontract.attempt", this.solutions[0].data[0], this.solutions[0].data[1], this.solutions[0].data[2]);
			    if (success.length > 0) {
					delete this.contracts[this.solutions[0].data[1]];
					this.log("Succeeded at " + this.solutions[0].data[3] + ": " + success);
				} else {
					this.log("Failed at " + this.solutions[0].data[3]);
					this.log("Failed at " + this.solutions[0].data[3], " ", types[1](this.contracts[this.solutions[0].data[1]].data, this.ns));
					//this.ns.exit();
				}
				this.solutions.shift();
			}
		}
		await this.list();
	}
}
export let CITIES = ["Sector-12", "Aevum", "Chongqing", "Ishima", "New Tokyo", "Volhaven"];

export let FACTIONS = {
	"CyberSec": { "abbrev": "CS", "early": true, "backdoor": "CSEC" },
	"Tian Di Hui": { "abbrev": "TD", "early": true, "city": ["Chongqing", "New Tokyo", "Ishima"], "money": 1e6 },
	"NiteSec": { "abbrev": "NS", "early": true, "backdoor": "avmnite-02h", "hacking": 50 },
	"The Black Hand": { "abbrev": "BH", "early": true, "gang": true, "backdoor": "I.I.I.I" },
	"BitRunners": { "abbrev": "BR", "early": true, "backdoor": "run4theh111z" },
	"Netburners": { "abbrev": "NB", "early": true },
	"Slum Snakes": { "abbrev": "SS", "crime": true, "gang": true, "karma": -9, "combat": 30, "money": 1e6 },
	"Tetrads": { "abbrev": "Te", "crime": true, "gang": true, "karma": -18, "city": ["Chongqing", "New Tokyo", "Ishima"], "combat": 75 },
	"Speakers for the Dead": { "abbrev": "Sp", "crime": true, "gang": true, "hatesnsa": true, "combat": 300, "peoplekilled": 30, "karma": -45, "hacking": 100 },
	"Silhouette": { "abbrev": "Si", "crime": true, "gang": true, "money": 15e6, "ceo": true, "karma": -22 },
	"The Dark Army": { "abbrev": "DA", "hatesnsa": true, "combat": 300, "city": ["Chongqing"], "peoplekilled": 5, "karma": -45, "gang": true, "hacking": 300 },
	"The Syndicate": { "abbrev": "Sy", "crime": true, "gang": true, "city": ["Sector-12", "Aevum"], "karma": -90, "money": 10e6, "hatesnsa": true, "hacking": 200 },
	"Sector-12": { "abbrev": "12", "early": true, "citygroup": 1, "city": ["Sector-12"], "money": 15e6 },
	"Aevum": { "abbrev": "Ae", "early": true, "citygroup": 1, "city": ["Aevum"], "money": 40e6 },
	"Chongqing": { "abbrev": "CQ", "early": true, "citygroup": 2, "city": ["Chongqing"], "money": 20e6 },
	"New Tokyo": { "abbrev": "NT", "early": true, "citygroup": 2, "city": ["New Tokyo"], "money": 20e6 },
	"Ishima": { "abbrev": "Is", "early": true, "citygroup": 2, "city": ["Ishima"], "money": 30e6 },
	"Volhaven": { "abbrev": "Vo", "early": true, "citygroup": 3, "city": ["Volhaven"], "money": 50e6 },
	"ECorp": { "abbrev": "EC", "company": "ECorp" },
	"MegaCorp": { "abbrev": "MC", "company": "MegaCorp" },
	"KuaiGong International": { "abbrev": "KG", "company": "KuaiGong International" },
	"Four Sigma": { "abbrev": "4S", "company": "Four Sigma" },
	"NWO": { "abbrev": "NW", "company": "NWO" },
	"Blade Industries": { "abbrev": "Bl", "company": "Blade Industries" },
	"OmniTek Incorporated": { "abbrev": "OT", "company": "OmniTek Incorporated" },
	"Bachman & Associates": { "abbrev": "BA", "company": "Bachman & Associates" },
	"Clarke Incorporated": { "abbrev": "Cl", "company": "Clarke Incorporated" },
	"Fulcrum Secret Technologies": { "abbrev": "Fu", "company": "Fulcrum Technologies" },
	"The Covenant": { "abbrev": "Co", "augmentations": 20, "money": 75e9, "combat": 850, "hacking": 850 },
	"Daedalus": { "abbrev": "Da", "augmentations": 30, "money": 100e9, "combat": 1500, "or": true, "hacking": 2500 },
	"Illuminati": { "abbrev": "Il", "augmentations": 30, "combat": 1200, "money": 150e9, "hacking": 1500 },
	"Church of the Machine God": { "abbrev": "Ch", "bitnode": [13] },
	"Bladeburners": {
		"abbrev": "BB", "bitnode": [6, 7]
	},
	"Shadows of Anarchy": { "abbrev": "SoA" }
}

export let stockSymbolToCompany = {
	"ECP": "ECorp",
	"MGCP": "MegaCorp",
	"BLD": "Blade Industries",
	"CLRK": "Clarke Incorporated",
	"OMTK": "Omnitek Incorporated",
	"FSIG": "Four Sigma",
	"KGI": "KuaiGong International",
	"FLCM": "Fulcrum Technologies",
	"STM": "Storm Technologies",
	"DCOMM": "DefComm",
	"HLS": "Helios Labs",
	"VITA": "VitaLife",
	"ICRS": "Icarus Microsystems",
	"UNV": "Universal Energy",
	"AERO": "AeroCorp",
	"OMN": "Omnia Cybersystems",
	"SLRS": "Solaris Space Systems",
	"GPH": "Global Pharmaceuticals",
	"NVMD": "Nova Medical",
	"WDS": "Watchdog Security",
	"LXO": "LexoCorp",
	"RHOC": "Rho Construction",
	"APHE": "Alpha Enterprises",
	"SYSC": "SysCore Securities",
	"CTK": "CompuTek",
	"NTLK": "NetLink Technologies",
	"OMGA": "Omega Software",
	"FNS": "FoodNStuff",
	"SGC": "Sigma Cosmetics",
	"JGN": "Joe's Guns",
	"CTYS": "Catalyst Ventures",
	"MDYN": "Microdyne Technologies",
	"TITN": "Titan Laboratories"
};

export let LOCATIONS = {
	"AeroCorp": {
		"city": "Aevum"
	},
	"Bachman & Associates": {
		"city": "Aevum"
	},
	"Clarke Incorporated": {
		"city": "Aevum"
	},
	"Crush Fitness Gym": {
		"city": "Aevum"
	},
	"ECorp": {
		"city": "Aevum"
	},
	"Fulcrum Technologies": {
		"city": "Aevum"
	},
	"Galactic Cybersystems": {
		"city": "Aevum"
	},
	"NetLink Technologies": {
		"city": "Aevum"
	},
	"Aevum Police Headquarters": {
		"city": "Aevum"
	},
	"Rho Construction": {
		"city": "Aevum"
	},
	"Snap Fitness Gym": {
		"city": "Aevum"
	},
	"Summit University": {
		"city": "Aevum"
	},
	"Watchdog Security": {
		"city": "Aevum"
	},
	"Iker Molina Casino": {
		"city": "Aevum"
	},
	"KuaiGong International": {
		"city": "Chongqing"
	},
	"Solaris Space Systems": {
		"city": "Chongqing"
	},
	"Church of the Machine God": {
		"city": "Chongqing"
	},
	"Alpha Enterprises": {
		"city": "Sector-12"
	},
	"Blade Industries": {
		"city": "Sector-12"
	},
	"Central Intelligence Agency": {
		"city": "Sector-12"
	},
	"Carmichael Security": {
		"city": "Sector-12"
	},
	"Sector-12 City Hall": {
		"city": "Sector-12"
	},
	"DeltaOne": {
		"city": "Sector-12"
	},
	"FoodNStuff": {
		"city": "Sector-12"
	},
	"Four Sigma": {
		"city": "Sector-12"
	},
	"Icarus Microsystems": {
		"city": "Sector-12"
	},
	"Iron Gym": {
		"city": "Sector-12"
	},
	"Joe's Guns": {
		"city": "Sector-12"
	},
	"MegaCorp": {
		"city": "Sector-12"
	},
	"National Security Agency": {
		"city": "Sector-12"
	},
	"Powerhouse Gym": {
		"city": "Sector-12"
	},
	"Rothman University": {
		"city": "Sector-12"
	},
	"Universal Energy": {
		"city": "Sector-12"
	},
	"DefComm": {
		"city": "New Tokyo"
	},
	"Global Pharmaceuticals": {
		"city": "New Tokyo"
	},
	"Noodle Bar": {
		"city": "New Tokyo"
	},
	"VitaLife": {
		"city": "New Tokyo"
	},
	"Arcade": {
		"city": "New Tokyo"
	},
	"Nova Medical": {
		"city": "Ishima"
	},
	"Omega Software": {
		"city": "Ishima"
	},
	"Storm Technologies": {
		"city": "Ishima"
	},
	"Glitch": {
		"city": "Ishima"
	},
	"CompuTek": {
		"city": "Volhaven"
	},
	"Helios Labs": {
		"city": "Volhaven"
	},
	"LexoCorp": {
		"city": "Volhaven"
	},
	"Millenium Fitness Gym": {
		"city": "Volhaven"
	},
	"NWO": {
		"city": "Volhaven"
	},
	"OmniTek Incorporated": {
		"city": "Volhaven"
	},
	"Omnia Cybersystems": {
		"city": "Volhaven"
	},
	"SysCore Securities": {
		"city": "Volhaven"
	},
	"ZB Institute of Technology": {
		"city": "Volhaven"
	}
}

export class DebugStuff {
	constructor(ns, game) {
		this.ns = ns;
		this.game = game ? game : new WholeGame(ns);
		/*
		const objects = [];
		const payload_id = "payload" + String(Math.trunc(performance.now()));
		globalThis.webpackJsonp.push([payload_id, {
			[payload_id]: function (_e, _t, require) {
				for (const module of (Object.values(require.c))) {
					for (const object of Object.values(module?.exports ?? {})) {
						objects.push(object);
					}
				}
			}
		}, [[payload_id]]]);
		for (const obj of objects) {
			if (!this.player && typeof obj.whoAmI === "function" && obj.whoAmI() === "Player") {
				this.player = obj;
				break;
			}
		}
		*/
	}
/*	startCorp(corpName) {
		this.player.startCorporation(corpName);
	}
	async endlessAss() {
		while (true) {
			for (let op of await(this.game.Bladeburner.opNames)) {
				this.player.bladeburner.operations[op].count = this.player.bladeburner.operations[op].count < 10 ? 10 : this.player.bladeburner.operations[op].count;
			}
			for (let contract of await(this.game.Bladeburner.contractNames)) {
				this.player.bladeburner.contracts[contract].count = this.player.bladeburner.contracts[contract].count < 10 ? 10 : this.player.bladeburner.contracts[contract].count;
			}
		}
	}
*/
}
// Hash function by @Insight from the Bitburner Discord
export function hashCode(s) {
	return s.split("").reduce(
		function (a, b) {
			a = ((a << 5) - a) + b.charCodeAt(0);
			return a & a;
		}, 0
	);
}

// Write the content to the file if it's different than what is already there
export function writeIfNotSame(ns, filename, content) {
	if (ns.read(filename) != content) {
		ns.write(filename, content, 'w');
	}
}

// Generates a very-very-likely to be unique ID.
function uniqueID(s, random = false) {
	let answer = "";
	let remainder = "";
	if (random) {
		remainder = Math.floor(1e30 * Math.random());
	} else {
		remainder = hashCode(s);
	}
	if (remainder < 0) {
		remainder = -remainder;
	}
	while (remainder > 0) {
		answer = answer + "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-"[remainder % 64];
		remainder = Math.floor(remainder / 64);
	}
	return answer;
}

// Writes a command to a file, runs it, and then returns the result
export async function Do(ns, command, ...args) { 
	if (["ns.gang.setTerritoryWarfare", "ns.bladeburner.stopBladeburnerAction", "ns.bladeburner.setActionLevel", "ns.bladeburner.setActionAutolevel", "ns.singularity.hospitalize"].includes(command)) {
		return await DoVoid(ns, command, ...args);
	}
	let progname = "/temp/proc-" + uniqueID(command);
	writeIfNotSame(ns, progname + ".js", `export async function main(ns) { ns.writePort(ns.pid, JSON.stringify(` + command + `(...JSON.parse(ns.args[0]))), 'w'); }`);
	let pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	while (0 == pid) {
		await ns.asleep(0);
    	pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	}
	await ns.getPortHandle(pid).nextWrite();
	let answer = JSON.parse(ns.readPort(pid));
	return answer;
}

export async function DoVoid(ns, command, ...args) {
	writeIfNotSame(ns, '/temp/rm.js', `export async function main(ns) {ns.rm(ns.args[0], 'home');}`);
	let progname = "/temp/proc-V" + uniqueID(command);
	writeIfNotSame(ns, progname + ".js", `export async function main(ns) { ` + command + `(...JSON.parse(ns.args[0])); }`);
	let pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	while (0 == pid) {
		pid = ns.run(progname + ".js", 1, JSON.stringify(args));
		await ns.asleep(0);
	}
	while (await Do(ns, "ns.isRunning", pid))
		await ns.asleep(0);
	return null;
}

// Writes a command to a file, runs against every argument, and then returns the result as an object
export async function DoAll(ns, command, args) {
	let progname = "/temp/procA-" + uniqueID(command);
	writeIfNotSame(ns, progname + ".js", `export async function main(ns) { let parsed = JSON.parse(ns.args[0]); let answer = {}; for (let i = 0; i < parsed.length ; i++) {answer[parsed[i]] = await ` + command + `(parsed[i]);}; ns.writePort(ns.pid, JSON.stringify(answer), 'w'); }`);
	let pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	while (0 == pid) {
		await ns.asleep(0);
    	pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	}
	while (ns.peek(pid) == "NULL PORT DATA") {
		await ns.asleep(0);
	}
	let answer = JSON.parse(ns.readPort(pid));
	return answer;
}

// Writes a command to a file, runs against every argument, and then returns the result as an object
export async function DoAllComplex(ns, command, args) {
	let progname = "/temp/procC-" + uniqueID(command);
	writeIfNotSame(ns, progname + ".js", `export async function main(ns) { let parsed = JSON.parse(ns.args[0]); let answer = {}; for (let i = 0; i < parsed.length ; i++) {answer[parsed[i]] = await ` + command + `(...parsed[i]);}; ns.writePort(ns.pid, JSON.stringify(answer), 'w'); }`);
	let pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	while (0 == pid) {
		await ns.asleep(0);
    	pid = ns.run(progname + ".js", 1, JSON.stringify(args));
	}
	while (ns.peek(pid) == "NULL PORT DATA") {
		await ns.asleep(0);
	}
	let answer = JSON.parse(ns.readPort(pid));
	return answer;
}
/** @param {NS} ns **/

export class Gang {
    constructor(ns, Game, settings = {}) {
        this.ns = ns;
        this.Game = Game ? Game : new WholeGame(ns);
        this.log = ns.tprint.bind(ns);
        this.settings = settings;
        this.memberData = {};
        this.nextTask = {};
        this.settings = settings;
        this.settings.faction = this.settings.faction ?? "Slum Snakes";
        if (this.ns.flags(cmdlineflags)['logbox']) {
            this.log = this.Game.sidebar.querySelector(".gangbox") || this.Game.createSidebarItem("Gang", "", "G", "gangbox");
            this.log = this.log.log;
        }
        // Caching of functions that do not change
        this.tasknames = (async () => {
            try {
                while (!await Do(this.ns, "ns.gang.inGang")) {
                    await this.ns.asleep(10000);
                }
                return await Do(this.ns, "ns.gang.getTaskNames");
            } catch {}
        })();
        this.taskstats = (async () => {
			try {
                await (this.tasknames);
                let taskstats = {};
                for (let task of this.tasknames) {
                    taskstats[task] = Do(this.ns, "ns.gang.getTaskStats", task);
                }
                return taskstats;
			} catch (e) {
				return null;
			}
		})();
        this.equipnames = (async () => {
            try {
                while (!await Do(this.ns, "ns.gang.inGang")) {
                    await this.ns.asleep(10000);
                }
                return await Do(this.ns, "ns.gang.getEquipmentNames");
            } catch {}
        })();
        this.equipstats = (async () => {
			try {
                await (this.equipnames);
                let equipstats = {};
                for (let task of this.equipnames) {
                    equipstats[task] = Do(this.ns, "ns.gang.getEquipmentStats", task);
                }
                return equipstats;
			} catch (e) {
				return null;
			}
		})();
    }
    // Game API Functions
    async ['ascendMember'](memberName) {
        if (!await (this.canAscend(memberName))) {
            return null;
        }
        return await Do(this.ns, "ns.gang.ascendMember", memberName);
    }
    async ['canRecruitMember']() {
        return await Do(this.ns, "ns.gang.canRecruitMember", memberName);
    }
    async ['createGang'](faction) {
        return await Do(this.ns, "ns.gang.createGang", faction);
    }
    async ['getAscensionResult'](memberName) {
        if (!await (this.canAscend(memberName))) {
            return null;
        }
        return await Do(this.ns, "ns.gang.getAscensionResult", memberName);
    }
    async ['getBonusTime']() {
        return await Do(this.ns, "ns.gang.getBonusTime");
    }
    async ['getChanceToWinClash'](gangName) {
        return await Do(this.ns, "ns.gang.getChanceToWinClash", gangName);
    }
    async ['getEquipmentCost'](equipName) {
        return await Do(this.ns, "ns.gang.getEquipmentCost", equipName);
    }
    async ['getEquipmentNames']() {
        return await this.equipnames;
    }
    async ['getEquipmentStats'](equipName) {
        await this.equipstats;
        return await (this.equipstats[equipName]);
    }
    async ['getEquipmentType'](equipName) {
        return await Do(this.ns, "ns.gang.getEquipmentType", equipName);
    }
    async ['getGangInformation']() {
        return await Do(this.ns, "ns.gang.getGangInformation");
    }
    async ['getMemberInformation'](name) {
        return await Do(this.ns, "ns.gang.getMemberInformation", name);
    }
    async ['getMemberNames']() {
        return await Do(this.ns, "ns.gang.getMemberNames");
    }
    async ['getOtherGangInformation']() {
        return await Do(this.ns, "ns.gang.getOtherGangInformation");
    }
    async ['getTaskNames']() {
        return await (this.tasknames);
    }
    async ['getTaskStats'](name) {
        await this.taskstats;
        return await (this.taskstats[name]);
    }
    async ['inGang']() {
        return await Do(this.ns, "ns.gang.inGang");
    }
    async ['purchaseEquipment'](memberName, equipName) {
        return await Do(this.ns, "ns.gang.purchaseEquipment", memberName, equipName);
    }
    async ['recruitMember'](name) {
        return await Do(this.ns, "ns.gang.recruitMember", name);
    }
    async ['setMemberTask'](memberName, taskName) {
        return await Do(this.ns, "ns.gang.setMemberTask", memberName, taskName);
    }
    async ['setTerritoryWarfare'](engage) {
        return await Do(this.ns, "ns.gang.setTerritoryWarfare");
    }
    // jeek.js additions
    async canAscend(memberName) {
        let member = await (this['getMemberInformation'](memberName));
        return 1000 <= ["hack_exp", "str_exp", "def_exp", "dex_exp", "agi_exp", "cha_exp"].map(x => member[x]).reduce((a, b) => a > b ? a : b);
    }
    async recruitMembers(names) {
        if (!await Do(this.ns, "ns.gang.inGang")) {
            return;
        }
        // Recruit as many members as possible.
        let usedNames = await (this['getMemberNames']());
        while (await Do(this.ns, "ns.gang.recruitMember", names.filter(x => !usedNames.includes(x))[0])) {
            this.log("New member " + names.filter(x => !usedNames.includes(x))[0] + " recruited.");
            usedNames.push(names.filter(x => !usedNames.includes(x))[0]);
        }
    }
    async Start(faction = this.settings.faction) {
        if (!(await Do(this.ns, "ns.getPlayer")).factions.includes(faction)) {
            this.Game.Sleeves.startAGangFirst();
            while (!(await Do(this.ns, "ns.getPlayer")).factions.includes(faction)) {
                await this.ns.asleep(60000);
                try {
                    await Do(this.ns, "ns.singularity.joinFaction", faction);
                } catch { }
            }
        }
        while (!(await (this['inGang']()))) {
            await this.ns.asleep(60000);
            try {
                await (this['createGang'](faction));
            } catch { }
        }
    }
}import { Do, DoAll, DoAllComplex } from "Do.js";

export class Grafting {
    constructor(ns, game) {
        this.ns = ns;
        this.game = game ? game : new WholeGame(ns);
        this.log = ns.tprint.bind(ns);
        if (ns.flags(cmdlineflags)['logbox']) {
            this.log = this.game.sidebar.querySelector(".graftbox") || this.game.createSidebarItem("Grafting", "", "G", "graftbox");
            this.log = this.log.log;
        }
    }
    async checkIn(type = "Hacking", force=false) {
        let Game = await(this.game);
        if ((!await Do(this.ns, "ns.singularity.isBusy", "")) && (!await Do(this.ns, "ns.singularity.isFocused", ""))) {
            let auglist = await Do(this.ns, "ns.grafting.getGraftableAugmentations", "");
            let augs = await DoAll(this.ns, "ns.singularity.getAugmentationStats", auglist);
            for (let aug of auglist) {
                augs[aug].price = await Do(this.ns, "ns.grafting.getAugmentationGraftPrice", aug);
                augs[aug].time = await Do(this.ns, "ns.grafting.getAugmentationGraftTime", aug);
            }
            let currentmoney = await Do(this.ns, "ns.getServerMoneyAvailable", "home");
            auglist = auglist.filter(x => augs[x].price <= currentmoney / 2);
            switch(type) {
                case "Combat":
                    auglist = auglist.sort((a, b) => augs[b].agility_exp * augs[b].agility * augs[b].defense_exp * augs[b].defense * augs[b].dexterity_exp * augs[b].dexterity * augs[b].strength_exp * augs[b].strength - augs[a].agility_exp * augs[a].agility * augs[a].defense_exp * augs[a].defense * augs[a].dexterity_exp * augs[a].dexterity * augs[a].strength_exp * augs[a].strength);
                    break;
                case "Charisma":
                    auglist = auglist.sort((a, b) => augs[b].charisma_exp * augs[b].charisma - augs[a].charisma_exp * augs[a].charisma);
                    break;
                case "Hacking":
                    auglist = auglist.sort((a, b) => augs[b].hacking_grow * augs[b].hacking_speed * (augs[b].hacking ** 2) * (augs[b].hacking_exp ** 2) * (augs[b].faction_rep ** .1) - augs[a].hacking_grow * (augs[a].hacking ** 2) * (augs[a].hacking_exp ** 2) * augs[a].hacking_speed * (augs[a].faction_rep ** .1));
                    break;
            }
            let currentaugs = await Do(this.ns, "ns.singularity.getOwnedAugmentations", true);
            for (let i = 0; i < auglist.length; i++) {
                let good = true;
                let prereqs = await Do(this.ns, "ns.singularity.getAugmentationPrereq", auglist[i]);
                for (let aug of prereqs) {
                    if (!(currentaugs.includes(aug))) {
                        good = false;
                    }
                }
                if (!good) {
                    auglist.splice(i, 1);
                    i -= 1;
                }
            }
            for (let special of ["Neuroreceptor Management Implant", "nickofolas Congruity Implant"]) {
                if ((await Do(this.ns, "ns.grafting.getGraftableAugmentations", "")).includes(special)) {
                    if ((await Do(this.ns, "ns.grafting.getAugmentationGraftPrice", special)) < (await Do(this.ns, "ns.getServerMoneyAvailable", "home"))) {
                        auglist.unshift(special);
                    }
                }
            }
            let playerhack = await (Game.Player.hacking);
            let ownedAugs = await Do(this.ns, "ns.singularity.getOwnedAugmentations");
            if (playerhack > 3000 && ownedAugs.length < 30) {
                auglist = auglist.sort((a, b) => augs[a].time - augs[b].time);
            }
            if (auglist.length > 0) {
                if (!(((await Do(this.ns, "ns.getPlayer", "")).city) == "New Tokyo"))
                    await Do(this.ns, "ns.singularity.travelToCity", "New Tokyo");
                if (playerhack < 4000 || ownedAugs.length < 30 || force)
                    if (await Do(this.ns, "ns.grafting.graftAugmentation", auglist[0], false))
                        this.log(auglist[0]);
            }
        }
    }
}

export class Hacknet {
	constructor(ns, game, goal = "") {
		this.ns = ns;
		this.game = game ? game : new WholeGame(ns);
		this.log = ns.tprint.bind(ns);
		this.goal = goal;
		this.start = Date.now();
		if (ns.flags(cmdlineflags)['logbox']) {
			this.log = this.game.sidebar.querySelector(".hacknetbox") || this.game.createSidebarItem("Hacknet", "", "H", "hacknetbox");
			this.log = this.log.log;
		}
	}
	async loop() {
		while (this.goal == "" && (Date.now() - 60000 < this.start))
		    await this.ns.asleep(1000);
		if (this.goal == "") {
			this.goal = "Sell for Money";
		}
		while (true) {
			await this.ns.asleep(0);
			if (this.goal == "Sell for Money") {
				await Do(this.ns, "ns.hacknet.spendHashes", this.goal, "", Math.floor((await Do(this.ns, "ns.hacknet.numHashes", "")) / 4));
				this.log("Spent hashes for cash")
			} else {
				while (await Do(this.ns, "ns.hacknet.spendHashes", this.goal))
					this.log("Spent hashes on " + this.goal);
			}
		    if (this.game.Sleeves.startingAGang) {
				if (await Do(this.ns, "ns.hacknet.spendHashes", "Improve Training")) {
                    this.log("Spent hashes on Improve Gym Training")
				}
			}
    		// Pay for yourself, Hacknet
    		if (!this.game.Sleeves.startingAGang) {
	    		if ((await Do(this.ns, "ns.getMoneySources")).sinceInstall.hacknet_expenses < -1e9) {
		    		if (0 > ((await Do(this.ns, "ns.getMoneySources")).sinceInstall['hacknet']) + ((await Do(this.ns, "ns.getMoneySources")).sinceInstall.hacknet_expenses)) {
			    		if (4 <= (await Do(this.ns, "ns.hacknet.numHashes", ""))) {
				    		let poof = Math.floor((await Do(this.ns, "ns.hacknet.numHashes", "")) / 4);
					    	await Do(this.ns, "ns.hacknet.spendHashes", "Sell for Money", "", poof);
					    }
					}
				}
			}
			if (((await Do(this.ns, "ns.getMoneySources")).sinceInstall.hacknet_expenses >= -1e9) || (0 <= ((await Do(this.ns, "ns.getMoneySources")).sinceInstall['hacknet']) + ((await Do(this.ns, "ns.getMoneySources")).sinceInstall.hacknet_expenses))) {
				let didSomething = true;
				let mults = (await Do(this.ns, "ns.getPlayer", "")).mults.hacknet_node_money;
				while (didSomething) {
					didSomething = false;
					let shoppingCart = [[(await Do(this.ns, "ns.hacknet.getPurchaseNodeCost")) / (this.ns.formulas.hacknetServers.hashGainRate(1, 0, 1, 1, mults)), await Do(this.ns, "ns.hacknet.getPurchaseNodeCost"), "ns.hacknet.purchaseNode"]]
					for (let i = 0; i < await Do(this.ns, "ns.hacknet.numNodes"); i++) {
						let current = await Do(this.ns, "ns.hacknet.getNodeStats", i);
						shoppingCart.push([this.ns.formulas.hacknetServers.ramUpgradeCost(current.ram, 1, mults.hacknet_node_ram_cost) / ((this.ns.formulas.hacknetServers.hashGainRate(current.level, 0, current.ram * 2, current.cores, mults) - (this.ns.formulas.hacknetServers.hashGainRate(current.level, 0, current.ram, current.cores, mults)))), this.ns.formulas.hacknetServers.ramUpgradeCost(current.ram, 1, mults.hacknet_node_ram_cost), "ns.hacknet.upgradeRam", i]);
						shoppingCart.push([this.ns.formulas.hacknetServers.coreUpgradeCost(current.cores, 1, mults.hacknet_node_core_cost) / ((this.ns.formulas.hacknetServers.hashGainRate(current.level, 0, current.ram, current.cores + 1, mults) - (this.ns.formulas.hacknetServers.hashGainRate(current.level, 0, current.ram, current.cores, mults)))), this.ns.formulas.hacknetServers.coreUpgradeCost(current.cores, 1, mults.hacknet_node_core_cost), "ns.hacknet.upgradeCore", i]);
						shoppingCart.push([this.ns.formulas.hacknetServers.levelUpgradeCost(current.level, 1, mults.hacknet_node_core_cost) / ((this.ns.formulas.hacknetServers.hashGainRate(current.level + 1, 0, current.ram, current.cores, mults) - (this.ns.formulas.hacknetServers.hashGainRate(current.level, 0, current.ram, current.cores, mults)))), this.ns.formulas.hacknetServers.levelUpgradeCost(current.level, 1, mults.hacknet_node_core_cost), "ns.hacknet.upgradeLevel", i]);
					}
					let currentMoney = await Do(this.ns, "ns.getServerMoneyAvailable", "home");
					shoppingCart = shoppingCart.filter(x => x[1] <= currentMoney);
					shoppingCart = shoppingCart.filter(x => x[1] != null);
					shoppingCart = shoppingCart.sort((a, b) => { return a[0] - b[0]; });
					if (shoppingCart.length > 0) {
						this.log(shoppingCart[0].slice(2).join(" "));
						await Do(this.ns, ...(shoppingCart[0].slice(2))); //FFIGNORE
						didSomething = true;
					}
				}
				let done = false;
				while ((await Do(this.ns, "ns.hacknet.numHashes")) * 2 > (await Do(this.ns, "ns.hacknet.hashCapacity")) && !done) {
					done = true;
					let minimum = 1e308;
					let answer = -1;
					for (let i = 0; i < await Do(this.ns, "ns.hacknet.numNodes"); i++) {
						if (this.ns.formulas.hacknetServers.cacheUpgradeCost((await Do(this.ns, "ns.hacknet.getNodeStats", i)).cache, 1, mults.hacknet_node_cache_cost) < minimum) {
							answer = i;
							minimum = this.ns.formulas.hacknetServers.cacheUpgradeCost((await Do(this.ns, "ns.hacknet.getNodeStats", i)).cache, 1, mults.hacknet_node_cache_cost);
						}
					}
					if (answer >= 0 && await Do(this.ns, "ns.hacknet.upgradeCache", answer)) {
						done = false;
					}
				}
				if ((await Do(this.ns, "ns.hacknet.numHashes")) * 2 > (await Do(this.ns, "ns.hacknet.hashCapacity")) && !done) {
					if (await Do(this.ns, "ns.hacknet.spendHashes", "Sell for Money"))
						this.log("Sold four hashes for cash.");
				}
				if (this.goal == "Sell for Money") {
					let poof = Math.floor((await Do(this.ns, "ns.hacknet.numHashes", "")) / 4);
					await Do(this.ns, "ns.hacknet.spendHashes", "Sell for Money", "", poof);
				} else {
					while (await Do(this.ns, "ns.hacknet.spendHashes", this.goal))
						this.log("Spent hashes on " + this.goal);
				}
			}
		}
	}
}

function helperScripts(ns) {
	writeIfNotSame(ns, "/temp/hack.js", `export async function main(ns) {await ns.hack(ns.args[0]);}`);
	writeIfNotSame(ns, "/temp/hackstock.js", `export async function main(ns) {await ns.hack(ns.args[0], {"stock": true});}`);
	writeIfNotSame(ns, "/temp/grow.js", `export async function main(ns) {await ns.grow(ns.args[0]);}`);
	writeIfNotSame(ns, "/temp/growstock.js", `export async function main(ns) {await ns.grow(ns.args[0], {"stock": true});}`);
	writeIfNotSame(ns, "/temp/weaken.js", `export async function main(ns) {await ns.weaken(ns.args[0]);}`);
}

export const levenshteinDistance = (str1 = '', str2 = '') => {
	const track = Array(str2.length + 1).fill(null).map(() =>
		Array(str1.length + 1).fill(null));
	for (let i = 0; i <= str1.length; i += 1) {
		track[0][i] = i;
	}
	for (let j = 0; j <= str2.length; j += 1) {
		track[j][0] = j;
	}
	for (let j = 1; j <= str2.length; j += 1) {
		for (let i = 1; i <= str1.length; i += 1) {
			const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
			track[j][i] = Math.min(
				track[j][i - 1] + 1, // deletion
				track[j - 1][i] + 1, // insertion
				track[j - 1][i - 1] + indicator, // substitution
			);
		}
	}
	return track[str2.length][str1.length];
};

export function killModal() {
	let doc = eval('document');
	let modal = doc.evaluate("//div[contains(@class,'MuiBackdrop-root')]", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
	modal[Object.keys(modal)[1]].onClick({ isTrusted: true });
}

export function jFormat(number, format = " ") {
	if (number === 0) {
		return "0.000";
	}
	let sign = number < 0 ? "-" : "";
	if (number < 0) {
		number = -number;
	}
	let exp = Math.floor(Math.log(number) / Math.log(10));
	while (10 ** exp <= number) {
		exp += 3 - (exp % 3);
	}
	exp -= 3;
	while (number >= 1000) {
		number /= 1000;
	}
	exp = Math.max(exp, 0);
	return (format.toString().includes("$") ? "$" : "") + sign + number.toFixed(3).toString() + (exp < 33 ? ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n'][Math.floor(exp / 3)] : "e" + exp.toString());
}

export function td(content, align = "LEFT") {
	return "<TD ALIGN=\"" + align + "\">" + content + "</TD>";
}

export function tr(content) {
	return "<TR VALIGN=\"TOP\">" + content + "</TR>";
}

export function timeFormat(n) {
	let seconds = n % 60;
	n = Math.floor((n - seconds) / 60 + .5);
	let minutes = n % 60;
	n = Math.floor((n - minutes) / 60 + .5);
	let hours = n;
	hours = hours.toString();
	minutes = minutes.toString();
	if (minutes.length < 2)
		minutes = "0" + minutes;
	seconds = seconds.toString();
	if (seconds.length < 2)
		seconds = "0" + seconds;
	return hours + ":" + minutes + ":" + seconds;
}

function finalform(ns) {
    let lines = ns.read("jeek.js").split("\n");
    let i = 0;
    while (i < lines.length) {
        if (i > 220 && i < 240) {
            ns.tprint(" ");
            ns.tprint(i, " ", lines[i]);
        }
        if (lines[i].includes("await Do") && !lines[i].includes("FFIGNORE") && !lines[i].includes("DoAll")) {
            let j = lines[i].search("await Do"); //FFIGNORE
            let array = [...(lines[i])];
            array.splice(j, 9);
            let nsIndex = lines[i].indexOf("ns", j);
            let nsIndex2 = lines[i].indexOf("ns", nsIndex + 3);
            if (nsIndex2 > -1) {
                array.splice(nsIndex - 9, nsIndex2 - nsIndex);
                let comma = array.indexOf('"', j) + 1;
                array.splice(array.indexOf('"', j), 1, '(');
                if (array[comma] == ",") {
                    array.splice(comma, 1);
                }
            }
            lines[i] = array.join("");
        }
        i += 1;
    }
    ns.write("finalform.js", lines.join("\n"), 'w');
}import { Do } from "Do.js";

export class Infiltrations {
    doc = {
        'getPossibleLocations': 'stuff',
        'getInfiltration': `
# Infiltration.getInfiltration() method
---
Get all infiltrations with difficulty, location and rewards.

Signature:

\`getInfiltration(location: string): InfiltrationLocation;\`

Parameters

Parameter	Type	Description
location	string	

Returns:        
InfiltrationLocation
        
Infiltration data for given location.
        
Remarks
RAM cost: 15 GB`
    };
    constructor(ns, Game, settings = {}) {
        this.ns = ns;
        this.Game = Game ? Game : new WholeGame(ns);
        this.settings = settings;
    }
    get ['getPossibleLocations']() {
        return (async () => {
			try {
				return await Do(this.ns, "ns.infiltration.getPossibleLocations");
			} catch (e) {
				return [];
			}
		})();
    }
    async ['getInfiltration'](location) {
        return (async () => {
			try {
                return await Do(this.ns, "ns.infiltration.getInfiltration", location);
            } catch (e) {
                return [];
            }
        })();
    }
}import { levenshteinDistance } from "helpers.js";

let DOCS = {"bitburner.runningscript.filename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [filename](./bitburner.runningscript.filename.md)\n\n## RunningScript.filename property\n\nFilename of the script\n\n**Signature:**\n\n```typescript\nfilename: string;\n```\n", "ns.runningscript.filename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [filename](./bitburner.runningscript.filename.md)\n\n## RunningScript.filename property\n\nFilename of the script\n\n**Signature:**\n\n```typescript\nfilename: string;\n```\n", "bitburner.bitnodemultipliers.charismalevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CharismaLevelMultiplier](./bitburner.bitnodemultipliers.charismalevelmultiplier.md)\n\n## BitNodeMultipliers.CharismaLevelMultiplier property\n\nInfluences how quickly the player's charisma level (not exp) scales\n\n**Signature:**\n\n```typescript\nCharismaLevelMultiplier: number;\n```\n", "ns.bitnodemultipliers.charismalevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CharismaLevelMultiplier](./bitburner.bitnodemultipliers.charismalevelmultiplier.md)\n\n## BitNodeMultipliers.CharismaLevelMultiplier property\n\nInfluences how quickly the player's charisma level (not exp) scales\n\n**Signature:**\n\n```typescript\nCharismaLevelMultiplier: number;\n```\n", "bitburner.infiltrationlocation.difficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md) &gt; [difficulty](./bitburner.infiltrationlocation.difficulty.md)\n\n## InfiltrationLocation.difficulty property\n\n**Signature:**\n\n```typescript\ndifficulty: number;\n```\n", "ns.infiltrationlocation.difficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md) &gt; [difficulty](./bitburner.infiltrationlocation.difficulty.md)\n\n## InfiltrationLocation.difficulty property\n\n**Signature:**\n\n```typescript\ndifficulty: number;\n```\n", "bitburner.gang.ascendmember.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [ascendMember](./bitburner.gang.ascendmember.md)\n\n## Gang.ascendMember() method\n\nAscend a gang member.\n\n**Signature:**\n\n```typescript\nascendMember(memberName: string): GangMemberAscension | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of member to ascend. |\n\n**Returns:**\n\n[GangMemberAscension](./bitburner.gangmemberascension.md) \\| undefined\n\nObject with info about the ascension results. Undefined if ascension did not occur.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAscend the specified Gang Member.\n\n", "ns.gang.ascendmember.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [ascendMember](./bitburner.gang.ascendmember.md)\n\n## Gang.ascendMember() method\n\nAscend a gang member.\n\n**Signature:**\n\n```typescript\nascendMember(memberName: string): GangMemberAscension | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of member to ascend. |\n\n**Returns:**\n\n[GangMemberAscension](./bitburner.gangmemberascension.md) \\| undefined\n\nObject with info about the ascension results. Undefined if ascension did not occur.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAscend the specified Gang Member.\n\n", "bitburner.hacknetmultipliers.production.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [production](./bitburner.hacknetmultipliers.production.md)\n\n## HacknetMultipliers.production property\n\nPlayer's hacknet production multiplier\n\n**Signature:**\n\n```typescript\nproduction: number;\n```\n", "ns.hacknetmultipliers.production.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [production](./bitburner.hacknetmultipliers.production.md)\n\n## HacknetMultipliers.production property\n\nPlayer's hacknet production multiplier\n\n**Signature:**\n\n```typescript\nproduction: number;\n```\n", "bitburner.corporationinfo.revenue.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [revenue](./bitburner.corporationinfo.revenue.md)\n\n## CorporationInfo.revenue property\n\nRevenue per second this cycle\n\n**Signature:**\n\n```typescript\nrevenue: number;\n```\n", "ns.corporationinfo.revenue.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [revenue](./bitburner.corporationinfo.revenue.md)\n\n## CorporationInfo.revenue property\n\nRevenue per second this cycle\n\n**Signature:**\n\n```typescript\nrevenue: number;\n```\n", "bitburner.ns.stanek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [stanek](./bitburner.ns.stanek.md)\n\n## NS.stanek property\n\nNamespace for stanek functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly stanek: Stanek;\n```\n", "ns.ns.stanek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [stanek](./bitburner.ns.stanek.md)\n\n## NS.stanek property\n\nNamespace for stanek functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly stanek: Stanek;\n```\n", "bitburner.bitnodemultipliers.strengthlevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [StrengthLevelMultiplier](./bitburner.bitnodemultipliers.strengthlevelmultiplier.md)\n\n## BitNodeMultipliers.StrengthLevelMultiplier property\n\nInfluences how quickly the player's strength level (not exp) scales\n\n**Signature:**\n\n```typescript\nStrengthLevelMultiplier: number;\n```\n", "ns.bitnodemultipliers.strengthlevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [StrengthLevelMultiplier](./bitburner.bitnodemultipliers.strengthlevelmultiplier.md)\n\n## BitNodeMultipliers.StrengthLevelMultiplier property\n\nInfluences how quickly the player's strength level (not exp) scales\n\n**Signature:**\n\n```typescript\nStrengthLevelMultiplier: number;\n```\n", "bitburner.netscriptport.write.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [write](./bitburner.netscriptport.write.md)\n\n## NetscriptPort.write() method\n\nWrite data to a port.\n\n**Signature:**\n\n```typescript\nwrite(value: string | number): PortData | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  value | string \\| number |  |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md) \\| null\n\nThe data popped off the queue if it was full.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.netscriptport.write.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [write](./bitburner.netscriptport.write.md)\n\n## NetscriptPort.write() method\n\nWrite data to a port.\n\n**Signature:**\n\n```typescript\nwrite(value: string | number): PortData | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  value | string \\| number |  |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md) \\| null\n\nThe data popped off the queue if it was full.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.corporation.acceptinvestmentoffer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [acceptInvestmentOffer](./bitburner.corporation.acceptinvestmentoffer.md)\n\n## Corporation.acceptInvestmentOffer() method\n\nAccept investment based on you companies current valuation\n\n**Signature:**\n\n```typescript\nacceptInvestmentOffer(): boolean;\n```\n**Returns:**\n\nboolean\n\nAn offer of investment\n\n## Remarks\n\nIs based on current valuation and will not honer a specific Offer\n\n", "ns.corporation.acceptinvestmentoffer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [acceptInvestmentOffer](./bitburner.corporation.acceptinvestmentoffer.md)\n\n## Corporation.acceptInvestmentOffer() method\n\nAccept investment based on you companies current valuation\n\n**Signature:**\n\n```typescript\nacceptInvestmentOffer(): boolean;\n```\n**Returns:**\n\nboolean\n\nAn offer of investment\n\n## Remarks\n\nIs based on current valuation and will not honer a specific Offer\n\n", "bitburner.gangmemberinfo.dex_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_asc\\_points](./bitburner.gangmemberinfo.dex_asc_points.md)\n\n## GangMemberInfo.dex\\_asc\\_points property\n\nTotal earned dexterity experience\n\n**Signature:**\n\n```typescript\ndex_asc_points: number;\n```\n", "ns.gangmemberinfo.dex_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_asc\\_points](./bitburner.gangmemberinfo.dex_asc_points.md)\n\n## GangMemberInfo.dex\\_asc\\_points property\n\nTotal earned dexterity experience\n\n**Signature:**\n\n```typescript\ndex_asc_points: number;\n```\n", "bitburner.corpresearchname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpResearchName](./bitburner.corpresearchname.md)\n\n## CorpResearchName type\n\n\n**Signature:**\n\n```typescript\ntype CorpResearchName =\n  | \"Hi-Tech R&D Laboratory\"\n  | \"AutoBrew\"\n  | \"AutoPartyManager\"\n  | \"Automatic Drug Administration\"\n  | \"Bulk Purchasing\"\n  | \"CPH4 Injections\"\n  | \"Drones\"\n  | \"Drones - Assembly\"\n  | \"Drones - Transport\"\n  | \"Go-Juice\"\n  | \"HRBuddy-Recruitment\"\n  | \"HRBuddy-Training\"\n  | \"JoyWire\"\n  | \"Market-TA.I\"\n  | \"Market-TA.II\"\n  | \"Overclock\"\n  | \"Self-Correcting Assemblers\"\n  | \"Sti.mu\"\n  | \"uPgrade: Capacity.I\"\n  | \"uPgrade: Capacity.II\"\n  | \"uPgrade: Dashboard\"\n  | \"uPgrade: Fulcrum\"\n  | \"sudo.Assist\";\n```\n", "ns.corpresearchname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpResearchName](./bitburner.corpresearchname.md)\n\n## CorpResearchName type\n\n\n**Signature:**\n\n```typescript\ntype CorpResearchName =\n  | \"Hi-Tech R&D Laboratory\"\n  | \"AutoBrew\"\n  | \"AutoPartyManager\"\n  | \"Automatic Drug Administration\"\n  | \"Bulk Purchasing\"\n  | \"CPH4 Injections\"\n  | \"Drones\"\n  | \"Drones - Assembly\"\n  | \"Drones - Transport\"\n  | \"Go-Juice\"\n  | \"HRBuddy-Recruitment\"\n  | \"HRBuddy-Training\"\n  | \"JoyWire\"\n  | \"Market-TA.I\"\n  | \"Market-TA.II\"\n  | \"Overclock\"\n  | \"Self-Correcting Assemblers\"\n  | \"Sti.mu\"\n  | \"uPgrade: Capacity.I\"\n  | \"uPgrade: Capacity.II\"\n  | \"uPgrade: Dashboard\"\n  | \"uPgrade: Fulcrum\"\n  | \"sudo.Assist\";\n```\n", "bitburner.hacknet.upgradelevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeLevel](./bitburner.hacknet.upgradelevel.md)\n\n## Hacknet.upgradeLevel() method\n\nUpgrade the level of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeLevel(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of levels to purchase. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s level is successfully upgraded, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nTries to upgrade the level of the specified Hacknet Node by n.\n\nReturns true if the Hacknet Node\u2019s level is successfully upgraded by n or if it is upgraded by some positive amount and the Node reaches its max level.\n\nReturns false otherwise.\n\n", "ns.hacknet.upgradelevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeLevel](./bitburner.hacknet.upgradelevel.md)\n\n## Hacknet.upgradeLevel() method\n\nUpgrade the level of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeLevel(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of levels to purchase. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s level is successfully upgraded, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nTries to upgrade the level of the specified Hacknet Node by n.\n\nReturns true if the Hacknet Node\u2019s level is successfully upgraded by n or if it is upgraded by some positive amount and the Node reaches its max level.\n\nReturns false otherwise.\n\n", "bitburner.ns.codingcontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [codingcontract](./bitburner.ns.codingcontract.md)\n\n## NS.codingcontract property\n\nNamespace for codingcontract functions.\n\n**Signature:**\n\n```typescript\nreadonly codingcontract: CodingContract;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.codingcontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [codingcontract](./bitburner.ns.codingcontract.md)\n\n## NS.codingcontract property\n\nNamespace for codingcontract functions.\n\n**Signature:**\n\n```typescript\nreadonly codingcontract: CodingContract;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.tix.getorganization.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getOrganization](./bitburner.tix.getorganization.md)\n\n## TIX.getOrganization() method\n\nReturns the organization associated with a stock symbol.\n\n**Signature:**\n\n```typescript\ngetOrganization(sym: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nstring\n\nThe organization assicated with the stock symbol.\n\n## Remarks\n\nRAM cost: 2 GB\n\nThe organization associated with the corresponding stock symbol. This function requires that you have the following:\n\n1. WSE Account\n\n1. TIX API Access\n\n## Example 1\n\n\n```ts\n// NS1\nstock.getOrganization(\"FSIG\");\n\n// Choose the first stock symbol from the array of stock symbols. Get the\n// organization associated with the corresponding stock symbol\nvar sym = stock.getSymbols()[0];\ntprint(\"Stock symbol: \" + sym);\ntprint(\"Stock organization: \" + stock.getOrganization(sym));\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.stock.getOrganization(\"FSIG\");\n\n// Choose the first stock symbol from the array of stock symbols. Get the\n// organization associated with the corresponding stock symbol.\nconst sym = ns.stock.getSymbols()[0];\nns.tprint(\"Stock symbol: \" + sym);\nns.tprint(\"Stock organization: \" + ns.stock.getOrganization(sym));\n```\n\n", "ns.tix.getorganization.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getOrganization](./bitburner.tix.getorganization.md)\n\n## TIX.getOrganization() method\n\nReturns the organization associated with a stock symbol.\n\n**Signature:**\n\n```typescript\ngetOrganization(sym: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nstring\n\nThe organization assicated with the stock symbol.\n\n## Remarks\n\nRAM cost: 2 GB\n\nThe organization associated with the corresponding stock symbol. This function requires that you have the following:\n\n1. WSE Account\n\n1. TIX API Access\n\n## Example 1\n\n\n```ts\n// NS1\nstock.getOrganization(\"FSIG\");\n\n// Choose the first stock symbol from the array of stock symbols. Get the\n// organization associated with the corresponding stock symbol\nvar sym = stock.getSymbols()[0];\ntprint(\"Stock symbol: \" + sym);\ntprint(\"Stock organization: \" + stock.getOrganization(sym));\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.stock.getOrganization(\"FSIG\");\n\n// Choose the first stock symbol from the array of stock symbols. Get the\n// organization associated with the corresponding stock symbol.\nconst sym = ns.stock.getSymbols()[0];\nns.tprint(\"Stock symbol: \" + sym);\nns.tprint(\"Stock organization: \" + ns.stock.getOrganization(sym));\n```\n\n", "bitburner.corporationinfo.issuedshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [issuedShares](./bitburner.corporationinfo.issuedshares.md)\n\n## CorporationInfo.issuedShares property\n\nAmount of acquirable shares.\n\n**Signature:**\n\n```typescript\nissuedShares: number;\n```\n", "ns.corporationinfo.issuedshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [issuedShares](./bitburner.corporationinfo.issuedshares.md)\n\n## CorporationInfo.issuedShares property\n\nAmount of acquirable shares.\n\n**Signature:**\n\n```typescript\nissuedShares: number;\n```\n", "bitburner.corporation.hasunlockupgrade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [hasUnlockUpgrade](./bitburner.corporation.hasunlockupgrade.md)\n\n## Corporation.hasUnlockUpgrade() method\n\nCheck if you have a one time unlockable upgrade\n\n**Signature:**\n\n```typescript\nhasUnlockUpgrade(upgradeName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nboolean\n\ntrue if unlocked and false if not\n\n", "ns.corporation.hasunlockupgrade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [hasUnlockUpgrade](./bitburner.corporation.hasunlockupgrade.md)\n\n## Corporation.hasUnlockUpgrade() method\n\nCheck if you have a one time unlockable upgrade\n\n**Signature:**\n\n```typescript\nhasUnlockUpgrade(upgradeName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nboolean\n\ntrue if unlocked and false if not\n\n", "bitburner.corporationinfo.dividendearnings.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [dividendEarnings](./bitburner.corporationinfo.dividendearnings.md)\n\n## CorporationInfo.dividendEarnings property\n\nYour earnings as a shareholder per second this cycle\n\n**Signature:**\n\n```typescript\ndividendEarnings: number;\n```\n", "ns.corporationinfo.dividendearnings.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [dividendEarnings](./bitburner.corporationinfo.dividendearnings.md)\n\n## CorporationInfo.dividendEarnings property\n\nYour earnings as a shareholder per second this cycle\n\n**Signature:**\n\n```typescript\ndividendEarnings: number;\n```\n", "bitburner.warehouseapi.getmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getMaterial](./bitburner.warehouseapi.getmaterial.md)\n\n## WarehouseAPI.getMaterial() method\n\nGet material data\n\n**Signature:**\n\n```typescript\ngetMaterial(divisionName: string, city: CityName | `${CityName}`, materialName: string): Material;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n\n**Returns:**\n\n[Material](./bitburner.material.md)\n\nmaterial data\n\n", "ns.warehouseapi.getmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getMaterial](./bitburner.warehouseapi.getmaterial.md)\n\n## WarehouseAPI.getMaterial() method\n\nGet material data\n\n**Signature:**\n\n```typescript\ngetMaterial(divisionName: string, city: CityName | `${CityName}`, materialName: string): Material;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n\n**Returns:**\n\n[Material](./bitburner.material.md)\n\nmaterial data\n\n", "bitburner.gangtaskstats.chaweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [chaWeight](./bitburner.gangtaskstats.chaweight.md)\n\n## GangTaskStats.chaWeight property\n\nCharisma skill impact on task scaling\n\n**Signature:**\n\n```typescript\nchaWeight: number;\n```\n", "ns.gangtaskstats.chaweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [chaWeight](./bitburner.gangtaskstats.chaweight.md)\n\n## GangTaskStats.chaWeight property\n\nCharisma skill impact on task scaling\n\n**Signature:**\n\n```typescript\nchaWeight: number;\n```\n", "bitburner.workformulas.universitygains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [universityGains](./bitburner.workformulas.universitygains.md)\n\n## WorkFormulas.universityGains() method\n\n**Signature:**\n\n```typescript\nuniversityGains(\n    person: Person,\n    classType: UniversityClassType | `${UniversityClassType}`,\n    locationName: string,\n  ): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  classType | [UniversityClassType](./bitburner.universityclasstype.md) \\| \\`${[UniversityClassType](./bitburner.universityclasstype.md)<!-- -->}\\` |  |\n|  locationName | string |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by taking the specified university class.\n\n", "ns.workformulas.universitygains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [universityGains](./bitburner.workformulas.universitygains.md)\n\n## WorkFormulas.universityGains() method\n\n**Signature:**\n\n```typescript\nuniversityGains(\n    person: Person,\n    classType: UniversityClassType | `${UniversityClassType}`,\n    locationName: string,\n  ): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  classType | [UniversityClassType](./bitburner.universityclasstype.md) \\| \\`${[UniversityClassType](./bitburner.universityclasstype.md)<!-- -->}\\` |  |\n|  locationName | string |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by taking the specified university class.\n\n", "bitburner.gang.getchancetowinclash.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getChanceToWinClash](./bitburner.gang.getchancetowinclash.md)\n\n## Gang.getChanceToWinClash() method\n\nGet chance to win clash with other gang.\n\n**Signature:**\n\n```typescript\ngetChanceToWinClash(gangName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gangName | string | Target gang |\n\n**Returns:**\n\nnumber\n\nChance you have to win a clash with the specified gang.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the chance you have to win a clash with the specified gang. The chance is returned in decimal form, not percentage\n\n", "ns.gang.getchancetowinclash.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getChanceToWinClash](./bitburner.gang.getchancetowinclash.md)\n\n## Gang.getChanceToWinClash() method\n\nGet chance to win clash with other gang.\n\n**Signature:**\n\n```typescript\ngetChanceToWinClash(gangName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gangName | string | Target gang |\n\n**Returns:**\n\nnumber\n\nChance you have to win a clash with the specified gang.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the chance you have to win a clash with the specified gang. The chance is returned in decimal form, not percentage\n\n", "bitburner.corporation.getbonustime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getBonusTime](./bitburner.corporation.getbonustime.md)\n\n## Corporation.getBonusTime() method\n\nGet bonus time. \u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser. \u201cBonus time\u201d makes the game progress faster.\n\n**Signature:**\n\n```typescript\ngetBonusTime(): number;\n```\n**Returns:**\n\nnumber\n\nBonus time for the Corporation mechanic in milliseconds.\n\n", "ns.corporation.getbonustime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getBonusTime](./bitburner.corporation.getbonustime.md)\n\n## Corporation.getBonusTime() method\n\nGet bonus time. \u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser. \u201cBonus time\u201d makes the game progress faster.\n\n**Signature:**\n\n```typescript\ngetBonusTime(): number;\n```\n**Returns:**\n\nnumber\n\nBonus time for the Corporation mechanic in milliseconds.\n\n", "bitburner.corpmaterialconstantdata.size.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [size](./bitburner.corpmaterialconstantdata.size.md)\n\n## CorpMaterialConstantData.size property\n\nSize of the material\n\n**Signature:**\n\n```typescript\nsize: number;\n```\n", "ns.corpmaterialconstantdata.size.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [size](./bitburner.corpmaterialconstantdata.size.md)\n\n## CorpMaterialConstantData.size property\n\nSize of the material\n\n**Signature:**\n\n```typescript\nsize: number;\n```\n", "bitburner.corpproductdata.desc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [desc](./bitburner.corpproductdata.desc.md)\n\n## CorpProductData.desc property\n\nDescription of product creation\n\n**Signature:**\n\n```typescript\ndesc: string;\n```\n", "ns.corpproductdata.desc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [desc](./bitburner.corpproductdata.desc.md)\n\n## CorpProductData.desc property\n\nDescription of product creation\n\n**Signature:**\n\n```typescript\ndesc: string;\n```\n", "bitburner.gangtaskstats.dexweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [dexWeight](./bitburner.gangtaskstats.dexweight.md)\n\n## GangTaskStats.dexWeight property\n\nDexterity skill impact on task scaling\n\n**Signature:**\n\n```typescript\ndexWeight: number;\n```\n", "ns.gangtaskstats.dexweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [dexWeight](./bitburner.gangtaskstats.dexweight.md)\n\n## GangTaskStats.dexWeight property\n\nDexterity skill impact on task scaling\n\n**Signature:**\n\n```typescript\ndexWeight: number;\n```\n", "bitburner.userinterfacetheme.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [hack](./bitburner.userinterfacetheme.hack.md)\n\n## UserInterfaceTheme.hack property\n\n**Signature:**\n\n```typescript\nhack: string;\n```\n", "ns.userinterfacetheme.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [hack](./bitburner.userinterfacetheme.hack.md)\n\n## UserInterfaceTheme.hack property\n\n**Signature:**\n\n```typescript\nhack: string;\n```\n", "bitburner.corpconstants.maxproductsbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [maxProductsBase](./bitburner.corpconstants.maxproductsbase.md)\n\n## CorpConstants.maxProductsBase property\n\nMax products for a division without upgrades\n\n**Signature:**\n\n```typescript\nmaxProductsBase: number;\n```\n", "ns.corpconstants.maxproductsbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [maxProductsBase](./bitburner.corpconstants.maxproductsbase.md)\n\n## CorpConstants.maxProductsBase property\n\nMax products for a division without upgrades\n\n**Signature:**\n\n```typescript\nmaxProductsBase: number;\n```\n", "bitburner.singularity.purchaseaugmentation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [purchaseAugmentation](./bitburner.singularity.purchaseaugmentation.md)\n\n## Singularity.purchaseAugmentation() method\n\nPurchase an augmentation\n\n**Signature:**\n\n```typescript\npurchaseAugmentation(faction: string, augmentation: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to purchase Augmentation from. |\n|  augmentation | string | Name of Augmentation to purchase. |\n\n**Returns:**\n\nboolean\n\nTrue if the Augmentation is successfully purchased, and false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will try to purchase the specified Augmentation through the given Faction.\n\nThis function will return true if the Augmentation is successfully purchased, and false otherwise.\n\n", "ns.singularity.purchaseaugmentation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [purchaseAugmentation](./bitburner.singularity.purchaseaugmentation.md)\n\n## Singularity.purchaseAugmentation() method\n\nPurchase an augmentation\n\n**Signature:**\n\n```typescript\npurchaseAugmentation(faction: string, augmentation: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to purchase Augmentation from. |\n|  augmentation | string | Name of Augmentation to purchase. |\n\n**Returns:**\n\nboolean\n\nTrue if the Augmentation is successfully purchased, and false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will try to purchase the specified Augmentation through the given Faction.\n\nThis function will return true if the Augmentation is successfully purchased, and false otherwise.\n\n", "bitburner.warehouseapi.discontinueproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [discontinueProduct](./bitburner.warehouseapi.discontinueproduct.md)\n\n## WarehouseAPI.discontinueProduct() method\n\nDiscontinue a product.\n\n**Signature:**\n\n```typescript\ndiscontinueProduct(divisionName: string, productName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.discontinueproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [discontinueProduct](./bitburner.warehouseapi.discontinueproduct.md)\n\n## WarehouseAPI.discontinueProduct() method\n\nDiscontinue a product.\n\n**Signature:**\n\n```typescript\ndiscontinueProduct(divisionName: string, productName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n\n**Returns:**\n\nvoid\n\n", "bitburner.crimestats.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [money](./bitburner.crimestats.money.md)\n\n## CrimeStats.money property\n\nHow much money is given\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "ns.crimestats.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [money](./bitburner.crimestats.money.md)\n\n## CrimeStats.money property\n\nHow much money is given\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "bitburner.ilocation.city.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ILocation](./bitburner.ilocation.md) &gt; [city](./bitburner.ilocation.city.md)\n\n## ILocation.city property\n\n**Signature:**\n\n```typescript\ncity: CityName;\n```\n", "ns.ilocation.city.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ILocation](./bitburner.ilocation.md) &gt; [city](./bitburner.ilocation.city.md)\n\n## ILocation.city property\n\n**Signature:**\n\n```typescript\ncity: CityName;\n```\n", "bitburner.multipliers.bladeburner_success_chance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_success\\_chance](./bitburner.multipliers.bladeburner_success_chance.md)\n\n## Multipliers.bladeburner\\_success\\_chance property\n\nMultiplier to success chance in Bladeburner contracts/operations\n\n**Signature:**\n\n```typescript\nbladeburner_success_chance: number;\n```\n", "ns.multipliers.bladeburner_success_chance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_success\\_chance](./bitburner.multipliers.bladeburner_success_chance.md)\n\n## Multipliers.bladeburner\\_success\\_chance property\n\nMultiplier to success chance in Bladeburner contracts/operations\n\n**Signature:**\n\n```typescript\nbladeburner_success_chance: number;\n```\n", "bitburner.hacknetserversformulas.levelupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [levelUpgradeCost](./bitburner.hacknetserversformulas.levelupgradecost.md)\n\n## HacknetServersFormulas.levelUpgradeCost() method\n\nCalculate cost of upgrading hacknet server level.\n\n**Signature:**\n\n```typescript\nlevelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingLevel | number | starting level |\n|  extraLevels | number | _(Optional)_ amount of level to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetserversformulas.levelupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [levelUpgradeCost](./bitburner.hacknetserversformulas.levelupgradecost.md)\n\n## HacknetServersFormulas.levelUpgradeCost() method\n\nCalculate cost of upgrading hacknet server level.\n\n**Signature:**\n\n```typescript\nlevelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingLevel | number | starting level |\n|  extraLevels | number | _(Optional)_ amount of level to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.basichgwoptions.threads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BasicHGWOptions](./bitburner.basichgwoptions.md) &gt; [threads](./bitburner.basichgwoptions.threads.md)\n\n## BasicHGWOptions.threads property\n\nNumber of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\n\n**Signature:**\n\n```typescript\nthreads?: number;\n```\n", "ns.basichgwoptions.threads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BasicHGWOptions](./bitburner.basichgwoptions.md) &gt; [threads](./bitburner.basichgwoptions.threads.md)\n\n## BasicHGWOptions.threads property\n\nNumber of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\n\n**Signature:**\n\n```typescript\nthreads?: number;\n```\n", "bitburner.singularity.upgradehomeram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [upgradeHomeRam](./bitburner.singularity.upgradehomeram.md)\n\n## Singularity.upgradeHomeRam() method\n\nUpgrade home computer RAM.\n\n**Signature:**\n\n```typescript\nupgradeHomeRam(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player\u2019s home computer RAM is successfully upgraded, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will upgrade amount of RAM on the player\u2019s home computer. The cost is the same as if you were to do it manually.\n\nThis function will return true if the player\u2019s home computer RAM is successfully upgraded, and false otherwise.\n\n", "ns.singularity.upgradehomeram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [upgradeHomeRam](./bitburner.singularity.upgradehomeram.md)\n\n## Singularity.upgradeHomeRam() method\n\nUpgrade home computer RAM.\n\n**Signature:**\n\n```typescript\nupgradeHomeRam(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player\u2019s home computer RAM is successfully upgraded, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will upgrade amount of RAM on the player\u2019s home computer. The cost is the same as if you were to do it manually.\n\nThis function will return true if the player\u2019s home computer RAM is successfully upgraded, and false otherwise.\n\n", "bitburner.filenameorpid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [FilenameOrPID](./bitburner.filenameorpid.md)\n\n## FilenameOrPID type\n\n\n**Signature:**\n\n```typescript\ntype FilenameOrPID = number | string;\n```\n", "ns.filenameorpid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [FilenameOrPID](./bitburner.filenameorpid.md)\n\n## FilenameOrPID type\n\n\n**Signature:**\n\n```typescript\ntype FilenameOrPID = number | string;\n```\n", "bitburner.hacknetserverconstants.hashesperlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [HashesPerLevel](./bitburner.hacknetserverconstants.hashesperlevel.md)\n\n## HacknetServerConstants.HashesPerLevel property\n\nNumber of hashes calculated per level\n\n**Signature:**\n\n```typescript\nHashesPerLevel: number;\n```\n", "ns.hacknetserverconstants.hashesperlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [HashesPerLevel](./bitburner.hacknetserverconstants.hashesperlevel.md)\n\n## HacknetServerConstants.HashesPerLevel property\n\nNumber of hashes calculated per level\n\n**Signature:**\n\n```typescript\nHashesPerLevel: number;\n```\n", "bitburner.gangterritory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md)\n\n## GangTerritory interface\n\n\n**Signature:**\n\n```typescript\ninterface GangTerritory \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [money](./bitburner.gangterritory.money.md) |  | number | Money gain impact on task scaling |\n|  [respect](./bitburner.gangterritory.respect.md) |  | number | Respect gain impact on task scaling |\n|  [wanted](./bitburner.gangterritory.wanted.md) |  | number | Wanted gain impact on task scaling |\n\n", "ns.gangterritory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md)\n\n## GangTerritory interface\n\n\n**Signature:**\n\n```typescript\ninterface GangTerritory \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [money](./bitburner.gangterritory.money.md) |  | number | Money gain impact on task scaling |\n|  [respect](./bitburner.gangterritory.respect.md) |  | number | Respect gain impact on task scaling |\n|  [wanted](./bitburner.gangterritory.wanted.md) |  | number | Wanted gain impact on task scaling |\n\n", "bitburner.office.loc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [loc](./bitburner.office.loc.md)\n\n## Office.loc property\n\nCity of the office\n\n**Signature:**\n\n```typescript\nloc: CityName;\n```\n", "ns.office.loc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [loc](./bitburner.office.loc.md)\n\n## Office.loc property\n\nCity of the office\n\n**Signature:**\n\n```typescript\nloc: CityName;\n```\n", "bitburner.skills.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [hacking](./bitburner.skills.hacking.md)\n\n## Skills.hacking property\n\n**Signature:**\n\n```typescript\nhacking: number;\n```\n", "ns.skills.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [hacking](./bitburner.skills.hacking.md)\n\n## Skills.hacking property\n\n**Signature:**\n\n```typescript\nhacking: number;\n```\n", "bitburner.player.location.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [location](./bitburner.player.location.md)\n\n## Player.location property\n\n**Signature:**\n\n```typescript\nlocation: string;\n```\n", "ns.player.location.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [location](./bitburner.player.location.md)\n\n## Player.location property\n\n**Signature:**\n\n```typescript\nlocation: string;\n```\n", "bitburner.istylesettings.fontfamily.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IStyleSettings](./bitburner.istylesettings.md) &gt; [fontFamily](./bitburner.istylesettings.fontfamily.md)\n\n## IStyleSettings.fontFamily property\n\n**Signature:**\n\n```typescript\nfontFamily: string;\n```\n", "ns.istylesettings.fontfamily.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IStyleSettings](./bitburner.istylesettings.md) &gt; [fontFamily](./bitburner.istylesettings.fontfamily.md)\n\n## IStyleSettings.fontFamily property\n\n**Signature:**\n\n```typescript\nfontFamily: string;\n```\n", "bitburner.gangmemberinfo.hack_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_asc\\_points](./bitburner.gangmemberinfo.hack_asc_points.md)\n\n## GangMemberInfo.hack\\_asc\\_points property\n\nTotal earned hack experience\n\n**Signature:**\n\n```typescript\nhack_asc_points: number;\n```\n", "ns.gangmemberinfo.hack_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_asc\\_points](./bitburner.gangmemberinfo.hack_asc_points.md)\n\n## GangMemberInfo.hack\\_asc\\_points property\n\nTotal earned hack experience\n\n**Signature:**\n\n```typescript\nhack_asc_points: number;\n```\n", "bitburner.ns.mv.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [mv](./bitburner.ns.mv.md)\n\n## NS.mv() method\n\nMove a file on the target server.\n\n**Signature:**\n\n```typescript\nmv(host: string, source: string, destination: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n|  source | string | Filename of the source file. |\n|  destination | string | Filename of the destination file. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nNS2 exclusive.\n\nMove the source file to the specified destination on the target server.\n\nThis command only works for scripts and text files (.txt). It cannot, however, be used to convert from script to text file, or vice versa.\n\nThis function can also be used to rename files.\n\n", "ns.ns.mv.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [mv](./bitburner.ns.mv.md)\n\n## NS.mv() method\n\nMove a file on the target server.\n\n**Signature:**\n\n```typescript\nmv(host: string, source: string, destination: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n|  source | string | Filename of the source file. |\n|  destination | string | Filename of the destination file. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nNS2 exclusive.\n\nMove the source file to the specified destination on the target server.\n\nThis command only works for scripts and text files (.txt). It cannot, however, be used to convert from script to text file, or vice versa.\n\nThis function can also be used to rename files.\n\n", "bitburner.singularity.checkfactioninvitations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [checkFactionInvitations](./bitburner.singularity.checkfactioninvitations.md)\n\n## Singularity.checkFactionInvitations() method\n\nList all current faction invitations.\n\n**Signature:**\n\n```typescript\ncheckFactionInvitations(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray with the name of all Factions you currently have outstanding invitations from.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nReturns an array with the name of all Factions you currently have outstanding invitations from.\n\n", "ns.singularity.checkfactioninvitations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [checkFactionInvitations](./bitburner.singularity.checkfactioninvitations.md)\n\n## Singularity.checkFactionInvitations() method\n\nList all current faction invitations.\n\n**Signature:**\n\n```typescript\ncheckFactionInvitations(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray with the name of all Factions you currently have outstanding invitations from.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nReturns an array with the name of all Factions you currently have outstanding invitations from.\n\n", "bitburner.ns.ftpcrack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ftpcrack](./bitburner.ns.ftpcrack.md)\n\n## NS.ftpcrack() method\n\nRuns FTPCrack.exe on a server.\n\n**Signature:**\n\n```typescript\nftpcrack(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the FTPCrack.exe program on the target server. FTPCrack.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nftpcrack(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.ftpcrack(\"foodnstuff\");\n```\n\n", "ns.ns.ftpcrack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ftpcrack](./bitburner.ns.ftpcrack.md)\n\n## NS.ftpcrack() method\n\nRuns FTPCrack.exe on a server.\n\n**Signature:**\n\n```typescript\nftpcrack(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the FTPCrack.exe program on the target server. FTPCrack.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nftpcrack(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.ftpcrack(\"foodnstuff\");\n```\n\n", "bitburner.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md)\n\n## Gang interface\n\nGang API\n\n**Signature:**\n\n```typescript\nexport interface Gang \n```\n\n## Remarks\n\nIf you are not in BitNode-2, then you must have Source-File 2 in order to use this API.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [ascendMember(memberName)](./bitburner.gang.ascendmember.md) | Ascend a gang member. |\n|  [canRecruitMember()](./bitburner.gang.canrecruitmember.md) | Check if you can recruit a new gang member. |\n|  [createGang(faction)](./bitburner.gang.creategang.md) | Create a gang. |\n|  [getAscensionResult(memberName)](./bitburner.gang.getascensionresult.md) | Get the result of an ascension without ascending. |\n|  [getBonusTime()](./bitburner.gang.getbonustime.md) | Get bonus time. |\n|  [getChanceToWinClash(gangName)](./bitburner.gang.getchancetowinclash.md) | Get chance to win clash with other gang. |\n|  [getEquipmentCost(equipName)](./bitburner.gang.getequipmentcost.md) | Get cost of equipment. |\n|  [getEquipmentNames()](./bitburner.gang.getequipmentnames.md) | List equipment names. |\n|  [getEquipmentStats(equipName)](./bitburner.gang.getequipmentstats.md) | Get stats of an equipment. |\n|  [getEquipmentType(equipName)](./bitburner.gang.getequipmenttype.md) | Get type of an equipment. |\n|  [getGangInformation()](./bitburner.gang.getganginformation.md) | Get information about your gang. |\n|  [getMemberInformation(name)](./bitburner.gang.getmemberinformation.md) | Get information about a specific gang member. |\n|  [getMemberNames()](./bitburner.gang.getmembernames.md) | List all gang members. |\n|  [getOtherGangInformation()](./bitburner.gang.getotherganginformation.md) | Get information about the other gangs. |\n|  [getTaskNames()](./bitburner.gang.gettasknames.md) | List member task names. |\n|  [getTaskStats(name)](./bitburner.gang.gettaskstats.md) | Get stats of a task. |\n|  [inGang()](./bitburner.gang.ingang.md) | Check if you're in a gang. |\n|  [purchaseEquipment(memberName, equipName)](./bitburner.gang.purchaseequipment.md) | Purchase an equipment for a gang member. |\n|  [recruitMember(name)](./bitburner.gang.recruitmember.md) | Recruit a new gang member. |\n|  [setMemberTask(memberName, taskName)](./bitburner.gang.setmembertask.md) | Set gang member to task. |\n|  [setTerritoryWarfare(engage)](./bitburner.gang.setterritorywarfare.md) | Enable/Disable territory warfare. |\n\n", "ns.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md)\n\n## Gang interface\n\nGang API\n\n**Signature:**\n\n```typescript\nexport interface Gang \n```\n\n## Remarks\n\nIf you are not in BitNode-2, then you must have Source-File 2 in order to use this API.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [ascendMember(memberName)](./bitburner.gang.ascendmember.md) | Ascend a gang member. |\n|  [canRecruitMember()](./bitburner.gang.canrecruitmember.md) | Check if you can recruit a new gang member. |\n|  [createGang(faction)](./bitburner.gang.creategang.md) | Create a gang. |\n|  [getAscensionResult(memberName)](./bitburner.gang.getascensionresult.md) | Get the result of an ascension without ascending. |\n|  [getBonusTime()](./bitburner.gang.getbonustime.md) | Get bonus time. |\n|  [getChanceToWinClash(gangName)](./bitburner.gang.getchancetowinclash.md) | Get chance to win clash with other gang. |\n|  [getEquipmentCost(equipName)](./bitburner.gang.getequipmentcost.md) | Get cost of equipment. |\n|  [getEquipmentNames()](./bitburner.gang.getequipmentnames.md) | List equipment names. |\n|  [getEquipmentStats(equipName)](./bitburner.gang.getequipmentstats.md) | Get stats of an equipment. |\n|  [getEquipmentType(equipName)](./bitburner.gang.getequipmenttype.md) | Get type of an equipment. |\n|  [getGangInformation()](./bitburner.gang.getganginformation.md) | Get information about your gang. |\n|  [getMemberInformation(name)](./bitburner.gang.getmemberinformation.md) | Get information about a specific gang member. |\n|  [getMemberNames()](./bitburner.gang.getmembernames.md) | List all gang members. |\n|  [getOtherGangInformation()](./bitburner.gang.getotherganginformation.md) | Get information about the other gangs. |\n|  [getTaskNames()](./bitburner.gang.gettasknames.md) | List member task names. |\n|  [getTaskStats(name)](./bitburner.gang.gettaskstats.md) | Get stats of a task. |\n|  [inGang()](./bitburner.gang.ingang.md) | Check if you're in a gang. |\n|  [purchaseEquipment(memberName, equipName)](./bitburner.gang.purchaseequipment.md) | Purchase an equipment for a gang member. |\n|  [recruitMember(name)](./bitburner.gang.recruitmember.md) | Recruit a new gang member. |\n|  [setMemberTask(memberName, taskName)](./bitburner.gang.setmembertask.md) | Set gang member to task. |\n|  [setTerritoryWarfare(engage)](./bitburner.gang.setterritorywarfare.md) | Enable/Disable territory warfare. |\n\n", "bitburner.hacknetmultipliers.levelcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [levelCost](./bitburner.hacknetmultipliers.levelcost.md)\n\n## HacknetMultipliers.levelCost property\n\nPlayer's hacknet level cost multiplier\n\n**Signature:**\n\n```typescript\nlevelCost: number;\n```\n", "ns.hacknetmultipliers.levelcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [levelCost](./bitburner.hacknetmultipliers.levelcost.md)\n\n## HacknetMultipliers.levelCost property\n\nPlayer's hacknet level cost multiplier\n\n**Signature:**\n\n```typescript\nlevelCost: number;\n```\n", "bitburner.equipmentstats.dex.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [dex](./bitburner.equipmentstats.dex.md)\n\n## EquipmentStats.dex property\n\nDexterity multiplier\n\n**Signature:**\n\n```typescript\ndex?: number;\n```\n", "ns.equipmentstats.dex.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [dex](./bitburner.equipmentstats.dex.md)\n\n## EquipmentStats.dex property\n\nDexterity multiplier\n\n**Signature:**\n\n```typescript\ndex?: number;\n```\n", "bitburner.runningscript.onlinerunningtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [onlineRunningTime](./bitburner.runningscript.onlinerunningtime.md)\n\n## RunningScript.onlineRunningTime property\n\nNumber of seconds that this script has been running online\n\n**Signature:**\n\n```typescript\nonlineRunningTime: number;\n```\n", "ns.runningscript.onlinerunningtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [onlineRunningTime](./bitburner.runningscript.onlinerunningtime.md)\n\n## RunningScript.onlineRunningTime property\n\nNumber of seconds that this script has been running online\n\n**Signature:**\n\n```typescript\nonlineRunningTime: number;\n```\n", "bitburner.ns.enablelog.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [enableLog](./bitburner.ns.enablelog.md)\n\n## NS.enableLog() method\n\nEnable logging for a certain function.\n\n**Signature:**\n\n```typescript\nenableLog(fn: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | Name of function for which to enable logging. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nRe-enables logging for the given function. If `ALL` is passed into this function as an argument, then it will revert the effects of disableLog(`ALL`<!-- -->).\n\n", "ns.ns.enablelog.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [enableLog](./bitburner.ns.enablelog.md)\n\n## NS.enableLog() method\n\nEnable logging for a certain function.\n\n**Signature:**\n\n```typescript\nenableLog(fn: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | Name of function for which to enable logging. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nRe-enables logging for the given function. If `ALL` is passed into this function as an argument, then it will revert the effects of disableLog(`ALL`<!-- -->).\n\n", "bitburner.ganggeninfo.respect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [respect](./bitburner.ganggeninfo.respect.md)\n\n## GangGenInfo.respect property\n\nGang's respect\n\n**Signature:**\n\n```typescript\nrespect: number;\n```\n", "ns.ganggeninfo.respect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [respect](./bitburner.ganggeninfo.respect.md)\n\n## GangGenInfo.respect property\n\nGang's respect\n\n**Signature:**\n\n```typescript\nrespect: number;\n```\n", "bitburner.multipliers.charisma.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [charisma](./bitburner.multipliers.charisma.md)\n\n## Multipliers.charisma property\n\nMultiplier to charisma skill\n\n**Signature:**\n\n```typescript\ncharisma: number;\n```\n", "ns.multipliers.charisma.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [charisma](./bitburner.multipliers.charisma.md)\n\n## Multipliers.charisma property\n\nMultiplier to charisma skill\n\n**Signature:**\n\n```typescript\ncharisma: number;\n```\n", "bitburner.ns.gethackinglevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHackingLevel](./bitburner.ns.gethackinglevel.md)\n\n## NS.getHackingLevel() method\n\nReturns the player\u2019s current hacking level.\n\n**Signature:**\n\n```typescript\ngetHackingLevel(): number;\n```\n**Returns:**\n\nnumber\n\nPlayer\u2019s current hacking level\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.gethackinglevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHackingLevel](./bitburner.ns.gethackinglevel.md)\n\n## NS.getHackingLevel() method\n\nReturns the player\u2019s current hacking level.\n\n**Signature:**\n\n```typescript\ngetHackingLevel(): number;\n```\n**Returns:**\n\nnumber\n\nPlayer\u2019s current hacking level\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.userinterface.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md)\n\n## UserInterface interface\n\nUser Interface API.\n\n**Signature:**\n\n```typescript\ninterface UserInterface \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [clearTerminal()](./bitburner.userinterface.clearterminal.md) | Clear the Terminal window, as if the player ran <code>clear</code> in the terminal |\n|  [getGameInfo()](./bitburner.userinterface.getgameinfo.md) | Gets the current game information (version, commit, ...) |\n|  [getStyles()](./bitburner.userinterface.getstyles.md) | Get the current styles |\n|  [getTheme()](./bitburner.userinterface.gettheme.md) | Get the current theme |\n|  [resetStyles()](./bitburner.userinterface.resetstyles.md) | Resets the player's styles to the default values |\n|  [resetTheme()](./bitburner.userinterface.resettheme.md) | Resets the player's theme to the default values |\n|  [setStyles(newStyles)](./bitburner.userinterface.setstyles.md) | Sets the current styles |\n|  [setTheme(newTheme)](./bitburner.userinterface.settheme.md) | Sets the current theme |\n|  [windowSize()](./bitburner.userinterface.windowsize.md) | Get the current window size |\n\n", "ns.userinterface.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md)\n\n## UserInterface interface\n\nUser Interface API.\n\n**Signature:**\n\n```typescript\ninterface UserInterface \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [clearTerminal()](./bitburner.userinterface.clearterminal.md) | Clear the Terminal window, as if the player ran <code>clear</code> in the terminal |\n|  [getGameInfo()](./bitburner.userinterface.getgameinfo.md) | Gets the current game information (version, commit, ...) |\n|  [getStyles()](./bitburner.userinterface.getstyles.md) | Get the current styles |\n|  [getTheme()](./bitburner.userinterface.gettheme.md) | Get the current theme |\n|  [resetStyles()](./bitburner.userinterface.resetstyles.md) | Resets the player's styles to the default values |\n|  [resetTheme()](./bitburner.userinterface.resettheme.md) | Resets the player's theme to the default values |\n|  [setStyles(newStyles)](./bitburner.userinterface.setstyles.md) | Sets the current styles |\n|  [setTheme(newTheme)](./bitburner.userinterface.settheme.md) | Sets the current theme |\n|  [windowSize()](./bitburner.userinterface.windowsize.md) | Get the current window size |\n\n", "bitburner.basichgwoptions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BasicHGWOptions](./bitburner.basichgwoptions.md)\n\n## BasicHGWOptions interface\n\nOptions to affect the behavior of [hack](./bitburner.ns.hack.md)<!-- -->, [grow](./bitburner.ns.grow.md)<!-- -->, and [weaken](./bitburner.ns.weaken.md)<!-- -->.\n\n**Signature:**\n\n```typescript\ninterface BasicHGWOptions \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [stock?](./bitburner.basichgwoptions.stock.md) |  | boolean | _(Optional)_ Set to true this action will affect the stock market. |\n|  [threads?](./bitburner.basichgwoptions.threads.md) |  | number | _(Optional)_ Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with. |\n\n", "ns.basichgwoptions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BasicHGWOptions](./bitburner.basichgwoptions.md)\n\n## BasicHGWOptions interface\n\nOptions to affect the behavior of [hack](./bitburner.ns.hack.md)<!-- -->, [grow](./bitburner.ns.grow.md)<!-- -->, and [weaken](./bitburner.ns.weaken.md)<!-- -->.\n\n**Signature:**\n\n```typescript\ninterface BasicHGWOptions \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [stock?](./bitburner.basichgwoptions.stock.md) |  | boolean | _(Optional)_ Set to true this action will affect the stock market. |\n|  [threads?](./bitburner.basichgwoptions.threads.md) |  | number | _(Optional)_ Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with. |\n\n", "bitburner.ns.getscriptname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptName](./bitburner.ns.getscriptname.md)\n\n## NS.getScriptName() method\n\nReturns the current script name.\n\n**Signature:**\n\n```typescript\ngetScriptName(): string;\n```\n**Returns:**\n\nstring\n\nCurrent script name.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.getscriptname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptName](./bitburner.ns.getscriptname.md)\n\n## NS.getScriptName() method\n\nReturns the current script name.\n\n**Signature:**\n\n```typescript\ngetScriptName(): string;\n```\n**Returns:**\n\nstring\n\nCurrent script name.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.tix.getpurchasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getPurchaseCost](./bitburner.tix.getpurchasecost.md)\n\n## TIX.getPurchaseCost() method\n\nCalculates cost of buying stocks.\n\n**Signature:**\n\n```typescript\ngetPurchaseCost(sym: string, shares: number, posType: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to purchase. |\n|  posType | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nnumber\n\nCost to buy a given number of shares of a stock.\n\n## Remarks\n\nRAM cost: 2 GB Calculates and returns how much it would cost to buy a given number of shares of a stock. This takes into account spread, large transactions influencing the price of the stock and commission fees.\n\n", "ns.tix.getpurchasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getPurchaseCost](./bitburner.tix.getpurchasecost.md)\n\n## TIX.getPurchaseCost() method\n\nCalculates cost of buying stocks.\n\n**Signature:**\n\n```typescript\ngetPurchaseCost(sym: string, shares: number, posType: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to purchase. |\n|  posType | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nnumber\n\nCost to buy a given number of shares of a stock.\n\n## Remarks\n\nRAM cost: 2 GB Calculates and returns how much it would cost to buy a given number of shares of a stock. This takes into account spread, large transactions influencing the price of the stock and commission fees.\n\n", "bitburner.bladeburner.stopbladeburneraction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [stopBladeburnerAction](./bitburner.bladeburner.stopbladeburneraction.md)\n\n## Bladeburner.stopBladeburnerAction() method\n\nStop current action.\n\n**Signature:**\n\n```typescript\nstopBladeburnerAction(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nStops the current Bladeburner action.\n\n", "ns.bladeburner.stopbladeburneraction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [stopBladeburnerAction](./bitburner.bladeburner.stopbladeburneraction.md)\n\n## Bladeburner.stopBladeburnerAction() method\n\nStop current action.\n\n**Signature:**\n\n```typescript\nstopBladeburnerAction(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nStops the current Bladeburner action.\n\n", "bitburner.ns.getserverbasesecuritylevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerBaseSecurityLevel](./bitburner.ns.getserverbasesecuritylevel.md)\n\n## NS.getServerBaseSecurityLevel() method\n\n> Warning: This API is now obsolete.\n> \n> useless\n> \n\n**Signature:**\n\n```typescript\ngetServerBaseSecurityLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Host of target server. |\n\n**Returns:**\n\nnumber\n\nBase security level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB Returns the base security level of the target server. This is the security level that the server starts out with. This is different than getServerSecurityLevel because getServerSecurityLevel returns the current security level of a server, which can constantly change due to hack, grow, and weaken, calls on that server. The base security level will stay the same until you reset by installing an Augmentation(s).\n\n", "ns.ns.getserverbasesecuritylevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerBaseSecurityLevel](./bitburner.ns.getserverbasesecuritylevel.md)\n\n## NS.getServerBaseSecurityLevel() method\n\n> Warning: This API is now obsolete.\n> \n> useless\n> \n\n**Signature:**\n\n```typescript\ngetServerBaseSecurityLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Host of target server. |\n\n**Returns:**\n\nnumber\n\nBase security level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB Returns the base security level of the target server. This is the security level that the server starts out with. This is different than getServerSecurityLevel because getServerSecurityLevel returns the current security level of a server, which can constantly change due to hack, grow, and weaken, calls on that server. The base security level will stay the same until you reset by installing an Augmentation(s).\n\n", "bitburner.gangmemberinfo.def_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_asc\\_points](./bitburner.gangmemberinfo.def_asc_points.md)\n\n## GangMemberInfo.def\\_asc\\_points property\n\nTotal earned defense experience\n\n**Signature:**\n\n```typescript\ndef_asc_points: number;\n```\n", "ns.gangmemberinfo.def_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_asc\\_points](./bitburner.gangmemberinfo.def_asc_points.md)\n\n## GangMemberInfo.def\\_asc\\_points property\n\nTotal earned defense experience\n\n**Signature:**\n\n```typescript\ndef_asc_points: number;\n```\n", "bitburner.officeapi.getresearchcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getResearchCost](./bitburner.officeapi.getresearchcost.md)\n\n## OfficeAPI.getResearchCost() method\n\nGet the cost to unlock research\n\n**Signature:**\n\n```typescript\ngetResearchCost(divisionName: string, researchName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  researchName | string | Name of the research |\n\n**Returns:**\n\nnumber\n\ncost\n\n", "ns.officeapi.getresearchcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getResearchCost](./bitburner.officeapi.getresearchcost.md)\n\n## OfficeAPI.getResearchCost() method\n\nGet the cost to unlock research\n\n**Signature:**\n\n```typescript\ngetResearchCost(divisionName: string, researchName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  researchName | string | Name of the research |\n\n**Returns:**\n\nnumber\n\ncost\n\n", "bitburner.corpindustrydata.description.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [description](./bitburner.corpindustrydata.description.md)\n\n## CorpIndustryData.description property\n\n**Signature:**\n\n```typescript\ndescription: string;\n```\n", "ns.corpindustrydata.description.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [description](./bitburner.corpindustrydata.description.md)\n\n## CorpIndustryData.description property\n\n**Signature:**\n\n```typescript\ndescription: string;\n```\n", "bitburner.tix.getmaxshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getMaxShares](./bitburner.tix.getmaxshares.md)\n\n## TIX.getMaxShares() method\n\nReturns the maximum number of shares of a stock.\n\n**Signature:**\n\n```typescript\ngetMaxShares(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nMaximum number of shares that the stock has.\n\n## Remarks\n\nRAM cost: 2 GB This is the maximum amount of the stock that can be purchased in both the Long and Short positions combined.\n\n", "ns.tix.getmaxshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getMaxShares](./bitburner.tix.getmaxshares.md)\n\n## TIX.getMaxShares() method\n\nReturns the maximum number of shares of a stock.\n\n**Signature:**\n\n```typescript\ngetMaxShares(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nMaximum number of shares that the stock has.\n\n## Remarks\n\nRAM cost: 2 GB This is the maximum amount of the stock that can be purchased in both the Long and Short positions combined.\n\n", "bitburner.ns.readport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [readPort](./bitburner.ns.readport.md)\n\n## NS.readPort() method\n\nRead data from a port.\n\n**Signature:**\n\n```typescript\nreadPort(port: number): PortData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number |  |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nThe data read.\n\n## Remarks\n\nRAM cost: 0 GB\n\nRead data from that port. A port is a serialized queue. This function will remove the first element from that queue and return it. If the queue is empty, then the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "ns.ns.readport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [readPort](./bitburner.ns.readport.md)\n\n## NS.readPort() method\n\nRead data from a port.\n\n**Signature:**\n\n```typescript\nreadPort(port: number): PortData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number |  |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nThe data read.\n\n## Remarks\n\nRAM cost: 0 GB\n\nRead data from that port. A port is a serialized queue. This function will remove the first element from that queue and return it. If the queue is empty, then the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "bitburner.player.numpeoplekilled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [numPeopleKilled](./bitburner.player.numpeoplekilled.md)\n\n## Player.numPeopleKilled property\n\n**Signature:**\n\n```typescript\nnumPeopleKilled: number;\n```\n", "ns.player.numpeoplekilled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [numPeopleKilled](./bitburner.player.numpeoplekilled.md)\n\n## Player.numPeopleKilled property\n\n**Signature:**\n\n```typescript\nnumPeopleKilled: number;\n```\n", "bitburner.player.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [money](./bitburner.player.money.md)\n\n## Player.money property\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "ns.player.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [money](./bitburner.player.money.md)\n\n## Player.money property\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "bitburner.activefragment.y.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [y](./bitburner.activefragment.y.md)\n\n## ActiveFragment.y property\n\n**Signature:**\n\n```typescript\ny: number;\n```\n", "ns.activefragment.y.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [y](./bitburner.activefragment.y.md)\n\n## ActiveFragment.y property\n\n**Signature:**\n\n```typescript\ny: number;\n```\n", "bitburner.bitnodemultipliers.factionworkrepgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FactionWorkRepGain](./bitburner.bitnodemultipliers.factionworkrepgain.md)\n\n## BitNodeMultipliers.FactionWorkRepGain property\n\nInfluences how much rep the player gains when performing work for a faction.\n\n**Signature:**\n\n```typescript\nFactionWorkRepGain: number;\n```\n", "ns.bitnodemultipliers.factionworkrepgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FactionWorkRepGain](./bitburner.bitnodemultipliers.factionworkrepgain.md)\n\n## BitNodeMultipliers.FactionWorkRepGain property\n\nInfluences how much rep the player gains when performing work for a faction.\n\n**Signature:**\n\n```typescript\nFactionWorkRepGain: number;\n```\n", "bitburner.crimestats.intelligence_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [intelligence\\_exp](./bitburner.crimestats.intelligence_exp.md)\n\n## CrimeStats.intelligence\\_exp property\n\nintelligence exp gained from crime\n\n**Signature:**\n\n```typescript\nintelligence_exp: number;\n```\n", "ns.crimestats.intelligence_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [intelligence\\_exp](./bitburner.crimestats.intelligence_exp.md)\n\n## CrimeStats.intelligence\\_exp property\n\nintelligence exp gained from crime\n\n**Signature:**\n\n```typescript\nintelligence_exp: number;\n```\n", "bitburner.multipliers.strength_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [strength\\_exp](./bitburner.multipliers.strength_exp.md)\n\n## Multipliers.strength\\_exp property\n\nMultiplier to strength experience gain rate\n\n**Signature:**\n\n```typescript\nstrength_exp: number;\n```\n", "ns.multipliers.strength_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [strength\\_exp](./bitburner.multipliers.strength_exp.md)\n\n## Multipliers.strength\\_exp property\n\nMultiplier to strength experience gain rate\n\n**Signature:**\n\n```typescript\nstrength_exp: number;\n```\n", "bitburner.workstats.agiexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [agiExp](./bitburner.workstats.agiexp.md)\n\n## WorkStats.agiExp property\n\n**Signature:**\n\n```typescript\nagiExp: number;\n```\n", "ns.workstats.agiexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [agiExp](./bitburner.workstats.agiexp.md)\n\n## WorkStats.agiExp property\n\n**Signature:**\n\n```typescript\nagiExp: number;\n```\n", "bitburner.corporation.createcorporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [createCorporation](./bitburner.corporation.createcorporation.md)\n\n## Corporation.createCorporation() method\n\nCreate a Corporation\n\n**Signature:**\n\n```typescript\ncreateCorporation(corporationName: string, selfFund: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  corporationName | string | Name of the corporation |\n|  selfFund | boolean | If you should self fund, defaults to true, false will only work on Bitnode 3 |\n\n**Returns:**\n\nboolean\n\ntrue if created and false if not\n\n", "ns.corporation.createcorporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [createCorporation](./bitburner.corporation.createcorporation.md)\n\n## Corporation.createCorporation() method\n\nCreate a Corporation\n\n**Signature:**\n\n```typescript\ncreateCorporation(corporationName: string, selfFund: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  corporationName | string | Name of the corporation |\n|  selfFund | boolean | If you should self fund, defaults to true, false will only work on Bitnode 3 |\n\n**Returns:**\n\nboolean\n\ntrue if created and false if not\n\n", "bitburner.corpconstants.employeesalarymultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [employeeSalaryMultiplier](./bitburner.corpconstants.employeesalarymultiplier.md)\n\n## CorpConstants.employeeSalaryMultiplier property\n\nConversion factor for employee stats to initial salary\n\n**Signature:**\n\n```typescript\nemployeeSalaryMultiplier: number;\n```\n", "ns.corpconstants.employeesalarymultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [employeeSalaryMultiplier](./bitburner.corpconstants.employeesalarymultiplier.md)\n\n## CorpConstants.employeeSalaryMultiplier property\n\nConversion factor for employee stats to initial salary\n\n**Signature:**\n\n```typescript\nemployeeSalaryMultiplier: number;\n```\n", "bitburner.hackingmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md)\n\n## HackingMultipliers interface\n\nHack related multipliers.\n\n**Signature:**\n\n```typescript\ninterface HackingMultipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [chance](./bitburner.hackingmultipliers.chance.md) |  | number | Player's hacking chance multiplier. |\n|  [growth](./bitburner.hackingmultipliers.growth.md) |  | number | Player's hacking growth multiplier |\n|  [money](./bitburner.hackingmultipliers.money.md) |  | number | Player's hacking money stolen multiplier. |\n|  [speed](./bitburner.hackingmultipliers.speed.md) |  | number | Player's hacking speed multiplier. |\n\n", "ns.hackingmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md)\n\n## HackingMultipliers interface\n\nHack related multipliers.\n\n**Signature:**\n\n```typescript\ninterface HackingMultipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [chance](./bitburner.hackingmultipliers.chance.md) |  | number | Player's hacking chance multiplier. |\n|  [growth](./bitburner.hackingmultipliers.growth.md) |  | number | Player's hacking growth multiplier |\n|  [money](./bitburner.hackingmultipliers.money.md) |  | number | Player's hacking money stolen multiplier. |\n|  [speed](./bitburner.hackingmultipliers.speed.md) |  | number | Player's hacking speed multiplier. |\n\n", "bitburner.bladeburnercuraction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BladeburnerCurAction](./bitburner.bladeburnercuraction.md)\n\n## BladeburnerCurAction interface\n\nBladeburner current action.\n\n**Signature:**\n\n```typescript\ninterface BladeburnerCurAction \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [name](./bitburner.bladeburnercuraction.name.md) |  | string | Name of Action |\n|  [type](./bitburner.bladeburnercuraction.type.md) |  | string | Type of Action |\n\n", "ns.bladeburnercuraction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BladeburnerCurAction](./bitburner.bladeburnercuraction.md)\n\n## BladeburnerCurAction interface\n\nBladeburner current action.\n\n**Signature:**\n\n```typescript\ninterface BladeburnerCurAction \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [name](./bitburner.bladeburnercuraction.name.md) |  | string | Name of Action |\n|  [type](./bitburner.bladeburnercuraction.type.md) |  | string | Type of Action |\n\n", "bitburner.bladeburner.setteamsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [setTeamSize](./bitburner.bladeburner.setteamsize.md)\n\n## Bladeburner.setTeamSize() method\n\nSet team size.\n\n**Signature:**\n\n```typescript\nsetTeamSize(type: string, name: string, size: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  size | number | Number of team members to set. Will be converted using Math.round(). |\n\n**Returns:**\n\nnumber\n\nNumber of Bladeburner team members you assigned to the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nSet the team size for the specified Bladeburner action.\n\nReturns the team size that was set, or -1 if the function failed.\n\n", "ns.bladeburner.setteamsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [setTeamSize](./bitburner.bladeburner.setteamsize.md)\n\n## Bladeburner.setTeamSize() method\n\nSet team size.\n\n**Signature:**\n\n```typescript\nsetTeamSize(type: string, name: string, size: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  size | number | Number of team members to set. Will be converted using Math.round(). |\n\n**Returns:**\n\nnumber\n\nNumber of Bladeburner team members you assigned to the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nSet the team size for the specified Bladeburner action.\n\nReturns the team size that was set, or -1 if the function failed.\n\n", "bitburner.fragment.limit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [limit](./bitburner.fragment.limit.md)\n\n## Fragment.limit property\n\n**Signature:**\n\n```typescript\nlimit: number;\n```\n", "ns.fragment.limit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [limit](./bitburner.fragment.limit.md)\n\n## Fragment.limit property\n\n**Signature:**\n\n```typescript\nlimit: number;\n```\n", "bitburner.crimestats.time.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [time](./bitburner.crimestats.time.md)\n\n## CrimeStats.time property\n\nMilliseconds it takes to attempt the crime\n\n**Signature:**\n\n```typescript\ntime: number;\n```\n", "ns.crimestats.time.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [time](./bitburner.crimestats.time.md)\n\n## CrimeStats.time property\n\nMilliseconds it takes to attempt the crime\n\n**Signature:**\n\n```typescript\ntime: number;\n```\n", "bitburner.hacknetnodesformulas.moneygainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [moneyGainRate](./bitburner.hacknetnodesformulas.moneygainrate.md)\n\n## HacknetNodesFormulas.moneyGainRate() method\n\nCalculate money gain rate.\n\n**Signature:**\n\n```typescript\nmoneyGainRate(level: number, ram: number, cores: number, mult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  level | number | level of the node. |\n|  ram | number | ram of the node. |\n|  cores | number | cores of the node. |\n|  mult | number | _(Optional)_ player production mult (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated money gain rate.\n\n", "ns.hacknetnodesformulas.moneygainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [moneyGainRate](./bitburner.hacknetnodesformulas.moneygainrate.md)\n\n## HacknetNodesFormulas.moneyGainRate() method\n\nCalculate money gain rate.\n\n**Signature:**\n\n```typescript\nmoneyGainRate(level: number, ram: number, cores: number, mult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  level | number | level of the node. |\n|  ram | number | ram of the node. |\n|  cores | number | cores of the node. |\n|  mult | number | _(Optional)_ player production mult (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated money gain rate.\n\n", "bitburner.hackingmultipliers.speed.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [speed](./bitburner.hackingmultipliers.speed.md)\n\n## HackingMultipliers.speed property\n\nPlayer's hacking speed multiplier.\n\n**Signature:**\n\n```typescript\nspeed: number;\n```\n", "ns.hackingmultipliers.speed.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [speed](./bitburner.hackingmultipliers.speed.md)\n\n## HackingMultipliers.speed property\n\nPlayer's hacking speed multiplier.\n\n**Signature:**\n\n```typescript\nspeed: number;\n```\n", "bitburner.industrydata.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [type](./bitburner.industrydata.type.md)\n\n## IndustryData.type property\n\nIndustry type\n\n**Signature:**\n\n```typescript\ntype: CorpIndustryName;\n```\n", "ns.industrydata.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [type](./bitburner.industrydata.type.md)\n\n## IndustryData.type property\n\nIndustry type\n\n**Signature:**\n\n```typescript\ntype: CorpIndustryName;\n```\n", "bitburner.hacknet.purchasenode.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [purchaseNode](./bitburner.hacknet.purchasenode.md)\n\n## Hacknet.purchaseNode() method\n\nPurchase a new hacknet node.\n\n**Signature:**\n\n```typescript\npurchaseNode(): number;\n```\n**Returns:**\n\nnumber\n\nThe index of the Hacknet Node or if the player cannot afford to purchase a new Hacknet Node the function will return -1.\n\n## Remarks\n\nRAM cost: 0 GB\n\nPurchases a new Hacknet Node. Returns a number with the index of the Hacknet Node. This index is equivalent to the number at the end of the Hacknet Node\u2019s name (e.g The Hacknet Node named `hacknet-node-4` will have an index of 4).\n\nIf the player cannot afford to purchase a new Hacknet Node then the function will return -1.\n\n", "ns.hacknet.purchasenode.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [purchaseNode](./bitburner.hacknet.purchasenode.md)\n\n## Hacknet.purchaseNode() method\n\nPurchase a new hacknet node.\n\n**Signature:**\n\n```typescript\npurchaseNode(): number;\n```\n**Returns:**\n\nnumber\n\nThe index of the Hacknet Node or if the player cannot afford to purchase a new Hacknet Node the function will return -1.\n\n## Remarks\n\nRAM cost: 0 GB\n\nPurchases a new Hacknet Node. Returns a number with the index of the Hacknet Node. This index is equivalent to the number at the end of the Hacknet Node\u2019s name (e.g The Hacknet Node named `hacknet-node-4` will have an index of 4).\n\nIf the player cannot afford to purchase a new Hacknet Node then the function will return -1.\n\n", "bitburner.corporation.getinvestmentoffer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getInvestmentOffer](./bitburner.corporation.getinvestmentoffer.md)\n\n## Corporation.getInvestmentOffer() method\n\nGet an offer for investment based on you companies current valuation\n\n**Signature:**\n\n```typescript\ngetInvestmentOffer(): InvestmentOffer;\n```\n**Returns:**\n\n[InvestmentOffer](./bitburner.investmentoffer.md)\n\nAn offer of investment\n\n", "ns.corporation.getinvestmentoffer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getInvestmentOffer](./bitburner.corporation.getinvestmentoffer.md)\n\n## Corporation.getInvestmentOffer() method\n\nGet an offer for investment based on you companies current valuation\n\n**Signature:**\n\n```typescript\ngetInvestmentOffer(): InvestmentOffer;\n```\n**Returns:**\n\n[InvestmentOffer](./bitburner.investmentoffer.md)\n\nAn offer of investment\n\n", "bitburner.userinterfacetheme.white.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [white](./bitburner.userinterfacetheme.white.md)\n\n## UserInterfaceTheme.white property\n\n**Signature:**\n\n```typescript\nwhite: string;\n```\n", "ns.userinterfacetheme.white.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [white](./bitburner.userinterfacetheme.white.md)\n\n## UserInterfaceTheme.white property\n\n**Signature:**\n\n```typescript\nwhite: string;\n```\n", "bitburner.material.cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [cost](./bitburner.material.cost.md)\n\n## Material.cost property\n\nCost to buy material\n\n**Signature:**\n\n```typescript\ncost: number;\n```\n", "ns.material.cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [cost](./bitburner.material.cost.md)\n\n## Material.cost property\n\nCost to buy material\n\n**Signature:**\n\n```typescript\ncost: number;\n```\n", "bitburner.singularity.getownedsourcefiles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getOwnedSourceFiles](./bitburner.singularity.getownedsourcefiles.md)\n\n## Singularity.getOwnedSourceFiles() method\n\nGet a list of acquired Source-Files.\n\n**Signature:**\n\n```typescript\ngetOwnedSourceFiles(): SourceFileLvl[];\n```\n**Returns:**\n\n[SourceFileLvl](./bitburner.sourcefilelvl.md)<!-- -->\\[\\]\n\nArray containing an object with number and level of the source file.\n\n## Remarks\n\nRAM cost: 5 GB\n\nReturns an array of source files\n\n", "ns.singularity.getownedsourcefiles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getOwnedSourceFiles](./bitburner.singularity.getownedsourcefiles.md)\n\n## Singularity.getOwnedSourceFiles() method\n\nGet a list of acquired Source-Files.\n\n**Signature:**\n\n```typescript\ngetOwnedSourceFiles(): SourceFileLvl[];\n```\n**Returns:**\n\n[SourceFileLvl](./bitburner.sourcefilelvl.md)<!-- -->\\[\\]\n\nArray containing an object with number and level of the source file.\n\n## Remarks\n\nRAM cost: 5 GB\n\nReturns an array of source files\n\n", "bitburner.ns.getscriptlogs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptLogs](./bitburner.ns.getscriptlogs.md)\n\n## NS.getScriptLogs() method\n\nGet all the logs of a script.\n\n**Signature:**\n\n```typescript\ngetScriptLogs(fn?: string, host?: string, ...args: (string | number | boolean)[]): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | _(Optional)_ Optional. Filename of script to get logs from. |\n|  host | string | _(Optional)_ Optional. Hostname of the server that the script is on. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments to identify which scripts to get logs for. |\n\n**Returns:**\n\nstring\\[\\]\n\nReturns a string array, where each line is an element in the array. The most recently logged line is at the end of the array.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns a script\u2019s logs. The logs are returned as an array, where each line is an element in the array. The most recently logged line is at the end of the array. Note that there is a maximum number of lines that a script stores in its logs. This is configurable in the game\u2019s options. If the function is called with no arguments, it will return the current script\u2019s logs.\n\nOtherwise, the fn, hostname/ip, and args\u2026 arguments can be used to get the logs from another script. Remember that scripts are uniquely identified by both their names and arguments.\n\n## Example\n\n\n```js\n//Get logs from foo.js on the current server that was run with no args\nns.getScriptLogs(\"foo.js\");\n\n//Open logs from foo.js on the foodnstuff server that was run with no args\nns.getScriptLogs(\"foo.js\", \"foodnstuff\");\n\n//Open logs from foo.js on the foodnstuff server that was run with the arguments [1, \"test\"]\nns.getScriptLogs(\"foo.js\", \"foodnstuff\", 1, \"test\");\n```\n\n", "ns.ns.getscriptlogs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptLogs](./bitburner.ns.getscriptlogs.md)\n\n## NS.getScriptLogs() method\n\nGet all the logs of a script.\n\n**Signature:**\n\n```typescript\ngetScriptLogs(fn?: string, host?: string, ...args: (string | number | boolean)[]): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | _(Optional)_ Optional. Filename of script to get logs from. |\n|  host | string | _(Optional)_ Optional. Hostname of the server that the script is on. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments to identify which scripts to get logs for. |\n\n**Returns:**\n\nstring\\[\\]\n\nReturns a string array, where each line is an element in the array. The most recently logged line is at the end of the array.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns a script\u2019s logs. The logs are returned as an array, where each line is an element in the array. The most recently logged line is at the end of the array. Note that there is a maximum number of lines that a script stores in its logs. This is configurable in the game\u2019s options. If the function is called with no arguments, it will return the current script\u2019s logs.\n\nOtherwise, the fn, hostname/ip, and args\u2026 arguments can be used to get the logs from another script. Remember that scripts are uniquely identified by both their names and arguments.\n\n## Example\n\n\n```js\n//Get logs from foo.js on the current server that was run with no args\nns.getScriptLogs(\"foo.js\");\n\n//Open logs from foo.js on the foodnstuff server that was run with no args\nns.getScriptLogs(\"foo.js\", \"foodnstuff\");\n\n//Open logs from foo.js on the foodnstuff server that was run with the arguments [1, \"test\"]\nns.getScriptLogs(\"foo.js\", \"foodnstuff\", 1, \"test\");\n```\n\n", "bitburner.userinterfacetheme.welllight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [welllight](./bitburner.userinterfacetheme.welllight.md)\n\n## UserInterfaceTheme.welllight property\n\n**Signature:**\n\n```typescript\nwelllight: string;\n```\n", "ns.userinterfacetheme.welllight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [welllight](./bitburner.userinterfacetheme.welllight.md)\n\n## UserInterfaceTheme.welllight property\n\n**Signature:**\n\n```typescript\nwelllight: string;\n```\n", "bitburner.gangmemberinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md)\n\n## GangMemberInfo interface\n\n\n**Signature:**\n\n```typescript\ninterface GangMemberInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agi\\_asc\\_mult](./bitburner.gangmemberinfo.agi_asc_mult.md) |  | number | Agility multiplier from ascensions |\n|  [agi\\_asc\\_points](./bitburner.gangmemberinfo.agi_asc_points.md) |  | number | Total earned agility experience |\n|  [agi\\_exp](./bitburner.gangmemberinfo.agi_exp.md) |  | number | Current agility experience |\n|  [agi\\_mult](./bitburner.gangmemberinfo.agi_mult.md) |  | number | Agility multiplier from equipment |\n|  [agi](./bitburner.gangmemberinfo.agi.md) |  | number | Agility skill level |\n|  [augmentations](./bitburner.gangmemberinfo.augmentations.md) |  | string\\[\\] |  |\n|  [cha\\_asc\\_mult](./bitburner.gangmemberinfo.cha_asc_mult.md) |  | number | Charisma multiplier from ascensions |\n|  [cha\\_asc\\_points](./bitburner.gangmemberinfo.cha_asc_points.md) |  | number | Total earned charisma experience |\n|  [cha\\_exp](./bitburner.gangmemberinfo.cha_exp.md) |  | number | Current charisma experience |\n|  [cha\\_mult](./bitburner.gangmemberinfo.cha_mult.md) |  | number | Charisma multiplier from equipment |\n|  [cha](./bitburner.gangmemberinfo.cha.md) |  | number | Charisma skill level |\n|  [def\\_asc\\_mult](./bitburner.gangmemberinfo.def_asc_mult.md) |  | number | Defense multiplier from ascensions |\n|  [def\\_asc\\_points](./bitburner.gangmemberinfo.def_asc_points.md) |  | number | Total earned defense experience |\n|  [def\\_exp](./bitburner.gangmemberinfo.def_exp.md) |  | number | Current defense experience |\n|  [def\\_mult](./bitburner.gangmemberinfo.def_mult.md) |  | number | Defense multiplier from equipment |\n|  [def](./bitburner.gangmemberinfo.def.md) |  | number | Defense skill level |\n|  [dex\\_asc\\_mult](./bitburner.gangmemberinfo.dex_asc_mult.md) |  | number | Dexterity multiplier from ascensions |\n|  [dex\\_asc\\_points](./bitburner.gangmemberinfo.dex_asc_points.md) |  | number | Total earned dexterity experience |\n|  [dex\\_exp](./bitburner.gangmemberinfo.dex_exp.md) |  | number | Current dexterity experience |\n|  [dex\\_mult](./bitburner.gangmemberinfo.dex_mult.md) |  | number | Dexterity multiplier from equipment |\n|  [dex](./bitburner.gangmemberinfo.dex.md) |  | number | Dexterity skill level |\n|  [earnedRespect](./bitburner.gangmemberinfo.earnedrespect.md) |  | number |  |\n|  [hack\\_asc\\_mult](./bitburner.gangmemberinfo.hack_asc_mult.md) |  | number | Hack multiplier from ascensions |\n|  [hack\\_asc\\_points](./bitburner.gangmemberinfo.hack_asc_points.md) |  | number | Total earned hack experience |\n|  [hack\\_exp](./bitburner.gangmemberinfo.hack_exp.md) |  | number | Current hack experience |\n|  [hack\\_mult](./bitburner.gangmemberinfo.hack_mult.md) |  | number | Hack multiplier from equipment |\n|  [hack](./bitburner.gangmemberinfo.hack.md) |  | number | Hack skill level |\n|  [moneyGain](./bitburner.gangmemberinfo.moneygain.md) |  | number |  |\n|  [name](./bitburner.gangmemberinfo.name.md) |  | string | Name of the gang member |\n|  [respectGain](./bitburner.gangmemberinfo.respectgain.md) |  | number |  |\n|  [str\\_asc\\_mult](./bitburner.gangmemberinfo.str_asc_mult.md) |  | number | Strength multiplier from ascensions |\n|  [str\\_asc\\_points](./bitburner.gangmemberinfo.str_asc_points.md) |  | number | Total earned strength experience |\n|  [str\\_exp](./bitburner.gangmemberinfo.str_exp.md) |  | number | Current strength experience |\n|  [str\\_mult](./bitburner.gangmemberinfo.str_mult.md) |  | number | Strength multiplier from equipment |\n|  [str](./bitburner.gangmemberinfo.str.md) |  | number | Strength skill level |\n|  [task](./bitburner.gangmemberinfo.task.md) |  | string | Currently assigned task |\n|  [upgrades](./bitburner.gangmemberinfo.upgrades.md) |  | string\\[\\] |  |\n|  [wantedLevelGain](./bitburner.gangmemberinfo.wantedlevelgain.md) |  | number |  |\n\n", "ns.gangmemberinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md)\n\n## GangMemberInfo interface\n\n\n**Signature:**\n\n```typescript\ninterface GangMemberInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agi\\_asc\\_mult](./bitburner.gangmemberinfo.agi_asc_mult.md) |  | number | Agility multiplier from ascensions |\n|  [agi\\_asc\\_points](./bitburner.gangmemberinfo.agi_asc_points.md) |  | number | Total earned agility experience |\n|  [agi\\_exp](./bitburner.gangmemberinfo.agi_exp.md) |  | number | Current agility experience |\n|  [agi\\_mult](./bitburner.gangmemberinfo.agi_mult.md) |  | number | Agility multiplier from equipment |\n|  [agi](./bitburner.gangmemberinfo.agi.md) |  | number | Agility skill level |\n|  [augmentations](./bitburner.gangmemberinfo.augmentations.md) |  | string\\[\\] |  |\n|  [cha\\_asc\\_mult](./bitburner.gangmemberinfo.cha_asc_mult.md) |  | number | Charisma multiplier from ascensions |\n|  [cha\\_asc\\_points](./bitburner.gangmemberinfo.cha_asc_points.md) |  | number | Total earned charisma experience |\n|  [cha\\_exp](./bitburner.gangmemberinfo.cha_exp.md) |  | number | Current charisma experience |\n|  [cha\\_mult](./bitburner.gangmemberinfo.cha_mult.md) |  | number | Charisma multiplier from equipment |\n|  [cha](./bitburner.gangmemberinfo.cha.md) |  | number | Charisma skill level |\n|  [def\\_asc\\_mult](./bitburner.gangmemberinfo.def_asc_mult.md) |  | number | Defense multiplier from ascensions |\n|  [def\\_asc\\_points](./bitburner.gangmemberinfo.def_asc_points.md) |  | number | Total earned defense experience |\n|  [def\\_exp](./bitburner.gangmemberinfo.def_exp.md) |  | number | Current defense experience |\n|  [def\\_mult](./bitburner.gangmemberinfo.def_mult.md) |  | number | Defense multiplier from equipment |\n|  [def](./bitburner.gangmemberinfo.def.md) |  | number | Defense skill level |\n|  [dex\\_asc\\_mult](./bitburner.gangmemberinfo.dex_asc_mult.md) |  | number | Dexterity multiplier from ascensions |\n|  [dex\\_asc\\_points](./bitburner.gangmemberinfo.dex_asc_points.md) |  | number | Total earned dexterity experience |\n|  [dex\\_exp](./bitburner.gangmemberinfo.dex_exp.md) |  | number | Current dexterity experience |\n|  [dex\\_mult](./bitburner.gangmemberinfo.dex_mult.md) |  | number | Dexterity multiplier from equipment |\n|  [dex](./bitburner.gangmemberinfo.dex.md) |  | number | Dexterity skill level |\n|  [earnedRespect](./bitburner.gangmemberinfo.earnedrespect.md) |  | number |  |\n|  [hack\\_asc\\_mult](./bitburner.gangmemberinfo.hack_asc_mult.md) |  | number | Hack multiplier from ascensions |\n|  [hack\\_asc\\_points](./bitburner.gangmemberinfo.hack_asc_points.md) |  | number | Total earned hack experience |\n|  [hack\\_exp](./bitburner.gangmemberinfo.hack_exp.md) |  | number | Current hack experience |\n|  [hack\\_mult](./bitburner.gangmemberinfo.hack_mult.md) |  | number | Hack multiplier from equipment |\n|  [hack](./bitburner.gangmemberinfo.hack.md) |  | number | Hack skill level |\n|  [moneyGain](./bitburner.gangmemberinfo.moneygain.md) |  | number |  |\n|  [name](./bitburner.gangmemberinfo.name.md) |  | string | Name of the gang member |\n|  [respectGain](./bitburner.gangmemberinfo.respectgain.md) |  | number |  |\n|  [str\\_asc\\_mult](./bitburner.gangmemberinfo.str_asc_mult.md) |  | number | Strength multiplier from ascensions |\n|  [str\\_asc\\_points](./bitburner.gangmemberinfo.str_asc_points.md) |  | number | Total earned strength experience |\n|  [str\\_exp](./bitburner.gangmemberinfo.str_exp.md) |  | number | Current strength experience |\n|  [str\\_mult](./bitburner.gangmemberinfo.str_mult.md) |  | number | Strength multiplier from equipment |\n|  [str](./bitburner.gangmemberinfo.str.md) |  | number | Strength skill level |\n|  [task](./bitburner.gangmemberinfo.task.md) |  | string | Currently assigned task |\n|  [upgrades](./bitburner.gangmemberinfo.upgrades.md) |  | string\\[\\] |  |\n|  [wantedLevelGain](./bitburner.gangmemberinfo.wantedlevelgain.md) |  | number |  |\n\n", "bitburner.bitnodemultipliers.bladeburnerrank.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [BladeburnerRank](./bitburner.bitnodemultipliers.bladeburnerrank.md)\n\n## BitNodeMultipliers.BladeburnerRank property\n\nInfluences how quickly the player can gain rank within Bladeburner.\n\n**Signature:**\n\n```typescript\nBladeburnerRank: number;\n```\n", "ns.bitnodemultipliers.bladeburnerrank.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [BladeburnerRank](./bitburner.bitnodemultipliers.bladeburnerrank.md)\n\n## BitNodeMultipliers.BladeburnerRank property\n\nInfluences how quickly the player can gain rank within Bladeburner.\n\n**Signature:**\n\n```typescript\nBladeburnerRank: number;\n```\n", "bitburner.gangmemberinfo.str_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_mult](./bitburner.gangmemberinfo.str_mult.md)\n\n## GangMemberInfo.str\\_mult property\n\nStrength multiplier from equipment\n\n**Signature:**\n\n```typescript\nstr_mult: number;\n```\n", "ns.gangmemberinfo.str_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_mult](./bitburner.gangmemberinfo.str_mult.md)\n\n## GangMemberInfo.str\\_mult property\n\nStrength multiplier from equipment\n\n**Signature:**\n\n```typescript\nstr_mult: number;\n```\n", "bitburner.bitnodemultipliers.daedalusaugsrequirement.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [DaedalusAugsRequirement](./bitburner.bitnodemultipliers.daedalusaugsrequirement.md)\n\n## BitNodeMultipliers.DaedalusAugsRequirement property\n\nInfluences how many Augmentations you need in order to get invited to the Daedalus faction\n\n**Signature:**\n\n```typescript\nDaedalusAugsRequirement: number;\n```\n", "ns.bitnodemultipliers.daedalusaugsrequirement.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [DaedalusAugsRequirement](./bitburner.bitnodemultipliers.daedalusaugsrequirement.md)\n\n## BitNodeMultipliers.DaedalusAugsRequirement property\n\nInfluences how many Augmentations you need in order to get invited to the Daedalus faction\n\n**Signature:**\n\n```typescript\nDaedalusAugsRequirement: number;\n```\n", "bitburner.moneysource.total.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [total](./bitburner.moneysource.total.md)\n\n## MoneySource.total property\n\n**Signature:**\n\n```typescript\ntotal: number;\n```\n", "ns.moneysource.total.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [total](./bitburner.moneysource.total.md)\n\n## MoneySource.total property\n\n**Signature:**\n\n```typescript\ntotal: number;\n```\n", "bitburner.nodestats.timeonline.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [timeOnline](./bitburner.nodestats.timeonline.md)\n\n## NodeStats.timeOnline property\n\nNumber of seconds since Node has been purchased\n\n**Signature:**\n\n```typescript\ntimeOnline: number;\n```\n", "ns.nodestats.timeonline.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [timeOnline](./bitburner.nodestats.timeonline.md)\n\n## NodeStats.timeOnline property\n\nNumber of seconds since Node has been purchased\n\n**Signature:**\n\n```typescript\ntimeOnline: number;\n```\n", "bitburner.singularity.b1tflum3.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [b1tflum3](./bitburner.singularity.b1tflum3.md)\n\n## Singularity.b1tflum3() method\n\nb1t\\_flum3 into a different BN.\n\n**Signature:**\n\n```typescript\nb1tflum3(nextBN: number, callbackScript?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  nextBN | number | BN number to jump to |\n|  callbackScript | string | _(Optional)_ Name of the script to launch in the next BN. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 16 GB \\* 16/4/1\n\n", "ns.singularity.b1tflum3.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [b1tflum3](./bitburner.singularity.b1tflum3.md)\n\n## Singularity.b1tflum3() method\n\nb1t\\_flum3 into a different BN.\n\n**Signature:**\n\n```typescript\nb1tflum3(nextBN: number, callbackScript?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  nextBN | number | BN number to jump to |\n|  callbackScript | string | _(Optional)_ Name of the script to launch in the next BN. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 16 GB \\* 16/4/1\n\n", "bitburner.hacknetnodeconstants.maxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MaxRam](./bitburner.hacknetnodeconstants.maxram.md)\n\n## HacknetNodeConstants.MaxRam property\n\nMax amount of RAM in GB\n\n**Signature:**\n\n```typescript\nMaxRam: number;\n```\n", "ns.hacknetnodeconstants.maxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MaxRam](./bitburner.hacknetnodeconstants.maxram.md)\n\n## HacknetNodeConstants.MaxRam property\n\nMax amount of RAM in GB\n\n**Signature:**\n\n```typescript\nMaxRam: number;\n```\n", "bitburner.hackingformulas.growpercent.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [growPercent](./bitburner.hackingformulas.growpercent.md)\n\n## HackingFormulas.growPercent() method\n\nCalculate the percent a server would grow to. Not exact due to limitations of mathematics. (Ex: 3.0 would would grow the server to 300% of its current value.)\n\n**Signature:**\n\n```typescript\ngrowPercent(server: Server, threads: number, player: Person, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  threads | number | Amount of thread. |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n|  cores | number | _(Optional)_ Number of cores on the computer that will execute grow. |\n\n**Returns:**\n\nnumber\n\nThe calculated grow percent.\n\n", "ns.hackingformulas.growpercent.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [growPercent](./bitburner.hackingformulas.growpercent.md)\n\n## HackingFormulas.growPercent() method\n\nCalculate the percent a server would grow to. Not exact due to limitations of mathematics. (Ex: 3.0 would would grow the server to 300% of its current value.)\n\n**Signature:**\n\n```typescript\ngrowPercent(server: Server, threads: number, player: Person, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  threads | number | Amount of thread. |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n|  cores | number | _(Optional)_ Number of cores on the computer that will execute grow. |\n\n**Returns:**\n\nnumber\n\nThe calculated grow percent.\n\n", "bitburner.singularity.connect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [connect](./bitburner.singularity.connect.md)\n\n## Singularity.connect() method\n\nConnect to a server.\n\n**Signature:**\n\n```typescript\nconnect(hostname: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string |  |\n\n**Returns:**\n\nboolean\n\nTrue if the connect command was successful, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nRun the connect HOSTNAME command in the terminal. Can only connect to neighbors.\n\n", "ns.singularity.connect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [connect](./bitburner.singularity.connect.md)\n\n## Singularity.connect() method\n\nConnect to a server.\n\n**Signature:**\n\n```typescript\nconnect(hostname: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string |  |\n\n**Returns:**\n\nboolean\n\nTrue if the connect command was successful, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nRun the connect HOSTNAME command in the terminal. Can only connect to neighbors.\n\n", "bitburner.ns.getserversecuritylevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerSecurityLevel](./bitburner.ns.getserversecuritylevel.md)\n\n## NS.getServerSecurityLevel() method\n\nGet server security level.\n\n**Signature:**\n\n```typescript\ngetServerSecurityLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nSecurity level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the security level of the target server. A server\u2019s security level is denoted by a number, typically between 1 and 100 (but it can go above 100).\n\n", "ns.ns.getserversecuritylevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerSecurityLevel](./bitburner.ns.getserversecuritylevel.md)\n\n## NS.getServerSecurityLevel() method\n\nGet server security level.\n\n**Signature:**\n\n```typescript\ngetServerSecurityLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nSecurity level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the security level of the target server. A server\u2019s security level is denoted by a number, typically between 1 and 100 (but it can go above 100).\n\n", "bitburner.hacknetserversformulas.hashgainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [hashGainRate](./bitburner.hacknetserversformulas.hashgainrate.md)\n\n## HacknetServersFormulas.hashGainRate() method\n\nCalculate hash gain rate.\n\n**Signature:**\n\n```typescript\nhashGainRate(level: number, ramUsed: number, maxRam: number, cores: number, mult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  level | number | level of the server. |\n|  ramUsed | number | ramUsed of the server. |\n|  maxRam | number | maxRam of the server. |\n|  cores | number | cores of the server. |\n|  mult | number | _(Optional)_ player production mult (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated hash gain rate.\n\n", "ns.hacknetserversformulas.hashgainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [hashGainRate](./bitburner.hacknetserversformulas.hashgainrate.md)\n\n## HacknetServersFormulas.hashGainRate() method\n\nCalculate hash gain rate.\n\n**Signature:**\n\n```typescript\nhashGainRate(level: number, ramUsed: number, maxRam: number, cores: number, mult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  level | number | level of the server. |\n|  ramUsed | number | ramUsed of the server. |\n|  maxRam | number | maxRam of the server. |\n|  cores | number | cores of the server. |\n|  mult | number | _(Optional)_ player production mult (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated hash gain rate.\n\n", "bitburner.warehouseapi.limitproductproduction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [limitProductProduction](./bitburner.warehouseapi.limitproductproduction.md)\n\n## WarehouseAPI.limitProductProduction() method\n\nLimit Product Production.\n\n**Signature:**\n\n```typescript\nlimitProductProduction(divisionName: string, city: CityName | `${CityName}`, productName: string, qty: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city. |\n|  productName | string | Name of the product. |\n|  qty | number | Amount to limit to. Pass a negative value to remove the limit instead. |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.limitproductproduction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [limitProductProduction](./bitburner.warehouseapi.limitproductproduction.md)\n\n## WarehouseAPI.limitProductProduction() method\n\nLimit Product Production.\n\n**Signature:**\n\n```typescript\nlimitProductProduction(divisionName: string, city: CityName | `${CityName}`, productName: string, qty: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city. |\n|  productName | string | Name of the product. |\n|  qty | number | Amount to limit to. Pass a negative value to remove the limit instead. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.ns.sprintf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sprintf](./bitburner.ns.sprintf.md)\n\n## NS.sprintf() method\n\nFormat a string.\n\n**Signature:**\n\n```typescript\nsprintf(format: string, ...args: any[]): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | String to format. |\n|  args | any\\[\\] | Formatting arguments. |\n\n**Returns:**\n\nstring\n\nFormatted text.\n\n## Remarks\n\nRAM cost: 0 GB\n\nsee: https://github.com/alexei/sprintf.js\n\n", "ns.ns.sprintf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sprintf](./bitburner.ns.sprintf.md)\n\n## NS.sprintf() method\n\nFormat a string.\n\n**Signature:**\n\n```typescript\nsprintf(format: string, ...args: any[]): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | String to format. |\n|  args | any\\[\\] | Formatting arguments. |\n\n**Returns:**\n\nstring\n\nFormatted text.\n\n## Remarks\n\nRAM cost: 0 GB\n\nsee: https://github.com/alexei/sprintf.js\n\n", "bitburner.infiltrationreward.traderep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md) &gt; [tradeRep](./bitburner.infiltrationreward.traderep.md)\n\n## InfiltrationReward.tradeRep property\n\n**Signature:**\n\n```typescript\ntradeRep: number;\n```\n", "ns.infiltrationreward.traderep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md) &gt; [tradeRep](./bitburner.infiltrationreward.traderep.md)\n\n## InfiltrationReward.tradeRep property\n\n**Signature:**\n\n```typescript\ntradeRep: number;\n```\n", "bitburner.gangmemberinfo.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack](./bitburner.gangmemberinfo.hack.md)\n\n## GangMemberInfo.hack property\n\nHack skill level\n\n**Signature:**\n\n```typescript\nhack: number;\n```\n", "ns.gangmemberinfo.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack](./bitburner.gangmemberinfo.hack.md)\n\n## GangMemberInfo.hack property\n\nHack skill level\n\n**Signature:**\n\n```typescript\nhack: number;\n```\n", "bitburner.stockorder.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrder](./bitburner.stockorder.md)\n\n## StockOrder interface\n\nReturn value of [getOrders](./bitburner.tix.getorders.md)\n\nKeys are stock symbols, properties are arrays of [StockOrderObject](./bitburner.stockorderobject.md)\n\n**Signature:**\n\n```typescript\ninterface StockOrder \n```\n", "ns.stockorder.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrder](./bitburner.stockorder.md)\n\n## StockOrder interface\n\nReturn value of [getOrders](./bitburner.tix.getorders.md)\n\nKeys are stock symbols, properties are arrays of [StockOrderObject](./bitburner.stockorderobject.md)\n\n**Signature:**\n\n```typescript\ninterface StockOrder \n```\n", "bitburner.gangtaskstats.basemoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [baseMoney](./bitburner.gangtaskstats.basemoney.md)\n\n## GangTaskStats.baseMoney property\n\nBase money earned\n\n**Signature:**\n\n```typescript\nbaseMoney: number;\n```\n", "ns.gangtaskstats.basemoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [baseMoney](./bitburner.gangtaskstats.basemoney.md)\n\n## GangTaskStats.baseMoney property\n\nBase money earned\n\n**Signature:**\n\n```typescript\nbaseMoney: number;\n```\n", "bitburner.ns.ls.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ls](./bitburner.ns.ls.md)\n\n## NS.ls() method\n\nList files on a server.\n\n**Signature:**\n\n```typescript\nls(host: string, grep?: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n|  grep | string | _(Optional)_ A substring to search for in the filename. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray with the filenames of all files on the specified server.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nReturns an array with the filenames of all files on the specified server (as strings). The returned array is sorted in alphabetic order.\n\n", "ns.ns.ls.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ls](./bitburner.ns.ls.md)\n\n## NS.ls() method\n\nList files on a server.\n\n**Signature:**\n\n```typescript\nls(host: string, grep?: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n|  grep | string | _(Optional)_ A substring to search for in the filename. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray with the filenames of all files on the specified server.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nReturns an array with the filenames of all files on the specified server (as strings). The returned array is sorted in alphabetic order.\n\n", "bitburner.infiltrationlocation.location.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md) &gt; [location](./bitburner.infiltrationlocation.location.md)\n\n## InfiltrationLocation.location property\n\n**Signature:**\n\n```typescript\nlocation: ILocation;\n```\n", "ns.infiltrationlocation.location.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md) &gt; [location](./bitburner.infiltrationlocation.location.md)\n\n## InfiltrationLocation.location property\n\n**Signature:**\n\n```typescript\nlocation: ILocation;\n```\n", "bitburner.userinterfacetheme.backgroundprimary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [backgroundprimary](./bitburner.userinterfacetheme.backgroundprimary.md)\n\n## UserInterfaceTheme.backgroundprimary property\n\n**Signature:**\n\n```typescript\nbackgroundprimary: string;\n```\n", "ns.userinterfacetheme.backgroundprimary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [backgroundprimary](./bitburner.userinterfacetheme.backgroundprimary.md)\n\n## UserInterfaceTheme.backgroundprimary property\n\n**Signature:**\n\n```typescript\nbackgroundprimary: string;\n```\n", "bitburner.ns.nuke.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [nuke](./bitburner.ns.nuke.md)\n\n## NS.nuke() method\n\nRuns NUKE.exe on a server.\n\n**Signature:**\n\n```typescript\nnuke(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRunning NUKE.exe on a target server gives you root access which means you can execute scripts on said server. NUKE.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nnuke(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.nuke(\"foodnstuff\");\n```\n\n", "ns.ns.nuke.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [nuke](./bitburner.ns.nuke.md)\n\n## NS.nuke() method\n\nRuns NUKE.exe on a server.\n\n**Signature:**\n\n```typescript\nnuke(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRunning NUKE.exe on a target server gives you root access which means you can execute scripts on said server. NUKE.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nnuke(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.nuke(\"foodnstuff\");\n```\n\n", "bitburner.product.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md)\n\n## Product interface\n\nProduct in a warehouse\n\n**Signature:**\n\n```typescript\ninterface Product \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cityData](./bitburner.product.citydata.md) |  | Record&lt;[CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\`, number\\[\\]&gt; | Data refers to the production, sale, and quantity of the products These values are specific to a city For each city, the data is \\[qty, prod, sell\\] |\n|  [cmp](./bitburner.product.cmp.md) |  | number \\| undefined | Competition for the product, only present if \"Market Research - Competition\" unlocked |\n|  [developmentProgress](./bitburner.product.developmentprogress.md) |  | number | Creation progress - A number between 0-100 representing percentage |\n|  [dmd](./bitburner.product.dmd.md) |  | number \\| undefined | Demand for the product, only present if \"Market Research - Demand\" unlocked |\n|  [name](./bitburner.product.name.md) |  | string | Name of the product |\n|  [pCost](./bitburner.product.pcost.md) |  | number | Production cost |\n|  [properties](./bitburner.product.properties.md) |  | { \\[key: string\\]: number } | Product Properties. The data is {<!-- -->qlt, per, dur, rel, aes, fea<!-- -->} |\n|  [rat](./bitburner.product.rat.md) |  | number | Product Rating |\n|  [sCost](./bitburner.product.scost.md) |  | string \\| number | Sell cost, can be \"MP+5\" |\n\n", "ns.product.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md)\n\n## Product interface\n\nProduct in a warehouse\n\n**Signature:**\n\n```typescript\ninterface Product \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cityData](./bitburner.product.citydata.md) |  | Record&lt;[CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\`, number\\[\\]&gt; | Data refers to the production, sale, and quantity of the products These values are specific to a city For each city, the data is \\[qty, prod, sell\\] |\n|  [cmp](./bitburner.product.cmp.md) |  | number \\| undefined | Competition for the product, only present if \"Market Research - Competition\" unlocked |\n|  [developmentProgress](./bitburner.product.developmentprogress.md) |  | number | Creation progress - A number between 0-100 representing percentage |\n|  [dmd](./bitburner.product.dmd.md) |  | number \\| undefined | Demand for the product, only present if \"Market Research - Demand\" unlocked |\n|  [name](./bitburner.product.name.md) |  | string | Name of the product |\n|  [pCost](./bitburner.product.pcost.md) |  | number | Production cost |\n|  [properties](./bitburner.product.properties.md) |  | { \\[key: string\\]: number } | Product Properties. The data is {<!-- -->qlt, per, dur, rel, aes, fea<!-- -->} |\n|  [rat](./bitburner.product.rat.md) |  | number | Product Rating |\n|  [sCost](./bitburner.product.scost.md) |  | string \\| number | Sell cost, can be \"MP+5\" |\n\n", "bitburner.stockorderobject.position.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [position](./bitburner.stockorderobject.position.md)\n\n## StockOrderObject.position property\n\nOrder position\n\n**Signature:**\n\n```typescript\nposition: PositionTypes;\n```\n", "ns.stockorderobject.position.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [position](./bitburner.stockorderobject.position.md)\n\n## StockOrderObject.position property\n\nOrder position\n\n**Signature:**\n\n```typescript\nposition: PositionTypes;\n```\n", "bitburner.corpconstants.issuenewsharescooldown.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [issueNewSharesCooldown](./bitburner.corpconstants.issuenewsharescooldown.md)\n\n## CorpConstants.issueNewSharesCooldown property\n\nCooldown for issue new shares cooldown in game cycles (1 game cycle = 200ms)\n\n**Signature:**\n\n```typescript\nissueNewSharesCooldown: number;\n```\n", "ns.corpconstants.issuenewsharescooldown.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [issueNewSharesCooldown](./bitburner.corpconstants.issuenewsharescooldown.md)\n\n## CorpConstants.issueNewSharesCooldown property\n\nCooldown for issue new shares cooldown in game cycles (1 game cycle = 200ms)\n\n**Signature:**\n\n```typescript\nissueNewSharesCooldown: number;\n```\n", "bitburner.userinterfacetheme.black.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [black](./bitburner.userinterfacetheme.black.md)\n\n## UserInterfaceTheme.black property\n\n**Signature:**\n\n```typescript\nblack: string;\n```\n", "ns.userinterfacetheme.black.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [black](./bitburner.userinterfacetheme.black.md)\n\n## UserInterfaceTheme.black property\n\n**Signature:**\n\n```typescript\nblack: string;\n```\n", "bitburner.multipliers.hacking_chance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_chance](./bitburner.multipliers.hacking_chance.md)\n\n## Multipliers.hacking\\_chance property\n\nMultiplier to chance of successfully performing a hack\n\n**Signature:**\n\n```typescript\nhacking_chance: number;\n```\n", "ns.multipliers.hacking_chance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_chance](./bitburner.multipliers.hacking_chance.md)\n\n## Multipliers.hacking\\_chance property\n\nMultiplier to chance of successfully performing a hack\n\n**Signature:**\n\n```typescript\nhacking_chance: number;\n```\n", "bitburner.sleevesupporttask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveSupportTask](./bitburner.sleevesupporttask.md)\n\n## SleeveSupportTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveSupportTask = { type: \"SUPPORT\" };\n```\n", "ns.sleevesupporttask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveSupportTask](./bitburner.sleevesupporttask.md)\n\n## SleeveSupportTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveSupportTask = { type: \"SUPPORT\" };\n```\n", "bitburner.corpindustrydata.hardwarefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [hardwareFactor](./bitburner.corpindustrydata.hardwarefactor.md)\n\n## CorpIndustryData.hardwareFactor property\n\nHardware factor\n\n**Signature:**\n\n```typescript\nhardwareFactor?: number;\n```\n", "ns.corpindustrydata.hardwarefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [hardwareFactor](./bitburner.corpindustrydata.hardwarefactor.md)\n\n## CorpIndustryData.hardwareFactor property\n\nHardware factor\n\n**Signature:**\n\n```typescript\nhardwareFactor?: number;\n```\n", "bitburner.warehouse.smartsupplyenabled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [smartSupplyEnabled](./bitburner.warehouse.smartsupplyenabled.md)\n\n## Warehouse.smartSupplyEnabled property\n\nSmart Supply status in the warehouse\n\n**Signature:**\n\n```typescript\nsmartSupplyEnabled: boolean;\n```\n", "ns.warehouse.smartsupplyenabled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [smartSupplyEnabled](./bitburner.warehouse.smartsupplyenabled.md)\n\n## Warehouse.smartSupplyEnabled property\n\nSmart Supply status in the warehouse\n\n**Signature:**\n\n```typescript\nsmartSupplyEnabled: boolean;\n```\n", "bitburner.crimestats.hacking_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [hacking\\_exp](./bitburner.crimestats.hacking_exp.md)\n\n## CrimeStats.hacking\\_exp property\n\nhacking exp gained from crime\n\n**Signature:**\n\n```typescript\nhacking_exp: number;\n```\n", "ns.crimestats.hacking_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [hacking\\_exp](./bitburner.crimestats.hacking_exp.md)\n\n## CrimeStats.hacking\\_exp property\n\nhacking exp gained from crime\n\n**Signature:**\n\n```typescript\nhacking_exp: number;\n```\n", "bitburner.corpconstants.employeeraiseamount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [employeeRaiseAmount](./bitburner.corpconstants.employeeraiseamount.md)\n\n## CorpConstants.employeeRaiseAmount property\n\n**Signature:**\n\n```typescript\nemployeeRaiseAmount: number;\n```\n", "ns.corpconstants.employeeraiseamount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [employeeRaiseAmount](./bitburner.corpconstants.employeeraiseamount.md)\n\n## CorpConstants.employeeRaiseAmount property\n\n**Signature:**\n\n```typescript\nemployeeRaiseAmount: number;\n```\n", "bitburner.singularity.joinfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [joinFaction](./bitburner.singularity.joinfaction.md)\n\n## Singularity.joinFaction() method\n\nJoin a faction.\n\n**Signature:**\n\n```typescript\njoinFaction(faction: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to join. |\n\n**Returns:**\n\nboolean\n\nTrue if player joined the faction, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will automatically accept an invitation from a faction and join it.\n\n", "ns.singularity.joinfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [joinFaction](./bitburner.singularity.joinfaction.md)\n\n## Singularity.joinFaction() method\n\nJoin a faction.\n\n**Signature:**\n\n```typescript\njoinFaction(faction: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to join. |\n\n**Returns:**\n\nboolean\n\nTrue if player joined the faction, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will automatically accept an invitation from a faction and join it.\n\n", "bitburner.fragment.shape.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [shape](./bitburner.fragment.shape.md)\n\n## Fragment.shape property\n\n**Signature:**\n\n```typescript\nshape: boolean[][];\n```\n", "ns.fragment.shape.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [shape](./bitburner.fragment.shape.md)\n\n## Fragment.shape property\n\n**Signature:**\n\n```typescript\nshape: boolean[][];\n```\n", "bitburner.singularity.installaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [installAugmentations](./bitburner.singularity.installaugmentations.md)\n\n## Singularity.installAugmentations() method\n\nInstall your purchased augmentations.\n\n**Signature:**\n\n```typescript\ninstallAugmentations(cbScript?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  cbScript | string | _(Optional)_ This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will automatically install your Augmentations, resetting the game as usual. If you do not own uninstalled Augmentations then the game will not reset.\n\n", "ns.singularity.installaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [installAugmentations](./bitburner.singularity.installaugmentations.md)\n\n## Singularity.installAugmentations() method\n\nInstall your purchased augmentations.\n\n**Signature:**\n\n```typescript\ninstallAugmentations(cbScript?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  cbScript | string | _(Optional)_ This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will automatically install your Augmentations, resetting the game as usual. If you do not own uninstalled Augmentations then the game will not reset.\n\n", "bitburner.ns.hackanalyzechance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyzeChance](./bitburner.ns.hackanalyzechance.md)\n\n## NS.hackAnalyzeChance() method\n\nGet the chance of successfully hacking a server.\n\n**Signature:**\n\n```typescript\nhackAnalyzeChance(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe chance you have of successfully hacking the target server.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the chance you have of successfully hacking the specified server.\n\nThis returned value is in decimal form, not percentage.\n\n", "ns.ns.hackanalyzechance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyzeChance](./bitburner.ns.hackanalyzechance.md)\n\n## NS.hackAnalyzeChance() method\n\nGet the chance of successfully hacking a server.\n\n**Signature:**\n\n```typescript\nhackAnalyzeChance(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe chance you have of successfully hacking the target server.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the chance you have of successfully hacking the specified server.\n\nThis returned value is in decimal form, not percentage.\n\n", "bitburner.workstats.strexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [strExp](./bitburner.workstats.strexp.md)\n\n## WorkStats.strExp property\n\n**Signature:**\n\n```typescript\nstrExp: number;\n```\n", "ns.workstats.strexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [strExp](./bitburner.workstats.strexp.md)\n\n## WorkStats.strExp property\n\n**Signature:**\n\n```typescript\nstrExp: number;\n```\n", "bitburner.moneysource.codingcontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [codingcontract](./bitburner.moneysource.codingcontract.md)\n\n## MoneySource.codingcontract property\n\n**Signature:**\n\n```typescript\ncodingcontract: number;\n```\n", "ns.moneysource.codingcontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [codingcontract](./bitburner.moneysource.codingcontract.md)\n\n## MoneySource.codingcontract property\n\n**Signature:**\n\n```typescript\ncodingcontract: number;\n```\n", "bitburner.corporationinfo.state.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [state](./bitburner.corporationinfo.state.md)\n\n## CorporationInfo.state property\n\nState of the corporation. Possible states are START, PURCHASE, PRODUCTION, EXPORT, SALE.\n\n**Signature:**\n\n```typescript\nstate: string;\n```\n", "ns.corporationinfo.state.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [state](./bitburner.corporationinfo.state.md)\n\n## CorporationInfo.state property\n\nState of the corporation. Possible states are START, PURCHASE, PRODUCTION, EXPORT, SALE.\n\n**Signature:**\n\n```typescript\nstate: string;\n```\n", "bitburner.workformulas.crimegains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [crimeGains](./bitburner.workformulas.crimegains.md)\n\n## WorkFormulas.crimeGains() method\n\n**Signature:**\n\n```typescript\ncrimeGains(person: Person, crimeType: CrimeType | `${CrimeType}`): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  crimeType | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats gained when completing one instance of the specified crime.\n\n", "ns.workformulas.crimegains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [crimeGains](./bitburner.workformulas.crimegains.md)\n\n## WorkFormulas.crimeGains() method\n\n**Signature:**\n\n```typescript\ncrimeGains(person: Person, crimeType: CrimeType | `${CrimeType}`): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  crimeType | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats gained when completing one instance of the specified crime.\n\n", "bitburner.officeapi.gethireadvertcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getHireAdVertCost](./bitburner.officeapi.gethireadvertcost.md)\n\n## OfficeAPI.getHireAdVertCost() method\n\nGet the cost to hire AdVert.\n\n**Signature:**\n\n```typescript\ngetHireAdVertCost(divisionName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n\n**Returns:**\n\nnumber\n\nThe cost to hire AdVert.\n\n", "ns.officeapi.gethireadvertcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getHireAdVertCost](./bitburner.officeapi.gethireadvertcost.md)\n\n## OfficeAPI.getHireAdVertCost() method\n\nGet the cost to hire AdVert.\n\n**Signature:**\n\n```typescript\ngetHireAdVertCost(divisionName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n\n**Returns:**\n\nnumber\n\nThe cost to hire AdVert.\n\n", "bitburner.gang.setmembertask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [setMemberTask](./bitburner.gang.setmembertask.md)\n\n## Gang.setMemberTask() method\n\nSet gang member to task.\n\n**Signature:**\n\n```typescript\nsetMemberTask(memberName: string, taskName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of Gang member to assign. |\n|  taskName | string | Task to assign. |\n\n**Returns:**\n\nboolean\n\nTrue if the Gang Member was successfully assigned to the task, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB\n\nAttempts to assign the specified Gang Member to the specified task. If an invalid task is specified, the Gang member will be set to idle (\u201cUnassigned\u201d).\n\n", "ns.gang.setmembertask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [setMemberTask](./bitburner.gang.setmembertask.md)\n\n## Gang.setMemberTask() method\n\nSet gang member to task.\n\n**Signature:**\n\n```typescript\nsetMemberTask(memberName: string, taskName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of Gang member to assign. |\n|  taskName | string | Task to assign. |\n\n**Returns:**\n\nboolean\n\nTrue if the Gang Member was successfully assigned to the task, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB\n\nAttempts to assign the specified Gang Member to the specified task. If an invalid task is specified, the Gang member will be set to idle (\u201cUnassigned\u201d).\n\n", "bitburner.ns.deleteserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [deleteServer](./bitburner.ns.deleteserver.md)\n\n## NS.deleteServer() method\n\nDelete a purchased server.\n\n**Signature:**\n\n```typescript\ndeleteServer(host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the server to delete. |\n\n**Returns:**\n\nboolean\n\nTrue if successful, and false otherwise.\n\n## Remarks\n\n2.25 GB\n\nDeletes one of your purchased servers, which is specified by its hostname.\n\nThe hostname argument can be any data type, but it will be converted to a string. Whitespace is automatically removed from the string. This function will not delete a server that still has scripts running on it.\n\n", "ns.ns.deleteserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [deleteServer](./bitburner.ns.deleteserver.md)\n\n## NS.deleteServer() method\n\nDelete a purchased server.\n\n**Signature:**\n\n```typescript\ndeleteServer(host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the server to delete. |\n\n**Returns:**\n\nboolean\n\nTrue if successful, and false otherwise.\n\n## Remarks\n\n2.25 GB\n\nDeletes one of your purchased servers, which is specified by its hostname.\n\nThe hostname argument can be any data type, but it will be converted to a string. Whitespace is automatically removed from the string. This function will not delete a server that still has scripts running on it.\n\n", "bitburner.server.sqlportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [sqlPortOpen](./bitburner.server.sqlportopen.md)\n\n## Server.sqlPortOpen property\n\nFlag indicating whether SQL Port is open\n\n**Signature:**\n\n```typescript\nsqlPortOpen: boolean;\n```\n", "ns.server.sqlportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [sqlPortOpen](./bitburner.server.sqlportopen.md)\n\n## Server.sqlPortOpen property\n\nFlag indicating whether SQL Port is open\n\n**Signature:**\n\n```typescript\nsqlPortOpen: boolean;\n```\n", "bitburner.singularity.hospitalize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [hospitalize](./bitburner.singularity.hospitalize.md)\n\n## Singularity.hospitalize() method\n\nHospitalize the player.\n\n**Signature:**\n\n```typescript\nhospitalize(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.25 GB \\* 16/4/1\n\n", "ns.singularity.hospitalize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [hospitalize](./bitburner.singularity.hospitalize.md)\n\n## Singularity.hospitalize() method\n\nHospitalize the player.\n\n**Signature:**\n\n```typescript\nhospitalize(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.25 GB \\* 16/4/1\n\n", "bitburner.userinterfacetheme.warning.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [warning](./bitburner.userinterfacetheme.warning.md)\n\n## UserInterfaceTheme.warning property\n\n**Signature:**\n\n```typescript\nwarning: string;\n```\n", "ns.userinterfacetheme.warning.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [warning](./bitburner.userinterfacetheme.warning.md)\n\n## UserInterfaceTheme.warning property\n\n**Signature:**\n\n```typescript\nwarning: string;\n```\n", "bitburner.office.employeejobs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [employeeJobs](./bitburner.office.employeejobs.md)\n\n## Office.employeeJobs property\n\nPositions of the employees\n\n**Signature:**\n\n```typescript\nemployeeJobs: Record<CorpEmployeePosition, number>;\n```\n", "ns.office.employeejobs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [employeeJobs](./bitburner.office.employeejobs.md)\n\n## Office.employeeJobs property\n\nPositions of the employees\n\n**Signature:**\n\n```typescript\nemployeeJobs: Record<CorpEmployeePosition, number>;\n```\n", "bitburner.corpemployeeposition.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpEmployeePosition](./bitburner.corpemployeeposition.md)\n\n## CorpEmployeePosition type\n\n\n**Signature:**\n\n```typescript\ntype CorpEmployeePosition =\n  | \"Operations\"\n  | \"Engineer\"\n  | \"Business\"\n  | \"Management\"\n  | \"Research & Development\"\n  | \"Training\"\n  | \"Unassigned\";\n```\n", "ns.corpemployeeposition.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpEmployeePosition](./bitburner.corpemployeeposition.md)\n\n## CorpEmployeePosition type\n\n\n**Signature:**\n\n```typescript\ntype CorpEmployeePosition =\n  | \"Operations\"\n  | \"Engineer\"\n  | \"Business\"\n  | \"Management\"\n  | \"Research & Development\"\n  | \"Training\"\n  | \"Unassigned\";\n```\n", "bitburner.singularity.upgradehomecores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [upgradeHomeCores](./bitburner.singularity.upgradehomecores.md)\n\n## Singularity.upgradeHomeCores() method\n\nUpgrade home computer cores.\n\n**Signature:**\n\n```typescript\nupgradeHomeCores(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player\u2019s home computer cores is successfully upgraded, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will upgrade amount of cores on the player\u2019s home computer. The cost is the same as if you were to do it manually.\n\nThis function will return true if the player\u2019s home computer cores is successfully upgraded, and false otherwise.\n\n", "ns.singularity.upgradehomecores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [upgradeHomeCores](./bitburner.singularity.upgradehomecores.md)\n\n## Singularity.upgradeHomeCores() method\n\nUpgrade home computer cores.\n\n**Signature:**\n\n```typescript\nupgradeHomeCores(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player\u2019s home computer cores is successfully upgraded, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will upgrade amount of cores on the player\u2019s home computer. The cost is the same as if you were to do it manually.\n\nThis function will return true if the player\u2019s home computer cores is successfully upgraded, and false otherwise.\n\n", "bitburner.ns.rm.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [rm](./bitburner.ns.rm.md)\n\n## NS.rm() method\n\nDelete a file.\n\n**Signature:**\n\n```typescript\nrm(name: string, host?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Filename of file to remove. Must include the extension. |\n|  host | string | _(Optional)_ Hostname of the server on which to delete the file. Optional. Defaults to current server. |\n\n**Returns:**\n\nboolean\n\nTrue if it successfully deletes the file, and false otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nRemoves the specified file from the current server. This function works for every file type except message (.msg) files.\n\n", "ns.ns.rm.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [rm](./bitburner.ns.rm.md)\n\n## NS.rm() method\n\nDelete a file.\n\n**Signature:**\n\n```typescript\nrm(name: string, host?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Filename of file to remove. Must include the extension. |\n|  host | string | _(Optional)_ Hostname of the server on which to delete the file. Optional. Defaults to current server. |\n\n**Returns:**\n\nboolean\n\nTrue if it successfully deletes the file, and false otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nRemoves the specified file from the current server. This function works for every file type except message (.msg) files.\n\n", "bitburner.crimestats.dexterity_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [dexterity\\_success\\_weight](./bitburner.crimestats.dexterity_success_weight.md)\n\n## CrimeStats.dexterity\\_success\\_weight property\n\ndexterity level impact on success change of the crime\n\n**Signature:**\n\n```typescript\ndexterity_success_weight: number;\n```\n", "ns.crimestats.dexterity_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [dexterity\\_success\\_weight](./bitburner.crimestats.dexterity_success_weight.md)\n\n## CrimeStats.dexterity\\_success\\_weight property\n\ndexterity level impact on success change of the crime\n\n**Signature:**\n\n```typescript\ndexterity_success_weight: number;\n```\n", "bitburner.singularity.getdarkwebprograms.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getDarkwebPrograms](./bitburner.singularity.getdarkwebprograms.md)\n\n## Singularity.getDarkwebPrograms() method\n\nGet a list of programs offered on the dark web.\n\n**Signature:**\n\n```typescript\ngetDarkwebPrograms(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\n- a list of programs available for purchase on the dark web, or \\[\\] if Tor has not been purchased\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function allows the player to get a list of programs available for purchase on the dark web. Players MUST have purchased Tor to get the list of programs available. If Tor has not been purchased yet, this function will return an empty list.\n\n## Example 1\n\n\n```ts\n// NS1\ngetDarkwebPrograms();\n// returns ['BruteSSH.exe', 'FTPCrack.exe'...etc]\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.getDarkwebPrograms();\n// returns ['BruteSSH.exe', 'FTPCrack.exe'...etc]\n```\n\n", "ns.singularity.getdarkwebprograms.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getDarkwebPrograms](./bitburner.singularity.getdarkwebprograms.md)\n\n## Singularity.getDarkwebPrograms() method\n\nGet a list of programs offered on the dark web.\n\n**Signature:**\n\n```typescript\ngetDarkwebPrograms(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\n- a list of programs available for purchase on the dark web, or \\[\\] if Tor has not been purchased\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function allows the player to get a list of programs available for purchase on the dark web. Players MUST have purchased Tor to get the list of programs available. If Tor has not been purchased yet, this function will return an empty list.\n\n## Example 1\n\n\n```ts\n// NS1\ngetDarkwebPrograms();\n// returns ['BruteSSH.exe', 'FTPCrack.exe'...etc]\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.getDarkwebPrograms();\n// returns ['BruteSSH.exe', 'FTPCrack.exe'...etc]\n```\n\n", "bitburner.tix.getsalegain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getSaleGain](./bitburner.tix.getsalegain.md)\n\n## TIX.getSaleGain() method\n\nCalculate profit of selling stocks.\n\n**Signature:**\n\n```typescript\ngetSaleGain(sym: string, shares: number, posType: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to sell. |\n|  posType | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nnumber\n\nGain from selling a given number of shares of a stock.\n\n## Remarks\n\nRAM cost: 2 GB Calculates and returns how much you would gain from selling a given number of shares of a stock. This takes into account spread, large transactions influencing the price of the stock and commission fees.\n\n", "ns.tix.getsalegain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getSaleGain](./bitburner.tix.getsalegain.md)\n\n## TIX.getSaleGain() method\n\nCalculate profit of selling stocks.\n\n**Signature:**\n\n```typescript\ngetSaleGain(sym: string, shares: number, posType: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to sell. |\n|  posType | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nnumber\n\nGain from selling a given number of shares of a stock.\n\n## Remarks\n\nRAM cost: 2 GB Calculates and returns how much you would gain from selling a given number of shares of a stock. This takes into account spread, large transactions influencing the price of the stock and commission fees.\n\n", "bitburner.gangmemberascension.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [cha](./bitburner.gangmemberascension.cha.md)\n\n## GangMemberAscension.cha property\n\nCharisma multiplier gained from ascending\n\n**Signature:**\n\n```typescript\ncha: number;\n```\n", "ns.gangmemberascension.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [cha](./bitburner.gangmemberascension.cha.md)\n\n## GangMemberAscension.cha property\n\nCharisma multiplier gained from ascending\n\n**Signature:**\n\n```typescript\ncha: number;\n```\n", "bitburner.sleeve.settogymworkout.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToGymWorkout](./bitburner.sleeve.settogymworkout.md)\n\n## Sleeve.setToGymWorkout() method\n\nSet a sleeve to workout at the gym.\n\n**Signature:**\n\n```typescript\nsetToGymWorkout(sleeveNumber: number, gymName: string, stat: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to workout at the gym. |\n|  gymName | string | Name of the gym. |\n|  stat | string | Name of the stat to train. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve started working out, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working out.\n\n", "ns.sleeve.settogymworkout.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToGymWorkout](./bitburner.sleeve.settogymworkout.md)\n\n## Sleeve.setToGymWorkout() method\n\nSet a sleeve to workout at the gym.\n\n**Signature:**\n\n```typescript\nsetToGymWorkout(sleeveNumber: number, gymName: string, stat: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to workout at the gym. |\n|  gymName | string | Name of the gym. |\n|  stat | string | Name of the stat to train. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve started working out, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working out.\n\n", "bitburner.office.size.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [size](./bitburner.office.size.md)\n\n## Office.size property\n\nMaximum number of employee\n\n**Signature:**\n\n```typescript\nsize: number;\n```\n", "ns.office.size.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [size](./bitburner.office.size.md)\n\n## Office.size property\n\nMaximum number of employee\n\n**Signature:**\n\n```typescript\nsize: number;\n```\n", "bitburner.ns.getrecentscripts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getRecentScripts](./bitburner.ns.getrecentscripts.md)\n\n## NS.getRecentScripts() method\n\nGet an array of recently killed scripts across all servers.\n\n**Signature:**\n\n```typescript\ngetRecentScripts(): RecentScript[];\n```\n**Returns:**\n\n[RecentScript](./bitburner.recentscript.md)<!-- -->\\[\\]\n\nArray with information about previously killed scripts.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nThe most recently killed script is the first element in the array. Note that there is a maximum number of recently killed scripts which are tracked. This is configurable in the game's options as `Recently killed scripts size`<!-- -->.\n\n## Example\n\n\n```ts\nlet recentScripts = ns.getRecentScripts();\nlet mostRecent = recentScripts.shift()\nif (mostRecent)\n  ns.tprint(mostRecent.logs.join('\\n'))\n```\n\n", "ns.ns.getrecentscripts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getRecentScripts](./bitburner.ns.getrecentscripts.md)\n\n## NS.getRecentScripts() method\n\nGet an array of recently killed scripts across all servers.\n\n**Signature:**\n\n```typescript\ngetRecentScripts(): RecentScript[];\n```\n**Returns:**\n\n[RecentScript](./bitburner.recentscript.md)<!-- -->\\[\\]\n\nArray with information about previously killed scripts.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nThe most recently killed script is the first element in the array. Note that there is a maximum number of recently killed scripts which are tracked. This is configurable in the game's options as `Recently killed scripts size`<!-- -->.\n\n## Example\n\n\n```ts\nlet recentScripts = ns.getRecentScripts();\nlet mostRecent = recentScripts.shift()\nif (mostRecent)\n  ns.tprint(mostRecent.logs.join('\\n'))\n```\n\n", "bitburner.stanek.cleargift.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [clearGift](./bitburner.stanek.cleargift.md)\n\n## Stanek.clearGift() method\n\nClear the board of all fragments.\n\n**Signature:**\n\n```typescript\nclearGift(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.stanek.cleargift.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [clearGift](./bitburner.stanek.cleargift.md)\n\n## Stanek.clearGift() method\n\nClear the board of all fragments.\n\n**Signature:**\n\n```typescript\nclearGift(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bladeburner.getactionautolevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionAutolevel](./bitburner.bladeburner.getactionautolevel.md)\n\n## Bladeburner.getActionAutolevel() method\n\nGet whether an action is set to autolevel.\n\n**Signature:**\n\n```typescript\ngetActionAutolevel(type: string, name: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nboolean\n\nTrue if the action is set to autolevel, and false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action is currently set to autolevel.\n\nReturns false if an invalid action is specified.\n\n", "ns.bladeburner.getactionautolevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionAutolevel](./bitburner.bladeburner.getactionautolevel.md)\n\n## Bladeburner.getActionAutolevel() method\n\nGet whether an action is set to autolevel.\n\n**Signature:**\n\n```typescript\ngetActionAutolevel(type: string, name: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nboolean\n\nTrue if the action is set to autolevel, and false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action is currently set to autolevel.\n\nReturns false if an invalid action is specified.\n\n", "bitburner.material.qty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [qty](./bitburner.material.qty.md)\n\n## Material.qty property\n\nAmount of material\n\n**Signature:**\n\n```typescript\nqty: number;\n```\n", "ns.material.qty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [qty](./bitburner.material.qty.md)\n\n## Material.qty property\n\nAmount of material\n\n**Signature:**\n\n```typescript\nqty: number;\n```\n", "bitburner.ns.islogenabled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [isLogEnabled](./bitburner.ns.islogenabled.md)\n\n## NS.isLogEnabled() method\n\nChecks the status of the logging for the given function.\n\n**Signature:**\n\n```typescript\nisLogEnabled(fn: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | Name of function to check. |\n\n**Returns:**\n\nboolean\n\nReturns a boolean indicating whether or not logging is enabled for that function (or `ALL`<!-- -->).\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.islogenabled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [isLogEnabled](./bitburner.ns.islogenabled.md)\n\n## NS.isLogEnabled() method\n\nChecks the status of the logging for the given function.\n\n**Signature:**\n\n```typescript\nisLogEnabled(fn: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | Name of function to check. |\n\n**Returns:**\n\nboolean\n\nReturns a boolean indicating whether or not logging is enabled for that function (or `ALL`<!-- -->).\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.hp.max.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HP](./bitburner.hp.md) &gt; [max](./bitburner.hp.max.md)\n\n## HP.max property\n\n**Signature:**\n\n```typescript\nmax: number;\n```\n", "ns.hp.max.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HP](./bitburner.hp.md) &gt; [max](./bitburner.hp.max.md)\n\n## HP.max property\n\n**Signature:**\n\n```typescript\nmax: number;\n```\n", "bitburner.bitnodemultipliers.gangsoftcap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [GangSoftcap](./bitburner.bitnodemultipliers.gangsoftcap.md)\n\n## BitNodeMultipliers.GangSoftcap property\n\nInfluences the respect gain and money gain of your gang.\n\n**Signature:**\n\n```typescript\nGangSoftcap: number;\n```\n", "ns.bitnodemultipliers.gangsoftcap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [GangSoftcap](./bitburner.bitnodemultipliers.gangsoftcap.md)\n\n## BitNodeMultipliers.GangSoftcap property\n\nInfluences the respect gain and money gain of your gang.\n\n**Signature:**\n\n```typescript\nGangSoftcap: number;\n```\n", "bitburner.hackingformulas.hackexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackExp](./bitburner.hackingformulas.hackexp.md)\n\n## HackingFormulas.hackExp() method\n\nCalculate hack exp for one thread.\n\n**Signature:**\n\n```typescript\nhackExp(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack exp.\n\n## Remarks\n\nMultiply by thread to get total exp\n\n", "ns.hackingformulas.hackexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackExp](./bitburner.hackingformulas.hackexp.md)\n\n## HackingFormulas.hackExp() method\n\nCalculate hack exp for one thread.\n\n**Signature:**\n\n```typescript\nhackExp(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack exp.\n\n## Remarks\n\nMultiply by thread to get total exp\n\n", "bitburner.ns.gethackingmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHackingMultipliers](./bitburner.ns.gethackingmultipliers.md)\n\n## NS.getHackingMultipliers() method\n\nGet hacking related multipliers.\n\n**Signature:**\n\n```typescript\ngetHackingMultipliers(): HackingMultipliers;\n```\n**Returns:**\n\n[HackingMultipliers](./bitburner.hackingmultipliers.md)\n\nObject containing the Player\u2019s hacking related multipliers.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\nReturns an object containing the Player\u2019s hacking related multipliers. These multipliers are returned in fractional forms, not percentages (e.g. 1.5 instead of 150%).\n\n## Example 1\n\n\n```ts\n// NS1:\n// Example of how this can be used:\nvar mults = getHackingMultipliers();\nprint(mults.chance);\nprint(mults.growth);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n// Example of how this can be used:\nconst {chance, growth} = ns.getHackingMultipliers();\nprint(chance);\nprint(growth);\n```\n\n", "ns.ns.gethackingmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHackingMultipliers](./bitburner.ns.gethackingmultipliers.md)\n\n## NS.getHackingMultipliers() method\n\nGet hacking related multipliers.\n\n**Signature:**\n\n```typescript\ngetHackingMultipliers(): HackingMultipliers;\n```\n**Returns:**\n\n[HackingMultipliers](./bitburner.hackingmultipliers.md)\n\nObject containing the Player\u2019s hacking related multipliers.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\nReturns an object containing the Player\u2019s hacking related multipliers. These multipliers are returned in fractional forms, not percentages (e.g. 1.5 instead of 150%).\n\n## Example 1\n\n\n```ts\n// NS1:\n// Example of how this can be used:\nvar mults = getHackingMultipliers();\nprint(mults.chance);\nprint(mults.growth);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n// Example of how this can be used:\nconst {chance, growth} = ns.getHackingMultipliers();\nprint(chance);\nprint(growth);\n```\n\n", "bitburner.hacknet.getnodestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getNodeStats](./bitburner.hacknet.getnodestats.md)\n\n## Hacknet.getNodeStats() method\n\nGet the stats of a hacknet node.\n\n**Signature:**\n\n```typescript\ngetNodeStats(index: number): NodeStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node |\n\n**Returns:**\n\n[NodeStats](./bitburner.nodestats.md)\n\nObject containing a variety of stats about the specified Hacknet Node.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns an object containing a variety of stats about the specified Hacknet Node.\n\nNote that for Hacknet Nodes, production refers to the amount of money the node generates. For Hacknet Servers (the upgraded version of Hacknet Nodes), production refers to the amount of hashes the node generates.\n\n", "ns.hacknet.getnodestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getNodeStats](./bitburner.hacknet.getnodestats.md)\n\n## Hacknet.getNodeStats() method\n\nGet the stats of a hacknet node.\n\n**Signature:**\n\n```typescript\ngetNodeStats(index: number): NodeStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node |\n\n**Returns:**\n\n[NodeStats](./bitburner.nodestats.md)\n\nObject containing a variety of stats about the specified Hacknet Node.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns an object containing a variety of stats about the specified Hacknet Node.\n\nNote that for Hacknet Nodes, production refers to the amount of money the node generates. For Hacknet Servers (the upgraded version of Hacknet Nodes), production refers to the amount of hashes the node generates.\n\n", "bitburner.ns.peek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [peek](./bitburner.ns.peek.md)\n\n## NS.peek() method\n\nGet a copy of the data from a port without popping it.\n\n**Signature:**\n\n```typescript\npeek(port: number): PortData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number | Port to peek. Must be an integer between 1 and 20. |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nData in the specified port.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is used to peek at the data from a port. It returns the first element in the specified port without removing that element. If the port is empty, the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "ns.ns.peek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [peek](./bitburner.ns.peek.md)\n\n## NS.peek() method\n\nGet a copy of the data from a port without popping it.\n\n**Signature:**\n\n```typescript\npeek(port: number): PortData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number | Port to peek. Must be an integer between 1 and 20. |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nData in the specified port.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is used to peek at the data from a port. It returns the first element in the specified port without removing that element. If the port is empty, the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "bitburner.corporation.buybackshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [buyBackShares](./bitburner.corporation.buybackshares.md)\n\n## Corporation.buyBackShares() method\n\nBuyback Shares\n\n**Signature:**\n\n```typescript\nbuyBackShares(amount: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | Amount of shares to buy back. |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.buybackshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [buyBackShares](./bitburner.corporation.buybackshares.md)\n\n## Corporation.buyBackShares() method\n\nBuyback Shares\n\n**Signature:**\n\n```typescript\nbuyBackShares(amount: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | Amount of shares to buy back. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.material.scost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [sCost](./bitburner.material.scost.md)\n\n## Material.sCost property\n\nSell cost, can be \"MP+5\"\n\n**Signature:**\n\n```typescript\nsCost: string | number;\n```\n", "ns.material.scost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [sCost](./bitburner.material.scost.md)\n\n## Material.sCost property\n\nSell cost, can be \"MP+5\"\n\n**Signature:**\n\n```typescript\nsCost: string | number;\n```\n", "bitburner.skills.strength.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [strength](./bitburner.skills.strength.md)\n\n## Skills.strength property\n\n**Signature:**\n\n```typescript\nstrength: number;\n```\n", "ns.skills.strength.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [strength](./bitburner.skills.strength.md)\n\n## Skills.strength property\n\n**Signature:**\n\n```typescript\nstrength: number;\n```\n", "bitburner.hacknet.hashcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [hashCost](./bitburner.hacknet.hashcost.md)\n\n## Hacknet.hashCost() method\n\nGet the cost of a hash upgrade.\n\n**Signature:**\n\n```typescript\nhashCost(upgName: string, count?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | string | Name of the upgrade of Hacknet Node. |\n|  count | number | _(Optional)_ Number of upgrades to buy at once. Defaults to 1 if not specified. |\n\n**Returns:**\n\nnumber\n\nNumber of hashes required for the specified upgrade.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the number of hashes required for the specified upgrade. The name of the upgrade must be an exact match.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar upgradeName = \"Sell for Corporation Funds\";\nif (hacknet.numHashes() > hacknet.hashCost(upgradeName)) {\n   hacknet.spendHashes(upgradeName);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst upgradeName = \"Sell for Corporation Funds\";\nif (ns.hacknet.numHashes() > ns.hacknet.hashCost(upgradeName)) {\n   ns.hacknet.spendHashes(upgradeName);\n}\n```\n\n", "ns.hacknet.hashcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [hashCost](./bitburner.hacknet.hashcost.md)\n\n## Hacknet.hashCost() method\n\nGet the cost of a hash upgrade.\n\n**Signature:**\n\n```typescript\nhashCost(upgName: string, count?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | string | Name of the upgrade of Hacknet Node. |\n|  count | number | _(Optional)_ Number of upgrades to buy at once. Defaults to 1 if not specified. |\n\n**Returns:**\n\nnumber\n\nNumber of hashes required for the specified upgrade.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the number of hashes required for the specified upgrade. The name of the upgrade must be an exact match.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar upgradeName = \"Sell for Corporation Funds\";\nif (hacknet.numHashes() > hacknet.hashCost(upgradeName)) {\n   hacknet.spendHashes(upgradeName);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst upgradeName = \"Sell for Corporation Funds\";\nif (ns.hacknet.numHashes() > ns.hacknet.hashCost(upgradeName)) {\n   ns.hacknet.spendHashes(upgradeName);\n}\n```\n\n", "bitburner.corpindustrydata.product.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [product](./bitburner.corpindustrydata.product.md)\n\n## CorpIndustryData.product property\n\n**Signature:**\n\n```typescript\nproduct?: CorpProductData;\n```\n", "ns.corpindustrydata.product.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [product](./bitburner.corpindustrydata.product.md)\n\n## CorpIndustryData.product property\n\n**Signature:**\n\n```typescript\nproduct?: CorpProductData;\n```\n", "bitburner.autocompletedata.servers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [servers](./bitburner.autocompletedata.servers.md)\n\n## AutocompleteData.servers property\n\n**Signature:**\n\n```typescript\nservers: string[];\n```\n", "ns.autocompletedata.servers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [servers](./bitburner.autocompletedata.servers.md)\n\n## AutocompleteData.servers property\n\n**Signature:**\n\n```typescript\nservers: string[];\n```\n", "bitburner.division.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [type](./bitburner.division.type.md)\n\n## Division.type property\n\nType of division, like Agriculture\n\n**Signature:**\n\n```typescript\ntype: CorpIndustryName;\n```\n", "ns.division.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [type](./bitburner.division.type.md)\n\n## Division.type property\n\nType of division, like Agriculture\n\n**Signature:**\n\n```typescript\ntype: CorpIndustryName;\n```\n", "bitburner.singularity.traveltocity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [travelToCity](./bitburner.singularity.traveltocity.md)\n\n## Singularity.travelToCity() method\n\nTravel to another city.\n\n**Signature:**\n\n```typescript\ntravelToCity(city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | City to travel to. |\n\n**Returns:**\n\nboolean\n\nTrue if action is successful, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function allows the player to travel to any city. The cost for using this function is the same as the cost for traveling through the Travel Agency.\n\n", "ns.singularity.traveltocity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [travelToCity](./bitburner.singularity.traveltocity.md)\n\n## Singularity.travelToCity() method\n\nTravel to another city.\n\n**Signature:**\n\n```typescript\ntravelToCity(city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | City to travel to. |\n\n**Returns:**\n\nboolean\n\nTrue if action is successful, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function allows the player to travel to any city. The cost for using this function is the same as the cost for traveling through the Travel Agency.\n\n", "bitburner.userinterfacetheme.backgroundsecondary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [backgroundsecondary](./bitburner.userinterfacetheme.backgroundsecondary.md)\n\n## UserInterfaceTheme.backgroundsecondary property\n\n**Signature:**\n\n```typescript\nbackgroundsecondary: string;\n```\n", "ns.userinterfacetheme.backgroundsecondary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [backgroundsecondary](./bitburner.userinterfacetheme.backgroundsecondary.md)\n\n## UserInterfaceTheme.backgroundsecondary property\n\n**Signature:**\n\n```typescript\nbackgroundsecondary: string;\n```\n", "bitburner.workstats.hackexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [hackExp](./bitburner.workstats.hackexp.md)\n\n## WorkStats.hackExp property\n\n**Signature:**\n\n```typescript\nhackExp: number;\n```\n", "ns.workstats.hackexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [hackExp](./bitburner.workstats.hackexp.md)\n\n## WorkStats.hackExp property\n\n**Signature:**\n\n```typescript\nhackExp: number;\n```\n", "bitburner.division.cities.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [cities](./bitburner.division.cities.md)\n\n## Division.cities property\n\nCities in which this division has expanded\n\n**Signature:**\n\n```typescript\ncities: CityName[];\n```\n", "ns.division.cities.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [cities](./bitburner.division.cities.md)\n\n## Division.cities property\n\nCities in which this division has expanded\n\n**Signature:**\n\n```typescript\ncities: CityName[];\n```\n", "bitburner.singularity.universitycourse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [universityCourse](./bitburner.singularity.universitycourse.md)\n\n## Singularity.universityCourse() method\n\nTake university class.\n\n**Signature:**\n\n```typescript\nuniversityCourse(universityName: string, courseName: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  universityName | string | Name of university. You must be in the correct city for whatever university you specify. |\n|  courseName | string | Name of course. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this class. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if action is successfully started, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function will automatically set you to start taking a course at a university. If you are already in the middle of some \u201cworking\u201d action (such as working at a company, for a faction, or on a program), then running this function will automatically cancel that action and give you your earnings.\n\nThe cost and experience gains for all of these universities and classes are the same as if you were to manually visit and take these classes.\n\n", "ns.singularity.universitycourse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [universityCourse](./bitburner.singularity.universitycourse.md)\n\n## Singularity.universityCourse() method\n\nTake university class.\n\n**Signature:**\n\n```typescript\nuniversityCourse(universityName: string, courseName: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  universityName | string | Name of university. You must be in the correct city for whatever university you specify. |\n|  courseName | string | Name of course. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this class. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if action is successfully started, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function will automatically set you to start taking a course at a university. If you are already in the middle of some \u201cworking\u201d action (such as working at a company, for a faction, or on a program), then running this function will automatically cancel that action and give you your earnings.\n\nThe cost and experience gains for all of these universities and classes are the same as if you were to manually visit and take these classes.\n\n", "bitburner.ns.kill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [kill](./bitburner.ns.kill.md)\n\n## NS.kill() method\n\nTerminate the script with the provided PID.\n\n**Signature:**\n\n```typescript\nkill(pid: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  pid | number | The PID of the script to kill. |\n\n**Returns:**\n\nboolean\n\nTrue if the script is successfully killed, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nKills the script with the provided PID. To instead kill a script using its filename, hostname, and args, see [the other ns.kill entry](./bitburner.ns.kill_1.md)<!-- -->.\n\n## Example\n\n\n```js\n// kills the script with PID 20:\nns.kill(20);\n```\n\n", "ns.ns.kill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [kill](./bitburner.ns.kill.md)\n\n## NS.kill() method\n\nTerminate the script with the provided PID.\n\n**Signature:**\n\n```typescript\nkill(pid: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  pid | number | The PID of the script to kill. |\n\n**Returns:**\n\nboolean\n\nTrue if the script is successfully killed, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nKills the script with the provided PID. To instead kill a script using its filename, hostname, and args, see [the other ns.kill entry](./bitburner.ns.kill_1.md)<!-- -->.\n\n## Example\n\n\n```js\n// kills the script with PID 20:\nns.kill(20);\n```\n\n", "bitburner.bladeburner.getblackoprank.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getBlackOpRank](./bitburner.bladeburner.getblackoprank.md)\n\n## Bladeburner.getBlackOpRank() method\n\nGet black op required rank.\n\n**Signature:**\n\n```typescript\ngetBlackOpRank(name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of BlackOp. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nRank required to complete this BlackOp.\n\n## Remarks\n\nRAM cost: 2 GB\n\nReturns the rank required to complete this BlackOp.\n\nReturns -1 if an invalid action is specified.\n\n", "ns.bladeburner.getblackoprank.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getBlackOpRank](./bitburner.bladeburner.getblackoprank.md)\n\n## Bladeburner.getBlackOpRank() method\n\nGet black op required rank.\n\n**Signature:**\n\n```typescript\ngetBlackOpRank(name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of BlackOp. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nRank required to complete this BlackOp.\n\n## Remarks\n\nRAM cost: 2 GB\n\nReturns the rank required to complete this BlackOp.\n\nReturns -1 if an invalid action is specified.\n\n", "bitburner.corporation.bribe.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [bribe](./bitburner.corporation.bribe.md)\n\n## Corporation.bribe() method\n\nBribe a faction\n\n**Signature:**\n\n```typescript\nbribe(factionName: string, amountCash: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  factionName | string | Faction name |\n|  amountCash | number | Amount of money to bribe |\n\n**Returns:**\n\nboolean\n\nTrue if successful, false if not\n\n", "ns.corporation.bribe.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [bribe](./bitburner.corporation.bribe.md)\n\n## Corporation.bribe() method\n\nBribe a faction\n\n**Signature:**\n\n```typescript\nbribe(factionName: string, amountCash: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  factionName | string | Faction name |\n|  amountCash | number | Amount of money to bribe |\n\n**Returns:**\n\nboolean\n\nTrue if successful, false if not\n\n", "bitburner.warehouseapi.sellproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [sellProduct](./bitburner.warehouseapi.sellproduct.md)\n\n## WarehouseAPI.sellProduct() method\n\nSet product sell data.\n\n**Signature:**\n\n```typescript\nsellProduct(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    productName: string,\n    amt: string,\n    price: string,\n    all: boolean,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  productName | string | Name of the product |\n|  amt | string | Amount to sell, can be \"MAX\" |\n|  price | string | Price to sell, can be \"MP\" |\n|  all | boolean | Sell in all city |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.sellproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [sellProduct](./bitburner.warehouseapi.sellproduct.md)\n\n## WarehouseAPI.sellProduct() method\n\nSet product sell data.\n\n**Signature:**\n\n```typescript\nsellProduct(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    productName: string,\n    amt: string,\n    price: string,\n    all: boolean,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  productName | string | Name of the product |\n|  amt | string | Amount to sell, can be \"MAX\" |\n|  price | string | Price to sell, can be \"MP\" |\n|  all | boolean | Sell in all city |\n\n**Returns:**\n\nvoid\n\n", "bitburner.hacknet.upgradecache.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeCache](./bitburner.hacknet.upgradecache.md)\n\n## Hacknet.upgradeCache() method\n\nUpgrade the cache of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeCache(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of cache levels to purchase. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s cache level is successfully upgraded, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nTries to upgrade the specified Hacknet Server\u2019s cache n times.\n\nReturns true if it successfully upgrades the Server\u2019s cache n times, or if it purchases some positive amount and the Server reaches its max cache level.\n\nReturns false otherwise.\n\n", "ns.hacknet.upgradecache.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeCache](./bitburner.hacknet.upgradecache.md)\n\n## Hacknet.upgradeCache() method\n\nUpgrade the cache of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeCache(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of cache levels to purchase. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s cache level is successfully upgraded, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nTries to upgrade the specified Hacknet Server\u2019s cache n times.\n\nReturns true if it successfully upgrades the Server\u2019s cache n times, or if it purchases some positive amount and the Server reaches its max cache level.\n\nReturns false otherwise.\n\n", "bitburner.crimestats.strength_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [strength\\_success\\_weight](./bitburner.crimestats.strength_success_weight.md)\n\n## CrimeStats.strength\\_success\\_weight property\n\nstrength level impact on success change of the crime\n\n**Signature:**\n\n```typescript\nstrength_success_weight: number;\n```\n", "ns.crimestats.strength_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [strength\\_success\\_weight](./bitburner.crimestats.strength_success_weight.md)\n\n## CrimeStats.strength\\_success\\_weight property\n\nstrength level impact on success change of the crime\n\n**Signature:**\n\n```typescript\nstrength_success_weight: number;\n```\n", "bitburner.singularity.gymworkout.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [gymWorkout](./bitburner.singularity.gymworkout.md)\n\n## Singularity.gymWorkout() method\n\nWorkout at the gym.\n\n**Signature:**\n\n```typescript\ngymWorkout(gymName: string, stat: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gymName | string | Name of gym. You must be in the correct city for whatever gym you specify. |\n|  stat | string | The stat you want to train. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this gym workout. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if actions is successfully started, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function will automatically set you to start working out at a gym to train a particular stat. If you are already in the middle of some \u201cworking\u201d action (such as working at a company, for a faction, or on a program), then running this function will automatically cancel that action and give you your earnings.\n\nThe cost and experience gains for all of these gyms are the same as if you were to manually visit these gyms and train\n\n", "ns.singularity.gymworkout.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [gymWorkout](./bitburner.singularity.gymworkout.md)\n\n## Singularity.gymWorkout() method\n\nWorkout at the gym.\n\n**Signature:**\n\n```typescript\ngymWorkout(gymName: string, stat: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gymName | string | Name of gym. You must be in the correct city for whatever gym you specify. |\n|  stat | string | The stat you want to train. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this gym workout. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if actions is successfully started, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function will automatically set you to start working out at a gym to train a particular stat. If you are already in the middle of some \u201cworking\u201d action (such as working at a company, for a faction, or on a program), then running this function will automatically cancel that action and give you your earnings.\n\nThe cost and experience gains for all of these gyms are the same as if you were to manually visit these gyms and train\n\n", "bitburner.industrydata.makesproducts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [makesProducts](./bitburner.industrydata.makesproducts.md)\n\n## IndustryData.makesProducts property\n\nWhether the division makes products\n\n**Signature:**\n\n```typescript\nmakesProducts: boolean;\n```\n", "ns.industrydata.makesproducts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [makesProducts](./bitburner.industrydata.makesproducts.md)\n\n## IndustryData.makesProducts property\n\nWhether the division makes products\n\n**Signature:**\n\n```typescript\nmakesProducts: boolean;\n```\n", "bitburner.sleevebladeburnertask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveBladeburnerTask](./bitburner.sleevebladeburnertask.md)\n\n## SleeveBladeburnerTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveBladeburnerTask = {\n  type: \"BLADEBURNER\";\n  actionType: \"General\" | \"Contracts\";\n  actionName: string;\n  cyclesWorked: number;\n};\n```\n", "ns.sleevebladeburnertask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveBladeburnerTask](./bitburner.sleevebladeburnertask.md)\n\n## SleeveBladeburnerTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveBladeburnerTask = {\n  type: \"BLADEBURNER\";\n  actionType: \"General\" | \"Contracts\";\n  actionName: string;\n  cyclesWorked: number;\n};\n```\n", "bitburner.corporationinfo.numshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [numShares](./bitburner.corporationinfo.numshares.md)\n\n## CorporationInfo.numShares property\n\nAmount of share owned\n\n**Signature:**\n\n```typescript\nnumShares: number;\n```\n", "ns.corporationinfo.numshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [numShares](./bitburner.corporationinfo.numshares.md)\n\n## CorporationInfo.numShares property\n\nAmount of share owned\n\n**Signature:**\n\n```typescript\nnumShares: number;\n```\n", "bitburner.ns.clearport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [clearPort](./bitburner.ns.clearport.md)\n\n## NS.clearPort() method\n\nClear data from a port.\n\n**Signature:**\n\n```typescript\nclearPort(handle: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  handle | number | Port to clear. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nDelete all data from the underlying queue.\n\n", "ns.ns.clearport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [clearPort](./bitburner.ns.clearport.md)\n\n## NS.clearPort() method\n\nClear data from a port.\n\n**Signature:**\n\n```typescript\nclearPort(handle: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  handle | number | Port to clear. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nDelete all data from the underlying queue.\n\n", "bitburner.corpconstants.bribethreshold.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [bribeThreshold](./bitburner.corpconstants.bribethreshold.md)\n\n## CorpConstants.bribeThreshold property\n\n**Signature:**\n\n```typescript\nbribeThreshold: number;\n```\n", "ns.corpconstants.bribethreshold.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [bribeThreshold](./bitburner.corpconstants.bribethreshold.md)\n\n## CorpConstants.bribeThreshold property\n\n**Signature:**\n\n```typescript\nbribeThreshold: number;\n```\n", "bitburner.multipliers.charisma_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [charisma\\_exp](./bitburner.multipliers.charisma_exp.md)\n\n## Multipliers.charisma\\_exp property\n\nMultiplier to charisma experience gain rate\n\n**Signature:**\n\n```typescript\ncharisma_exp: number;\n```\n", "ns.multipliers.charisma_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [charisma\\_exp](./bitburner.multipliers.charisma_exp.md)\n\n## Multipliers.charisma\\_exp property\n\nMultiplier to charisma experience gain rate\n\n**Signature:**\n\n```typescript\ncharisma_exp: number;\n```\n", "bitburner.corpindustrydata.recommendstarting.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [recommendStarting](./bitburner.corpindustrydata.recommendstarting.md)\n\n## CorpIndustryData.recommendStarting property\n\n**Signature:**\n\n```typescript\nrecommendStarting: boolean;\n```\n", "ns.corpindustrydata.recommendstarting.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [recommendStarting](./bitburner.corpindustrydata.recommendstarting.md)\n\n## CorpIndustryData.recommendStarting property\n\n**Signature:**\n\n```typescript\nrecommendStarting: boolean;\n```\n", "bitburner.ns.grow.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [grow](./bitburner.ns.grow.md)\n\n## NS.grow() method\n\nSpoof money in a server's bank account, increasing the amount available.\n\n**Signature:**\n\n```typescript\ngrow(host: string, opts?: BasicHGWOptions): Promise<number>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to grow. |\n|  opts | [BasicHGWOptions](./bitburner.basichgwoptions.md) | _(Optional)_ Optional parameters for configuring function behavior. |\n\n**Returns:**\n\nPromise&lt;number&gt;\n\nThe number by which the money on the server was multiplied for the growth.\n\n## Remarks\n\nRAM cost: 0.15 GB\n\nUse your hacking skills to increase the amount of money available on a server. The runtime for this command depends on your hacking level and the target server\u2019s security level. When `grow` completes, the money available on a target server will be increased by amount equal to the number of threads used and a certain, fixed percentage of current money on the server. This percentage is determined by the target server\u2019s growth rate (which varies between servers) and security level. Generally, higher-level servers have higher growth rates. The [getServerGrowth](./bitburner.ns.getservergrowth.md) function can be used to obtain a server\u2019s growth rate.\n\nLike [hack](./bitburner.ns.hack.md)<!-- -->, `grow` can be called on any server, regardless of where the script is running. The grow() command requires root access to the target server, but there is no required hacking level to run the command. It also raises the security level of the target server by 0.004.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar currentMoney = getServerMoneyAvailable(\"foodnstuff\");\ncurrentMoney = currentMoney * grow(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nlet currentMoney = ns.getServerMoneyAvailable(\"foodnstuff\");\ncurrentMoney *= await ns.grow(\"foodnstuff\");\n```\n\n", "ns.ns.grow.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [grow](./bitburner.ns.grow.md)\n\n## NS.grow() method\n\nSpoof money in a server's bank account, increasing the amount available.\n\n**Signature:**\n\n```typescript\ngrow(host: string, opts?: BasicHGWOptions): Promise<number>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to grow. |\n|  opts | [BasicHGWOptions](./bitburner.basichgwoptions.md) | _(Optional)_ Optional parameters for configuring function behavior. |\n\n**Returns:**\n\nPromise&lt;number&gt;\n\nThe number by which the money on the server was multiplied for the growth.\n\n## Remarks\n\nRAM cost: 0.15 GB\n\nUse your hacking skills to increase the amount of money available on a server. The runtime for this command depends on your hacking level and the target server\u2019s security level. When `grow` completes, the money available on a target server will be increased by amount equal to the number of threads used and a certain, fixed percentage of current money on the server. This percentage is determined by the target server\u2019s growth rate (which varies between servers) and security level. Generally, higher-level servers have higher growth rates. The [getServerGrowth](./bitburner.ns.getservergrowth.md) function can be used to obtain a server\u2019s growth rate.\n\nLike [hack](./bitburner.ns.hack.md)<!-- -->, `grow` can be called on any server, regardless of where the script is running. The grow() command requires root access to the target server, but there is no required hacking level to run the command. It also raises the security level of the target server by 0.004.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar currentMoney = getServerMoneyAvailable(\"foodnstuff\");\ncurrentMoney = currentMoney * grow(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nlet currentMoney = ns.getServerMoneyAvailable(\"foodnstuff\");\ncurrentMoney *= await ns.grow(\"foodnstuff\");\n```\n\n", "bitburner.corporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md)\n\n## Corporation interface\n\nCorporation API\n\n**Signature:**\n\n```typescript\nexport interface Corporation extends WarehouseAPI, OfficeAPI \n```\n**Extends:** [WarehouseAPI](./bitburner.warehouseapi.md)<!-- -->, [OfficeAPI](./bitburner.officeapi.md)\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [acceptInvestmentOffer()](./bitburner.corporation.acceptinvestmentoffer.md) | Accept investment based on you companies current valuation |\n|  [bribe(factionName, amountCash)](./bitburner.corporation.bribe.md) | Bribe a faction |\n|  [buyBackShares(amount)](./bitburner.corporation.buybackshares.md) | Buyback Shares |\n|  [createCorporation(corporationName, selfFund)](./bitburner.corporation.createcorporation.md) | Create a Corporation |\n|  [expandCity(divisionName, city)](./bitburner.corporation.expandcity.md) | Expand to a new city |\n|  [expandIndustry(industryType, divisionName)](./bitburner.corporation.expandindustry.md) | Expand to a new industry |\n|  [getBonusTime()](./bitburner.corporation.getbonustime.md) | Get bonus time. \u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser. \u201cBonus time\u201d makes the game progress faster. |\n|  [getConstants()](./bitburner.corporation.getconstants.md) | Get corporation related constants |\n|  [getCorporation()](./bitburner.corporation.getcorporation.md) | Get corporation data |\n|  [getDivision(divisionName)](./bitburner.corporation.getdivision.md) | Get division data |\n|  [getIndustryData(industryName)](./bitburner.corporation.getindustrydata.md) | Get constant industry definition data for a specific industry |\n|  [getInvestmentOffer()](./bitburner.corporation.getinvestmentoffer.md) | Get an offer for investment based on you companies current valuation |\n|  [getMaterialData(materialName)](./bitburner.corporation.getmaterialdata.md) | Get constant data for a specific material |\n|  [getUnlockUpgradeCost(upgradeName)](./bitburner.corporation.getunlockupgradecost.md) | Gets the cost to unlock a one time unlockable upgrade |\n|  [getUpgradeLevel(upgradeName)](./bitburner.corporation.getupgradelevel.md) | Get the level of a levelable upgrade |\n|  [getUpgradeLevelCost(upgradeName)](./bitburner.corporation.getupgradelevelcost.md) | Gets the cost to unlock the next level of a levelable upgrade |\n|  [goPublic(numShares)](./bitburner.corporation.gopublic.md) | Go public |\n|  [hasCorporation()](./bitburner.corporation.hascorporation.md) | Returns whether the player has a corporation. Does not require API access. |\n|  [hasUnlockUpgrade(upgradeName)](./bitburner.corporation.hasunlockupgrade.md) | Check if you have a one time unlockable upgrade |\n|  [issueDividends(rate)](./bitburner.corporation.issuedividends.md) | Issue dividends |\n|  [issueNewShares(amount)](./bitburner.corporation.issuenewshares.md) | Issue new shares |\n|  [levelUpgrade(upgradeName)](./bitburner.corporation.levelupgrade.md) | Level an upgrade. |\n|  [sellShares(amount)](./bitburner.corporation.sellshares.md) | Sell Shares |\n|  [unlockUpgrade(upgradeName)](./bitburner.corporation.unlockupgrade.md) | Unlock an upgrade |\n\n", "ns.corporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md)\n\n## Corporation interface\n\nCorporation API\n\n**Signature:**\n\n```typescript\nexport interface Corporation extends WarehouseAPI, OfficeAPI \n```\n**Extends:** [WarehouseAPI](./bitburner.warehouseapi.md)<!-- -->, [OfficeAPI](./bitburner.officeapi.md)\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [acceptInvestmentOffer()](./bitburner.corporation.acceptinvestmentoffer.md) | Accept investment based on you companies current valuation |\n|  [bribe(factionName, amountCash)](./bitburner.corporation.bribe.md) | Bribe a faction |\n|  [buyBackShares(amount)](./bitburner.corporation.buybackshares.md) | Buyback Shares |\n|  [createCorporation(corporationName, selfFund)](./bitburner.corporation.createcorporation.md) | Create a Corporation |\n|  [expandCity(divisionName, city)](./bitburner.corporation.expandcity.md) | Expand to a new city |\n|  [expandIndustry(industryType, divisionName)](./bitburner.corporation.expandindustry.md) | Expand to a new industry |\n|  [getBonusTime()](./bitburner.corporation.getbonustime.md) | Get bonus time. \u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser. \u201cBonus time\u201d makes the game progress faster. |\n|  [getConstants()](./bitburner.corporation.getconstants.md) | Get corporation related constants |\n|  [getCorporation()](./bitburner.corporation.getcorporation.md) | Get corporation data |\n|  [getDivision(divisionName)](./bitburner.corporation.getdivision.md) | Get division data |\n|  [getIndustryData(industryName)](./bitburner.corporation.getindustrydata.md) | Get constant industry definition data for a specific industry |\n|  [getInvestmentOffer()](./bitburner.corporation.getinvestmentoffer.md) | Get an offer for investment based on you companies current valuation |\n|  [getMaterialData(materialName)](./bitburner.corporation.getmaterialdata.md) | Get constant data for a specific material |\n|  [getUnlockUpgradeCost(upgradeName)](./bitburner.corporation.getunlockupgradecost.md) | Gets the cost to unlock a one time unlockable upgrade |\n|  [getUpgradeLevel(upgradeName)](./bitburner.corporation.getupgradelevel.md) | Get the level of a levelable upgrade |\n|  [getUpgradeLevelCost(upgradeName)](./bitburner.corporation.getupgradelevelcost.md) | Gets the cost to unlock the next level of a levelable upgrade |\n|  [goPublic(numShares)](./bitburner.corporation.gopublic.md) | Go public |\n|  [hasCorporation()](./bitburner.corporation.hascorporation.md) | Returns whether the player has a corporation. Does not require API access. |\n|  [hasUnlockUpgrade(upgradeName)](./bitburner.corporation.hasunlockupgrade.md) | Check if you have a one time unlockable upgrade |\n|  [issueDividends(rate)](./bitburner.corporation.issuedividends.md) | Issue dividends |\n|  [issueNewShares(amount)](./bitburner.corporation.issuenewshares.md) | Issue new shares |\n|  [levelUpgrade(upgradeName)](./bitburner.corporation.levelupgrade.md) | Level an upgrade. |\n|  [sellShares(amount)](./bitburner.corporation.sellshares.md) | Sell Shares |\n|  [unlockUpgrade(upgradeName)](./bitburner.corporation.unlockupgrade.md) | Unlock an upgrade |\n\n", "bitburner.ns.disablelog.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [disableLog](./bitburner.ns.disablelog.md)\n\n## NS.disableLog() method\n\nDisables logging for the given function.\n\n**Signature:**\n\n```typescript\ndisableLog(fn: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | Name of function for which to disable logging. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nLogging can be disabled for all functions by passing `ALL` as the argument.\n\n", "ns.ns.disablelog.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [disableLog](./bitburner.ns.disablelog.md)\n\n## NS.disableLog() method\n\nDisables logging for the given function.\n\n**Signature:**\n\n```typescript\ndisableLog(fn: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | string | Name of function for which to disable logging. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nLogging can be disabled for all functions by passing `ALL` as the argument.\n\n", "bitburner.tix.buyshort.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [buyShort](./bitburner.tix.buyshort.md)\n\n## TIX.buyShort() method\n\nShort stocks.\n\n**Signature:**\n\n```typescript\nbuyShort(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to short. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to purchase a short position of a stock using a Market Order.\n\nThe ability to short a stock is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\nIf the player does not have enough money to purchase the specified number of shares, then no shares will be purchased. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nIf the purchase is successful, this function will return the stock price at which each share was purchased. Otherwise, it will return 0.\n\n", "ns.tix.buyshort.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [buyShort](./bitburner.tix.buyshort.md)\n\n## TIX.buyShort() method\n\nShort stocks.\n\n**Signature:**\n\n```typescript\nbuyShort(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to short. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to purchase a short position of a stock using a Market Order.\n\nThe ability to short a stock is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\nIf the player does not have enough money to purchase the specified number of shares, then no shares will be purchased. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nIf the purchase is successful, this function will return the stock price at which each share was purchased. Otherwise, it will return 0.\n\n", "bitburner.material.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md)\n\n## Material interface\n\nMaterial in a warehouse\n\n**Signature:**\n\n```typescript\ninterface Material \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cmp](./bitburner.material.cmp.md) |  | number \\| undefined | Competition for the material, only present if \"Market Research - Competition\" unlocked |\n|  [cost](./bitburner.material.cost.md) |  | number | Cost to buy material |\n|  [dmd](./bitburner.material.dmd.md) |  | number \\| undefined | Demand for the material, only present if \"Market Research - Demand\" unlocked |\n|  [exp](./bitburner.material.exp.md) |  | [Export](./bitburner.export.md)<!-- -->\\[\\] | Export orders |\n|  [name](./bitburner.material.name.md) |  | [CorpMaterialName](./bitburner.corpmaterialname.md) | Name of the material |\n|  [prod](./bitburner.material.prod.md) |  | number | Amount of material produced |\n|  [qlt](./bitburner.material.qlt.md) |  | number | Quality of the material |\n|  [qty](./bitburner.material.qty.md) |  | number | Amount of material |\n|  [sCost](./bitburner.material.scost.md) |  | string \\| number | Sell cost, can be \"MP+5\" |\n|  [sell](./bitburner.material.sell.md) |  | number | Amount of material sold |\n\n", "ns.material.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md)\n\n## Material interface\n\nMaterial in a warehouse\n\n**Signature:**\n\n```typescript\ninterface Material \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cmp](./bitburner.material.cmp.md) |  | number \\| undefined | Competition for the material, only present if \"Market Research - Competition\" unlocked |\n|  [cost](./bitburner.material.cost.md) |  | number | Cost to buy material |\n|  [dmd](./bitburner.material.dmd.md) |  | number \\| undefined | Demand for the material, only present if \"Market Research - Demand\" unlocked |\n|  [exp](./bitburner.material.exp.md) |  | [Export](./bitburner.export.md)<!-- -->\\[\\] | Export orders |\n|  [name](./bitburner.material.name.md) |  | [CorpMaterialName](./bitburner.corpmaterialname.md) | Name of the material |\n|  [prod](./bitburner.material.prod.md) |  | number | Amount of material produced |\n|  [qlt](./bitburner.material.qlt.md) |  | number | Quality of the material |\n|  [qty](./bitburner.material.qty.md) |  | number | Amount of material |\n|  [sCost](./bitburner.material.scost.md) |  | string \\| number | Sell cost, can be \"MP+5\" |\n|  [sell](./bitburner.material.sell.md) |  | number | Amount of material sold |\n\n", "bitburner.corporation.getmaterialdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getMaterialData](./bitburner.corporation.getmaterialdata.md)\n\n## Corporation.getMaterialData() method\n\nGet constant data for a specific material\n\n**Signature:**\n\n```typescript\ngetMaterialData(materialName: CorpMaterialName): CorpMaterialConstantData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  materialName | [CorpMaterialName](./bitburner.corpmaterialname.md) |  |\n\n**Returns:**\n\n[CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md)\n\n", "ns.corporation.getmaterialdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getMaterialData](./bitburner.corporation.getmaterialdata.md)\n\n## Corporation.getMaterialData() method\n\nGet constant data for a specific material\n\n**Signature:**\n\n```typescript\ngetMaterialData(materialName: CorpMaterialName): CorpMaterialConstantData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  materialName | [CorpMaterialName](./bitburner.corpmaterialname.md) |  |\n\n**Returns:**\n\n[CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md)\n\n", "bitburner.ns.writeport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [writePort](./bitburner.ns.writeport.md)\n\n## NS.writePort() method\n\nWrite data to a port.\n\n**Signature:**\n\n```typescript\nwritePort(port: number, data: string | number): PortData | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number |  |\n|  data | string \\| number |  |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md) \\| null\n\nThe data popped off the queue if it was full, or null if it was not full.\n\n## Remarks\n\nRAM cost: 0 GB\n\nWrite data to the given Netscript port.\n\n", "ns.ns.writeport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [writePort](./bitburner.ns.writeport.md)\n\n## NS.writePort() method\n\nWrite data to a port.\n\n**Signature:**\n\n```typescript\nwritePort(port: number, data: string | number): PortData | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number |  |\n|  data | string \\| number |  |\n\n**Returns:**\n\n[PortData](./bitburner.portdata.md) \\| null\n\nThe data popped off the queue if it was full, or null if it was not full.\n\n## Remarks\n\nRAM cost: 0 GB\n\nWrite data to the given Netscript port.\n\n", "bitburner.hackingmultipliers.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [money](./bitburner.hackingmultipliers.money.md)\n\n## HackingMultipliers.money property\n\nPlayer's hacking money stolen multiplier.\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "ns.hackingmultipliers.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [money](./bitburner.hackingmultipliers.money.md)\n\n## HackingMultipliers.money property\n\nPlayer's hacking money stolen multiplier.\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "bitburner.ns.growthanalyzesecurity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [growthAnalyzeSecurity](./bitburner.ns.growthanalyzesecurity.md)\n\n## NS.growthAnalyzeSecurity() method\n\nCalculate the security increase for a number of threads.\n\n**Signature:**\n\n```typescript\ngrowthAnalyzeSecurity(threads: number, hostname?: string, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  threads | number | Amount of threads that will be used. |\n|  hostname | string | _(Optional)_ Optional. Hostname of the target server. The number of threads is limited to the number needed to hack the server's maximum amount of money. |\n|  cores | number | _(Optional)_ Optional. The number of cores of the server that would run grow. |\n\n**Returns:**\n\nnumber\n\nThe security increase.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the security increase that would occur if a grow with this many threads happened.\n\n", "ns.ns.growthanalyzesecurity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [growthAnalyzeSecurity](./bitburner.ns.growthanalyzesecurity.md)\n\n## NS.growthAnalyzeSecurity() method\n\nCalculate the security increase for a number of threads.\n\n**Signature:**\n\n```typescript\ngrowthAnalyzeSecurity(threads: number, hostname?: string, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  threads | number | Amount of threads that will be used. |\n|  hostname | string | _(Optional)_ Optional. Hostname of the target server. The number of threads is limited to the number needed to hack the server's maximum amount of money. |\n|  cores | number | _(Optional)_ Optional. The number of cores of the server that would run grow. |\n\n**Returns:**\n\nnumber\n\nThe security increase.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the security increase that would occur if a grow with this many threads happened.\n\n", "bitburner.ganggeninfo.power.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [power](./bitburner.ganggeninfo.power.md)\n\n## GangGenInfo.power property\n\nGang's power for territory warfare\n\n**Signature:**\n\n```typescript\npower: number;\n```\n", "ns.ganggeninfo.power.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [power](./bitburner.ganggeninfo.power.md)\n\n## GangGenInfo.power property\n\nGang's power for territory warfare\n\n**Signature:**\n\n```typescript\npower: number;\n```\n", "bitburner.nodestats.hashcapacity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [hashCapacity](./bitburner.nodestats.hashcapacity.md)\n\n## NodeStats.hashCapacity property\n\nHash Capacity provided by this Node. Only applicable for Hacknet Servers\n\n**Signature:**\n\n```typescript\nhashCapacity?: number;\n```\n", "ns.nodestats.hashcapacity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [hashCapacity](./bitburner.nodestats.hashcapacity.md)\n\n## NodeStats.hashCapacity property\n\nHash Capacity provided by this Node. Only applicable for Hacknet Servers\n\n**Signature:**\n\n```typescript\nhashCapacity?: number;\n```\n", "bitburner.moneysource.class.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [class](./bitburner.moneysource.class.md)\n\n## MoneySource.class property\n\n**Signature:**\n\n```typescript\nclass: number;\n```\n", "ns.moneysource.class.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [class](./bitburner.moneysource.class.md)\n\n## MoneySource.class property\n\n**Signature:**\n\n```typescript\nclass: number;\n```\n", "bitburner.singularity.getcurrentserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCurrentServer](./bitburner.singularity.getcurrentserver.md)\n\n## Singularity.getCurrentServer() method\n\nGet the current server.\n\n**Signature:**\n\n```typescript\ngetCurrentServer(): string;\n```\n**Returns:**\n\nstring\n\nName of the current server.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\n", "ns.singularity.getcurrentserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCurrentServer](./bitburner.singularity.getcurrentserver.md)\n\n## Singularity.getCurrentServer() method\n\nGet the current server.\n\n**Signature:**\n\n```typescript\ngetCurrentServer(): string;\n```\n**Returns:**\n\nstring\n\nName of the current server.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\n", "bitburner.tix.placeorder.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [placeOrder](./bitburner.tix.placeorder.md)\n\n## TIX.placeOrder() method\n\nPlace order for stocks.\n\n**Signature:**\n\n```typescript\nplaceOrder(sym: string, shares: number, price: number, type: string, pos: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares for order. Must be positive. Will be rounded to nearest integer. |\n|  price | number | Execution price for the order. |\n|  type | string | Type of order. |\n|  pos | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nboolean\n\nTrue if the order is successfully placed, and false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB Places an order on the stock market. This function only works for Limit and Stop Orders.\n\nThe ability to place limit and stop orders is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\nReturns true if the order is successfully placed, and false otherwise.\n\n", "ns.tix.placeorder.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [placeOrder](./bitburner.tix.placeorder.md)\n\n## TIX.placeOrder() method\n\nPlace order for stocks.\n\n**Signature:**\n\n```typescript\nplaceOrder(sym: string, shares: number, price: number, type: string, pos: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares for order. Must be positive. Will be rounded to nearest integer. |\n|  price | number | Execution price for the order. |\n|  type | string | Type of order. |\n|  pos | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nboolean\n\nTrue if the order is successfully placed, and false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB Places an order on the stock market. This function only works for Limit and Stop Orders.\n\nThe ability to place limit and stop orders is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\nReturns true if the order is successfully placed, and false otherwise.\n\n", "bitburner.hacknet.numhashes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [numHashes](./bitburner.hacknet.numhashes.md)\n\n## Hacknet.numHashes() method\n\nGet the total number of hashes stored.\n\n**Signature:**\n\n```typescript\nnumHashes(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of hashes you have.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the number of hashes you have.\n\n", "ns.hacknet.numhashes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [numHashes](./bitburner.hacknet.numhashes.md)\n\n## Hacknet.numHashes() method\n\nGet the total number of hashes stored.\n\n**Signature:**\n\n```typescript\nnumHashes(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of hashes you have.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the number of hashes you have.\n\n", "bitburner.ns.wget.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [wget](./bitburner.ns.wget.md)\n\n## NS.wget() method\n\nDownload a file from the internet.\n\n**Signature:**\n\n```typescript\nwget(url: string, target: string, host?: string): Promise<boolean>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  url | string | URL to pull data from. |\n|  target | string | Filename to write data to. Must be script or text file. |\n|  host | string | _(Optional)_ Optional hostname/ip of server for target file. |\n\n**Returns:**\n\nPromise&lt;boolean&gt;\n\nTrue if the data was successfully retrieved from the URL, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nRetrieves data from a URL and downloads it to a file on the specified server. The data can only be downloaded to a script (.js or .script) or a text file (.txt). If the file already exists, it will be overwritten by this command. Note that it will not be possible to download data from many websites because they do not allow cross-origin resource sharing (CORS).\n\nIMPORTANT: This is an asynchronous function that returns a Promise. The Promise\u2019s resolved value will be a boolean indicating whether or not the data was successfully retrieved from the URL. Because the function is async and returns a Promise, it is recommended you use wget in NetscriptJS (Netscript 2.0).\n\nIn NetscriptJS, you must preface any call to wget with the await keyword (like you would [hack](./bitburner.ns.hack.md) or [sleep](./bitburner.ns.sleep.md)<!-- -->). wget will still work in Netscript 1.0, but the function's execution will not be synchronous (i.e. it may not execute when you expect/want it to). Furthermore, since Promises are not supported in ES5, you will not be able to process the returned value of wget in Netscript 1.0.\n\n## Example\n\n\n```js\nawait ns.wget(\"https://raw.githubusercontent.com/bitburner-official/bitburner-src/master/README.md\", \"game_readme.txt\");\n```\n\n", "ns.ns.wget.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [wget](./bitburner.ns.wget.md)\n\n## NS.wget() method\n\nDownload a file from the internet.\n\n**Signature:**\n\n```typescript\nwget(url: string, target: string, host?: string): Promise<boolean>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  url | string | URL to pull data from. |\n|  target | string | Filename to write data to. Must be script or text file. |\n|  host | string | _(Optional)_ Optional hostname/ip of server for target file. |\n\n**Returns:**\n\nPromise&lt;boolean&gt;\n\nTrue if the data was successfully retrieved from the URL, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nRetrieves data from a URL and downloads it to a file on the specified server. The data can only be downloaded to a script (.js or .script) or a text file (.txt). If the file already exists, it will be overwritten by this command. Note that it will not be possible to download data from many websites because they do not allow cross-origin resource sharing (CORS).\n\nIMPORTANT: This is an asynchronous function that returns a Promise. The Promise\u2019s resolved value will be a boolean indicating whether or not the data was successfully retrieved from the URL. Because the function is async and returns a Promise, it is recommended you use wget in NetscriptJS (Netscript 2.0).\n\nIn NetscriptJS, you must preface any call to wget with the await keyword (like you would [hack](./bitburner.ns.hack.md) or [sleep](./bitburner.ns.sleep.md)<!-- -->). wget will still work in Netscript 1.0, but the function's execution will not be synchronous (i.e. it may not execute when you expect/want it to). Furthermore, since Promises are not supported in ES5, you will not be able to process the returned value of wget in Netscript 1.0.\n\n## Example\n\n\n```js\nawait ns.wget(\"https://raw.githubusercontent.com/bitburner-official/bitburner-src/master/README.md\", \"game_readme.txt\");\n```\n\n", "bitburner.multipliers.dexterity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [dexterity](./bitburner.multipliers.dexterity.md)\n\n## Multipliers.dexterity property\n\nMultiplier to dexterity skill\n\n**Signature:**\n\n```typescript\ndexterity: number;\n```\n", "ns.multipliers.dexterity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [dexterity](./bitburner.multipliers.dexterity.md)\n\n## Multipliers.dexterity property\n\nMultiplier to dexterity skill\n\n**Signature:**\n\n```typescript\ndexterity: number;\n```\n", "bitburner.multipliers.faction_rep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [faction\\_rep](./bitburner.multipliers.faction_rep.md)\n\n## Multipliers.faction\\_rep property\n\nMultiplier to amount of reputation gained when working\n\n**Signature:**\n\n```typescript\nfaction_rep: number;\n```\n", "ns.multipliers.faction_rep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [faction\\_rep](./bitburner.multipliers.faction_rep.md)\n\n## Multipliers.faction\\_rep property\n\nMultiplier to amount of reputation gained when working\n\n**Signature:**\n\n```typescript\nfaction_rep: number;\n```\n", "bitburner.gangmemberinfo.dex_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_exp](./bitburner.gangmemberinfo.dex_exp.md)\n\n## GangMemberInfo.dex\\_exp property\n\nCurrent dexterity experience\n\n**Signature:**\n\n```typescript\ndex_exp: number;\n```\n", "ns.gangmemberinfo.dex_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_exp](./bitburner.gangmemberinfo.dex_exp.md)\n\n## GangMemberInfo.dex\\_exp property\n\nCurrent dexterity experience\n\n**Signature:**\n\n```typescript\ndex_exp: number;\n```\n", "bitburner.formulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md)\n\n## Formulas interface\n\nFormulas API\n\n**Signature:**\n\n```typescript\nexport interface Formulas \n```\n\n## Remarks\n\nYou need Formulas.exe on your home computer to use this API.\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [gang](./bitburner.formulas.gang.md) |  | [GangFormulas](./bitburner.gangformulas.md) | Gang formulas |\n|  [hacking](./bitburner.formulas.hacking.md) |  | [HackingFormulas](./bitburner.hackingformulas.md) | Hacking formulas |\n|  [hacknetNodes](./bitburner.formulas.hacknetnodes.md) |  | [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) | Hacknet Nodes formulas |\n|  [hacknetServers](./bitburner.formulas.hacknetservers.md) |  | [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) | Hacknet Servers formulas |\n|  [reputation](./bitburner.formulas.reputation.md) |  | [ReputationFormulas](./bitburner.reputationformulas.md) | Reputation formulas |\n|  [skills](./bitburner.formulas.skills.md) |  | [SkillsFormulas](./bitburner.skillsformulas.md) | Skills formulas |\n|  [work](./bitburner.formulas.work.md) |  | [WorkFormulas](./bitburner.workformulas.md) | Work formulas |\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [mockPerson()](./bitburner.formulas.mockperson.md) |  |\n|  [mockPlayer()](./bitburner.formulas.mockplayer.md) |  |\n|  [mockServer()](./bitburner.formulas.mockserver.md) |  |\n\n", "ns.formulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md)\n\n## Formulas interface\n\nFormulas API\n\n**Signature:**\n\n```typescript\nexport interface Formulas \n```\n\n## Remarks\n\nYou need Formulas.exe on your home computer to use this API.\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [gang](./bitburner.formulas.gang.md) |  | [GangFormulas](./bitburner.gangformulas.md) | Gang formulas |\n|  [hacking](./bitburner.formulas.hacking.md) |  | [HackingFormulas](./bitburner.hackingformulas.md) | Hacking formulas |\n|  [hacknetNodes](./bitburner.formulas.hacknetnodes.md) |  | [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) | Hacknet Nodes formulas |\n|  [hacknetServers](./bitburner.formulas.hacknetservers.md) |  | [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) | Hacknet Servers formulas |\n|  [reputation](./bitburner.formulas.reputation.md) |  | [ReputationFormulas](./bitburner.reputationformulas.md) | Reputation formulas |\n|  [skills](./bitburner.formulas.skills.md) |  | [SkillsFormulas](./bitburner.skillsformulas.md) | Skills formulas |\n|  [work](./bitburner.formulas.work.md) |  | [WorkFormulas](./bitburner.workformulas.md) | Work formulas |\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [mockPerson()](./bitburner.formulas.mockperson.md) |  |\n|  [mockPlayer()](./bitburner.formulas.mockplayer.md) |  |\n|  [mockServer()](./bitburner.formulas.mockserver.md) |  |\n\n", "bitburner.gang.getascensionresult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getAscensionResult](./bitburner.gang.getascensionresult.md)\n\n## Gang.getAscensionResult() method\n\nGet the result of an ascension without ascending.\n\n**Signature:**\n\n```typescript\ngetAscensionResult(memberName: string): GangMemberAscension | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of member. |\n\n**Returns:**\n\n[GangMemberAscension](./bitburner.gangmemberascension.md) \\| undefined\n\nObject with info about the ascension results. Undefined if ascension is impossible.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the result of an ascension without ascending.\n\n", "ns.gang.getascensionresult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getAscensionResult](./bitburner.gang.getascensionresult.md)\n\n## Gang.getAscensionResult() method\n\nGet the result of an ascension without ascending.\n\n**Signature:**\n\n```typescript\ngetAscensionResult(memberName: string): GangMemberAscension | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of member. |\n\n**Returns:**\n\n[GangMemberAscension](./bitburner.gangmemberascension.md) \\| undefined\n\nObject with info about the ascension results. Undefined if ascension is impossible.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the result of an ascension without ascending.\n\n", "bitburner.skills.charisma.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [charisma](./bitburner.skills.charisma.md)\n\n## Skills.charisma property\n\n**Signature:**\n\n```typescript\ncharisma: number;\n```\n", "ns.skills.charisma.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [charisma](./bitburner.skills.charisma.md)\n\n## Skills.charisma property\n\n**Signature:**\n\n```typescript\ncharisma: number;\n```\n", "bitburner.export.amt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md) &gt; [amt](./bitburner.export.amt.md)\n\n## Export.amt property\n\nAmount of material exported\n\n**Signature:**\n\n```typescript\namt: string;\n```\n", "ns.export.amt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md) &gt; [amt](./bitburner.export.amt.md)\n\n## Export.amt property\n\nAmount of material exported\n\n**Signature:**\n\n```typescript\namt: string;\n```\n", "bitburner.singularity.getaugmentationstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationStats](./bitburner.singularity.getaugmentationstats.md)\n\n## Singularity.getAugmentationStats() method\n\nGet the stats of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationStats(name: string): Multipliers;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of Augmentation. CASE-SENSITIVE. |\n\n**Returns:**\n\n[Multipliers](./bitburner.multipliers.md)\n\nAugmentation stats.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns augmentation stats.\n\n", "ns.singularity.getaugmentationstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationStats](./bitburner.singularity.getaugmentationstats.md)\n\n## Singularity.getAugmentationStats() method\n\nGet the stats of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationStats(name: string): Multipliers;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of Augmentation. CASE-SENSITIVE. |\n\n**Returns:**\n\n[Multipliers](./bitburner.multipliers.md)\n\nAugmentation stats.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns augmentation stats.\n\n", "bitburner.crimestats.agility_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [agility\\_success\\_weight](./bitburner.crimestats.agility_success_weight.md)\n\n## CrimeStats.agility\\_success\\_weight property\n\nagility level impact on success change of the crime\n\n**Signature:**\n\n```typescript\nagility_success_weight: number;\n```\n", "ns.crimestats.agility_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [agility\\_success\\_weight](./bitburner.crimestats.agility_success_weight.md)\n\n## CrimeStats.agility\\_success\\_weight property\n\nagility level impact on success change of the crime\n\n**Signature:**\n\n```typescript\nagility_success_weight: number;\n```\n", "bitburner.reputationformulas.calculatereptofavor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md) &gt; [calculateRepToFavor](./bitburner.reputationformulas.calculatereptofavor.md)\n\n## ReputationFormulas.calculateRepToFavor() method\n\nCalculate the resulting faction favor of a total amount of reputation. (Faction favor is gained whenever you install an Augmentation.)\n\n**Signature:**\n\n```typescript\ncalculateRepToFavor(rep: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rep | number | amount of reputation. |\n\n**Returns:**\n\nnumber\n\nThe calculated faction favor.\n\n", "ns.reputationformulas.calculatereptofavor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md) &gt; [calculateRepToFavor](./bitburner.reputationformulas.calculatereptofavor.md)\n\n## ReputationFormulas.calculateRepToFavor() method\n\nCalculate the resulting faction favor of a total amount of reputation. (Faction favor is gained whenever you install an Augmentation.)\n\n**Signature:**\n\n```typescript\ncalculateRepToFavor(rep: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rep | number | amount of reputation. |\n\n**Returns:**\n\nnumber\n\nThe calculated faction favor.\n\n", "bitburner.userinterfacetheme.disabled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [disabled](./bitburner.userinterfacetheme.disabled.md)\n\n## UserInterfaceTheme.disabled property\n\n**Signature:**\n\n```typescript\ndisabled: string;\n```\n", "ns.userinterfacetheme.disabled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [disabled](./bitburner.userinterfacetheme.disabled.md)\n\n## UserInterfaceTheme.disabled property\n\n**Signature:**\n\n```typescript\ndisabled: string;\n```\n", "bitburner.ns.getservernumportsrequired.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerNumPortsRequired](./bitburner.ns.getservernumportsrequired.md)\n\n## NS.getServerNumPortsRequired() method\n\nReturns the number of open ports required to successfully run NUKE.exe on the specified server.\n\n**Signature:**\n\n```typescript\ngetServerNumPortsRequired(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nThe number of open ports required to successfully run NUKE.exe on the specified server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.getservernumportsrequired.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerNumPortsRequired](./bitburner.ns.getservernumportsrequired.md)\n\n## NS.getServerNumPortsRequired() method\n\nReturns the number of open ports required to successfully run NUKE.exe on the specified server.\n\n**Signature:**\n\n```typescript\ngetServerNumPortsRequired(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nThe number of open ports required to successfully run NUKE.exe on the specified server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.gangmemberinfo.earnedrespect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [earnedRespect](./bitburner.gangmemberinfo.earnedrespect.md)\n\n## GangMemberInfo.earnedRespect property\n\n**Signature:**\n\n```typescript\nearnedRespect: number;\n```\n", "ns.gangmemberinfo.earnedrespect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [earnedRespect](./bitburner.gangmemberinfo.earnedrespect.md)\n\n## GangMemberInfo.earnedRespect property\n\n**Signature:**\n\n```typescript\nearnedRespect: number;\n```\n", "bitburner.bladeburner.getactioncurrenttime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionCurrentTime](./bitburner.bladeburner.getactioncurrenttime.md)\n\n## Bladeburner.getActionCurrentTime() method\n\nGet the time elapsed on current action.\n\n**Signature:**\n\n```typescript\ngetActionCurrentTime(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of milliseconds already spent on the current action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of milliseconds already spent on the current action.\n\n", "ns.bladeburner.getactioncurrenttime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionCurrentTime](./bitburner.bladeburner.getactioncurrenttime.md)\n\n## Bladeburner.getActionCurrentTime() method\n\nGet the time elapsed on current action.\n\n**Signature:**\n\n```typescript\ngetActionCurrentTime(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of milliseconds already spent on the current action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of milliseconds already spent on the current action.\n\n", "bitburner.singularity.workforfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [workForFaction](./bitburner.singularity.workforfaction.md)\n\n## Singularity.workForFaction() method\n\nWork for a faction.\n\n**Signature:**\n\n```typescript\nworkForFaction(faction: string, workType: FactionWorkType | `${FactionWorkType}`, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to work for. |\n|  workType | [FactionWorkType](./bitburner.factionworktype.md) \\| \\`${[FactionWorkType](./bitburner.factionworktype.md)<!-- -->}\\` | Type of work to perform for the faction. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this work operation. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if the player starts working, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will set you to start working for the specified faction. You must be a member of the faction and that faction must have the specified work type, or else this function will fail. If you are already in the middle of some \u201cworking\u201d action (such as working for a company, training at a gym, or creating a program), then running this function will cancel that action.\n\nThis function will return true if you successfully start working for the specified faction, and false otherwise.\n\n## Example 1\n\n\n```js\n// NS1\nvar FACTION_NAME = \"CyberSec\", WORK_TYPE = \"hacking\";\n\nvar success = singularity.workForFaction(FACTION_NAME, WORK_TYPE);\nif (!success) tprint(\"ERROR: Failed to start work for \" + FACTION_NAME + \" with work type \" + WORK_TYPE);\n```\n\n## Example 2\n\n\n```js\n// NS2\nconst FACTION_NAME = \"CyberSec\", WORK_TYPE = \"hacking\";\n\nlet success = ns.singularity.workForFaction(FACTION_NAME, WORK_TYPE);\nif (!success) ns.tprint(`ERROR: Failed to start work for ${FACTION_NAME} with work type ${WORK_TYPE}.`)\n```\n\n", "ns.singularity.workforfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [workForFaction](./bitburner.singularity.workforfaction.md)\n\n## Singularity.workForFaction() method\n\nWork for a faction.\n\n**Signature:**\n\n```typescript\nworkForFaction(faction: string, workType: FactionWorkType | `${FactionWorkType}`, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to work for. |\n|  workType | [FactionWorkType](./bitburner.factionworktype.md) \\| \\`${[FactionWorkType](./bitburner.factionworktype.md)<!-- -->}\\` | Type of work to perform for the faction. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this work operation. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if the player starts working, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will set you to start working for the specified faction. You must be a member of the faction and that faction must have the specified work type, or else this function will fail. If you are already in the middle of some \u201cworking\u201d action (such as working for a company, training at a gym, or creating a program), then running this function will cancel that action.\n\nThis function will return true if you successfully start working for the specified faction, and false otherwise.\n\n## Example 1\n\n\n```js\n// NS1\nvar FACTION_NAME = \"CyberSec\", WORK_TYPE = \"hacking\";\n\nvar success = singularity.workForFaction(FACTION_NAME, WORK_TYPE);\nif (!success) tprint(\"ERROR: Failed to start work for \" + FACTION_NAME + \" with work type \" + WORK_TYPE);\n```\n\n## Example 2\n\n\n```js\n// NS2\nconst FACTION_NAME = \"CyberSec\", WORK_TYPE = \"hacking\";\n\nlet success = ns.singularity.workForFaction(FACTION_NAME, WORK_TYPE);\nif (!success) ns.tprint(`ERROR: Failed to start work for ${FACTION_NAME} with work type ${WORK_TYPE}.`)\n```\n\n", "bitburner.sleeve.gettask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getTask](./bitburner.sleeve.gettask.md)\n\n## Sleeve.getTask() method\n\nGet task of a sleeve.\n\n**Signature:**\n\n```typescript\ngetTask(sleeveNumber: number): SleeveTask | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve task from. |\n\n**Returns:**\n\n[SleeveTask](./bitburner.sleevetask.md) \\| null\n\nObject containing information for the current task that the sleeve is performing.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn the current task that the sleeve is performing, or null if the sleeve is idle. All tasks have a \"type\" property, and other available properties depend on the type of task.\n\n", "ns.sleeve.gettask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getTask](./bitburner.sleeve.gettask.md)\n\n## Sleeve.getTask() method\n\nGet task of a sleeve.\n\n**Signature:**\n\n```typescript\ngetTask(sleeveNumber: number): SleeveTask | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve task from. |\n\n**Returns:**\n\n[SleeveTask](./bitburner.sleevetask.md) \\| null\n\nObject containing information for the current task that the sleeve is performing.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn the current task that the sleeve is performing, or null if the sleeve is idle. All tasks have a \"type\" property, and other available properties depend on the type of task.\n\n", "bitburner.infiltrationlocation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md)\n\n## InfiltrationLocation interface\n\n\n**Signature:**\n\n```typescript\ninterface InfiltrationLocation \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [difficulty](./bitburner.infiltrationlocation.difficulty.md) |  | number |  |\n|  [location](./bitburner.infiltrationlocation.location.md) |  | [ILocation](./bitburner.ilocation.md) |  |\n|  [reward](./bitburner.infiltrationlocation.reward.md) |  | [InfiltrationReward](./bitburner.infiltrationreward.md) |  |\n\n", "ns.infiltrationlocation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md)\n\n## InfiltrationLocation interface\n\n\n**Signature:**\n\n```typescript\ninterface InfiltrationLocation \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [difficulty](./bitburner.infiltrationlocation.difficulty.md) |  | number |  |\n|  [location](./bitburner.infiltrationlocation.location.md) |  | [ILocation](./bitburner.ilocation.md) |  |\n|  [reward](./bitburner.infiltrationlocation.reward.md) |  | [InfiltrationReward](./bitburner.infiltrationreward.md) |  |\n\n", "bitburner.userinterface.gettheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [getTheme](./bitburner.userinterface.gettheme.md)\n\n## UserInterface.getTheme() method\n\nGet the current theme\n\n**Signature:**\n\n```typescript\ngetTheme(): UserInterfaceTheme;\n```\n**Returns:**\n\n[UserInterfaceTheme](./bitburner.userinterfacetheme.md)\n\nAn object containing the theme's colors\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.userinterface.gettheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [getTheme](./bitburner.userinterface.gettheme.md)\n\n## UserInterface.getTheme() method\n\nGet the current theme\n\n**Signature:**\n\n```typescript\ngetTheme(): UserInterfaceTheme;\n```\n**Returns:**\n\n[UserInterfaceTheme](./bitburner.userinterfacetheme.md)\n\nAn object containing the theme's colors\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.sleeve.getsleeveaugmentationprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeveAugmentationPrice](./bitburner.sleeve.getsleeveaugmentationprice.md)\n\n## Sleeve.getSleeveAugmentationPrice() method\n\nGet price of an augmentation.\n\n**Signature:**\n\n```typescript\ngetSleeveAugmentationPrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nPrice of the augmentation.\n\n## Remarks\n\nRAM cost: 4 GB\n\n", "ns.sleeve.getsleeveaugmentationprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeveAugmentationPrice](./bitburner.sleeve.getsleeveaugmentationprice.md)\n\n## Sleeve.getSleeveAugmentationPrice() method\n\nGet price of an augmentation.\n\n**Signature:**\n\n```typescript\ngetSleeveAugmentationPrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nPrice of the augmentation.\n\n## Remarks\n\nRAM cost: 4 GB\n\n", "bitburner.codingcontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md)\n\n## CodingContract interface\n\nCoding Contract API\n\n**Signature:**\n\n```typescript\nexport interface CodingContract \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [attempt(answer, filename, host)](./bitburner.codingcontract.attempt.md) | Attempts a coding contract, returning a reward string on success or empty string on failure. |\n|  [createDummyContract(type)](./bitburner.codingcontract.createdummycontract.md) | Generate a dummy contract. |\n|  [getContractType(filename, host)](./bitburner.codingcontract.getcontracttype.md) | Get the type of a coding contract. |\n|  [getContractTypes()](./bitburner.codingcontract.getcontracttypes.md) | List all contract types. |\n|  [getData(filename, host)](./bitburner.codingcontract.getdata.md) | Get the input data. |\n|  [getDescription(filename, host)](./bitburner.codingcontract.getdescription.md) | Get the description. |\n|  [getNumTriesRemaining(filename, host)](./bitburner.codingcontract.getnumtriesremaining.md) | Get the number of attempts remaining. |\n\n", "ns.codingcontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md)\n\n## CodingContract interface\n\nCoding Contract API\n\n**Signature:**\n\n```typescript\nexport interface CodingContract \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [attempt(answer, filename, host)](./bitburner.codingcontract.attempt.md) | Attempts a coding contract, returning a reward string on success or empty string on failure. |\n|  [createDummyContract(type)](./bitburner.codingcontract.createdummycontract.md) | Generate a dummy contract. |\n|  [getContractType(filename, host)](./bitburner.codingcontract.getcontracttype.md) | Get the type of a coding contract. |\n|  [getContractTypes()](./bitburner.codingcontract.getcontracttypes.md) | List all contract types. |\n|  [getData(filename, host)](./bitburner.codingcontract.getdata.md) | Get the input data. |\n|  [getDescription(filename, host)](./bitburner.codingcontract.getdescription.md) | Get the description. |\n|  [getNumTriesRemaining(filename, host)](./bitburner.codingcontract.getnumtriesremaining.md) | Get the number of attempts remaining. |\n\n", "bitburner.gangmemberinfo.respectgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [respectGain](./bitburner.gangmemberinfo.respectgain.md)\n\n## GangMemberInfo.respectGain property\n\n**Signature:**\n\n```typescript\nrespectGain: number;\n```\n", "ns.gangmemberinfo.respectgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [respectGain](./bitburner.gangmemberinfo.respectgain.md)\n\n## GangMemberInfo.respectGain property\n\n**Signature:**\n\n```typescript\nrespectGain: number;\n```\n", "bitburner.sleeve.settosynchronize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToSynchronize](./bitburner.sleeve.settosynchronize.md)\n\n## Sleeve.setToSynchronize() method\n\nSet a sleeve to synchronize.\n\n**Signature:**\n\n```typescript\nsetToSynchronize(sleeveNumber: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start synchronizing. |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully.\n\n", "ns.sleeve.settosynchronize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToSynchronize](./bitburner.sleeve.settosynchronize.md)\n\n## Sleeve.setToSynchronize() method\n\nSet a sleeve to synchronize.\n\n**Signature:**\n\n```typescript\nsetToSynchronize(sleeveNumber: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start synchronizing. |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully.\n\n", "bitburner.processinfo.filename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [filename](./bitburner.processinfo.filename.md)\n\n## ProcessInfo.filename property\n\nScript name.\n\n**Signature:**\n\n```typescript\nfilename: string;\n```\n", "ns.processinfo.filename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [filename](./bitburner.processinfo.filename.md)\n\n## ProcessInfo.filename property\n\nScript name.\n\n**Signature:**\n\n```typescript\nfilename: string;\n```\n", "bitburner.gangotherinfoobject.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfoObject](./bitburner.gangotherinfoobject.md)\n\n## GangOtherInfoObject interface\n\n\n**Signature:**\n\n```typescript\ninterface GangOtherInfoObject \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [power](./bitburner.gangotherinfoobject.power.md) |  | number | Gang power |\n|  [territory](./bitburner.gangotherinfoobject.territory.md) |  | number | Gang territory, in decimal form |\n\n", "ns.gangotherinfoobject.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfoObject](./bitburner.gangotherinfoobject.md)\n\n## GangOtherInfoObject interface\n\n\n**Signature:**\n\n```typescript\ninterface GangOtherInfoObject \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [power](./bitburner.gangotherinfoobject.power.md) |  | number | Gang power |\n|  [territory](./bitburner.gangotherinfoobject.territory.md) |  | number | Gang territory, in decimal form |\n\n", "bitburner.moneysource.sleeves.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [sleeves](./bitburner.moneysource.sleeves.md)\n\n## MoneySource.sleeves property\n\n**Signature:**\n\n```typescript\nsleeves: number;\n```\n", "ns.moneysource.sleeves.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [sleeves](./bitburner.moneysource.sleeves.md)\n\n## MoneySource.sleeves property\n\n**Signature:**\n\n```typescript\nsleeves: number;\n```\n", "bitburner.tix.purchasewseaccount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchaseWseAccount](./bitburner.tix.purchasewseaccount.md)\n\n## TIX.purchaseWseAccount() method\n\nPurchase WSE Account.\n\n**Signature:**\n\n```typescript\npurchaseWseAccount(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "ns.tix.purchasewseaccount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchaseWseAccount](./bitburner.tix.purchasewseaccount.md)\n\n## TIX.purchaseWseAccount() method\n\nPurchase WSE Account.\n\n**Signature:**\n\n```typescript\npurchaseWseAccount(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "bitburner.ganggeninfo.moneygainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [moneyGainRate](./bitburner.ganggeninfo.moneygainrate.md)\n\n## GangGenInfo.moneyGainRate property\n\nMoney earned per game cycle\n\n**Signature:**\n\n```typescript\nmoneyGainRate: number;\n```\n", "ns.ganggeninfo.moneygainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [moneyGainRate](./bitburner.ganggeninfo.moneygainrate.md)\n\n## GangGenInfo.moneyGainRate property\n\nMoney earned per game cycle\n\n**Signature:**\n\n```typescript\nmoneyGainRate: number;\n```\n", "bitburner.gangformulas.ascensionmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [ascensionMultiplier](./bitburner.gangformulas.ascensionmultiplier.md)\n\n## GangFormulas.ascensionMultiplier() method\n\nCalculate ascension mult.\n\n**Signature:**\n\n```typescript\nascensionMultiplier(points: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  points | number | Amount of ascension points. |\n\n**Returns:**\n\nnumber\n\nThe calculated ascension mult.\n\n", "ns.gangformulas.ascensionmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [ascensionMultiplier](./bitburner.gangformulas.ascensionmultiplier.md)\n\n## GangFormulas.ascensionMultiplier() method\n\nCalculate ascension mult.\n\n**Signature:**\n\n```typescript\nascensionMultiplier(points: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  points | number | Amount of ascension points. |\n\n**Returns:**\n\nnumber\n\nThe calculated ascension mult.\n\n", "bitburner.gangmemberinfo.augmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [augmentations](./bitburner.gangmemberinfo.augmentations.md)\n\n## GangMemberInfo.augmentations property\n\n**Signature:**\n\n```typescript\naugmentations: string[];\n```\n", "ns.gangmemberinfo.augmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [augmentations](./bitburner.gangmemberinfo.augmentations.md)\n\n## GangMemberInfo.augmentations property\n\n**Signature:**\n\n```typescript\naugmentations: string[];\n```\n", "bitburner.workstats.reputation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [reputation](./bitburner.workstats.reputation.md)\n\n## WorkStats.reputation property\n\n**Signature:**\n\n```typescript\nreputation: number;\n```\n", "ns.workstats.reputation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [reputation](./bitburner.workstats.reputation.md)\n\n## WorkStats.reputation property\n\n**Signature:**\n\n```typescript\nreputation: number;\n```\n", "bitburner.ns.hastorrouter.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hasTorRouter](./bitburner.ns.hastorrouter.md)\n\n## NS.hasTorRouter() method\n\nReturns whether the player has access to the darkweb.\n\n**Signature:**\n\n```typescript\nhasTorRouter(): boolean;\n```\n**Returns:**\n\nboolean\n\nWhether player has access to the dark web.\n\n## Remarks\n\nRAM cost: 0.05GB\n\n## Example 1\n\n\n```js\n// NS1:\nif (hasTorRouter()) tprint(\"TOR router detected.\");\n```\n\n## Example 2\n\n\n```js\n// NS2:\nif (ns.hasTorRouter()) tprint(\"TOR router detected.\");\n```\n\n", "ns.ns.hastorrouter.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hasTorRouter](./bitburner.ns.hastorrouter.md)\n\n## NS.hasTorRouter() method\n\nReturns whether the player has access to the darkweb.\n\n**Signature:**\n\n```typescript\nhasTorRouter(): boolean;\n```\n**Returns:**\n\nboolean\n\nWhether player has access to the dark web.\n\n## Remarks\n\nRAM cost: 0.05GB\n\n## Example 1\n\n\n```js\n// NS1:\nif (hasTorRouter()) tprint(\"TOR router detected.\");\n```\n\n## Example 2\n\n\n```js\n// NS2:\nif (ns.hasTorRouter()) tprint(\"TOR router detected.\");\n```\n\n", "bitburner.multipliers.hacknet_node_purchase_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_purchase\\_cost](./bitburner.multipliers.hacknet_node_purchase_cost.md)\n\n## Multipliers.hacknet\\_node\\_purchase\\_cost property\n\nMultiplier to cost of purchasing a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_purchase_cost: number;\n```\n", "ns.multipliers.hacknet_node_purchase_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_purchase\\_cost](./bitburner.multipliers.hacknet_node_purchase_cost.md)\n\n## Multipliers.hacknet\\_node\\_purchase\\_cost property\n\nMultiplier to cost of purchasing a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_purchase_cost: number;\n```\n", "bitburner.hacknet.upgradecore.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeCore](./bitburner.hacknet.upgradecore.md)\n\n## Hacknet.upgradeCore() method\n\nUpgrade the core of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeCore(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of cores to purchase. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s cores are successfully purchased, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nTries to purchase n cores for the specified Hacknet Node.\n\nReturns true if it successfully purchases n cores for the Hacknet Node or if it purchases some positive amount and the Node reaches its max number of cores.\n\nReturns false otherwise.\n\n", "ns.hacknet.upgradecore.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeCore](./bitburner.hacknet.upgradecore.md)\n\n## Hacknet.upgradeCore() method\n\nUpgrade the core of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeCore(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of cores to purchase. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s cores are successfully purchased, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nTries to purchase n cores for the specified Hacknet Node.\n\nReturns true if it successfully purchases n cores for the Hacknet Node or if it purchases some positive amount and the Node reaches its max number of cores.\n\nReturns false otherwise.\n\n", "bitburner.bitnodemultipliers.factionworkexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FactionWorkExpGain](./bitburner.bitnodemultipliers.factionworkexpgain.md)\n\n## BitNodeMultipliers.FactionWorkExpGain property\n\nInfluences the experience gained for each ability when the player completes work for a Faction.\n\n**Signature:**\n\n```typescript\nFactionWorkExpGain: number;\n```\n", "ns.bitnodemultipliers.factionworkexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FactionWorkExpGain](./bitburner.bitnodemultipliers.factionworkexpgain.md)\n\n## BitNodeMultipliers.FactionWorkExpGain property\n\nInfluences the experience gained for each ability when the player completes work for a Faction.\n\n**Signature:**\n\n```typescript\nFactionWorkExpGain: number;\n```\n", "bitburner.gameinfo.commit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md) &gt; [commit](./bitburner.gameinfo.commit.md)\n\n## GameInfo.commit property\n\n**Signature:**\n\n```typescript\ncommit: string;\n```\n", "ns.gameinfo.commit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md) &gt; [commit](./bitburner.gameinfo.commit.md)\n\n## GameInfo.commit property\n\n**Signature:**\n\n```typescript\ncommit: string;\n```\n", "bitburner.product.scost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [sCost](./bitburner.product.scost.md)\n\n## Product.sCost property\n\nSell cost, can be \"MP+5\"\n\n**Signature:**\n\n```typescript\nsCost: string | number;\n```\n", "ns.product.scost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [sCost](./bitburner.product.scost.md)\n\n## Product.sCost property\n\nSell cost, can be \"MP+5\"\n\n**Signature:**\n\n```typescript\nsCost: string | number;\n```\n", "bitburner.ns.infiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [infiltration](./bitburner.ns.infiltration.md)\n\n## NS.infiltration property\n\nNamespace for infiltration functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly infiltration: Infiltration;\n```\n", "ns.ns.infiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [infiltration](./bitburner.ns.infiltration.md)\n\n## NS.infiltration property\n\nNamespace for infiltration functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly infiltration: Infiltration;\n```\n", "bitburner.userinterfacetheme.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [cha](./bitburner.userinterfacetheme.cha.md)\n\n## UserInterfaceTheme.cha property\n\n**Signature:**\n\n```typescript\ncha: string;\n```\n", "ns.userinterfacetheme.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [cha](./bitburner.userinterfacetheme.cha.md)\n\n## UserInterfaceTheme.cha property\n\n**Signature:**\n\n```typescript\ncha: string;\n```\n", "bitburner.corpconstants.marketcyclesperemployeeraise.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [marketCyclesPerEmployeeRaise](./bitburner.corpconstants.marketcyclesperemployeeraise.md)\n\n## CorpConstants.marketCyclesPerEmployeeRaise property\n\n**Signature:**\n\n```typescript\nmarketCyclesPerEmployeeRaise: number;\n```\n", "ns.corpconstants.marketcyclesperemployeeraise.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [marketCyclesPerEmployeeRaise](./bitburner.corpconstants.marketcyclesperemployeeraise.md)\n\n## CorpConstants.marketCyclesPerEmployeeRaise property\n\n**Signature:**\n\n```typescript\nmarketCyclesPerEmployeeRaise: number;\n```\n", "bitburner.toastvariant.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ToastVariant](./bitburner.toastvariant.md)\n\n## ToastVariant enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum ToastVariant \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  ERROR | <code>&quot;error&quot;</code> |  |\n|  INFO | <code>&quot;info&quot;</code> |  |\n|  SUCCESS | <code>&quot;success&quot;</code> |  |\n|  WARNING | <code>&quot;warning&quot;</code> |  |\n\n", "ns.toastvariant.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ToastVariant](./bitburner.toastvariant.md)\n\n## ToastVariant enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum ToastVariant \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  ERROR | <code>&quot;error&quot;</code> |  |\n|  INFO | <code>&quot;info&quot;</code> |  |\n|  SUCCESS | <code>&quot;success&quot;</code> |  |\n|  WARNING | <code>&quot;warning&quot;</code> |  |\n\n", "bitburner.formulas.mockperson.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [mockPerson](./bitburner.formulas.mockperson.md)\n\n## Formulas.mockPerson() method\n\n**Signature:**\n\n```typescript\nmockPerson(): Person;\n```\n**Returns:**\n\n[Person](./bitburner.person.md)\n\n", "ns.formulas.mockperson.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [mockPerson](./bitburner.formulas.mockperson.md)\n\n## Formulas.mockPerson() method\n\n**Signature:**\n\n```typescript\nmockPerson(): Person;\n```\n**Returns:**\n\n[Person](./bitburner.person.md)\n\n", "bitburner.moneysource.augmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [augmentations](./bitburner.moneysource.augmentations.md)\n\n## MoneySource.augmentations property\n\n**Signature:**\n\n```typescript\naugmentations: number;\n```\n", "ns.moneysource.augmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [augmentations](./bitburner.moneysource.augmentations.md)\n\n## MoneySource.augmentations property\n\n**Signature:**\n\n```typescript\naugmentations: number;\n```\n", "bitburner.gangmemberinfo.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [name](./bitburner.gangmemberinfo.name.md)\n\n## GangMemberInfo.name property\n\nName of the gang member\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.gangmemberinfo.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [name](./bitburner.gangmemberinfo.name.md)\n\n## GangMemberInfo.name property\n\nName of the gang member\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.server.basedifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [baseDifficulty](./bitburner.server.basedifficulty.md)\n\n## Server.baseDifficulty property\n\nInitial server security level (i.e. security level when the server was created)\n\n**Signature:**\n\n```typescript\nbaseDifficulty: number;\n```\n", "ns.server.basedifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [baseDifficulty](./bitburner.server.basedifficulty.md)\n\n## Server.baseDifficulty property\n\nInitial server security level (i.e. security level when the server was created)\n\n**Signature:**\n\n```typescript\nbaseDifficulty: number;\n```\n", "bitburner.corpindustrydata.advertisingfactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [advertisingFactor](./bitburner.corpindustrydata.advertisingfactor.md)\n\n## CorpIndustryData.advertisingFactor property\n\nAdvertising factor (affects sales)\n\n**Signature:**\n\n```typescript\nadvertisingFactor?: number;\n```\n", "ns.corpindustrydata.advertisingfactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [advertisingFactor](./bitburner.corpindustrydata.advertisingfactor.md)\n\n## CorpIndustryData.advertisingFactor property\n\nAdvertising factor (affects sales)\n\n**Signature:**\n\n```typescript\nadvertisingFactor?: number;\n```\n", "bitburner.server.hasadminrights.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [hasAdminRights](./bitburner.server.hasadminrights.md)\n\n## Server.hasAdminRights property\n\nFlag indicating whether player has admin/root access to this server\n\n**Signature:**\n\n```typescript\nhasAdminRights: boolean;\n```\n", "ns.server.hasadminrights.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [hasAdminRights](./bitburner.server.hasadminrights.md)\n\n## Server.hasAdminRights property\n\nFlag indicating whether player has admin/root access to this server\n\n**Signature:**\n\n```typescript\nhasAdminRights: boolean;\n```\n", "bitburner.ns.tprint.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tprint](./bitburner.ns.tprint.md)\n\n## NS.tprint() method\n\nPrints one or more values or variables to the Terminal.\n\n**Signature:**\n\n```typescript\ntprint(...args: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  args | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nSee [print](./bitburner.ns.print.md) for how to add color to your printed strings.\n\n", "ns.ns.tprint.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tprint](./bitburner.ns.tprint.md)\n\n## NS.tprint() method\n\nPrints one or more values or variables to the Terminal.\n\n**Signature:**\n\n```typescript\ntprint(...args: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  args | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nSee [print](./bitburner.ns.print.md) for how to add color to your printed strings.\n\n", "bitburner.ns.stock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [stock](./bitburner.ns.stock.md)\n\n## NS.stock property\n\nNamespace for stock functions.\n\n**Signature:**\n\n```typescript\nreadonly stock: TIX;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.stock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [stock](./bitburner.ns.stock.md)\n\n## NS.stock property\n\nNamespace for stock functions.\n\n**Signature:**\n\n```typescript\nreadonly stock: TIX;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bladeburner.getskillupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillUpgradeCost](./bitburner.bladeburner.getskillupgradecost.md)\n\n## Bladeburner.getSkillUpgradeCost() method\n\nGet cost to upgrade skill.\n\n**Signature:**\n\n```typescript\ngetSkillUpgradeCost(name: string, count?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string |  |\n|  count | number | _(Optional)_ Number of times to upgrade the skill. Defaults to 1 if not specified. |\n\n**Returns:**\n\nnumber\n\nNumber of skill points needed to upgrade the specified skill.\n\n## Remarks\n\nRAM cost: 4 GB\n\nThis function returns the number of skill points needed to upgrade the specified skill the specified number of times.\n\nThe function returns -1 if an invalid skill name is passed in.\n\n", "ns.bladeburner.getskillupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillUpgradeCost](./bitburner.bladeburner.getskillupgradecost.md)\n\n## Bladeburner.getSkillUpgradeCost() method\n\nGet cost to upgrade skill.\n\n**Signature:**\n\n```typescript\ngetSkillUpgradeCost(name: string, count?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string |  |\n|  count | number | _(Optional)_ Number of times to upgrade the skill. Defaults to 1 if not specified. |\n\n**Returns:**\n\nnumber\n\nNumber of skill points needed to upgrade the specified skill.\n\n## Remarks\n\nRAM cost: 4 GB\n\nThis function returns the number of skill points needed to upgrade the specified skill the specified number of times.\n\nThe function returns -1 if an invalid skill name is passed in.\n\n", "bitburner.bitnodemultipliers.augmentationrepcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [AugmentationRepCost](./bitburner.bitnodemultipliers.augmentationrepcost.md)\n\n## BitNodeMultipliers.AugmentationRepCost property\n\nInfluences the base rep the player must have with a faction to purchase an augmentation.\n\n**Signature:**\n\n```typescript\nAugmentationRepCost: number;\n```\n", "ns.bitnodemultipliers.augmentationrepcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [AugmentationRepCost](./bitburner.bitnodemultipliers.augmentationrepcost.md)\n\n## BitNodeMultipliers.AugmentationRepCost property\n\nInfluences the base rep the player must have with a faction to purchase an augmentation.\n\n**Signature:**\n\n```typescript\nAugmentationRepCost: number;\n```\n", "bitburner.hacknetserversformulas.ramupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [ramUpgradeCost](./bitburner.hacknetserversformulas.ramupgradecost.md)\n\n## HacknetServersFormulas.ramUpgradeCost() method\n\nCalculate cost of upgrading hacknet server ram.\n\n**Signature:**\n\n```typescript\nramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingRam | number | starting ram |\n|  extraLevels | number | _(Optional)_ amount of level of ram to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetserversformulas.ramupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [ramUpgradeCost](./bitburner.hacknetserversformulas.ramupgradecost.md)\n\n## HacknetServersFormulas.ramUpgradeCost() method\n\nCalculate cost of upgrading hacknet server ram.\n\n**Signature:**\n\n```typescript\nramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingRam | number | starting ram |\n|  extraLevels | number | _(Optional)_ amount of level of ram to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.crimestats.karma.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [karma](./bitburner.crimestats.karma.md)\n\n## CrimeStats.karma property\n\nAmount of karma lost for successfully committing this crime\n\n**Signature:**\n\n```typescript\nkarma: number;\n```\n", "ns.crimestats.karma.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [karma](./bitburner.crimestats.karma.md)\n\n## CrimeStats.karma property\n\nAmount of karma lost for successfully committing this crime\n\n**Signature:**\n\n```typescript\nkarma: number;\n```\n", "bitburner.hacknetserversformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md)\n\n## HacknetServersFormulas interface\n\nHacknet Server formulas\n\n**Signature:**\n\n```typescript\ninterface HacknetServersFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [cacheUpgradeCost(startingCache, extraCache)](./bitburner.hacknetserversformulas.cacheupgradecost.md) | Calculate cost of upgrading hacknet server cache. |\n|  [constants()](./bitburner.hacknetserversformulas.constants.md) | All constants used by the game. |\n|  [coreUpgradeCost(startingCore, extraCores, costMult)](./bitburner.hacknetserversformulas.coreupgradecost.md) | Calculate cost of upgrading hacknet server cores. |\n|  [hacknetServerCost(n, mult)](./bitburner.hacknetserversformulas.hacknetservercost.md) | Calculate the cost of a hacknet server. |\n|  [hashGainRate(level, ramUsed, maxRam, cores, mult)](./bitburner.hacknetserversformulas.hashgainrate.md) | Calculate hash gain rate. |\n|  [hashUpgradeCost(upgName, level)](./bitburner.hacknetserversformulas.hashupgradecost.md) | Calculate hash cost of an upgrade. |\n|  [levelUpgradeCost(startingLevel, extraLevels, costMult)](./bitburner.hacknetserversformulas.levelupgradecost.md) | Calculate cost of upgrading hacknet server level. |\n|  [ramUpgradeCost(startingRam, extraLevels, costMult)](./bitburner.hacknetserversformulas.ramupgradecost.md) | Calculate cost of upgrading hacknet server ram. |\n\n", "ns.hacknetserversformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md)\n\n## HacknetServersFormulas interface\n\nHacknet Server formulas\n\n**Signature:**\n\n```typescript\ninterface HacknetServersFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [cacheUpgradeCost(startingCache, extraCache)](./bitburner.hacknetserversformulas.cacheupgradecost.md) | Calculate cost of upgrading hacknet server cache. |\n|  [constants()](./bitburner.hacknetserversformulas.constants.md) | All constants used by the game. |\n|  [coreUpgradeCost(startingCore, extraCores, costMult)](./bitburner.hacknetserversformulas.coreupgradecost.md) | Calculate cost of upgrading hacknet server cores. |\n|  [hacknetServerCost(n, mult)](./bitburner.hacknetserversformulas.hacknetservercost.md) | Calculate the cost of a hacknet server. |\n|  [hashGainRate(level, ramUsed, maxRam, cores, mult)](./bitburner.hacknetserversformulas.hashgainrate.md) | Calculate hash gain rate. |\n|  [hashUpgradeCost(upgName, level)](./bitburner.hacknetserversformulas.hashupgradecost.md) | Calculate hash cost of an upgrade. |\n|  [levelUpgradeCost(startingLevel, extraLevels, costMult)](./bitburner.hacknetserversformulas.levelupgradecost.md) | Calculate cost of upgrading hacknet server level. |\n|  [ramUpgradeCost(startingRam, extraLevels, costMult)](./bitburner.hacknetserversformulas.ramupgradecost.md) | Calculate cost of upgrading hacknet server ram. |\n\n", "bitburner.codingcontract.getcontracttypes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getContractTypes](./bitburner.codingcontract.getcontracttypes.md)\n\n## CodingContract.getContractTypes() method\n\nList all contract types.\n\n**Signature:**\n\n```typescript\ngetContractTypes(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "ns.codingcontract.getcontracttypes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getContractTypes](./bitburner.codingcontract.getcontracttypes.md)\n\n## CodingContract.getContractTypes() method\n\nList all contract types.\n\n**Signature:**\n\n```typescript\ngetContractTypes(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "bitburner.ns.exec.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [exec](./bitburner.ns.exec.md)\n\n## NS.exec() method\n\nStart another script on any server.\n\n**Signature:**\n\n```typescript\nexec(script: string, hostname: string, numThreads?: number, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to execute. |\n|  hostname | string | Hostname of the <code>target server</code> on which to execute the script. |\n|  numThreads | number | _(Optional)_ Integer number of threads for new script. Defaults to 1. |\n|  args | (string \\| number \\| boolean)\\[\\] | Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value. |\n\n**Returns:**\n\nnumber\n\nReturns the PID of a successfully started script, and 0 otherwise.\n\n## Remarks\n\nRAM cost: 1.3 GB\n\nRun a script as a separate process on a specified server. This is similar to the function [run](./bitburner.ns.run.md) except that it can be used to run a script on any server, instead of just the current server.\n\nIf the script was successfully started, then this function returns the PID of that script. Otherwise, it returns 0.\n\nPID stands for Process ID. The PID is a unique identifier for each script. The PID will always be a positive integer.\n\nRunning this function with a numThreads argument of 0 or less will cause a runtime error.\n\n## Example\n\n\n```js\n// The simplest way to use the exec command is to call it with just the script name\n// and the target server. The following example will try to run generic-hack.js\n// on the foodnstuff server.\nns.exec(\"generic-hack.js\", \"foodnstuff\");\n\n// The following example will try to run the script generic-hack.js on the\n// joesguns server with 10 threads.\nns.exec(\"generic-hack.js\", \"joesguns\", 10);\n\n// This last example will try to run the script foo.js on the foodnstuff server\n// with 5 threads. It will also pass the number 1 and the string \u201ctest\u201d in as\n// arguments to the script.\nns.exec(\"foo.js\", \"foodnstuff\", 5, 1, \"test\");\n```\n\n", "ns.ns.exec.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [exec](./bitburner.ns.exec.md)\n\n## NS.exec() method\n\nStart another script on any server.\n\n**Signature:**\n\n```typescript\nexec(script: string, hostname: string, numThreads?: number, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to execute. |\n|  hostname | string | Hostname of the <code>target server</code> on which to execute the script. |\n|  numThreads | number | _(Optional)_ Integer number of threads for new script. Defaults to 1. |\n|  args | (string \\| number \\| boolean)\\[\\] | Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value. |\n\n**Returns:**\n\nnumber\n\nReturns the PID of a successfully started script, and 0 otherwise.\n\n## Remarks\n\nRAM cost: 1.3 GB\n\nRun a script as a separate process on a specified server. This is similar to the function [run](./bitburner.ns.run.md) except that it can be used to run a script on any server, instead of just the current server.\n\nIf the script was successfully started, then this function returns the PID of that script. Otherwise, it returns 0.\n\nPID stands for Process ID. The PID is a unique identifier for each script. The PID will always be a positive integer.\n\nRunning this function with a numThreads argument of 0 or less will cause a runtime error.\n\n## Example\n\n\n```js\n// The simplest way to use the exec command is to call it with just the script name\n// and the target server. The following example will try to run generic-hack.js\n// on the foodnstuff server.\nns.exec(\"generic-hack.js\", \"foodnstuff\");\n\n// The following example will try to run the script generic-hack.js on the\n// joesguns server with 10 threads.\nns.exec(\"generic-hack.js\", \"joesguns\", 10);\n\n// This last example will try to run the script foo.js on the foodnstuff server\n// with 5 threads. It will also pass the number 1 and the string \u201ctest\u201d in as\n// arguments to the script.\nns.exec(\"foo.js\", \"foodnstuff\", 5, 1, \"test\");\n```\n\n", "bitburner.warehouseapi.getwarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getWarehouse](./bitburner.warehouseapi.getwarehouse.md)\n\n## WarehouseAPI.getWarehouse() method\n\nGet warehouse data\n\n**Signature:**\n\n```typescript\ngetWarehouse(divisionName: string, city: CityName | `${CityName}`): Warehouse;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\n[Warehouse](./bitburner.warehouse.md)\n\nwarehouse data\n\n", "ns.warehouseapi.getwarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getWarehouse](./bitburner.warehouseapi.getwarehouse.md)\n\n## WarehouseAPI.getWarehouse() method\n\nGet warehouse data\n\n**Signature:**\n\n```typescript\ngetWarehouse(divisionName: string, city: CityName | `${CityName}`): Warehouse;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\n[Warehouse](./bitburner.warehouse.md)\n\nwarehouse data\n\n", "bitburner.ganggeninfo.respectgainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [respectGainRate](./bitburner.ganggeninfo.respectgainrate.md)\n\n## GangGenInfo.respectGainRate property\n\nRespect earned per game cycle\n\n**Signature:**\n\n```typescript\nrespectGainRate: number;\n```\n", "ns.ganggeninfo.respectgainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [respectGainRate](./bitburner.ganggeninfo.respectgainrate.md)\n\n## GangGenInfo.respectGainRate property\n\nRespect earned per game cycle\n\n**Signature:**\n\n```typescript\nrespectGainRate: number;\n```\n", "bitburner.processinfo.pid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [pid](./bitburner.processinfo.pid.md)\n\n## ProcessInfo.pid property\n\nProcess ID\n\n**Signature:**\n\n```typescript\npid: number;\n```\n", "ns.processinfo.pid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [pid](./bitburner.processinfo.pid.md)\n\n## ProcessInfo.pid property\n\nProcess ID\n\n**Signature:**\n\n```typescript\npid: number;\n```\n", "bitburner.server.moneymax.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [moneyMax](./bitburner.server.moneymax.md)\n\n## Server.moneyMax property\n\nMaximum amount of money that this server can hold\n\n**Signature:**\n\n```typescript\nmoneyMax: number;\n```\n", "ns.server.moneymax.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [moneyMax](./bitburner.server.moneymax.md)\n\n## Server.moneyMax property\n\nMaximum amount of money that this server can hold\n\n**Signature:**\n\n```typescript\nmoneyMax: number;\n```\n", "bitburner.tix.sellshort.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [sellShort](./bitburner.tix.sellshort.md)\n\n## TIX.sellShort() method\n\nSell short stock.\n\n**Signature:**\n\n```typescript\nsellShort(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to sell. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was sold, otherwise 0 if the shares weren't sold.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to sell a short position of a stock using a Market Order.\n\nThe ability to short a stock is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\nIf the specified number of shares exceeds the amount that the player actually owns, then this function will sell all owned shares. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nIf the sale is successful, this function will return the stock price at which each share was sold. Otherwise it will return 0.\n\n", "ns.tix.sellshort.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [sellShort](./bitburner.tix.sellshort.md)\n\n## TIX.sellShort() method\n\nSell short stock.\n\n**Signature:**\n\n```typescript\nsellShort(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to sell. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was sold, otherwise 0 if the shares weren't sold.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to sell a short position of a stock using a Market Order.\n\nThe ability to short a stock is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\nIf the specified number of shares exceeds the amount that the player actually owns, then this function will sell all owned shares. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nIf the sale is successful, this function will return the stock price at which each share was sold. Otherwise it will return 0.\n\n", "bitburner.sleevetask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveTask](./bitburner.sleevetask.md)\n\n## SleeveTask type\n\nObject representing a sleeve current task.\n\n**Signature:**\n\n```typescript\nexport type SleeveTask =\n  | SleeveBladeburnerTask\n  | SleeveClassTask\n  | SleeveCompanyTask\n  | SleeveCrimeTask\n  | SleeveFactionTask\n  | SleeveInfiltrateTask\n  | SleeveRecoveryTask\n  | SleeveSupportTask\n  | SleeveSynchroTask;\n```\n**References:** [SleeveBladeburnerTask](./bitburner.sleevebladeburnertask.md)<!-- -->, [SleeveClassTask](./bitburner.sleeveclasstask.md)<!-- -->, [SleeveCompanyTask](./bitburner.sleevecompanytask.md)<!-- -->, [SleeveCrimeTask](./bitburner.sleevecrimetask.md)<!-- -->, [SleeveFactionTask](./bitburner.sleevefactiontask.md)<!-- -->, [SleeveInfiltrateTask](./bitburner.sleeveinfiltratetask.md)<!-- -->, [SleeveRecoveryTask](./bitburner.sleeverecoverytask.md)<!-- -->, [SleeveSupportTask](./bitburner.sleevesupporttask.md)<!-- -->, [SleeveSynchroTask](./bitburner.sleevesynchrotask.md)\n\n", "ns.sleevetask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveTask](./bitburner.sleevetask.md)\n\n## SleeveTask type\n\nObject representing a sleeve current task.\n\n**Signature:**\n\n```typescript\nexport type SleeveTask =\n  | SleeveBladeburnerTask\n  | SleeveClassTask\n  | SleeveCompanyTask\n  | SleeveCrimeTask\n  | SleeveFactionTask\n  | SleeveInfiltrateTask\n  | SleeveRecoveryTask\n  | SleeveSupportTask\n  | SleeveSynchroTask;\n```\n**References:** [SleeveBladeburnerTask](./bitburner.sleevebladeburnertask.md)<!-- -->, [SleeveClassTask](./bitburner.sleeveclasstask.md)<!-- -->, [SleeveCompanyTask](./bitburner.sleevecompanytask.md)<!-- -->, [SleeveCrimeTask](./bitburner.sleevecrimetask.md)<!-- -->, [SleeveFactionTask](./bitburner.sleevefactiontask.md)<!-- -->, [SleeveInfiltrateTask](./bitburner.sleeveinfiltratetask.md)<!-- -->, [SleeveRecoveryTask](./bitburner.sleeverecoverytask.md)<!-- -->, [SleeveSupportTask](./bitburner.sleevesupporttask.md)<!-- -->, [SleeveSynchroTask](./bitburner.sleevesynchrotask.md)\n\n", "bitburner.tix.getprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getPrice](./bitburner.tix.getprice.md)\n\n## TIX.getPrice() method\n\nReturns the price of a stock.\n\n**Signature:**\n\n```typescript\ngetPrice(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nThe price of a stock.\n\n## Remarks\n\nRAM cost: 2 GB\n\nThe stock\u2019s price is the average of its bid and ask prices. This function requires that you have the following:\n\n1. WSE Account\n\n1. TIX API Access\n\n## Example\n\n\n```js\nconst fourSigmaStockPrice = ns.stock.getPrice(\"FSIG\");\n\n// Choose the first stock symbol from the array of stock symbols.  Get the price\n// of the corresponding stock.\nconst sym = ns.stock.getSymbols()[0];\nns.tprint(\"Stock symbol: \" + sym);\nns.tprint(\"Stock price: \" + ns.stock.getPrice(sym));\n```\n\n", "ns.tix.getprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getPrice](./bitburner.tix.getprice.md)\n\n## TIX.getPrice() method\n\nReturns the price of a stock.\n\n**Signature:**\n\n```typescript\ngetPrice(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nThe price of a stock.\n\n## Remarks\n\nRAM cost: 2 GB\n\nThe stock\u2019s price is the average of its bid and ask prices. This function requires that you have the following:\n\n1. WSE Account\n\n1. TIX API Access\n\n## Example\n\n\n```js\nconst fourSigmaStockPrice = ns.stock.getPrice(\"FSIG\");\n\n// Choose the first stock symbol from the array of stock symbols.  Get the price\n// of the corresponding stock.\nconst sym = ns.stock.getSymbols()[0];\nns.tprint(\"Stock symbol: \" + sym);\nns.tprint(\"Stock price: \" + ns.stock.getPrice(sym));\n```\n\n", "bitburner.moneysource.other.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [other](./bitburner.moneysource.other.md)\n\n## MoneySource.other property\n\n**Signature:**\n\n```typescript\nother: number;\n```\n", "ns.moneysource.other.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [other](./bitburner.moneysource.other.md)\n\n## MoneySource.other property\n\n**Signature:**\n\n```typescript\nother: number;\n```\n", "bitburner.gang.getequipmenttype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentType](./bitburner.gang.getequipmenttype.md)\n\n## Gang.getEquipmentType() method\n\nGet type of an equipment.\n\n**Signature:**\n\n```typescript\ngetEquipmentType(equipName: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  equipName | string | Name of equipment. |\n\n**Returns:**\n\nstring\n\nType of the equipment.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the specified equipment type.\n\n", "ns.gang.getequipmenttype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentType](./bitburner.gang.getequipmenttype.md)\n\n## Gang.getEquipmentType() method\n\nGet type of an equipment.\n\n**Signature:**\n\n```typescript\ngetEquipmentType(equipName: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  equipName | string | Name of equipment. |\n\n**Returns:**\n\nstring\n\nType of the equipment.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the specified equipment type.\n\n", "bitburner.corpmaterialconstantdata.basecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [baseCost](./bitburner.corpmaterialconstantdata.basecost.md)\n\n## CorpMaterialConstantData.baseCost property\n\n**Signature:**\n\n```typescript\nbaseCost: number;\n```\n", "ns.corpmaterialconstantdata.basecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [baseCost](./bitburner.corpmaterialconstantdata.basecost.md)\n\n## CorpMaterialConstantData.baseCost property\n\n**Signature:**\n\n```typescript\nbaseCost: number;\n```\n", "bitburner.ns.getscriptexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptExpGain](./bitburner.ns.getscriptexpgain.md)\n\n## NS.getScriptExpGain() method\n\nGet the exp gain of a script.\n\n**Signature:**\n\n```typescript\ngetScriptExpGain(script: string, host: string, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script. |\n|  host | string | Server on which script is running. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments that the script is running with. |\n\n**Returns:**\n\nnumber\n\nAmount of hacking experience the specified script generates while online.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of hacking experience the specified script generates while online (when the game is open, does not apply for offline experience gains). Remember that a script is uniquely identified by both its name and its arguments.\n\nThis function can also return the total experience gain rate of all of your active scripts by running the function with no arguments.\n\n", "ns.ns.getscriptexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptExpGain](./bitburner.ns.getscriptexpgain.md)\n\n## NS.getScriptExpGain() method\n\nGet the exp gain of a script.\n\n**Signature:**\n\n```typescript\ngetScriptExpGain(script: string, host: string, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script. |\n|  host | string | Server on which script is running. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments that the script is running with. |\n\n**Returns:**\n\nnumber\n\nAmount of hacking experience the specified script generates while online.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of hacking experience the specified script generates while online (when the game is open, does not apply for offline experience gains). Remember that a script is uniquely identified by both its name and its arguments.\n\nThis function can also return the total experience gain rate of all of your active scripts by running the function with no arguments.\n\n", "bitburner.player.jobs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [jobs](./bitburner.player.jobs.md)\n\n## Player.jobs property\n\n**Signature:**\n\n```typescript\njobs: Record<string, string>;\n```\n", "ns.player.jobs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [jobs](./bitburner.player.jobs.md)\n\n## Player.jobs property\n\n**Signature:**\n\n```typescript\njobs: Record<string, string>;\n```\n", "bitburner.ns.formulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formulas](./bitburner.ns.formulas.md)\n\n## NS.formulas property\n\nNamespace for formulas functions.\n\n**Signature:**\n\n```typescript\nreadonly formulas: Formulas;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.formulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formulas](./bitburner.ns.formulas.md)\n\n## NS.formulas property\n\nNamespace for formulas functions.\n\n**Signature:**\n\n```typescript\nreadonly formulas: Formulas;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.hacknet.getcacheupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getCacheUpgradeCost](./bitburner.hacknet.getcacheupgradecost.md)\n\n## Hacknet.getCacheUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node cache.\n\n**Signature:**\n\n```typescript\ngetCacheUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade cache. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node's cache.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the cost of upgrading the cache level of the specified Hacknet Server by n.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node is already at max level, then Infinity is returned.\n\n", "ns.hacknet.getcacheupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getCacheUpgradeCost](./bitburner.hacknet.getcacheupgradecost.md)\n\n## Hacknet.getCacheUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node cache.\n\n**Signature:**\n\n```typescript\ngetCacheUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade cache. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node's cache.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the cost of upgrading the cache level of the specified Hacknet Server by n.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node is already at max level, then Infinity is returned.\n\n", "bitburner.division.makesproducts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [makesProducts](./bitburner.division.makesproducts.md)\n\n## Division.makesProducts property\n\nWhether the industry this division is in is capable of making products\n\n**Signature:**\n\n```typescript\nmakesProducts: boolean;\n```\n", "ns.division.makesproducts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [makesProducts](./bitburner.division.makesproducts.md)\n\n## Division.makesProducts property\n\nWhether the industry this division is in is capable of making products\n\n**Signature:**\n\n```typescript\nmakesProducts: boolean;\n```\n", "bitburner.corpmaterialconstantdata.competitionbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [competitionBase](./bitburner.corpmaterialconstantdata.competitionbase.md)\n\n## CorpMaterialConstantData.competitionBase property\n\n**Signature:**\n\n```typescript\ncompetitionBase: number;\n```\n", "ns.corpmaterialconstantdata.competitionbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [competitionBase](./bitburner.corpmaterialconstantdata.competitionbase.md)\n\n## CorpMaterialConstantData.competitionBase property\n\n**Signature:**\n\n```typescript\ncompetitionBase: number;\n```\n", "bitburner.player.playtimesincelastbitnode.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [playtimeSinceLastBitnode](./bitburner.player.playtimesincelastbitnode.md)\n\n## Player.playtimeSinceLastBitnode property\n\n**Signature:**\n\n```typescript\nplaytimeSinceLastBitnode: number;\n```\n", "ns.player.playtimesincelastbitnode.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [playtimeSinceLastBitnode](./bitburner.player.playtimesincelastbitnode.md)\n\n## Player.playtimeSinceLastBitnode property\n\n**Signature:**\n\n```typescript\nplaytimeSinceLastBitnode: number;\n```\n", "bitburner.gangformulas.moneygain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [moneyGain](./bitburner.gangformulas.moneygain.md)\n\n## GangFormulas.moneyGain() method\n\nCalculate money gain per tick.\n\n**Signature:**\n\n```typescript\nmoneyGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n|  member | [GangMemberInfo](./bitburner.gangmemberinfo.md) | Member info from [getMemberInformation](./bitburner.gang.getmemberinformation.md) |\n|  task | [GangTaskStats](./bitburner.gangtaskstats.md) | Task info from [getTaskStats](./bitburner.gang.gettaskstats.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated money gain.\n\n", "ns.gangformulas.moneygain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [moneyGain](./bitburner.gangformulas.moneygain.md)\n\n## GangFormulas.moneyGain() method\n\nCalculate money gain per tick.\n\n**Signature:**\n\n```typescript\nmoneyGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n|  member | [GangMemberInfo](./bitburner.gangmemberinfo.md) | Member info from [getMemberInformation](./bitburner.gang.getmemberinformation.md) |\n|  task | [GangTaskStats](./bitburner.gangtaskstats.md) | Task info from [getTaskStats](./bitburner.gang.gettaskstats.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated money gain.\n\n", "bitburner.officeapi.setautojobassignment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [setAutoJobAssignment](./bitburner.officeapi.setautojobassignment.md)\n\n## OfficeAPI.setAutoJobAssignment() method\n\nSet the auto job assignment for a job\n\n**Signature:**\n\n```typescript\nsetAutoJobAssignment(divisionName: string, city: CityName | `${CityName}`, job: string, amount: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  job | string | Name of the job |\n|  amount | number | Number of employees to assign to that job |\n\n**Returns:**\n\nboolean\n\ntrue if the employee count reached the target amount, false if not\n\n", "ns.officeapi.setautojobassignment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [setAutoJobAssignment](./bitburner.officeapi.setautojobassignment.md)\n\n## OfficeAPI.setAutoJobAssignment() method\n\nSet the auto job assignment for a job\n\n**Signature:**\n\n```typescript\nsetAutoJobAssignment(divisionName: string, city: CityName | `${CityName}`, job: string, amount: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  job | string | Name of the job |\n|  amount | number | Number of employees to assign to that job |\n\n**Returns:**\n\nboolean\n\ntrue if the employee count reached the target amount, false if not\n\n", "bitburner.singularity.exportgamebonus.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [exportGameBonus](./bitburner.singularity.exportgamebonus.md)\n\n## Singularity.exportGameBonus() method\n\nReturns Backup save bonus availability.\n\n**Signature:**\n\n```typescript\nexportGameBonus(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\nThis function will check if there is a bonus for backing up your save.\n\n", "ns.singularity.exportgamebonus.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [exportGameBonus](./bitburner.singularity.exportgamebonus.md)\n\n## Singularity.exportGameBonus() method\n\nReturns Backup save bonus availability.\n\n**Signature:**\n\n```typescript\nexportGameBonus(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\nThis function will check if there is a bonus for backing up your save.\n\n", "bitburner.bitnodemultipliers.scripthackmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ScriptHackMoney](./bitburner.bitnodemultipliers.scripthackmoney.md)\n\n## BitNodeMultipliers.ScriptHackMoney property\n\nInfluences how much the money on a server can be reduced when a script performs a hack against it.\n\n**Signature:**\n\n```typescript\nScriptHackMoney: number;\n```\n", "ns.bitnodemultipliers.scripthackmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ScriptHackMoney](./bitburner.bitnodemultipliers.scripthackmoney.md)\n\n## BitNodeMultipliers.ScriptHackMoney property\n\nInfluences how much the money on a server can be reduced when a script performs a hack against it.\n\n**Signature:**\n\n```typescript\nScriptHackMoney: number;\n```\n", "bitburner.server.hostname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [hostname](./bitburner.server.hostname.md)\n\n## Server.hostname property\n\nHostname. Must be unique\n\n**Signature:**\n\n```typescript\nhostname: string;\n```\n", "ns.server.hostname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [hostname](./bitburner.server.hostname.md)\n\n## Server.hostname property\n\nHostname. Must be unique\n\n**Signature:**\n\n```typescript\nhostname: string;\n```\n", "bitburner.ns.getmoneysources.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getMoneySources](./bitburner.ns.getmoneysources.md)\n\n## NS.getMoneySources() method\n\nGet information about the sources of income for this run.\n\n**Signature:**\n\n```typescript\ngetMoneySources(): MoneySources;\n```\n**Returns:**\n\n[MoneySources](./bitburner.moneysources.md)\n\nMoney sources\n\n## Remarks\n\nRAM cost: 1.0 GB\n\nReturns an object with information on the income sources for this run\n\n", "ns.ns.getmoneysources.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getMoneySources](./bitburner.ns.getmoneysources.md)\n\n## NS.getMoneySources() method\n\nGet information about the sources of income for this run.\n\n**Signature:**\n\n```typescript\ngetMoneySources(): MoneySources;\n```\n**Returns:**\n\n[MoneySources](./bitburner.moneysources.md)\n\nMoney sources\n\n## Remarks\n\nRAM cost: 1.0 GB\n\nReturns an object with information on the income sources for this run\n\n", "bitburner.hacknetnodeconstants.upgraderammult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [UpgradeRamMult](./bitburner.hacknetnodeconstants.upgraderammult.md)\n\n## HacknetNodeConstants.UpgradeRamMult property\n\nMultiplier to increase RAM\n\n**Signature:**\n\n```typescript\nUpgradeRamMult: number;\n```\n", "ns.hacknetnodeconstants.upgraderammult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [UpgradeRamMult](./bitburner.hacknetnodeconstants.upgraderammult.md)\n\n## HacknetNodeConstants.UpgradeRamMult property\n\nMultiplier to increase RAM\n\n**Signature:**\n\n```typescript\nUpgradeRamMult: number;\n```\n", "bitburner.ns.upgradepurchasedserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [upgradePurchasedServer](./bitburner.ns.upgradepurchasedserver.md)\n\n## NS.upgradePurchasedServer() method\n\nUpgrade a purchased server's RAM.\n\n**Signature:**\n\n```typescript\nupgradePurchasedServer(hostname: string, ram: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Hostname of the server to upgrade. |\n|  ram | number | Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nboolean\n\nTrue if the upgrade succeeded, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\n", "ns.ns.upgradepurchasedserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [upgradePurchasedServer](./bitburner.ns.upgradepurchasedserver.md)\n\n## NS.upgradePurchasedServer() method\n\nUpgrade a purchased server's RAM.\n\n**Signature:**\n\n```typescript\nupgradePurchasedServer(hostname: string, ram: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Hostname of the server to upgrade. |\n|  ram | number | Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nboolean\n\nTrue if the upgrade succeeded, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\n", "bitburner.singularity.stopaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [stopAction](./bitburner.singularity.stopaction.md)\n\n## Singularity.stopAction() method\n\nStop the current action.\n\n**Signature:**\n\n```typescript\nstopAction(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player\u2019s action was ended, false if the player was not performing an action.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function is used to end whatever \u2018action\u2019 the player is currently performing. The player will receive whatever money/experience/etc. he has earned from that action.\n\nThe actions that can be stopped with this function are:\n\n\\* Studying at a university \\* Working out at a gym \\* Working for a company/faction \\* Creating a program \\* Committing a crime\n\nThis function will return true if the player\u2019s action was ended. It will return false if the player was not performing an action when this function was called.\n\n", "ns.singularity.stopaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [stopAction](./bitburner.singularity.stopaction.md)\n\n## Singularity.stopAction() method\n\nStop the current action.\n\n**Signature:**\n\n```typescript\nstopAction(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player\u2019s action was ended, false if the player was not performing an action.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function is used to end whatever \u2018action\u2019 the player is currently performing. The player will receive whatever money/experience/etc. he has earned from that action.\n\nThe actions that can be stopped with this function are:\n\n\\* Studying at a university \\* Working out at a gym \\* Working for a company/faction \\* Creating a program \\* Committing a crime\n\nThis function will return true if the player\u2019s action was ended. It will return false if the player was not performing an action when this function was called.\n\n", "bitburner.bitnodemultipliers.purchasedservercost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerCost](./bitburner.bitnodemultipliers.purchasedservercost.md)\n\n## BitNodeMultipliers.PurchasedServerCost property\n\nInfluence how much it costs to purchase a server\n\n**Signature:**\n\n```typescript\nPurchasedServerCost: number;\n```\n", "ns.bitnodemultipliers.purchasedservercost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerCost](./bitburner.bitnodemultipliers.purchasedservercost.md)\n\n## BitNodeMultipliers.PurchasedServerCost property\n\nInfluence how much it costs to purchase a server\n\n**Signature:**\n\n```typescript\nPurchasedServerCost: number;\n```\n", "bitburner.bitnodemultipliers.purchasedservermaxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerMaxRam](./bitburner.bitnodemultipliers.purchasedservermaxram.md)\n\n## BitNodeMultipliers.PurchasedServerMaxRam property\n\nInfluences the maximum allowed RAM for a purchased server\n\n**Signature:**\n\n```typescript\nPurchasedServerMaxRam: number;\n```\n", "ns.bitnodemultipliers.purchasedservermaxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerMaxRam](./bitburner.bitnodemultipliers.purchasedservermaxram.md)\n\n## BitNodeMultipliers.PurchasedServerMaxRam property\n\nInfluences the maximum allowed RAM for a purchased server\n\n**Signature:**\n\n```typescript\nPurchasedServerMaxRam: number;\n```\n", "bitburner.officeapi.gethireadvertcount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getHireAdVertCount](./bitburner.officeapi.gethireadvertcount.md)\n\n## OfficeAPI.getHireAdVertCount() method\n\nGet the number of times you have hired AdVert.\n\n**Signature:**\n\n```typescript\ngetHireAdVertCount(divisionName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n\n**Returns:**\n\nnumber\n\nNumber of times you have hired AdVert.\n\n", "ns.officeapi.gethireadvertcount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getHireAdVertCount](./bitburner.officeapi.gethireadvertcount.md)\n\n## OfficeAPI.getHireAdVertCount() method\n\nGet the number of times you have hired AdVert.\n\n**Signature:**\n\n```typescript\ngetHireAdVertCount(divisionName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n\n**Returns:**\n\nnumber\n\nNumber of times you have hired AdVert.\n\n", "bitburner.ns.bladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [bladeburner](./bitburner.ns.bladeburner.md)\n\n## NS.bladeburner property\n\nNamespace for bladeburner functions.\n\n**Signature:**\n\n```typescript\nreadonly bladeburner: Bladeburner;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.bladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [bladeburner](./bitburner.ns.bladeburner.md)\n\n## NS.bladeburner property\n\nNamespace for bladeburner functions.\n\n**Signature:**\n\n```typescript\nreadonly bladeburner: Bladeburner;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.officeapi.research.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [research](./bitburner.officeapi.research.md)\n\n## OfficeAPI.research() method\n\nPurchase a research\n\n**Signature:**\n\n```typescript\nresearch(divisionName: string, researchName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  researchName | string | Name of the research |\n\n**Returns:**\n\nvoid\n\n", "ns.officeapi.research.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [research](./bitburner.officeapi.research.md)\n\n## OfficeAPI.research() method\n\nPurchase a research\n\n**Signature:**\n\n```typescript\nresearch(divisionName: string, researchName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  researchName | string | Name of the research |\n\n**Returns:**\n\nvoid\n\n", "bitburner.corporation.expandindustry.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [expandIndustry](./bitburner.corporation.expandindustry.md)\n\n## Corporation.expandIndustry() method\n\nExpand to a new industry\n\n**Signature:**\n\n```typescript\nexpandIndustry(industryType: CorpIndustryName, divisionName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  industryType | [CorpIndustryName](./bitburner.corpindustryname.md) | Name of the industry |\n|  divisionName | string | Name of the division |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.expandindustry.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [expandIndustry](./bitburner.corporation.expandindustry.md)\n\n## Corporation.expandIndustry() method\n\nExpand to a new industry\n\n**Signature:**\n\n```typescript\nexpandIndustry(industryType: CorpIndustryName, divisionName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  industryType | [CorpIndustryName](./bitburner.corpindustryname.md) | Name of the industry |\n|  divisionName | string | Name of the division |\n\n**Returns:**\n\nvoid\n\n", "bitburner.material.cmp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [cmp](./bitburner.material.cmp.md)\n\n## Material.cmp property\n\nCompetition for the material, only present if \"Market Research - Competition\" unlocked\n\n**Signature:**\n\n```typescript\ncmp: number | undefined;\n```\n", "ns.material.cmp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [cmp](./bitburner.material.cmp.md)\n\n## Material.cmp property\n\nCompetition for the material, only present if \"Market Research - Competition\" unlocked\n\n**Signature:**\n\n```typescript\ncmp: number | undefined;\n```\n", "bitburner.workformulas.companygains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [companyGains](./bitburner.workformulas.companygains.md)\n\n## WorkFormulas.companyGains() method\n\n**Signature:**\n\n```typescript\ncompanyGains(person: Person, companyName: string, workType: JobName | `${JobName}`, favor: number): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  companyName | string |  |\n|  workType | [JobName](./bitburner.jobname.md) \\| \\`${[JobName](./bitburner.jobname.md)<!-- -->}\\` |  |\n|  favor | number |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by performing the specified company work.\n\n", "ns.workformulas.companygains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [companyGains](./bitburner.workformulas.companygains.md)\n\n## WorkFormulas.companyGains() method\n\n**Signature:**\n\n```typescript\ncompanyGains(person: Person, companyName: string, workType: JobName | `${JobName}`, favor: number): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  companyName | string |  |\n|  workType | [JobName](./bitburner.jobname.md) \\| \\`${[JobName](./bitburner.jobname.md)<!-- -->}\\` |  |\n|  favor | number |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by performing the specified company work.\n\n", "bitburner.ns.getserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServer](./bitburner.ns.getserver.md)\n\n## NS.getServer() method\n\nReturns a server object for the given server. Defaults to the running script's server if host is not specified.\n\n**Signature:**\n\n```typescript\ngetServer(host?: string): Server;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ Optional. Hostname for the requested server object. |\n\n**Returns:**\n\n[Server](./bitburner.server.md)\n\nThe requested server object.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "ns.ns.getserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServer](./bitburner.ns.getserver.md)\n\n## NS.getServer() method\n\nReturns a server object for the given server. Defaults to the running script's server if host is not specified.\n\n**Signature:**\n\n```typescript\ngetServer(host?: string): Server;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ Optional. Hostname for the requested server object. |\n\n**Returns:**\n\n[Server](./bitburner.server.md)\n\nThe requested server object.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "bitburner.hacknetserverconstants.upgradecoremult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeCoreMult](./bitburner.hacknetserverconstants.upgradecoremult.md)\n\n## HacknetServerConstants.UpgradeCoreMult property\n\nMultiplier to increase cores\n\n**Signature:**\n\n```typescript\nUpgradeCoreMult: number;\n```\n", "ns.hacknetserverconstants.upgradecoremult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeCoreMult](./bitburner.hacknetserverconstants.upgradecoremult.md)\n\n## HacknetServerConstants.UpgradeCoreMult property\n\nMultiplier to increase cores\n\n**Signature:**\n\n```typescript\nUpgradeCoreMult: number;\n```\n", "bitburner.scriptarg.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ScriptArg](./bitburner.scriptarg.md)\n\n## ScriptArg type\n\n\n**Signature:**\n\n```typescript\ntype ScriptArg = string | number | boolean;\n```\n", "ns.scriptarg.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ScriptArg](./bitburner.scriptarg.md)\n\n## ScriptArg type\n\n\n**Signature:**\n\n```typescript\ntype ScriptArg = string | number | boolean;\n```\n", "bitburner.corporation.getconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getConstants](./bitburner.corporation.getconstants.md)\n\n## Corporation.getConstants() method\n\nGet corporation related constants\n\n**Signature:**\n\n```typescript\ngetConstants(): CorpConstants;\n```\n**Returns:**\n\n[CorpConstants](./bitburner.corpconstants.md)\n\ncorporation related constants\n\n", "ns.corporation.getconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getConstants](./bitburner.corporation.getconstants.md)\n\n## Corporation.getConstants() method\n\nGet corporation related constants\n\n**Signature:**\n\n```typescript\ngetConstants(): CorpConstants;\n```\n**Returns:**\n\n[CorpConstants](./bitburner.corpconstants.md)\n\ncorporation related constants\n\n", "bitburner.formulas.mockserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [mockServer](./bitburner.formulas.mockserver.md)\n\n## Formulas.mockServer() method\n\n**Signature:**\n\n```typescript\nmockServer(): Server;\n```\n**Returns:**\n\n[Server](./bitburner.server.md)\n\n", "ns.formulas.mockserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [mockServer](./bitburner.formulas.mockserver.md)\n\n## Formulas.mockServer() method\n\n**Signature:**\n\n```typescript\nmockServer(): Server;\n```\n**Returns:**\n\n[Server](./bitburner.server.md)\n\n", "bitburner.bitnodemultipliers.servergrowthrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerGrowthRate](./bitburner.bitnodemultipliers.servergrowthrate.md)\n\n## BitNodeMultipliers.ServerGrowthRate property\n\nInfluences the growth percentage per cycle against a server.\n\n**Signature:**\n\n```typescript\nServerGrowthRate: number;\n```\n", "ns.bitnodemultipliers.servergrowthrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerGrowthRate](./bitburner.bitnodemultipliers.servergrowthrate.md)\n\n## BitNodeMultipliers.ServerGrowthRate property\n\nInfluences the growth percentage per cycle against a server.\n\n**Signature:**\n\n```typescript\nServerGrowthRate: number;\n```\n", "bitburner.hacknet.maxnumnodes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [maxNumNodes](./bitburner.hacknet.maxnumnodes.md)\n\n## Hacknet.maxNumNodes() method\n\nGet the maximum number of hacknet nodes.\n\n**Signature:**\n\n```typescript\nmaxNumNodes(): number;\n```\n**Returns:**\n\nnumber\n\nMaximum number of hacknet nodes.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.hacknet.maxnumnodes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [maxNumNodes](./bitburner.hacknet.maxnumnodes.md)\n\n## Hacknet.maxNumNodes() method\n\nGet the maximum number of hacknet nodes.\n\n**Signature:**\n\n```typescript\nmaxNumNodes(): number;\n```\n**Returns:**\n\nnumber\n\nMaximum number of hacknet nodes.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.warehouseapi.sellmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [sellMaterial](./bitburner.warehouseapi.sellmaterial.md)\n\n## WarehouseAPI.sellMaterial() method\n\nSet material sell data.\n\n**Signature:**\n\n```typescript\nsellMaterial(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    materialName: string,\n    amt: string,\n    price: string,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  amt | string | Amount to sell, can be \"MAX\" |\n|  price | string | Price to sell, can be \"MP\" |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.sellmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [sellMaterial](./bitburner.warehouseapi.sellmaterial.md)\n\n## WarehouseAPI.sellMaterial() method\n\nSet material sell data.\n\n**Signature:**\n\n```typescript\nsellMaterial(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    materialName: string,\n    amt: string,\n    price: string,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  amt | string | Amount to sell, can be \"MAX\" |\n|  price | string | Price to sell, can be \"MP\" |\n\n**Returns:**\n\nvoid\n\n", "bitburner.gangmemberinfo.str_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_asc\\_mult](./bitburner.gangmemberinfo.str_asc_mult.md)\n\n## GangMemberInfo.str\\_asc\\_mult property\n\nStrength multiplier from ascensions\n\n**Signature:**\n\n```typescript\nstr_asc_mult: number;\n```\n", "ns.gangmemberinfo.str_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_asc\\_mult](./bitburner.gangmemberinfo.str_asc_mult.md)\n\n## GangMemberInfo.str\\_asc\\_mult property\n\nStrength multiplier from ascensions\n\n**Signature:**\n\n```typescript\nstr_asc_mult: number;\n```\n", "bitburner.runningscript.logs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [logs](./bitburner.runningscript.logs.md)\n\n## RunningScript.logs property\n\nScript logs as an array. The newest log entries are at the bottom. Timestamps, if enabled, are placed inside `[brackets]` at the start of each line.\n\n**Signature:**\n\n```typescript\nlogs: string[];\n```\n", "ns.runningscript.logs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [logs](./bitburner.runningscript.logs.md)\n\n## RunningScript.logs property\n\nScript logs as an array. The newest log entries are at the bottom. Timestamps, if enabled, are placed inside `[brackets]` at the start of each line.\n\n**Signature:**\n\n```typescript\nlogs: string[];\n```\n", "bitburner.netscriptport.peek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [peek](./bitburner.netscriptport.peek.md)\n\n## NetscriptPort.peek() method\n\nRetrieve the first element from the port without removing it.\n\n**Signature:**\n\n```typescript\npeek(): PortData;\n```\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nthe data read\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is used to peek at the data from a port. It returns the first element in the specified port without removing that element. If the port is empty, the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "ns.netscriptport.peek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [peek](./bitburner.netscriptport.peek.md)\n\n## NetscriptPort.peek() method\n\nRetrieve the first element from the port without removing it.\n\n**Signature:**\n\n```typescript\npeek(): PortData;\n```\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nthe data read\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is used to peek at the data from a port. It returns the first element in the specified port without removing that element. If the port is empty, the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "bitburner.ns.vsprintf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [vsprintf](./bitburner.ns.vsprintf.md)\n\n## NS.vsprintf() method\n\nFormat a string with an array of arguments.\n\n**Signature:**\n\n```typescript\nvsprintf(format: string, args: any[]): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | String to format. |\n|  args | any\\[\\] | Formatting arguments. |\n\n**Returns:**\n\nstring\n\nFormatted text.\n\n## Remarks\n\nRAM cost: 0 GB\n\nsee: https://github.com/alexei/sprintf.js\n\n", "ns.ns.vsprintf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [vsprintf](./bitburner.ns.vsprintf.md)\n\n## NS.vsprintf() method\n\nFormat a string with an array of arguments.\n\n**Signature:**\n\n```typescript\nvsprintf(format: string, args: any[]): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | String to format. |\n|  args | any\\[\\] | Formatting arguments. |\n\n**Returns:**\n\nstring\n\nFormatted text.\n\n## Remarks\n\nRAM cost: 0 GB\n\nsee: https://github.com/alexei/sprintf.js\n\n", "bitburner.userinterfacetheme.successlight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [successlight](./bitburner.userinterfacetheme.successlight.md)\n\n## UserInterfaceTheme.successlight property\n\n**Signature:**\n\n```typescript\nsuccesslight: string;\n```\n", "ns.userinterfacetheme.successlight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [successlight](./bitburner.userinterfacetheme.successlight.md)\n\n## UserInterfaceTheme.successlight property\n\n**Signature:**\n\n```typescript\nsuccesslight: string;\n```\n", "bitburner.gameinfo.version.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md) &gt; [version](./bitburner.gameinfo.version.md)\n\n## GameInfo.version property\n\n**Signature:**\n\n```typescript\nversion: string;\n```\n", "ns.gameinfo.version.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md) &gt; [version](./bitburner.gameinfo.version.md)\n\n## GameInfo.version property\n\n**Signature:**\n\n```typescript\nversion: string;\n```\n", "bitburner.gangotherinfoobject.territory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfoObject](./bitburner.gangotherinfoobject.md) &gt; [territory](./bitburner.gangotherinfoobject.territory.md)\n\n## GangOtherInfoObject.territory property\n\nGang territory, in decimal form\n\n**Signature:**\n\n```typescript\nterritory: number;\n```\n", "ns.gangotherinfoobject.territory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfoObject](./bitburner.gangotherinfoobject.md) &gt; [territory](./bitburner.gangotherinfoobject.territory.md)\n\n## GangOtherInfoObject.territory property\n\nGang territory, in decimal form\n\n**Signature:**\n\n```typescript\nterritory: number;\n```\n", "bitburner.singularity.getaugmentationprereq.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationPrereq](./bitburner.singularity.getaugmentationprereq.md)\n\n## Singularity.getAugmentationPrereq() method\n\nGet the pre-requisite of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationPrereq(augName: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray with the names of the prerequisite Augmentation(s) for the specified Augmentation.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns an array with the names of the prerequisite Augmentation(s) for the specified Augmentation. If there are no prerequisites, a blank array is returned.\n\n", "ns.singularity.getaugmentationprereq.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationPrereq](./bitburner.singularity.getaugmentationprereq.md)\n\n## Singularity.getAugmentationPrereq() method\n\nGet the pre-requisite of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationPrereq(augName: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray with the names of the prerequisite Augmentation(s) for the specified Augmentation.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns an array with the names of the prerequisite Augmentation(s) for the specified Augmentation. If there are no prerequisites, a blank array is returned.\n\n", "bitburner.moneysource.crime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [crime](./bitburner.moneysource.crime.md)\n\n## MoneySource.crime property\n\n**Signature:**\n\n```typescript\ncrime: number;\n```\n", "ns.moneysource.crime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [crime](./bitburner.moneysource.crime.md)\n\n## MoneySource.crime property\n\n**Signature:**\n\n```typescript\ncrime: number;\n```\n", "bitburner.division.awareness.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [awareness](./bitburner.division.awareness.md)\n\n## Division.awareness property\n\nAwareness of the division\n\n**Signature:**\n\n```typescript\nawareness: number;\n```\n", "ns.division.awareness.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [awareness](./bitburner.division.awareness.md)\n\n## Division.awareness property\n\nAwareness of the division\n\n**Signature:**\n\n```typescript\nawareness: number;\n```\n", "bitburner.server.numopenportsrequired.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [numOpenPortsRequired](./bitburner.server.numopenportsrequired.md)\n\n## Server.numOpenPortsRequired property\n\nNumber of open ports required in order to gain admin/root access\n\n**Signature:**\n\n```typescript\nnumOpenPortsRequired: number;\n```\n", "ns.server.numopenportsrequired.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [numOpenPortsRequired](./bitburner.server.numopenportsrequired.md)\n\n## Server.numOpenPortsRequired property\n\nNumber of open ports required in order to gain admin/root access\n\n**Signature:**\n\n```typescript\nnumOpenPortsRequired: number;\n```\n", "bitburner.ganggeninfo.territoryclashchance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [territoryClashChance](./bitburner.ganggeninfo.territoryclashchance.md)\n\n## GangGenInfo.territoryClashChance property\n\nClash chance\n\n**Signature:**\n\n```typescript\nterritoryClashChance: number;\n```\n", "ns.ganggeninfo.territoryclashchance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [territoryClashChance](./bitburner.ganggeninfo.territoryclashchance.md)\n\n## GangGenInfo.territoryClashChance property\n\nClash chance\n\n**Signature:**\n\n```typescript\nterritoryClashChance: number;\n```\n", "bitburner.activefragment.numcharge.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [numCharge](./bitburner.activefragment.numcharge.md)\n\n## ActiveFragment.numCharge property\n\n**Signature:**\n\n```typescript\nnumCharge: number;\n```\n", "ns.activefragment.numcharge.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [numCharge](./bitburner.activefragment.numcharge.md)\n\n## ActiveFragment.numCharge property\n\n**Signature:**\n\n```typescript\nnumCharge: number;\n```\n", "bitburner.corpconstants.industrynames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [industryNames](./bitburner.corpconstants.industrynames.md)\n\n## CorpConstants.industryNames property\n\nNames of all industries\n\n**Signature:**\n\n```typescript\nindustryNames: CorpIndustryName[];\n```\n", "ns.corpconstants.industrynames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [industryNames](./bitburner.corpconstants.industrynames.md)\n\n## CorpConstants.industryNames property\n\nNames of all industries\n\n**Signature:**\n\n```typescript\nindustryNames: CorpIndustryName[];\n```\n", "bitburner.ns.spawn.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [spawn](./bitburner.ns.spawn.md)\n\n## NS.spawn() method\n\nTerminate current script and start another in 10 seconds.\n\n**Signature:**\n\n```typescript\nspawn(script: string, numThreads?: number, ...args: (string | number | boolean)[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to execute. |\n|  numThreads | number | _(Optional)_ Integer number of threads for new script. Defaults to 1. |\n|  args | (string \\| number \\| boolean)\\[\\] | Additional arguments to pass into the new script that is being run. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nTerminates the current script, and then after a delay of about 10 seconds it will execute the newly-specified script. The purpose of this function is to execute a new script without being constrained by the RAM usage of the current one. This function can only be used to run scripts on the local server.\n\nBecause this function immediately terminates the script, it does not have a return value.\n\nRunning this function with a numThreads argument of 0 or less will cause a runtime error.\n\n## Example\n\n\n```js\n//The following example will execute the script \u2018foo.js\u2019 with 10 threads and the arguments \u2018foodnstuff\u2019 and 90:\nns.spawn('foo.js', 10, 'foodnstuff', 90);\n```\n\n", "ns.ns.spawn.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [spawn](./bitburner.ns.spawn.md)\n\n## NS.spawn() method\n\nTerminate current script and start another in 10 seconds.\n\n**Signature:**\n\n```typescript\nspawn(script: string, numThreads?: number, ...args: (string | number | boolean)[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to execute. |\n|  numThreads | number | _(Optional)_ Integer number of threads for new script. Defaults to 1. |\n|  args | (string \\| number \\| boolean)\\[\\] | Additional arguments to pass into the new script that is being run. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nTerminates the current script, and then after a delay of about 10 seconds it will execute the newly-specified script. The purpose of this function is to execute a new script without being constrained by the RAM usage of the current one. This function can only be used to run scripts on the local server.\n\nBecause this function immediately terminates the script, it does not have a return value.\n\nRunning this function with a numThreads argument of 0 or less will cause a runtime error.\n\n## Example\n\n\n```js\n//The following example will execute the script \u2018foo.js\u2019 with 10 threads and the arguments \u2018foodnstuff\u2019 and 90:\nns.spawn('foo.js', 10, 'foodnstuff', 90);\n```\n\n", "bitburner.grafting.getaugmentationgraftprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [getAugmentationGraftPrice](./bitburner.grafting.getaugmentationgraftprice.md)\n\n## Grafting.getAugmentationGraftPrice() method\n\nRetrieve the grafting cost of an aug.\n\n**Signature:**\n\n```typescript\ngetAugmentationGraftPrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of the aug to check the price of. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nThe cost required to graft the named augmentation.\n\n## Exceptions\n\nWill error if an invalid Augmentation name is provided.\n\n## Remarks\n\nRAM cost: 3.75 GB\n\n", "ns.grafting.getaugmentationgraftprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [getAugmentationGraftPrice](./bitburner.grafting.getaugmentationgraftprice.md)\n\n## Grafting.getAugmentationGraftPrice() method\n\nRetrieve the grafting cost of an aug.\n\n**Signature:**\n\n```typescript\ngetAugmentationGraftPrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of the aug to check the price of. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nThe cost required to graft the named augmentation.\n\n## Exceptions\n\nWill error if an invalid Augmentation name is provided.\n\n## Remarks\n\nRAM cost: 3.75 GB\n\n", "bitburner.augmentpair.cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AugmentPair](./bitburner.augmentpair.md) &gt; [cost](./bitburner.augmentpair.cost.md)\n\n## AugmentPair.cost property\n\naugmentation cost\n\n**Signature:**\n\n```typescript\ncost: number;\n```\n", "ns.augmentpair.cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AugmentPair](./bitburner.augmentpair.md) &gt; [cost](./bitburner.augmentpair.cost.md)\n\n## AugmentPair.cost property\n\naugmentation cost\n\n**Signature:**\n\n```typescript\ncost: number;\n```\n", "bitburner.warehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md)\n\n## Warehouse interface\n\nWarehouse for a division in a city\n\n**Signature:**\n\n```typescript\ninterface Warehouse \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [level](./bitburner.warehouse.level.md) |  | number | Amount of size upgrade bought |\n|  [loc](./bitburner.warehouse.loc.md) |  | [CityName](./bitburner.cityname.md) | City in which the warehouse is located |\n|  [size](./bitburner.warehouse.size.md) |  | number | Total space in the warehouse |\n|  [sizeUsed](./bitburner.warehouse.sizeused.md) |  | number | Used space in the warehouse |\n|  [smartSupplyEnabled](./bitburner.warehouse.smartsupplyenabled.md) |  | boolean | Smart Supply status in the warehouse |\n\n", "ns.warehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md)\n\n## Warehouse interface\n\nWarehouse for a division in a city\n\n**Signature:**\n\n```typescript\ninterface Warehouse \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [level](./bitburner.warehouse.level.md) |  | number | Amount of size upgrade bought |\n|  [loc](./bitburner.warehouse.loc.md) |  | [CityName](./bitburner.cityname.md) | City in which the warehouse is located |\n|  [size](./bitburner.warehouse.size.md) |  | number | Total space in the warehouse |\n|  [sizeUsed](./bitburner.warehouse.sizeused.md) |  | number | Used space in the warehouse |\n|  [smartSupplyEnabled](./bitburner.warehouse.smartsupplyenabled.md) |  | boolean | Smart Supply status in the warehouse |\n\n", "bitburner.corpindustryname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryName](./bitburner.corpindustryname.md)\n\n## CorpIndustryName type\n\n\n**Signature:**\n\n```typescript\ntype CorpIndustryName =\n  | \"Energy\"\n  | \"Water Utilities\"\n  | \"Agriculture\"\n  | \"Fishing\"\n  | \"Mining\"\n  | \"Food\"\n  | \"Tobacco\"\n  | \"Chemical\"\n  | \"Pharmaceutical\"\n  | \"Computer Hardware\"\n  | \"Robotics\"\n  | \"Software\"\n  | \"Healthcare\"\n  | \"Real Estate\";\n```\n", "ns.corpindustryname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryName](./bitburner.corpindustryname.md)\n\n## CorpIndustryName type\n\n\n**Signature:**\n\n```typescript\ntype CorpIndustryName =\n  | \"Energy\"\n  | \"Water Utilities\"\n  | \"Agriculture\"\n  | \"Fishing\"\n  | \"Mining\"\n  | \"Food\"\n  | \"Tobacco\"\n  | \"Chemical\"\n  | \"Pharmaceutical\"\n  | \"Computer Hardware\"\n  | \"Robotics\"\n  | \"Software\"\n  | \"Healthcare\"\n  | \"Real Estate\";\n```\n", "bitburner.ns.getpurchasedservers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServers](./bitburner.ns.getpurchasedservers.md)\n\n## NS.getPurchasedServers() method\n\nReturns an array with the hostnames of all of the servers you have purchased.\n\n**Signature:**\n\n```typescript\ngetPurchasedServers(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nReturns an array with the hostnames of all of the servers you have purchased.\n\n## Remarks\n\n2.25 GB\n\n", "ns.ns.getpurchasedservers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServers](./bitburner.ns.getpurchasedservers.md)\n\n## NS.getPurchasedServers() method\n\nReturns an array with the hostnames of all of the servers you have purchased.\n\n**Signature:**\n\n```typescript\ngetPurchasedServers(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nReturns an array with the hostnames of all of the servers you have purchased.\n\n## Remarks\n\n2.25 GB\n\n", "bitburner.activefragment.id.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [id](./bitburner.activefragment.id.md)\n\n## ActiveFragment.id property\n\n**Signature:**\n\n```typescript\nid: number;\n```\n", "ns.activefragment.id.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [id](./bitburner.activefragment.id.md)\n\n## ActiveFragment.id property\n\n**Signature:**\n\n```typescript\nid: number;\n```\n", "bitburner.player.playtimesincelastaug.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [playtimeSinceLastAug](./bitburner.player.playtimesincelastaug.md)\n\n## Player.playtimeSinceLastAug property\n\n**Signature:**\n\n```typescript\nplaytimeSinceLastAug: number;\n```\n", "ns.player.playtimesincelastaug.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [playtimeSinceLastAug](./bitburner.player.playtimesincelastaug.md)\n\n## Player.playtimeSinceLastAug property\n\n**Signature:**\n\n```typescript\nplaytimeSinceLastAug: number;\n```\n", "bitburner.runningscript.ramusage.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [ramUsage](./bitburner.runningscript.ramusage.md)\n\n## RunningScript.ramUsage property\n\nHow much RAM this script uses for ONE thread\n\n**Signature:**\n\n```typescript\nramUsage: number;\n```\n", "ns.runningscript.ramusage.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [ramUsage](./bitburner.runningscript.ramusage.md)\n\n## RunningScript.ramUsage property\n\nHow much RAM this script uses for ONE thread\n\n**Signature:**\n\n```typescript\nramUsage: number;\n```\n", "bitburner.singularity.createprogram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [createProgram](./bitburner.singularity.createprogram.md)\n\n## Singularity.createProgram() method\n\nCreate a program.\n\n**Signature:**\n\n```typescript\ncreateProgram(program: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  program | string | Name of program to create. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this program creation. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if you successfully start working on the specified program, and false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will automatically set you to start working on creating the specified program. If you are already in the middle of some \u201cworking\u201d action (such as working for a company, training at a gym, or taking a course), then running this function will automatically cancel that action and give you your earnings.\n\nThis function returns true if you successfully start working on the specified program, and false otherwise.\n\nNote that creating a program using this function has the same hacking level requirements as it normally would. These level requirements are: \\* BruteSSH.exe: 50 \\* FTPCrack.exe: 100 \\* relaySMTP.exe: 250 \\* HTTPWorm.exe: 500 \\* SQLInject.exe: 750 \\* DeepscanV1.exe: 75 \\* DeepscanV2.exe: 400 \\* ServerProfiler.exe: 75 \\* AutoLink.exe: 25\n\n## Example 1\n\n\n```ts\n// NS1:\ncreateProgram(\u201crelaysmtp.exe\u201d);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.createProgram(\u201crelaysmtp.exe\u201d);\n```\n\n", "ns.singularity.createprogram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [createProgram](./bitburner.singularity.createprogram.md)\n\n## Singularity.createProgram() method\n\nCreate a program.\n\n**Signature:**\n\n```typescript\ncreateProgram(program: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  program | string | Name of program to create. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this program creation. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if you successfully start working on the specified program, and false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will automatically set you to start working on creating the specified program. If you are already in the middle of some \u201cworking\u201d action (such as working for a company, training at a gym, or taking a course), then running this function will automatically cancel that action and give you your earnings.\n\nThis function returns true if you successfully start working on the specified program, and false otherwise.\n\nNote that creating a program using this function has the same hacking level requirements as it normally would. These level requirements are: \\* BruteSSH.exe: 50 \\* FTPCrack.exe: 100 \\* relaySMTP.exe: 250 \\* HTTPWorm.exe: 500 \\* SQLInject.exe: 750 \\* DeepscanV1.exe: 75 \\* DeepscanV2.exe: 400 \\* ServerProfiler.exe: 75 \\* AutoLink.exe: 25\n\n## Example 1\n\n\n```ts\n// NS1:\ncreateProgram(\u201crelaysmtp.exe\u201d);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.createProgram(\u201crelaysmtp.exe\u201d);\n```\n\n", "bitburner.ns.clearlog.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [clearLog](./bitburner.ns.clearlog.md)\n\n## NS.clearLog() method\n\nClears the script\u2019s logs.\n\n**Signature:**\n\n```typescript\nclearLog(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.clearlog.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [clearLog](./bitburner.ns.clearlog.md)\n\n## NS.clearLog() method\n\nClears the script\u2019s logs.\n\n**Signature:**\n\n```typescript\nclearLog(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.hacknet.spendhashes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [spendHashes](./bitburner.hacknet.spendhashes.md)\n\n## Hacknet.spendHashes() method\n\nPurchase a hash upgrade.\n\n**Signature:**\n\n```typescript\nspendHashes(upgName: string, upgTarget?: string, count?: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | string | Name of the upgrade of Hacknet Node. |\n|  upgTarget | string | _(Optional)_ Object to which upgrade applies. Required for certain upgrades. |\n|  count | number | _(Optional)_ Number of upgrades to buy at once. Defaults to 1 if not specified. For compatibility reasons, upgTarget must be specified, even if it is not used, in order to specify count. |\n\n**Returns:**\n\nboolean\n\nTrue if the upgrade is successfully purchased, and false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nSpend the hashes generated by your Hacknet Servers on an upgrade. Returns a boolean value - true if the upgrade is successfully purchased, and false otherwise.\n\nThe name of the upgrade must be an exact match. The `upgTarget` argument is used for upgrades such as `Reduce Minimum Security`<!-- -->, which applies to a specific server. In this case, the `upgTarget` argument must be the hostname of the server.\n\n## Example 1\n\n\n```ts\n// NS1:\nhacknet.spendHashes(\"Sell for Corporation Funds\");\nhacknet.spendHashes(\"Increase Maximum Money\", \"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\nNS2:\nns.hacknet.spendHashes(\"Sell for Corporation Funds\");\nns.hacknet.spendHashes(\"Increase Maximum Money\", \"foodnstuff\");\n```\n\n", "ns.hacknet.spendhashes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [spendHashes](./bitburner.hacknet.spendhashes.md)\n\n## Hacknet.spendHashes() method\n\nPurchase a hash upgrade.\n\n**Signature:**\n\n```typescript\nspendHashes(upgName: string, upgTarget?: string, count?: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | string | Name of the upgrade of Hacknet Node. |\n|  upgTarget | string | _(Optional)_ Object to which upgrade applies. Required for certain upgrades. |\n|  count | number | _(Optional)_ Number of upgrades to buy at once. Defaults to 1 if not specified. For compatibility reasons, upgTarget must be specified, even if it is not used, in order to specify count. |\n\n**Returns:**\n\nboolean\n\nTrue if the upgrade is successfully purchased, and false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nSpend the hashes generated by your Hacknet Servers on an upgrade. Returns a boolean value - true if the upgrade is successfully purchased, and false otherwise.\n\nThe name of the upgrade must be an exact match. The `upgTarget` argument is used for upgrades such as `Reduce Minimum Security`<!-- -->, which applies to a specific server. In this case, the `upgTarget` argument must be the hostname of the server.\n\n## Example 1\n\n\n```ts\n// NS1:\nhacknet.spendHashes(\"Sell for Corporation Funds\");\nhacknet.spendHashes(\"Increase Maximum Money\", \"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\nNS2:\nns.hacknet.spendHashes(\"Sell for Corporation Funds\");\nns.hacknet.spendHashes(\"Increase Maximum Money\", \"foodnstuff\");\n```\n\n", "bitburner.stockorderobject.shares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [shares](./bitburner.stockorderobject.shares.md)\n\n## StockOrderObject.shares property\n\nNumber of shares\n\n**Signature:**\n\n```typescript\nshares: number;\n```\n", "ns.stockorderobject.shares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [shares](./bitburner.stockorderobject.shares.md)\n\n## StockOrderObject.shares property\n\nNumber of shares\n\n**Signature:**\n\n```typescript\nshares: number;\n```\n", "bitburner.corporation.issuedividends.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [issueDividends](./bitburner.corporation.issuedividends.md)\n\n## Corporation.issueDividends() method\n\nIssue dividends\n\n**Signature:**\n\n```typescript\nissueDividends(rate: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rate | number | Fraction of profit to issue as dividends. |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.issuedividends.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [issueDividends](./bitburner.corporation.issuedividends.md)\n\n## Corporation.issueDividends() method\n\nIssue dividends\n\n**Signature:**\n\n```typescript\nissueDividends(rate: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rate | number | Fraction of profit to issue as dividends. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.hackingformulas.growtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [growTime](./bitburner.hackingformulas.growtime.md)\n\n## HackingFormulas.growTime() method\n\nCalculate grow time.\n\n**Signature:**\n\n```typescript\ngrowTime(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated grow time.\n\n", "ns.hackingformulas.growtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [growTime](./bitburner.hackingformulas.growtime.md)\n\n## HackingFormulas.growTime() method\n\nCalculate grow time.\n\n**Signature:**\n\n```typescript\ngrowTime(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated grow time.\n\n", "bitburner.corpconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md)\n\n## CorpConstants interface\n\nCorporation related constants\n\n**Signature:**\n\n```typescript\ninterface CorpConstants \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [baseProductProfitMult](./bitburner.corpconstants.baseproductprofitmult.md) |  | number |  |\n|  [bribeAmountPerReputation](./bitburner.corpconstants.bribeamountperreputation.md) |  | number |  |\n|  [bribeThreshold](./bitburner.corpconstants.bribethreshold.md) |  | number |  |\n|  [coffeeCostPerEmployee](./bitburner.corpconstants.coffeecostperemployee.md) |  | number |  |\n|  [dividendMaxRate](./bitburner.corpconstants.dividendmaxrate.md) |  | number |  |\n|  [employeeRaiseAmount](./bitburner.corpconstants.employeeraiseamount.md) |  | number |  |\n|  [employeeSalaryMultiplier](./bitburner.corpconstants.employeesalarymultiplier.md) |  | number | Conversion factor for employee stats to initial salary |\n|  [gameCyclesPerCorpStateCycle](./bitburner.corpconstants.gamecyclespercorpstatecycle.md) |  | number |  |\n|  [gameCyclesPerMarketCycle](./bitburner.corpconstants.gamecyclespermarketcycle.md) |  | number |  |\n|  [industryNames](./bitburner.corpconstants.industrynames.md) |  | [CorpIndustryName](./bitburner.corpindustryname.md)<!-- -->\\[\\] | Names of all industries |\n|  [initialShares](./bitburner.corpconstants.initialshares.md) |  | number |  |\n|  [issueNewSharesCooldown](./bitburner.corpconstants.issuenewsharescooldown.md) |  | number | Cooldown for issue new shares cooldown in game cycles (1 game cycle = 200ms) |\n|  [marketCyclesPerEmployeeRaise](./bitburner.corpconstants.marketcyclesperemployeeraise.md) |  | number |  |\n|  [materialNames](./bitburner.corpconstants.materialnames.md) |  | [CorpMaterialName](./bitburner.corpmaterialname.md)<!-- -->\\[\\] | Names of all materials |\n|  [maxProductsBase](./bitburner.corpconstants.maxproductsbase.md) |  | number | Max products for a division without upgrades |\n|  [minEmployeeDecay](./bitburner.corpconstants.minemployeedecay.md) |  | number | The minimum decay value for happiness/morale/energy |\n|  [officeInitialCost](./bitburner.corpconstants.officeinitialcost.md) |  | number |  |\n|  [officeInitialSize](./bitburner.corpconstants.officeinitialsize.md) |  | number |  |\n|  [officeSizeUpgradeCostBase](./bitburner.corpconstants.officesizeupgradecostbase.md) |  | number |  |\n|  [researchNames](./bitburner.corpconstants.researchnames.md) |  | [CorpResearchName](./bitburner.corpresearchname.md)<!-- -->\\[\\] | Names of all researches |\n|  [researchNamesBase](./bitburner.corpconstants.researchnamesbase.md) |  | [CorpResearchName](./bitburner.corpresearchname.md)<!-- -->\\[\\] | Names of all researches common to all industries |\n|  [researchNamesProductOnly](./bitburner.corpconstants.researchnamesproductonly.md) |  | [CorpResearchName](./bitburner.corpresearchname.md)<!-- -->\\[\\] | Names of all researches only available to product industries |\n|  [secondsPerMarketCycle](./bitburner.corpconstants.secondspermarketcycle.md) |  | number |  |\n|  [sellSharesCooldown](./bitburner.corpconstants.sellsharescooldown.md) |  | number | Cooldown for selling shares in game cycles (1 game cycle = 200ms) |\n|  [sharesPerPriceUpdate](./bitburner.corpconstants.sharesperpriceupdate.md) |  | number | When selling large number of shares, price is dynamically updated for every batch of this amount |\n|  [stateNames](./bitburner.corpconstants.statenames.md) |  | [CorpStateName](./bitburner.corpstatename.md)<!-- -->\\[\\] | Names of all corporation game states |\n|  [unlockNames](./bitburner.corpconstants.unlocknames.md) |  | [CorpUnlockName](./bitburner.corpunlockname.md)<!-- -->\\[\\] | Names of all one-time corporation-wide unlocks |\n|  [upgradeNames](./bitburner.corpconstants.upgradenames.md) |  | [CorpUpgradeName](./bitburner.corpupgradename.md)<!-- -->\\[\\] | Names of all corporation-wide upgrades |\n|  [warehouseInitialCost](./bitburner.corpconstants.warehouseinitialcost.md) |  | number |  |\n|  [warehouseInitialSize](./bitburner.corpconstants.warehouseinitialsize.md) |  | number |  |\n|  [warehouseSizeUpgradeCostBase](./bitburner.corpconstants.warehousesizeupgradecostbase.md) |  | number |  |\n\n", "ns.corpconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md)\n\n## CorpConstants interface\n\nCorporation related constants\n\n**Signature:**\n\n```typescript\ninterface CorpConstants \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [baseProductProfitMult](./bitburner.corpconstants.baseproductprofitmult.md) |  | number |  |\n|  [bribeAmountPerReputation](./bitburner.corpconstants.bribeamountperreputation.md) |  | number |  |\n|  [bribeThreshold](./bitburner.corpconstants.bribethreshold.md) |  | number |  |\n|  [coffeeCostPerEmployee](./bitburner.corpconstants.coffeecostperemployee.md) |  | number |  |\n|  [dividendMaxRate](./bitburner.corpconstants.dividendmaxrate.md) |  | number |  |\n|  [employeeRaiseAmount](./bitburner.corpconstants.employeeraiseamount.md) |  | number |  |\n|  [employeeSalaryMultiplier](./bitburner.corpconstants.employeesalarymultiplier.md) |  | number | Conversion factor for employee stats to initial salary |\n|  [gameCyclesPerCorpStateCycle](./bitburner.corpconstants.gamecyclespercorpstatecycle.md) |  | number |  |\n|  [gameCyclesPerMarketCycle](./bitburner.corpconstants.gamecyclespermarketcycle.md) |  | number |  |\n|  [industryNames](./bitburner.corpconstants.industrynames.md) |  | [CorpIndustryName](./bitburner.corpindustryname.md)<!-- -->\\[\\] | Names of all industries |\n|  [initialShares](./bitburner.corpconstants.initialshares.md) |  | number |  |\n|  [issueNewSharesCooldown](./bitburner.corpconstants.issuenewsharescooldown.md) |  | number | Cooldown for issue new shares cooldown in game cycles (1 game cycle = 200ms) |\n|  [marketCyclesPerEmployeeRaise](./bitburner.corpconstants.marketcyclesperemployeeraise.md) |  | number |  |\n|  [materialNames](./bitburner.corpconstants.materialnames.md) |  | [CorpMaterialName](./bitburner.corpmaterialname.md)<!-- -->\\[\\] | Names of all materials |\n|  [maxProductsBase](./bitburner.corpconstants.maxproductsbase.md) |  | number | Max products for a division without upgrades |\n|  [minEmployeeDecay](./bitburner.corpconstants.minemployeedecay.md) |  | number | The minimum decay value for happiness/morale/energy |\n|  [officeInitialCost](./bitburner.corpconstants.officeinitialcost.md) |  | number |  |\n|  [officeInitialSize](./bitburner.corpconstants.officeinitialsize.md) |  | number |  |\n|  [officeSizeUpgradeCostBase](./bitburner.corpconstants.officesizeupgradecostbase.md) |  | number |  |\n|  [researchNames](./bitburner.corpconstants.researchnames.md) |  | [CorpResearchName](./bitburner.corpresearchname.md)<!-- -->\\[\\] | Names of all researches |\n|  [researchNamesBase](./bitburner.corpconstants.researchnamesbase.md) |  | [CorpResearchName](./bitburner.corpresearchname.md)<!-- -->\\[\\] | Names of all researches common to all industries |\n|  [researchNamesProductOnly](./bitburner.corpconstants.researchnamesproductonly.md) |  | [CorpResearchName](./bitburner.corpresearchname.md)<!-- -->\\[\\] | Names of all researches only available to product industries |\n|  [secondsPerMarketCycle](./bitburner.corpconstants.secondspermarketcycle.md) |  | number |  |\n|  [sellSharesCooldown](./bitburner.corpconstants.sellsharescooldown.md) |  | number | Cooldown for selling shares in game cycles (1 game cycle = 200ms) |\n|  [sharesPerPriceUpdate](./bitburner.corpconstants.sharesperpriceupdate.md) |  | number | When selling large number of shares, price is dynamically updated for every batch of this amount |\n|  [stateNames](./bitburner.corpconstants.statenames.md) |  | [CorpStateName](./bitburner.corpstatename.md)<!-- -->\\[\\] | Names of all corporation game states |\n|  [unlockNames](./bitburner.corpconstants.unlocknames.md) |  | [CorpUnlockName](./bitburner.corpunlockname.md)<!-- -->\\[\\] | Names of all one-time corporation-wide unlocks |\n|  [upgradeNames](./bitburner.corpconstants.upgradenames.md) |  | [CorpUpgradeName](./bitburner.corpupgradename.md)<!-- -->\\[\\] | Names of all corporation-wide upgrades |\n|  [warehouseInitialCost](./bitburner.corpconstants.warehouseinitialcost.md) |  | number |  |\n|  [warehouseInitialSize](./bitburner.corpconstants.warehouseinitialsize.md) |  | number |  |\n|  [warehouseSizeUpgradeCostBase](./bitburner.corpconstants.warehousesizeupgradecostbase.md) |  | number |  |\n\n", "bitburner.singularity.getupgradehomecorescost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getUpgradeHomeCoresCost](./bitburner.singularity.getupgradehomecorescost.md)\n\n## Singularity.getUpgradeHomeCoresCost() method\n\nGet the price of upgrading home cores.\n\n**Signature:**\n\n```typescript\ngetUpgradeHomeCoresCost(): number;\n```\n**Returns:**\n\nnumber\n\nCost of upgrading the player\u2019s home computer cores.\n\n## Remarks\n\nRAM cost: 1.5 GB \\* 16/4/1\n\nReturns the cost of upgrading the player\u2019s home computer cores.\n\n", "ns.singularity.getupgradehomecorescost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getUpgradeHomeCoresCost](./bitburner.singularity.getupgradehomecorescost.md)\n\n## Singularity.getUpgradeHomeCoresCost() method\n\nGet the price of upgrading home cores.\n\n**Signature:**\n\n```typescript\ngetUpgradeHomeCoresCost(): number;\n```\n**Returns:**\n\nnumber\n\nCost of upgrading the player\u2019s home computer cores.\n\n## Remarks\n\nRAM cost: 1.5 GB \\* 16/4/1\n\nReturns the cost of upgrading the player\u2019s home computer cores.\n\n", "bitburner.sleeveperson.shock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [shock](./bitburner.sleeveperson.shock.md)\n\n## SleevePerson.shock property\n\nNumber 0-100 Experience earned and shared is multiplied with shock% before sync%\n\n**Signature:**\n\n```typescript\nshock: number;\n```\n", "ns.sleeveperson.shock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [shock](./bitburner.sleeveperson.shock.md)\n\n## SleevePerson.shock property\n\nNumber 0-100 Experience earned and shared is multiplied with shock% before sync%\n\n**Signature:**\n\n```typescript\nshock: number;\n```\n", "bitburner.codingcontractdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContractData](./bitburner.codingcontractdata.md)\n\n## CodingContractData type\n\nCoding contract data will differ depending on coding contract.\n\n**Signature:**\n\n```typescript\ntype CodingContractData = any;\n```\n", "ns.codingcontractdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContractData](./bitburner.codingcontractdata.md)\n\n## CodingContractData type\n\nCoding contract data will differ depending on coding contract.\n\n**Signature:**\n\n```typescript\ntype CodingContractData = any;\n```\n", "bitburner.server.ftpportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [ftpPortOpen](./bitburner.server.ftpportopen.md)\n\n## Server.ftpPortOpen property\n\nFlag indicating whether the FTP port is open\n\n**Signature:**\n\n```typescript\nftpPortOpen: boolean;\n```\n", "ns.server.ftpportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [ftpPortOpen](./bitburner.server.ftpportopen.md)\n\n## Server.ftpPortOpen property\n\nFlag indicating whether the FTP port is open\n\n**Signature:**\n\n```typescript\nftpPortOpen: boolean;\n```\n", "bitburner.gangmemberinfo.hack_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_mult](./bitburner.gangmemberinfo.hack_mult.md)\n\n## GangMemberInfo.hack\\_mult property\n\nHack multiplier from equipment\n\n**Signature:**\n\n```typescript\nhack_mult: number;\n```\n", "ns.gangmemberinfo.hack_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_mult](./bitburner.gangmemberinfo.hack_mult.md)\n\n## GangMemberInfo.hack\\_mult property\n\nHack multiplier from equipment\n\n**Signature:**\n\n```typescript\nhack_mult: number;\n```\n", "bitburner.userinterfacetheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md)\n\n## UserInterfaceTheme interface\n\nInterface Theme\n\n**Signature:**\n\n```typescript\ninterface UserInterfaceTheme \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [backgroundprimary](./bitburner.userinterfacetheme.backgroundprimary.md) |  | string |  |\n|  [backgroundsecondary](./bitburner.userinterfacetheme.backgroundsecondary.md) |  | string |  |\n|  [black](./bitburner.userinterfacetheme.black.md) |  | string |  |\n|  [button](./bitburner.userinterfacetheme.button.md) |  | string |  |\n|  [cha](./bitburner.userinterfacetheme.cha.md) |  | string |  |\n|  [combat](./bitburner.userinterfacetheme.combat.md) |  | string |  |\n|  [disabled](./bitburner.userinterfacetheme.disabled.md) |  | string |  |\n|  [error](./bitburner.userinterfacetheme.error.md) |  | string |  |\n|  [errordark](./bitburner.userinterfacetheme.errordark.md) |  | string |  |\n|  [errorlight](./bitburner.userinterfacetheme.errorlight.md) |  | string |  |\n|  [hack](./bitburner.userinterfacetheme.hack.md) |  | string |  |\n|  [hp](./bitburner.userinterfacetheme.hp.md) |  | string |  |\n|  [info](./bitburner.userinterfacetheme.info.md) |  | string |  |\n|  [infodark](./bitburner.userinterfacetheme.infodark.md) |  | string |  |\n|  [infolight](./bitburner.userinterfacetheme.infolight.md) |  | string |  |\n|  [int](./bitburner.userinterfacetheme.int.md) |  | string |  |\n|  [money](./bitburner.userinterfacetheme.money.md) |  | string |  |\n|  [primary](./bitburner.userinterfacetheme.primary.md) |  | string |  |\n|  [primarydark](./bitburner.userinterfacetheme.primarydark.md) |  | string |  |\n|  [primarylight](./bitburner.userinterfacetheme.primarylight.md) |  | string |  |\n|  [rep](./bitburner.userinterfacetheme.rep.md) |  | string |  |\n|  [secondary](./bitburner.userinterfacetheme.secondary.md) |  | string |  |\n|  [secondarydark](./bitburner.userinterfacetheme.secondarydark.md) |  | string |  |\n|  [secondarylight](./bitburner.userinterfacetheme.secondarylight.md) |  | string |  |\n|  [success](./bitburner.userinterfacetheme.success.md) |  | string |  |\n|  [successdark](./bitburner.userinterfacetheme.successdark.md) |  | string |  |\n|  [successlight](./bitburner.userinterfacetheme.successlight.md) |  | string |  |\n|  [warning](./bitburner.userinterfacetheme.warning.md) |  | string |  |\n|  [warningdark](./bitburner.userinterfacetheme.warningdark.md) |  | string |  |\n|  [warninglight](./bitburner.userinterfacetheme.warninglight.md) |  | string |  |\n|  [well](./bitburner.userinterfacetheme.well.md) |  | string |  |\n|  [welllight](./bitburner.userinterfacetheme.welllight.md) |  | string |  |\n|  [white](./bitburner.userinterfacetheme.white.md) |  | string |  |\n\n", "ns.userinterfacetheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md)\n\n## UserInterfaceTheme interface\n\nInterface Theme\n\n**Signature:**\n\n```typescript\ninterface UserInterfaceTheme \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [backgroundprimary](./bitburner.userinterfacetheme.backgroundprimary.md) |  | string |  |\n|  [backgroundsecondary](./bitburner.userinterfacetheme.backgroundsecondary.md) |  | string |  |\n|  [black](./bitburner.userinterfacetheme.black.md) |  | string |  |\n|  [button](./bitburner.userinterfacetheme.button.md) |  | string |  |\n|  [cha](./bitburner.userinterfacetheme.cha.md) |  | string |  |\n|  [combat](./bitburner.userinterfacetheme.combat.md) |  | string |  |\n|  [disabled](./bitburner.userinterfacetheme.disabled.md) |  | string |  |\n|  [error](./bitburner.userinterfacetheme.error.md) |  | string |  |\n|  [errordark](./bitburner.userinterfacetheme.errordark.md) |  | string |  |\n|  [errorlight](./bitburner.userinterfacetheme.errorlight.md) |  | string |  |\n|  [hack](./bitburner.userinterfacetheme.hack.md) |  | string |  |\n|  [hp](./bitburner.userinterfacetheme.hp.md) |  | string |  |\n|  [info](./bitburner.userinterfacetheme.info.md) |  | string |  |\n|  [infodark](./bitburner.userinterfacetheme.infodark.md) |  | string |  |\n|  [infolight](./bitburner.userinterfacetheme.infolight.md) |  | string |  |\n|  [int](./bitburner.userinterfacetheme.int.md) |  | string |  |\n|  [money](./bitburner.userinterfacetheme.money.md) |  | string |  |\n|  [primary](./bitburner.userinterfacetheme.primary.md) |  | string |  |\n|  [primarydark](./bitburner.userinterfacetheme.primarydark.md) |  | string |  |\n|  [primarylight](./bitburner.userinterfacetheme.primarylight.md) |  | string |  |\n|  [rep](./bitburner.userinterfacetheme.rep.md) |  | string |  |\n|  [secondary](./bitburner.userinterfacetheme.secondary.md) |  | string |  |\n|  [secondarydark](./bitburner.userinterfacetheme.secondarydark.md) |  | string |  |\n|  [secondarylight](./bitburner.userinterfacetheme.secondarylight.md) |  | string |  |\n|  [success](./bitburner.userinterfacetheme.success.md) |  | string |  |\n|  [successdark](./bitburner.userinterfacetheme.successdark.md) |  | string |  |\n|  [successlight](./bitburner.userinterfacetheme.successlight.md) |  | string |  |\n|  [warning](./bitburner.userinterfacetheme.warning.md) |  | string |  |\n|  [warningdark](./bitburner.userinterfacetheme.warningdark.md) |  | string |  |\n|  [warninglight](./bitburner.userinterfacetheme.warninglight.md) |  | string |  |\n|  [well](./bitburner.userinterfacetheme.well.md) |  | string |  |\n|  [welllight](./bitburner.userinterfacetheme.welllight.md) |  | string |  |\n|  [white](./bitburner.userinterfacetheme.white.md) |  | string |  |\n\n", "bitburner.fragment.id.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [id](./bitburner.fragment.id.md)\n\n## Fragment.id property\n\n**Signature:**\n\n```typescript\nid: number;\n```\n", "ns.fragment.id.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [id](./bitburner.fragment.id.md)\n\n## Fragment.id property\n\n**Signature:**\n\n```typescript\nid: number;\n```\n", "bitburner.gangtaskstats.basewanted.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [baseWanted](./bitburner.gangtaskstats.basewanted.md)\n\n## GangTaskStats.baseWanted property\n\nBase wanted earned\n\n**Signature:**\n\n```typescript\nbaseWanted: number;\n```\n", "ns.gangtaskstats.basewanted.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [baseWanted](./bitburner.gangtaskstats.basewanted.md)\n\n## GangTaskStats.baseWanted property\n\nBase wanted earned\n\n**Signature:**\n\n```typescript\nbaseWanted: number;\n```\n", "bitburner.bladeburner.getactionrepgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionRepGain](./bitburner.bladeburner.getactionrepgain.md)\n\n## Bladeburner.getActionRepGain() method\n\nGet the reputation gain of an action.\n\n**Signature:**\n\n```typescript\ngetActionRepGain(type: string, name: string, level: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  level | number | Optional action level at which to calculate the gain |\n\n**Returns:**\n\nnumber\n\nAverage Bladeburner reputation gain for successfully completing the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the average Bladeburner reputation gain for successfully completing the specified action. Note that this value is an \u2018average\u2019 and the real reputation gain may vary slightly from this value.\n\n", "ns.bladeburner.getactionrepgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionRepGain](./bitburner.bladeburner.getactionrepgain.md)\n\n## Bladeburner.getActionRepGain() method\n\nGet the reputation gain of an action.\n\n**Signature:**\n\n```typescript\ngetActionRepGain(type: string, name: string, level: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  level | number | Optional action level at which to calculate the gain |\n\n**Returns:**\n\nnumber\n\nAverage Bladeburner reputation gain for successfully completing the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the average Bladeburner reputation gain for successfully completing the specified action. Note that this value is an \u2018average\u2019 and the real reputation gain may vary slightly from this value.\n\n", "bitburner.corpconstants.upgradenames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [upgradeNames](./bitburner.corpconstants.upgradenames.md)\n\n## CorpConstants.upgradeNames property\n\nNames of all corporation-wide upgrades\n\n**Signature:**\n\n```typescript\nupgradeNames: CorpUpgradeName[];\n```\n", "ns.corpconstants.upgradenames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [upgradeNames](./bitburner.corpconstants.upgradenames.md)\n\n## CorpConstants.upgradeNames property\n\nNames of all corporation-wide upgrades\n\n**Signature:**\n\n```typescript\nupgradeNames: CorpUpgradeName[];\n```\n", "bitburner.division.thiscycleexpenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [thisCycleExpenses](./bitburner.division.thiscycleexpenses.md)\n\n## Division.thisCycleExpenses property\n\nExpenses this cycle\n\n**Signature:**\n\n```typescript\nthisCycleExpenses: number;\n```\n", "ns.division.thiscycleexpenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [thisCycleExpenses](./bitburner.division.thiscycleexpenses.md)\n\n## Division.thisCycleExpenses property\n\nExpenses this cycle\n\n**Signature:**\n\n```typescript\nthisCycleExpenses: number;\n```\n", "bitburner.userinterfacetheme.errorlight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [errorlight](./bitburner.userinterfacetheme.errorlight.md)\n\n## UserInterfaceTheme.errorlight property\n\n**Signature:**\n\n```typescript\nerrorlight: string;\n```\n", "ns.userinterfacetheme.errorlight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [errorlight](./bitburner.userinterfacetheme.errorlight.md)\n\n## UserInterfaceTheme.errorlight property\n\n**Signature:**\n\n```typescript\nerrorlight: string;\n```\n", "bitburner.singularity.donatetofaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [donateToFaction](./bitburner.singularity.donatetofaction.md)\n\n## Singularity.donateToFaction() method\n\nDonate to a faction.\n\n**Signature:**\n\n```typescript\ndonateToFaction(faction: string, amount: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to donate to. |\n|  amount | number | Amount of money to donate. |\n\n**Returns:**\n\nboolean\n\nTrue if the money was donated, and false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nAttempts to donate money to the specified faction in exchange for reputation. Returns true if you successfully donate the money, and false otherwise.\n\n", "ns.singularity.donatetofaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [donateToFaction](./bitburner.singularity.donatetofaction.md)\n\n## Singularity.donateToFaction() method\n\nDonate to a faction.\n\n**Signature:**\n\n```typescript\ndonateToFaction(faction: string, amount: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to donate to. |\n|  amount | number | Amount of money to donate. |\n\n**Returns:**\n\nboolean\n\nTrue if the money was donated, and false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nAttempts to donate money to the specified faction in exchange for reputation. Returns true if you successfully donate the money, and false otherwise.\n\n", "bitburner.ns.getpurchasedservercost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerCost](./bitburner.ns.getpurchasedservercost.md)\n\n## NS.getPurchasedServerCost() method\n\nGet cost of purchasing a server.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerCost(ram: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  ram | number | Amount of RAM of a potential purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nnumber\n\nThe cost to purchase a server with the specified amount of ram.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\nReturns the cost to purchase a server with the specified amount of ram.\n\n## Example 1\n\n\n```ts\n// NS1:\nfor (i = 1; i <= 20; i++) {\n    tprint(i + \" -- \" + getPurchasedServerCost(Math.pow(2, i)));\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nfor (i = 1; i <= 20; i++) {\n    ns.tprint(i + \" -- \" + ns.getPurchasedServerCost(Math.pow(2, i)));\n}\n```\n\n", "ns.ns.getpurchasedservercost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerCost](./bitburner.ns.getpurchasedservercost.md)\n\n## NS.getPurchasedServerCost() method\n\nGet cost of purchasing a server.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerCost(ram: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  ram | number | Amount of RAM of a potential purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nnumber\n\nThe cost to purchase a server with the specified amount of ram.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\nReturns the cost to purchase a server with the specified amount of ram.\n\n## Example 1\n\n\n```ts\n// NS1:\nfor (i = 1; i <= 20; i++) {\n    tprint(i + \" -- \" + getPurchasedServerCost(Math.pow(2, i)));\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nfor (i = 1; i <= 20; i++) {\n    ns.tprint(i + \" -- \" + ns.getPurchasedServerCost(Math.pow(2, i)));\n}\n```\n\n", "index.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md)\n\n## API Reference\n\n## Packages\n\n|  Package | Description |\n|  --- | --- |\n|  [bitburner](./bitburner.md) |  |\n\n", "bitburner.skills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md)\n\n## Skills interface\n\n\n**Signature:**\n\n```typescript\ninterface Skills \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agility](./bitburner.skills.agility.md) |  | number |  |\n|  [charisma](./bitburner.skills.charisma.md) |  | number |  |\n|  [defense](./bitburner.skills.defense.md) |  | number |  |\n|  [dexterity](./bitburner.skills.dexterity.md) |  | number |  |\n|  [hacking](./bitburner.skills.hacking.md) |  | number |  |\n|  [intelligence](./bitburner.skills.intelligence.md) |  | number |  |\n|  [strength](./bitburner.skills.strength.md) |  | number |  |\n\n", "ns.skills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md)\n\n## Skills interface\n\n\n**Signature:**\n\n```typescript\ninterface Skills \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agility](./bitburner.skills.agility.md) |  | number |  |\n|  [charisma](./bitburner.skills.charisma.md) |  | number |  |\n|  [defense](./bitburner.skills.defense.md) |  | number |  |\n|  [dexterity](./bitburner.skills.dexterity.md) |  | number |  |\n|  [hacking](./bitburner.skills.hacking.md) |  | number |  |\n|  [intelligence](./bitburner.skills.intelligence.md) |  | number |  |\n|  [strength](./bitburner.skills.strength.md) |  | number |  |\n\n", "bitburner.autocompletedata.flags.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [flags](./bitburner.autocompletedata.flags.md)\n\n## AutocompleteData.flags() method\n\n**Signature:**\n\n```typescript\nflags(schema: [string, string | number | boolean | string[]][]): { [key: string]: ScriptArg | string[] };\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  schema | \\[string, string \\| number \\| boolean \\| string\\[\\]\\]\\[\\] |  |\n\n**Returns:**\n\n{ \\[key: string\\]: [ScriptArg](./bitburner.scriptarg.md) \\| string\\[\\] }\n\n", "ns.autocompletedata.flags.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [flags](./bitburner.autocompletedata.flags.md)\n\n## AutocompleteData.flags() method\n\n**Signature:**\n\n```typescript\nflags(schema: [string, string | number | boolean | string[]][]): { [key: string]: ScriptArg | string[] };\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  schema | \\[string, string \\| number \\| boolean \\| string\\[\\]\\]\\[\\] |  |\n\n**Returns:**\n\n{ \\[key: string\\]: [ScriptArg](./bitburner.scriptarg.md) \\| string\\[\\] }\n\n", "bitburner.netscriptport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md)\n\n## NetscriptPort interface\n\nObject representing a port. A port is a serialized queue.\n\n**Signature:**\n\n```typescript\ninterface NetscriptPort \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [clear()](./bitburner.netscriptport.clear.md) | Empties all data from the port. |\n|  [empty()](./bitburner.netscriptport.empty.md) | Check if the port is empty. |\n|  [full()](./bitburner.netscriptport.full.md) | Check if the port is full. |\n|  [nextWrite()](./bitburner.netscriptport.nextwrite.md) | Sleeps until the port is written to. |\n|  [peek()](./bitburner.netscriptport.peek.md) | Retrieve the first element from the port without removing it. |\n|  [read()](./bitburner.netscriptport.read.md) | Shift an element out of the port. |\n|  [tryWrite(value)](./bitburner.netscriptport.trywrite.md) | Attempt to write data to the port. |\n|  [write(value)](./bitburner.netscriptport.write.md) | Write data to a port. |\n\n", "ns.netscriptport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md)\n\n## NetscriptPort interface\n\nObject representing a port. A port is a serialized queue.\n\n**Signature:**\n\n```typescript\ninterface NetscriptPort \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [clear()](./bitburner.netscriptport.clear.md) | Empties all data from the port. |\n|  [empty()](./bitburner.netscriptport.empty.md) | Check if the port is empty. |\n|  [full()](./bitburner.netscriptport.full.md) | Check if the port is full. |\n|  [nextWrite()](./bitburner.netscriptport.nextwrite.md) | Sleeps until the port is written to. |\n|  [peek()](./bitburner.netscriptport.peek.md) | Retrieve the first element from the port without removing it. |\n|  [read()](./bitburner.netscriptport.read.md) | Shift an element out of the port. |\n|  [tryWrite(value)](./bitburner.netscriptport.trywrite.md) | Attempt to write data to the port. |\n|  [write(value)](./bitburner.netscriptport.write.md) | Write data to a port. |\n\n", "bitburner.division.upgrades.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [upgrades](./bitburner.division.upgrades.md)\n\n## Division.upgrades property\n\nAll research bought\n\n**Signature:**\n\n```typescript\nupgrades: number[];\n```\n", "ns.division.upgrades.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [upgrades](./bitburner.division.upgrades.md)\n\n## Division.upgrades property\n\nAll research bought\n\n**Signature:**\n\n```typescript\nupgrades: number[];\n```\n", "bitburner.hackingformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md)\n\n## HackingFormulas interface\n\nHacking formulas\n\n**Signature:**\n\n```typescript\ninterface HackingFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [growPercent(server, threads, player, cores)](./bitburner.hackingformulas.growpercent.md) | Calculate the percent a server would grow to. Not exact due to limitations of mathematics. (Ex: 3.0 would would grow the server to 300% of its current value.) |\n|  [growTime(server, player)](./bitburner.hackingformulas.growtime.md) | Calculate grow time. |\n|  [hackChance(server, player)](./bitburner.hackingformulas.hackchance.md) | Calculate hack chance. (Ex: 0.25 would indicate a 25% chance of success.) |\n|  [hackExp(server, player)](./bitburner.hackingformulas.hackexp.md) | Calculate hack exp for one thread. |\n|  [hackPercent(server, player)](./bitburner.hackingformulas.hackpercent.md) | Calculate hack percent for one thread. (Ex: 0.25 would steal 25% of the server's current value.) |\n|  [hackTime(server, player)](./bitburner.hackingformulas.hacktime.md) | Calculate hack time. |\n|  [weakenTime(server, player)](./bitburner.hackingformulas.weakentime.md) | Calculate weaken time. |\n\n", "ns.hackingformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md)\n\n## HackingFormulas interface\n\nHacking formulas\n\n**Signature:**\n\n```typescript\ninterface HackingFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [growPercent(server, threads, player, cores)](./bitburner.hackingformulas.growpercent.md) | Calculate the percent a server would grow to. Not exact due to limitations of mathematics. (Ex: 3.0 would would grow the server to 300% of its current value.) |\n|  [growTime(server, player)](./bitburner.hackingformulas.growtime.md) | Calculate grow time. |\n|  [hackChance(server, player)](./bitburner.hackingformulas.hackchance.md) | Calculate hack chance. (Ex: 0.25 would indicate a 25% chance of success.) |\n|  [hackExp(server, player)](./bitburner.hackingformulas.hackexp.md) | Calculate hack exp for one thread. |\n|  [hackPercent(server, player)](./bitburner.hackingformulas.hackpercent.md) | Calculate hack percent for one thread. (Ex: 0.25 would steal 25% of the server's current value.) |\n|  [hackTime(server, player)](./bitburner.hackingformulas.hacktime.md) | Calculate hack time. |\n|  [weakenTime(server, player)](./bitburner.hackingformulas.weakentime.md) | Calculate weaken time. |\n\n", "bitburner.multipliers.bladeburner_stamina_gain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_stamina\\_gain](./bitburner.multipliers.bladeburner_stamina_gain.md)\n\n## Multipliers.bladeburner\\_stamina\\_gain property\n\nMultiplier to Bladeburner stamina gain rate\n\n**Signature:**\n\n```typescript\nbladeburner_stamina_gain: number;\n```\n", "ns.multipliers.bladeburner_stamina_gain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_stamina\\_gain](./bitburner.multipliers.bladeburner_stamina_gain.md)\n\n## Multipliers.bladeburner\\_stamina\\_gain property\n\nMultiplier to Bladeburner stamina gain rate\n\n**Signature:**\n\n```typescript\nbladeburner_stamina_gain: number;\n```\n", "bitburner.bitnodemultipliers.companyworkexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CompanyWorkExpGain](./bitburner.bitnodemultipliers.companyworkexpgain.md)\n\n## BitNodeMultipliers.CompanyWorkExpGain property\n\nInfluences the experience gained for each ability when the player completes working their job.\n\n**Signature:**\n\n```typescript\nCompanyWorkExpGain: number;\n```\n", "ns.bitnodemultipliers.companyworkexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CompanyWorkExpGain](./bitburner.bitnodemultipliers.companyworkexpgain.md)\n\n## BitNodeMultipliers.CompanyWorkExpGain property\n\nInfluences the experience gained for each ability when the player completes working their job.\n\n**Signature:**\n\n```typescript\nCompanyWorkExpGain: number;\n```\n", "bitburner.userinterfacetheme.primarydark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [primarydark](./bitburner.userinterfacetheme.primarydark.md)\n\n## UserInterfaceTheme.primarydark property\n\n**Signature:**\n\n```typescript\nprimarydark: string;\n```\n", "ns.userinterfacetheme.primarydark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [primarydark](./bitburner.userinterfacetheme.primarydark.md)\n\n## UserInterfaceTheme.primarydark property\n\n**Signature:**\n\n```typescript\nprimarydark: string;\n```\n", "bitburner.bitnodemultipliers.manualhackmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ManualHackMoney](./bitburner.bitnodemultipliers.manualhackmoney.md)\n\n## BitNodeMultipliers.ManualHackMoney property\n\nInfluences how much money can be stolen from a server when the player performs a hack against it through the Terminal.\n\n**Signature:**\n\n```typescript\nManualHackMoney: number;\n```\n", "ns.bitnodemultipliers.manualhackmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ManualHackMoney](./bitburner.bitnodemultipliers.manualhackmoney.md)\n\n## BitNodeMultipliers.ManualHackMoney property\n\nInfluences how much money can be stolen from a server when the player performs a hack against it through the Terminal.\n\n**Signature:**\n\n```typescript\nManualHackMoney: number;\n```\n", "bitburner.corpconstants.researchnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [researchNames](./bitburner.corpconstants.researchnames.md)\n\n## CorpConstants.researchNames property\n\nNames of all researches\n\n**Signature:**\n\n```typescript\nresearchNames: CorpResearchName[];\n```\n", "ns.corpconstants.researchnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [researchNames](./bitburner.corpconstants.researchnames.md)\n\n## CorpConstants.researchNames property\n\nNames of all researches\n\n**Signature:**\n\n```typescript\nresearchNames: CorpResearchName[];\n```\n", "bitburner.nodestats.cores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [cores](./bitburner.nodestats.cores.md)\n\n## NodeStats.cores property\n\nNode's number of cores\n\n**Signature:**\n\n```typescript\ncores: number;\n```\n", "ns.nodestats.cores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [cores](./bitburner.nodestats.cores.md)\n\n## NodeStats.cores property\n\nNode's number of cores\n\n**Signature:**\n\n```typescript\ncores: number;\n```\n", "bitburner.tix.purchase4smarketdatatixapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchase4SMarketDataTixApi](./bitburner.tix.purchase4smarketdatatixapi.md)\n\n## TIX.purchase4SMarketDataTixApi() method\n\nPurchase 4S Market Data TIX API Access.\n\n**Signature:**\n\n```typescript\npurchase4SMarketDataTixApi(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "ns.tix.purchase4smarketdatatixapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchase4SMarketDataTixApi](./bitburner.tix.purchase4smarketdatatixapi.md)\n\n## TIX.purchase4SMarketDataTixApi() method\n\nPurchase 4S Market Data TIX API Access.\n\n**Signature:**\n\n```typescript\npurchase4SMarketDataTixApi(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "bitburner.hp.current.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HP](./bitburner.hp.md) &gt; [current](./bitburner.hp.current.md)\n\n## HP.current property\n\n**Signature:**\n\n```typescript\ncurrent: number;\n```\n", "ns.hp.current.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HP](./bitburner.hp.md) &gt; [current](./bitburner.hp.current.md)\n\n## HP.current property\n\n**Signature:**\n\n```typescript\ncurrent: number;\n```\n", "bitburner.netscriptport.read.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [read](./bitburner.netscriptport.read.md)\n\n## NetscriptPort.read() method\n\nShift an element out of the port.\n\n**Signature:**\n\n```typescript\nread(): PortData;\n```\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nthe data read.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function will remove the first element from the port and return it. If the port is empty, then the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "ns.netscriptport.read.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [read](./bitburner.netscriptport.read.md)\n\n## NetscriptPort.read() method\n\nShift an element out of the port.\n\n**Signature:**\n\n```typescript\nread(): PortData;\n```\n**Returns:**\n\n[PortData](./bitburner.portdata.md)\n\nthe data read.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function will remove the first element from the port and return it. If the port is empty, then the string \u201cNULL PORT DATA\u201d will be returned.\n\n", "bitburner.ns.pid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [pid](./bitburner.ns.pid.md)\n\n## NS.pid property\n\nThe current script's PID\n\n**Signature:**\n\n```typescript\nreadonly pid: number;\n```\n", "ns.ns.pid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [pid](./bitburner.ns.pid.md)\n\n## NS.pid property\n\nThe current script's PID\n\n**Signature:**\n\n```typescript\nreadonly pid: number;\n```\n", "bitburner.gangmemberinfo.dex_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_asc\\_mult](./bitburner.gangmemberinfo.dex_asc_mult.md)\n\n## GangMemberInfo.dex\\_asc\\_mult property\n\nDexterity multiplier from ascensions\n\n**Signature:**\n\n```typescript\ndex_asc_mult: number;\n```\n", "ns.gangmemberinfo.dex_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_asc\\_mult](./bitburner.gangmemberinfo.dex_asc_mult.md)\n\n## GangMemberInfo.dex\\_asc\\_mult property\n\nDexterity multiplier from ascensions\n\n**Signature:**\n\n```typescript\ndex_asc_mult: number;\n```\n", "bitburner.tix.hastixapiaccess.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [hasTIXAPIAccess](./bitburner.tix.hastixapiaccess.md)\n\n## TIX.hasTIXAPIAccess() method\n\nReturns true if the player has access to the TIX API\n\n**Signature:**\n\n```typescript\nhasTIXAPIAccess(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.tix.hastixapiaccess.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [hasTIXAPIAccess](./bitburner.tix.hastixapiaccess.md)\n\n## TIX.hasTIXAPIAccess() method\n\nReturns true if the player has access to the TIX API\n\n**Signature:**\n\n```typescript\nhasTIXAPIAccess(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.gangtaskstats.baserespect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [baseRespect](./bitburner.gangtaskstats.baserespect.md)\n\n## GangTaskStats.baseRespect property\n\nBase respect earned\n\n**Signature:**\n\n```typescript\nbaseRespect: number;\n```\n", "ns.gangtaskstats.baserespect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [baseRespect](./bitburner.gangtaskstats.baserespect.md)\n\n## GangTaskStats.baseRespect property\n\nBase respect earned\n\n**Signature:**\n\n```typescript\nbaseRespect: number;\n```\n", "bitburner.workstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md)\n\n## WorkStats interface\n\n\n**Signature:**\n\n```typescript\ninterface WorkStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agiExp](./bitburner.workstats.agiexp.md) |  | number |  |\n|  [chaExp](./bitburner.workstats.chaexp.md) |  | number |  |\n|  [defExp](./bitburner.workstats.defexp.md) |  | number |  |\n|  [dexExp](./bitburner.workstats.dexexp.md) |  | number |  |\n|  [hackExp](./bitburner.workstats.hackexp.md) |  | number |  |\n|  [intExp](./bitburner.workstats.intexp.md) |  | number |  |\n|  [money](./bitburner.workstats.money.md) |  | number |  |\n|  [reputation](./bitburner.workstats.reputation.md) |  | number |  |\n|  [strExp](./bitburner.workstats.strexp.md) |  | number |  |\n\n", "ns.workstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md)\n\n## WorkStats interface\n\n\n**Signature:**\n\n```typescript\ninterface WorkStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agiExp](./bitburner.workstats.agiexp.md) |  | number |  |\n|  [chaExp](./bitburner.workstats.chaexp.md) |  | number |  |\n|  [defExp](./bitburner.workstats.defexp.md) |  | number |  |\n|  [dexExp](./bitburner.workstats.dexexp.md) |  | number |  |\n|  [hackExp](./bitburner.workstats.hackexp.md) |  | number |  |\n|  [intExp](./bitburner.workstats.intexp.md) |  | number |  |\n|  [money](./bitburner.workstats.money.md) |  | number |  |\n|  [reputation](./bitburner.workstats.reputation.md) |  | number |  |\n|  [strExp](./bitburner.workstats.strexp.md) |  | number |  |\n\n", "bitburner.runningscript.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md)\n\n## RunningScript interface\n\n\n**Signature:**\n\n```typescript\ninterface RunningScript \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [args](./bitburner.runningscript.args.md) |  | (string \\| number \\| boolean)\\[\\] | Arguments the script was called with |\n|  [filename](./bitburner.runningscript.filename.md) |  | string | Filename of the script |\n|  [logs](./bitburner.runningscript.logs.md) |  | string\\[\\] | Script logs as an array. The newest log entries are at the bottom. Timestamps, if enabled, are placed inside <code>[brackets]</code> at the start of each line. |\n|  [offlineExpGained](./bitburner.runningscript.offlineexpgained.md) |  | number | Total amount of hacking experience earned from this script when offline |\n|  [offlineMoneyMade](./bitburner.runningscript.offlinemoneymade.md) |  | number | Total amount of money made by this script when offline |\n|  [offlineRunningTime](./bitburner.runningscript.offlinerunningtime.md) |  | number | Number of seconds that the script has been running offline |\n|  [onlineExpGained](./bitburner.runningscript.onlineexpgained.md) |  | number | Total amount of hacking experience earned from this script when online |\n|  [onlineMoneyMade](./bitburner.runningscript.onlinemoneymade.md) |  | number | Total amount of money made by this script when online |\n|  [onlineRunningTime](./bitburner.runningscript.onlinerunningtime.md) |  | number | Number of seconds that this script has been running online |\n|  [pid](./bitburner.runningscript.pid.md) |  | number | Process ID. Must be an integer |\n|  [ramUsage](./bitburner.runningscript.ramusage.md) |  | number | How much RAM this script uses for ONE thread |\n|  [server](./bitburner.runningscript.server.md) |  | string | Hostname of the server on which this script runs |\n|  [threads](./bitburner.runningscript.threads.md) |  | number | Number of threads that this script runs with |\n\n", "ns.runningscript.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md)\n\n## RunningScript interface\n\n\n**Signature:**\n\n```typescript\ninterface RunningScript \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [args](./bitburner.runningscript.args.md) |  | (string \\| number \\| boolean)\\[\\] | Arguments the script was called with |\n|  [filename](./bitburner.runningscript.filename.md) |  | string | Filename of the script |\n|  [logs](./bitburner.runningscript.logs.md) |  | string\\[\\] | Script logs as an array. The newest log entries are at the bottom. Timestamps, if enabled, are placed inside <code>[brackets]</code> at the start of each line. |\n|  [offlineExpGained](./bitburner.runningscript.offlineexpgained.md) |  | number | Total amount of hacking experience earned from this script when offline |\n|  [offlineMoneyMade](./bitburner.runningscript.offlinemoneymade.md) |  | number | Total amount of money made by this script when offline |\n|  [offlineRunningTime](./bitburner.runningscript.offlinerunningtime.md) |  | number | Number of seconds that the script has been running offline |\n|  [onlineExpGained](./bitburner.runningscript.onlineexpgained.md) |  | number | Total amount of hacking experience earned from this script when online |\n|  [onlineMoneyMade](./bitburner.runningscript.onlinemoneymade.md) |  | number | Total amount of money made by this script when online |\n|  [onlineRunningTime](./bitburner.runningscript.onlinerunningtime.md) |  | number | Number of seconds that this script has been running online |\n|  [pid](./bitburner.runningscript.pid.md) |  | number | Process ID. Must be an integer |\n|  [ramUsage](./bitburner.runningscript.ramusage.md) |  | number | How much RAM this script uses for ONE thread |\n|  [server](./bitburner.runningscript.server.md) |  | string | Hostname of the server on which this script runs |\n|  [threads](./bitburner.runningscript.threads.md) |  | number | Number of threads that this script runs with |\n\n", "bitburner.grafting.getgraftableaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [getGraftableAugmentations](./bitburner.grafting.getgraftableaugmentations.md)\n\n## Grafting.getGraftableAugmentations() method\n\nRetrieves a list of Augmentations that can be grafted.\n\n**Signature:**\n\n```typescript\ngetGraftableAugmentations(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nAn array of graftable Augmentations.\n\n## Remarks\n\nRAM cost: 5 GB\n\nNote that this function returns a list of currently graftable Augmentations, based off of the Augmentations that you already own.\n\n", "ns.grafting.getgraftableaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [getGraftableAugmentations](./bitburner.grafting.getgraftableaugmentations.md)\n\n## Grafting.getGraftableAugmentations() method\n\nRetrieves a list of Augmentations that can be grafted.\n\n**Signature:**\n\n```typescript\ngetGraftableAugmentations(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nAn array of graftable Augmentations.\n\n## Remarks\n\nRAM cost: 5 GB\n\nNote that this function returns a list of currently graftable Augmentations, based off of the Augmentations that you already own.\n\n", "bitburner.investmentoffer.round.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md) &gt; [round](./bitburner.investmentoffer.round.md)\n\n## InvestmentOffer.round property\n\nCurrent round of funding (max 4)\n\n**Signature:**\n\n```typescript\nround: number;\n```\n", "ns.investmentoffer.round.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md) &gt; [round](./bitburner.investmentoffer.round.md)\n\n## InvestmentOffer.round property\n\nCurrent round of funding (max 4)\n\n**Signature:**\n\n```typescript\nround: number;\n```\n", "bitburner.server.sshportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [sshPortOpen](./bitburner.server.sshportopen.md)\n\n## Server.sshPortOpen property\n\nFlag indicating whether the SSH Port is open\n\n**Signature:**\n\n```typescript\nsshPortOpen: boolean;\n```\n", "ns.server.sshportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [sshPortOpen](./bitburner.server.sshportopen.md)\n\n## Server.sshPortOpen property\n\nFlag indicating whether the SSH Port is open\n\n**Signature:**\n\n```typescript\nsshPortOpen: boolean;\n```\n", "bitburner.bitnodemultipliers.serverstartingsecurity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerStartingSecurity](./bitburner.bitnodemultipliers.serverstartingsecurity.md)\n\n## BitNodeMultipliers.ServerStartingSecurity property\n\nInfluences the initial security level (hackDifficulty) of a server.\n\n**Signature:**\n\n```typescript\nServerStartingSecurity: number;\n```\n", "ns.bitnodemultipliers.serverstartingsecurity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerStartingSecurity](./bitburner.bitnodemultipliers.serverstartingsecurity.md)\n\n## BitNodeMultipliers.ServerStartingSecurity property\n\nInfluences the initial security level (hackDifficulty) of a server.\n\n**Signature:**\n\n```typescript\nServerStartingSecurity: number;\n```\n", "bitburner.product.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [name](./bitburner.product.name.md)\n\n## Product.name property\n\nName of the product\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.product.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [name](./bitburner.product.name.md)\n\n## Product.name property\n\nName of the product\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.formulas.mockplayer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [mockPlayer](./bitburner.formulas.mockplayer.md)\n\n## Formulas.mockPlayer() method\n\n**Signature:**\n\n```typescript\nmockPlayer(): Player;\n```\n**Returns:**\n\n[Player](./bitburner.player.md)\n\n", "ns.formulas.mockplayer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [mockPlayer](./bitburner.formulas.mockplayer.md)\n\n## Formulas.mockPlayer() method\n\n**Signature:**\n\n```typescript\nmockPlayer(): Player;\n```\n**Returns:**\n\n[Player](./bitburner.player.md)\n\n", "bitburner.userinterfacetheme.infodark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [infodark](./bitburner.userinterfacetheme.infodark.md)\n\n## UserInterfaceTheme.infodark property\n\n**Signature:**\n\n```typescript\ninfodark: string;\n```\n", "ns.userinterfacetheme.infodark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [infodark](./bitburner.userinterfacetheme.infodark.md)\n\n## UserInterfaceTheme.infodark property\n\n**Signature:**\n\n```typescript\ninfodark: string;\n```\n", "bitburner.office.employeeprod.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [employeeProd](./bitburner.office.employeeprod.md)\n\n## Office.employeeProd property\n\nProduction of the employees\n\n**Signature:**\n\n```typescript\nemployeeProd: Record<CorpEmployeePosition, number>;\n```\n", "ns.office.employeeprod.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [employeeProd](./bitburner.office.employeeprod.md)\n\n## Office.employeeProd property\n\nProduction of the employees\n\n**Signature:**\n\n```typescript\nemployeeProd: Record<CorpEmployeePosition, number>;\n```\n", "bitburner.ns.getpurchasedserverlimit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerLimit](./bitburner.ns.getpurchasedserverlimit.md)\n\n## NS.getPurchasedServerLimit() method\n\nReturns the maximum number of servers you can purchase.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerLimit(): number;\n```\n**Returns:**\n\nnumber\n\nReturns the maximum number of servers you can purchase.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.getpurchasedserverlimit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerLimit](./bitburner.ns.getpurchasedserverlimit.md)\n\n## NS.getPurchasedServerLimit() method\n\nReturns the maximum number of servers you can purchase.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerLimit(): number;\n```\n**Returns:**\n\nnumber\n\nReturns the maximum number of servers you can purchase.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.grafting.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md)\n\n## Grafting interface\n\nGrafting API\n\n**Signature:**\n\n```typescript\nexport interface Grafting \n```\n\n## Remarks\n\nThis API requires Source-File 10 to use.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getAugmentationGraftPrice(augName)](./bitburner.grafting.getaugmentationgraftprice.md) | Retrieve the grafting cost of an aug. |\n|  [getAugmentationGraftTime(augName)](./bitburner.grafting.getaugmentationgrafttime.md) | Retrieves the time required to graft an aug. |\n|  [getGraftableAugmentations()](./bitburner.grafting.getgraftableaugmentations.md) | Retrieves a list of Augmentations that can be grafted. |\n|  [graftAugmentation(augName, focus)](./bitburner.grafting.graftaugmentation.md) | Begins grafting the named aug. You must be in New Tokyo to use this. |\n\n", "ns.grafting.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md)\n\n## Grafting interface\n\nGrafting API\n\n**Signature:**\n\n```typescript\nexport interface Grafting \n```\n\n## Remarks\n\nThis API requires Source-File 10 to use.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getAugmentationGraftPrice(augName)](./bitburner.grafting.getaugmentationgraftprice.md) | Retrieve the grafting cost of an aug. |\n|  [getAugmentationGraftTime(augName)](./bitburner.grafting.getaugmentationgrafttime.md) | Retrieves the time required to graft an aug. |\n|  [getGraftableAugmentations()](./bitburner.grafting.getgraftableaugmentations.md) | Retrieves a list of Augmentations that can be grafted. |\n|  [graftAugmentation(augName, focus)](./bitburner.grafting.graftaugmentation.md) | Begins grafting the named aug. You must be in New Tokyo to use this. |\n\n", "bitburner.ns.alert.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [alert](./bitburner.ns.alert.md)\n\n## NS.alert() method\n\nOpen up a message box.\n\n**Signature:**\n\n```typescript\nalert(msg: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  msg | string | Message to alert. |\n\n**Returns:**\n\nvoid\n\n", "ns.ns.alert.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [alert](./bitburner.ns.alert.md)\n\n## NS.alert() method\n\nOpen up a message box.\n\n**Signature:**\n\n```typescript\nalert(msg: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  msg | string | Message to alert. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.hacknetserversformulas.constants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [constants](./bitburner.hacknetserversformulas.constants.md)\n\n## HacknetServersFormulas.constants() method\n\nAll constants used by the game.\n\n**Signature:**\n\n```typescript\nconstants(): HacknetServerConstants;\n```\n**Returns:**\n\n[HacknetServerConstants](./bitburner.hacknetserverconstants.md)\n\nAn object with all hacknet server constants used by the game.\n\n", "ns.hacknetserversformulas.constants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [constants](./bitburner.hacknetserversformulas.constants.md)\n\n## HacknetServersFormulas.constants() method\n\nAll constants used by the game.\n\n**Signature:**\n\n```typescript\nconstants(): HacknetServerConstants;\n```\n**Returns:**\n\n[HacknetServerConstants](./bitburner.hacknetserverconstants.md)\n\nAn object with all hacknet server constants used by the game.\n\n", "bitburner.infiltrationreward.soarep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md) &gt; [SoARep](./bitburner.infiltrationreward.soarep.md)\n\n## InfiltrationReward.SoARep property\n\n**Signature:**\n\n```typescript\nSoARep: number;\n```\n", "ns.infiltrationreward.soarep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md) &gt; [SoARep](./bitburner.infiltrationreward.soarep.md)\n\n## InfiltrationReward.SoARep property\n\n**Signature:**\n\n```typescript\nSoARep: number;\n```\n", "bitburner.equipmentstats.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [hack](./bitburner.equipmentstats.hack.md)\n\n## EquipmentStats.hack property\n\nHacking multiplier\n\n**Signature:**\n\n```typescript\nhack?: number;\n```\n", "ns.equipmentstats.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [hack](./bitburner.equipmentstats.hack.md)\n\n## EquipmentStats.hack property\n\nHacking multiplier\n\n**Signature:**\n\n```typescript\nhack?: number;\n```\n", "bitburner.gangmemberinfo.str.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str](./bitburner.gangmemberinfo.str.md)\n\n## GangMemberInfo.str property\n\nStrength skill level\n\n**Signature:**\n\n```typescript\nstr: number;\n```\n", "ns.gangmemberinfo.str.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str](./bitburner.gangmemberinfo.str.md)\n\n## GangMemberInfo.str property\n\nStrength skill level\n\n**Signature:**\n\n```typescript\nstr: number;\n```\n", "bitburner.nodestats.level.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [level](./bitburner.nodestats.level.md)\n\n## NodeStats.level property\n\nNode's level\n\n**Signature:**\n\n```typescript\nlevel: number;\n```\n", "ns.nodestats.level.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [level](./bitburner.nodestats.level.md)\n\n## NodeStats.level property\n\nNode's level\n\n**Signature:**\n\n```typescript\nlevel: number;\n```\n", "bitburner.bladeburner.startaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [startAction](./bitburner.bladeburner.startaction.md)\n\n## Bladeburner.startAction() method\n\nStart an action.\n\n**Signature:**\n\n```typescript\nstartAction(type: string, name: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match |\n\n**Returns:**\n\nboolean\n\nTrue if the action was started successfully, and false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempts to start the specified Bladeburner action. Returns true if the action was started successfully, and false otherwise.\n\n", "ns.bladeburner.startaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [startAction](./bitburner.bladeburner.startaction.md)\n\n## Bladeburner.startAction() method\n\nStart an action.\n\n**Signature:**\n\n```typescript\nstartAction(type: string, name: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match |\n\n**Returns:**\n\nboolean\n\nTrue if the action was started successfully, and false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempts to start the specified Bladeburner action. Returns true if the action was started successfully, and false otherwise.\n\n", "bitburner.ns.getbitnodemultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getBitNodeMultipliers](./bitburner.ns.getbitnodemultipliers.md)\n\n## NS.getBitNodeMultipliers() method\n\nGet the current Bitnode multipliers.\n\n**Signature:**\n\n```typescript\ngetBitNodeMultipliers(n?: number, lvl?: number): BitNodeMultipliers;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | _(Optional)_ |\n|  lvl | number | _(Optional)_ |\n\n**Returns:**\n\n[BitNodeMultipliers](./bitburner.bitnodemultipliers.md)\n\nObject containing the current BitNode multipliers.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns an object containing the current (or supplied) BitNode multipliers. This function requires you to be in Bitnode 5 or have Source-File 5 in order to run. The multipliers are returned in decimal forms (e.g. 1.5 instead of 150%). The multipliers represent the difference between the current BitNode and the original BitNode (BitNode-1).\n\nFor example, if the CrimeMoney multiplier has a value of 0.1, then that means that committing crimes in the current BitNode will only give 10% of the money you would have received in BitNode-1.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar mults = getBitNodeMultipliers();\nprint(mults.ServerMaxMoney);\nprint(mults.HackExpGain);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst {ServerMaxMoney, HackExpGain} = ns.getBitNodeMultipliers();\nprint(ServerMaxMoney);\nprint(HackExpGain);\n```\n\n", "ns.ns.getbitnodemultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getBitNodeMultipliers](./bitburner.ns.getbitnodemultipliers.md)\n\n## NS.getBitNodeMultipliers() method\n\nGet the current Bitnode multipliers.\n\n**Signature:**\n\n```typescript\ngetBitNodeMultipliers(n?: number, lvl?: number): BitNodeMultipliers;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | _(Optional)_ |\n|  lvl | number | _(Optional)_ |\n\n**Returns:**\n\n[BitNodeMultipliers](./bitburner.bitnodemultipliers.md)\n\nObject containing the current BitNode multipliers.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns an object containing the current (or supplied) BitNode multipliers. This function requires you to be in Bitnode 5 or have Source-File 5 in order to run. The multipliers are returned in decimal forms (e.g. 1.5 instead of 150%). The multipliers represent the difference between the current BitNode and the original BitNode (BitNode-1).\n\nFor example, if the CrimeMoney multiplier has a value of 0.1, then that means that committing crimes in the current BitNode will only give 10% of the money you would have received in BitNode-1.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar mults = getBitNodeMultipliers();\nprint(mults.ServerMaxMoney);\nprint(mults.HackExpGain);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst {ServerMaxMoney, HackExpGain} = ns.getBitNodeMultipliers();\nprint(ServerMaxMoney);\nprint(HackExpGain);\n```\n\n", "bitburner.hackingformulas.hacktime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackTime](./bitburner.hackingformulas.hacktime.md)\n\n## HackingFormulas.hackTime() method\n\nCalculate hack time.\n\n**Signature:**\n\n```typescript\nhackTime(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack time.\n\n", "ns.hackingformulas.hacktime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackTime](./bitburner.hackingformulas.hacktime.md)\n\n## HackingFormulas.hackTime() method\n\nCalculate hack time.\n\n**Signature:**\n\n```typescript\nhackTime(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack time.\n\n", "bitburner.hacknetnodeconstants.maxlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MaxLevel](./bitburner.hacknetnodeconstants.maxlevel.md)\n\n## HacknetNodeConstants.MaxLevel property\n\nMax node level\n\n**Signature:**\n\n```typescript\nMaxLevel: number;\n```\n", "ns.hacknetnodeconstants.maxlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MaxLevel](./bitburner.hacknetnodeconstants.maxlevel.md)\n\n## HacknetNodeConstants.MaxLevel property\n\nMax node level\n\n**Signature:**\n\n```typescript\nMaxLevel: number;\n```\n", "bitburner.gangtaskstats.strweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [strWeight](./bitburner.gangtaskstats.strweight.md)\n\n## GangTaskStats.strWeight property\n\nStrength skill impact on task scaling\n\n**Signature:**\n\n```typescript\nstrWeight: number;\n```\n", "ns.gangtaskstats.strweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [strWeight](./bitburner.gangtaskstats.strweight.md)\n\n## GangTaskStats.strWeight property\n\nStrength skill impact on task scaling\n\n**Signature:**\n\n```typescript\nstrWeight: number;\n```\n", "bitburner.warehouseapi.getproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getProduct](./bitburner.warehouseapi.getproduct.md)\n\n## WarehouseAPI.getProduct() method\n\nGet product data\n\n**Signature:**\n\n```typescript\ngetProduct(divisionName: string, productName: string): Product;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n\n**Returns:**\n\n[Product](./bitburner.product.md)\n\nproduct data\n\n", "ns.warehouseapi.getproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getProduct](./bitburner.warehouseapi.getproduct.md)\n\n## WarehouseAPI.getProduct() method\n\nGet product data\n\n**Signature:**\n\n```typescript\ngetProduct(divisionName: string, productName: string): Product;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n\n**Returns:**\n\n[Product](./bitburner.product.md)\n\nproduct data\n\n", "bitburner.bitnodemultipliers.hackexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HackExpGain](./bitburner.bitnodemultipliers.hackexpgain.md)\n\n## BitNodeMultipliers.HackExpGain property\n\nInfluences the experienced gained when hacking a server.\n\n**Signature:**\n\n```typescript\nHackExpGain: number;\n```\n", "ns.bitnodemultipliers.hackexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HackExpGain](./bitburner.bitnodemultipliers.hackexpgain.md)\n\n## BitNodeMultipliers.HackExpGain property\n\nInfluences the experienced gained when hacking a server.\n\n**Signature:**\n\n```typescript\nHackExpGain: number;\n```\n", "bitburner.division.products.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [products](./bitburner.division.products.md)\n\n## Division.products property\n\nProducts developed by this division\n\n**Signature:**\n\n```typescript\nproducts: string[];\n```\n", "ns.division.products.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [products](./bitburner.division.products.md)\n\n## Division.products property\n\nProducts developed by this division\n\n**Signature:**\n\n```typescript\nproducts: string[];\n```\n", "bitburner.hacknetserverconstants.upgradecachemult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeCacheMult](./bitburner.hacknetserverconstants.upgradecachemult.md)\n\n## HacknetServerConstants.UpgradeCacheMult property\n\nMultiplier to upgrade cache\n\n**Signature:**\n\n```typescript\nUpgradeCacheMult: number;\n```\n", "ns.hacknetserverconstants.upgradecachemult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeCacheMult](./bitburner.hacknetserverconstants.upgradecachemult.md)\n\n## HacknetServerConstants.UpgradeCacheMult property\n\nMultiplier to upgrade cache\n\n**Signature:**\n\n```typescript\nUpgradeCacheMult: number;\n```\n", "bitburner.multipliers.hacknet_node_ram_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_ram\\_cost](./bitburner.multipliers.hacknet_node_ram_cost.md)\n\n## Multipliers.hacknet\\_node\\_ram\\_cost property\n\nMultiplier to cost of ram for a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_ram_cost: number;\n```\n", "ns.multipliers.hacknet_node_ram_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_ram\\_cost](./bitburner.multipliers.hacknet_node_ram_cost.md)\n\n## Multipliers.hacknet\\_node\\_ram\\_cost property\n\nMultiplier to cost of ram for a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_ram_cost: number;\n```\n", "bitburner.warehouseapi.haswarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [hasWarehouse](./bitburner.warehouseapi.haswarehouse.md)\n\n## WarehouseAPI.hasWarehouse() method\n\nCheck if you have a warehouse in city\n\n**Signature:**\n\n```typescript\nhasWarehouse(divisionName: string, city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string |  |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` |  |\n\n**Returns:**\n\nboolean\n\ntrue if warehouse is present, false if not\n\n", "ns.warehouseapi.haswarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [hasWarehouse](./bitburner.warehouseapi.haswarehouse.md)\n\n## WarehouseAPI.hasWarehouse() method\n\nCheck if you have a warehouse in city\n\n**Signature:**\n\n```typescript\nhasWarehouse(divisionName: string, city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string |  |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` |  |\n\n**Returns:**\n\nboolean\n\ntrue if warehouse is present, false if not\n\n", "bitburner.server.ip.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [ip](./bitburner.server.ip.md)\n\n## Server.ip property\n\nIP Address. Must be unique\n\n**Signature:**\n\n```typescript\nip: string;\n```\n", "ns.server.ip.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [ip](./bitburner.server.ip.md)\n\n## Server.ip property\n\nIP Address. Must be unique\n\n**Signature:**\n\n```typescript\nip: string;\n```\n", "bitburner.sleeve.getsleeveaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeveAugmentations](./bitburner.sleeve.getsleeveaugmentations.md)\n\n## Sleeve.getSleeveAugmentations() method\n\nGet augmentations installed on a sleeve.\n\n**Signature:**\n\n```typescript\ngetSleeveAugmentations(sleeveNumber: number): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve augmentations from. |\n\n**Returns:**\n\nstring\\[\\]\n\nList of augmentation names that this sleeve has installed.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a list of augmentation names that this sleeve has installed.\n\n", "ns.sleeve.getsleeveaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeveAugmentations](./bitburner.sleeve.getsleeveaugmentations.md)\n\n## Sleeve.getSleeveAugmentations() method\n\nGet augmentations installed on a sleeve.\n\n**Signature:**\n\n```typescript\ngetSleeveAugmentations(sleeveNumber: number): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve augmentations from. |\n\n**Returns:**\n\nstring\\[\\]\n\nList of augmentation names that this sleeve has installed.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a list of augmentation names that this sleeve has installed.\n\n", "bitburner.bladeburner.getcitycommunities.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCityCommunities](./bitburner.bladeburner.getcitycommunities.md)\n\n## Bladeburner.getCityCommunities() method\n\nGet number of communities in a city.\n\n**Signature:**\n\n```typescript\ngetCityCommunities(city: CityName | `${CityName}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nnumber\n\nNumber of Synthoids communities in the specified city.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the estimated number of Synthoid communities in the specified city, or -1 if an invalid city was specified.\n\n", "ns.bladeburner.getcitycommunities.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCityCommunities](./bitburner.bladeburner.getcitycommunities.md)\n\n## Bladeburner.getCityCommunities() method\n\nGet number of communities in a city.\n\n**Signature:**\n\n```typescript\ngetCityCommunities(city: CityName | `${CityName}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nnumber\n\nNumber of Synthoids communities in the specified city.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the estimated number of Synthoid communities in the specified city, or -1 if an invalid city was specified.\n\n", "bitburner.corpconstants.baseproductprofitmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [baseProductProfitMult](./bitburner.corpconstants.baseproductprofitmult.md)\n\n## CorpConstants.baseProductProfitMult property\n\n**Signature:**\n\n```typescript\nbaseProductProfitMult: number;\n```\n", "ns.corpconstants.baseproductprofitmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [baseProductProfitMult](./bitburner.corpconstants.baseproductprofitmult.md)\n\n## CorpConstants.baseProductProfitMult property\n\n**Signature:**\n\n```typescript\nbaseProductProfitMult: number;\n```\n", "bitburner.ns.exit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [exit](./bitburner.ns.exit.md)\n\n## NS.exit() method\n\nTerminates the current script immediately.\n\n**Signature:**\n\n```typescript\nexit(): never;\n```\n**Returns:**\n\nnever\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.exit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [exit](./bitburner.ns.exit.md)\n\n## NS.exit() method\n\nTerminates the current script immediately.\n\n**Signature:**\n\n```typescript\nexit(): never;\n```\n**Returns:**\n\nnever\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.locationname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [LocationName](./bitburner.locationname.md)\n\n## LocationName enum\n\nNames of all locations\n\n**Signature:**\n\n```typescript\ndeclare enum LocationName \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  AevumAeroCorp | <code>&quot;AeroCorp&quot;</code> |  |\n|  AevumBachmanAndAssociates | <code>&quot;Bachman &amp; Associates&quot;</code> |  |\n|  AevumCasino | <code>&quot;Iker Molina Casino&quot;</code> |  |\n|  AevumClarkeIncorporated | <code>&quot;Clarke Incorporated&quot;</code> |  |\n|  AevumCrushFitnessGym | <code>&quot;Crush Fitness Gym&quot;</code> |  |\n|  AevumECorp | <code>&quot;ECorp&quot;</code> |  |\n|  AevumFulcrumTechnologies | <code>&quot;Fulcrum Technologies&quot;</code> |  |\n|  AevumGalacticCybersystems | <code>&quot;Galactic Cybersystems&quot;</code> |  |\n|  AevumNetLinkTechnologies | <code>&quot;NetLink Technologies&quot;</code> |  |\n|  AevumPolice | <code>&quot;Aevum Police Headquarters&quot;</code> |  |\n|  AevumRhoConstruction | <code>&quot;Rho Construction&quot;</code> |  |\n|  AevumSnapFitnessGym | <code>&quot;Snap Fitness Gym&quot;</code> |  |\n|  AevumSummitUniversity | <code>&quot;Summit University&quot;</code> |  |\n|  AevumWatchdogSecurity | <code>&quot;Watchdog Security&quot;</code> |  |\n|  ChongqingChurchOfTheMachineGod | <code>&quot;Church of the Machine God&quot;</code> |  |\n|  ChongqingKuaiGongInternational | <code>&quot;KuaiGong International&quot;</code> |  |\n|  ChongqingSolarisSpaceSystems | <code>&quot;Solaris Space Systems&quot;</code> |  |\n|  Hospital | <code>&quot;Hospital&quot;</code> |  |\n|  IshimaGlitch | <code>&quot;0x6C1&quot;</code> |  |\n|  IshimaNovaMedical | <code>&quot;Nova Medical&quot;</code> |  |\n|  IshimaOmegaSoftware | <code>&quot;Omega Software&quot;</code> |  |\n|  IshimaStormTechnologies | <code>&quot;Storm Technologies&quot;</code> |  |\n|  NewTokyoArcade | <code>&quot;Arcade&quot;</code> |  |\n|  NewTokyoDefComm | <code>&quot;DefComm&quot;</code> |  |\n|  NewTokyoGlobalPharmaceuticals | <code>&quot;Global Pharmaceuticals&quot;</code> |  |\n|  NewTokyoNoodleBar | <code>&quot;Noodle Bar&quot;</code> |  |\n|  NewTokyoVitaLife | <code>&quot;VitaLife&quot;</code> |  |\n|  Sector12AlphaEnterprises | <code>&quot;Alpha Enterprises&quot;</code> |  |\n|  Sector12BladeIndustries | <code>&quot;Blade Industries&quot;</code> |  |\n|  Sector12CarmichaelSecurity | <code>&quot;Carmichael Security&quot;</code> |  |\n|  Sector12CIA | <code>&quot;Central Intelligence Agency&quot;</code> |  |\n|  Sector12CityHall | <code>&quot;Sector-12 City Hall&quot;</code> |  |\n|  Sector12DeltaOne | <code>&quot;DeltaOne&quot;</code> |  |\n|  Sector12FoodNStuff | <code>&quot;FoodNStuff&quot;</code> |  |\n|  Sector12FourSigma | <code>&quot;Four Sigma&quot;</code> |  |\n|  Sector12IcarusMicrosystems | <code>&quot;Icarus Microsystems&quot;</code> |  |\n|  Sector12IronGym | <code>&quot;Iron Gym&quot;</code> |  |\n|  Sector12JoesGuns | <code>&quot;Joe's Guns&quot;</code> |  |\n|  Sector12MegaCorp | <code>&quot;MegaCorp&quot;</code> |  |\n|  Sector12NSA | <code>&quot;National Security Agency&quot;</code> |  |\n|  Sector12PowerhouseGym | <code>&quot;Powerhouse Gym&quot;</code> |  |\n|  Sector12RothmanUniversity | <code>&quot;Rothman University&quot;</code> |  |\n|  Sector12UniversalEnergy | <code>&quot;Universal Energy&quot;</code> |  |\n|  Slums | <code>&quot;The Slums&quot;</code> |  |\n|  TravelAgency | <code>&quot;Travel Agency&quot;</code> |  |\n|  Void | <code>&quot;The Void&quot;</code> |  |\n|  VolhavenCompuTek | <code>&quot;CompuTek&quot;</code> |  |\n|  VolhavenHeliosLabs | <code>&quot;Helios Labs&quot;</code> |  |\n|  VolhavenLexoCorp | <code>&quot;LexoCorp&quot;</code> |  |\n|  VolhavenMilleniumFitnessGym | <code>&quot;Millenium Fitness Gym&quot;</code> |  |\n|  VolhavenNWO | <code>&quot;NWO&quot;</code> |  |\n|  VolhavenOmniaCybersystems | <code>&quot;Omnia Cybersystems&quot;</code> |  |\n|  VolhavenOmniTekIncorporated | <code>&quot;OmniTek Incorporated&quot;</code> |  |\n|  VolhavenSysCoreSecurities | <code>&quot;SysCore Securities&quot;</code> |  |\n|  VolhavenZBInstituteOfTechnology | <code>&quot;ZB Institute of Technology&quot;</code> |  |\n|  WorldStockExchange | <code>&quot;World Stock Exchange&quot;</code> |  |\n\n", "ns.locationname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [LocationName](./bitburner.locationname.md)\n\n## LocationName enum\n\nNames of all locations\n\n**Signature:**\n\n```typescript\ndeclare enum LocationName \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  AevumAeroCorp | <code>&quot;AeroCorp&quot;</code> |  |\n|  AevumBachmanAndAssociates | <code>&quot;Bachman &amp; Associates&quot;</code> |  |\n|  AevumCasino | <code>&quot;Iker Molina Casino&quot;</code> |  |\n|  AevumClarkeIncorporated | <code>&quot;Clarke Incorporated&quot;</code> |  |\n|  AevumCrushFitnessGym | <code>&quot;Crush Fitness Gym&quot;</code> |  |\n|  AevumECorp | <code>&quot;ECorp&quot;</code> |  |\n|  AevumFulcrumTechnologies | <code>&quot;Fulcrum Technologies&quot;</code> |  |\n|  AevumGalacticCybersystems | <code>&quot;Galactic Cybersystems&quot;</code> |  |\n|  AevumNetLinkTechnologies | <code>&quot;NetLink Technologies&quot;</code> |  |\n|  AevumPolice | <code>&quot;Aevum Police Headquarters&quot;</code> |  |\n|  AevumRhoConstruction | <code>&quot;Rho Construction&quot;</code> |  |\n|  AevumSnapFitnessGym | <code>&quot;Snap Fitness Gym&quot;</code> |  |\n|  AevumSummitUniversity | <code>&quot;Summit University&quot;</code> |  |\n|  AevumWatchdogSecurity | <code>&quot;Watchdog Security&quot;</code> |  |\n|  ChongqingChurchOfTheMachineGod | <code>&quot;Church of the Machine God&quot;</code> |  |\n|  ChongqingKuaiGongInternational | <code>&quot;KuaiGong International&quot;</code> |  |\n|  ChongqingSolarisSpaceSystems | <code>&quot;Solaris Space Systems&quot;</code> |  |\n|  Hospital | <code>&quot;Hospital&quot;</code> |  |\n|  IshimaGlitch | <code>&quot;0x6C1&quot;</code> |  |\n|  IshimaNovaMedical | <code>&quot;Nova Medical&quot;</code> |  |\n|  IshimaOmegaSoftware | <code>&quot;Omega Software&quot;</code> |  |\n|  IshimaStormTechnologies | <code>&quot;Storm Technologies&quot;</code> |  |\n|  NewTokyoArcade | <code>&quot;Arcade&quot;</code> |  |\n|  NewTokyoDefComm | <code>&quot;DefComm&quot;</code> |  |\n|  NewTokyoGlobalPharmaceuticals | <code>&quot;Global Pharmaceuticals&quot;</code> |  |\n|  NewTokyoNoodleBar | <code>&quot;Noodle Bar&quot;</code> |  |\n|  NewTokyoVitaLife | <code>&quot;VitaLife&quot;</code> |  |\n|  Sector12AlphaEnterprises | <code>&quot;Alpha Enterprises&quot;</code> |  |\n|  Sector12BladeIndustries | <code>&quot;Blade Industries&quot;</code> |  |\n|  Sector12CarmichaelSecurity | <code>&quot;Carmichael Security&quot;</code> |  |\n|  Sector12CIA | <code>&quot;Central Intelligence Agency&quot;</code> |  |\n|  Sector12CityHall | <code>&quot;Sector-12 City Hall&quot;</code> |  |\n|  Sector12DeltaOne | <code>&quot;DeltaOne&quot;</code> |  |\n|  Sector12FoodNStuff | <code>&quot;FoodNStuff&quot;</code> |  |\n|  Sector12FourSigma | <code>&quot;Four Sigma&quot;</code> |  |\n|  Sector12IcarusMicrosystems | <code>&quot;Icarus Microsystems&quot;</code> |  |\n|  Sector12IronGym | <code>&quot;Iron Gym&quot;</code> |  |\n|  Sector12JoesGuns | <code>&quot;Joe's Guns&quot;</code> |  |\n|  Sector12MegaCorp | <code>&quot;MegaCorp&quot;</code> |  |\n|  Sector12NSA | <code>&quot;National Security Agency&quot;</code> |  |\n|  Sector12PowerhouseGym | <code>&quot;Powerhouse Gym&quot;</code> |  |\n|  Sector12RothmanUniversity | <code>&quot;Rothman University&quot;</code> |  |\n|  Sector12UniversalEnergy | <code>&quot;Universal Energy&quot;</code> |  |\n|  Slums | <code>&quot;The Slums&quot;</code> |  |\n|  TravelAgency | <code>&quot;Travel Agency&quot;</code> |  |\n|  Void | <code>&quot;The Void&quot;</code> |  |\n|  VolhavenCompuTek | <code>&quot;CompuTek&quot;</code> |  |\n|  VolhavenHeliosLabs | <code>&quot;Helios Labs&quot;</code> |  |\n|  VolhavenLexoCorp | <code>&quot;LexoCorp&quot;</code> |  |\n|  VolhavenMilleniumFitnessGym | <code>&quot;Millenium Fitness Gym&quot;</code> |  |\n|  VolhavenNWO | <code>&quot;NWO&quot;</code> |  |\n|  VolhavenOmniaCybersystems | <code>&quot;Omnia Cybersystems&quot;</code> |  |\n|  VolhavenOmniTekIncorporated | <code>&quot;OmniTek Incorporated&quot;</code> |  |\n|  VolhavenSysCoreSecurities | <code>&quot;SysCore Securities&quot;</code> |  |\n|  VolhavenZBInstituteOfTechnology | <code>&quot;ZB Institute of Technology&quot;</code> |  |\n|  WorldStockExchange | <code>&quot;World Stock Exchange&quot;</code> |  |\n\n", "bitburner.singularity.softreset.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [softReset](./bitburner.singularity.softreset.md)\n\n## Singularity.softReset() method\n\nSoft reset the game.\n\n**Signature:**\n\n```typescript\nsoftReset(cbScript: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  cbScript | string | This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will perform a reset even if you don\u2019t have any augmentation installed.\n\n", "ns.singularity.softreset.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [softReset](./bitburner.singularity.softreset.md)\n\n## Singularity.softReset() method\n\nSoft reset the game.\n\n**Signature:**\n\n```typescript\nsoftReset(cbScript: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  cbScript | string | This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function will perform a reset even if you don\u2019t have any augmentation installed.\n\n", "bitburner.ns.getscriptram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptRam](./bitburner.ns.getscriptram.md)\n\n## NS.getScriptRam() method\n\nGet the ram cost of a script.\n\n**Signature:**\n\n```typescript\ngetScriptRam(script: string, host?: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script. This is case-sensitive. |\n|  host | string | _(Optional)_ Hostname of target server the script is located on. This is optional. If it is not specified then the function will use the current server as the target server. |\n\n**Returns:**\n\nnumber\n\nAmount of RAM (in GB) required to run the specified script on the target server, and 0 if the script does not exist.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of RAM required to run the specified script on the target server. Returns 0 if the script does not exist.\n\n", "ns.ns.getscriptram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptRam](./bitburner.ns.getscriptram.md)\n\n## NS.getScriptRam() method\n\nGet the ram cost of a script.\n\n**Signature:**\n\n```typescript\ngetScriptRam(script: string, host?: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script. This is case-sensitive. |\n|  host | string | _(Optional)_ Hostname of target server the script is located on. This is optional. If it is not specified then the function will use the current server as the target server. |\n\n**Returns:**\n\nnumber\n\nAmount of RAM (in GB) required to run the specified script on the target server, and 0 if the script does not exist.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of RAM required to run the specified script on the target server. Returns 0 if the script does not exist.\n\n", "bitburner.gangtaskstats.ishacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [isHacking](./bitburner.gangtaskstats.ishacking.md)\n\n## GangTaskStats.isHacking property\n\nIs a task of a hacking gang\n\n**Signature:**\n\n```typescript\nisHacking: boolean;\n```\n", "ns.gangtaskstats.ishacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [isHacking](./bitburner.gangtaskstats.ishacking.md)\n\n## GangTaskStats.isHacking property\n\nIs a task of a hacking gang\n\n**Signature:**\n\n```typescript\nisHacking: boolean;\n```\n", "bitburner.sleevesynchrotask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveSynchroTask](./bitburner.sleevesynchrotask.md)\n\n## SleeveSynchroTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveSynchroTask = { type: \"SYNCHRO\" };\n```\n", "ns.sleevesynchrotask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveSynchroTask](./bitburner.sleevesynchrotask.md)\n\n## SleeveSynchroTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveSynchroTask = { type: \"SYNCHRO\" };\n```\n", "bitburner.warehouseapi.upgradewarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [upgradeWarehouse](./bitburner.warehouseapi.upgradewarehouse.md)\n\n## WarehouseAPI.upgradeWarehouse() method\n\nUpgrade warehouse\n\n**Signature:**\n\n```typescript\nupgradeWarehouse(divisionName: string, city: CityName | `${CityName}`, amt?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  amt | number | _(Optional)_ amount of upgrades defaults to 1 |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.upgradewarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [upgradeWarehouse](./bitburner.warehouseapi.upgradewarehouse.md)\n\n## WarehouseAPI.upgradeWarehouse() method\n\nUpgrade warehouse\n\n**Signature:**\n\n```typescript\nupgradeWarehouse(divisionName: string, city: CityName | `${CityName}`, amt?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  amt | number | _(Optional)_ amount of upgrades defaults to 1 |\n\n**Returns:**\n\nvoid\n\n", "bitburner.stanek.placefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [placeFragment](./bitburner.stanek.placefragment.md)\n\n## Stanek.placeFragment() method\n\nPlace fragment on Stanek's Gift.\n\n**Signature:**\n\n```typescript\nplaceFragment(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | X against which to align the top left of the fragment. |\n|  rootY | number | Y against which to align the top left of the fragment. |\n|  rotation | number | A number from 0 to 3, the mount of 90 degree turn to take. |\n|  fragmentId | number | ID of the fragment to place. |\n\n**Returns:**\n\nboolean\n\ntrue if the fragment can be placed at that position. false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "ns.stanek.placefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [placeFragment](./bitburner.stanek.placefragment.md)\n\n## Stanek.placeFragment() method\n\nPlace fragment on Stanek's Gift.\n\n**Signature:**\n\n```typescript\nplaceFragment(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | X against which to align the top left of the fragment. |\n|  rootY | number | Y against which to align the top left of the fragment. |\n|  rotation | number | A number from 0 to 3, the mount of 90 degree turn to take. |\n|  fragmentId | number | ID of the fragment to place. |\n\n**Returns:**\n\nboolean\n\ntrue if the fragment can be placed at that position. false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "bitburner.ns.fileexists.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [fileExists](./bitburner.ns.fileexists.md)\n\n## NS.fileExists() method\n\nCheck if a file exists.\n\n**Signature:**\n\n```typescript\nfileExists(filename: string, host?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of file to check. |\n|  host | string | _(Optional)_ Host of target server. This is optional. If it is not specified then the function will use the current server as the target server. |\n\n**Returns:**\n\nboolean\n\nTrue if specified file exists, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns a boolean indicating whether the specified file exists on the target server. The filename for scripts is case-sensitive, but for other types of files it is not. For example, fileExists(\u201cbrutessh.exe\u201d) will work fine, even though the actual program is named 'BruteSSH.exe'.\n\nIf the hostname/ip argument is omitted, then the function will search through the current server (the server running the script that calls this function) for the file.\n\n\\*\n\n## Example\n\n\n```js\n// The function call will return true if the script named foo.js exists on the foodnstuff server, and false otherwise.\nns.fileExists(\"foo.js\", \"foodnstuff\");\n\n// The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\nns.fileExists(\"ftpcrack.exe\");\n```\n\n", "ns.ns.fileexists.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [fileExists](./bitburner.ns.fileexists.md)\n\n## NS.fileExists() method\n\nCheck if a file exists.\n\n**Signature:**\n\n```typescript\nfileExists(filename: string, host?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of file to check. |\n|  host | string | _(Optional)_ Host of target server. This is optional. If it is not specified then the function will use the current server as the target server. |\n\n**Returns:**\n\nboolean\n\nTrue if specified file exists, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns a boolean indicating whether the specified file exists on the target server. The filename for scripts is case-sensitive, but for other types of files it is not. For example, fileExists(\u201cbrutessh.exe\u201d) will work fine, even though the actual program is named 'BruteSSH.exe'.\n\nIf the hostname/ip argument is omitted, then the function will search through the current server (the server running the script that calls this function) for the file.\n\n\\*\n\n## Example\n\n\n```js\n// The function call will return true if the script named foo.js exists on the foodnstuff server, and false otherwise.\nns.fileExists(\"foo.js\", \"foodnstuff\");\n\n// The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\nns.fileExists(\"ftpcrack.exe\");\n```\n\n", "bitburner.gang.getmembernames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getMemberNames](./bitburner.gang.getmembernames.md)\n\n## Gang.getMemberNames() method\n\nList all gang members.\n\n**Signature:**\n\n```typescript\ngetMemberNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nNames of all Gang members.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the names of all Gang members\n\n", "ns.gang.getmembernames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getMemberNames](./bitburner.gang.getmembernames.md)\n\n## Gang.getMemberNames() method\n\nList all gang members.\n\n**Signature:**\n\n```typescript\ngetMemberNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nNames of all Gang members.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the names of all Gang members\n\n", "bitburner.corpindustrydata.startingcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [startingCost](./bitburner.corpindustrydata.startingcost.md)\n\n## CorpIndustryData.startingCost property\n\n**Signature:**\n\n```typescript\nstartingCost: number;\n```\n", "ns.corpindustrydata.startingcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [startingCost](./bitburner.corpindustrydata.startingcost.md)\n\n## CorpIndustryData.startingCost property\n\n**Signature:**\n\n```typescript\nstartingCost: number;\n```\n", "bitburner.userinterfacetheme.secondary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [secondary](./bitburner.userinterfacetheme.secondary.md)\n\n## UserInterfaceTheme.secondary property\n\n**Signature:**\n\n```typescript\nsecondary: string;\n```\n", "ns.userinterfacetheme.secondary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [secondary](./bitburner.userinterfacetheme.secondary.md)\n\n## UserInterfaceTheme.secondary property\n\n**Signature:**\n\n```typescript\nsecondary: string;\n```\n", "bitburner.infiltrationreward.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md)\n\n## InfiltrationReward interface\n\n\n**Signature:**\n\n```typescript\ninterface InfiltrationReward \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [sellCash](./bitburner.infiltrationreward.sellcash.md) |  | number |  |\n|  [SoARep](./bitburner.infiltrationreward.soarep.md) |  | number |  |\n|  [tradeRep](./bitburner.infiltrationreward.traderep.md) |  | number |  |\n\n", "ns.infiltrationreward.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md)\n\n## InfiltrationReward interface\n\n\n**Signature:**\n\n```typescript\ninterface InfiltrationReward \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [sellCash](./bitburner.infiltrationreward.sellcash.md) |  | number |  |\n|  [SoARep](./bitburner.infiltrationreward.soarep.md) |  | number |  |\n|  [tradeRep](./bitburner.infiltrationreward.traderep.md) |  | number |  |\n\n", "bitburner.corpconstants.researchnamesproductonly.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [researchNamesProductOnly](./bitburner.corpconstants.researchnamesproductonly.md)\n\n## CorpConstants.researchNamesProductOnly property\n\nNames of all researches only available to product industries\n\n**Signature:**\n\n```typescript\nresearchNamesProductOnly: CorpResearchName[];\n```\n", "ns.corpconstants.researchnamesproductonly.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [researchNamesProductOnly](./bitburner.corpconstants.researchnamesproductonly.md)\n\n## CorpConstants.researchNamesProductOnly property\n\nNames of all researches only available to product industries\n\n**Signature:**\n\n```typescript\nresearchNamesProductOnly: CorpResearchName[];\n```\n", "bitburner.corporation.getunlockupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getUnlockUpgradeCost](./bitburner.corporation.getunlockupgradecost.md)\n\n## Corporation.getUnlockUpgradeCost() method\n\nGets the cost to unlock a one time unlockable upgrade\n\n**Signature:**\n\n```typescript\ngetUnlockUpgradeCost(upgradeName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nnumber\n\ncost of the upgrade\n\n", "ns.corporation.getunlockupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getUnlockUpgradeCost](./bitburner.corporation.getunlockupgradecost.md)\n\n## Corporation.getUnlockUpgradeCost() method\n\nGets the cost to unlock a one time unlockable upgrade\n\n**Signature:**\n\n```typescript\ngetUnlockUpgradeCost(upgradeName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nnumber\n\ncost of the upgrade\n\n", "bitburner.moneysource.corporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [corporation](./bitburner.moneysource.corporation.md)\n\n## MoneySource.corporation property\n\n**Signature:**\n\n```typescript\ncorporation: number;\n```\n", "ns.moneysource.corporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [corporation](./bitburner.moneysource.corporation.md)\n\n## MoneySource.corporation property\n\n**Signature:**\n\n```typescript\ncorporation: number;\n```\n", "bitburner.bladeburner.getactioncountremaining.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionCountRemaining](./bitburner.bladeburner.getactioncountremaining.md)\n\n## Bladeburner.getActionCountRemaining() method\n\nGet action count remaining.\n\n**Signature:**\n\n```typescript\ngetActionCountRemaining(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nRemaining count of the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the remaining count of the specified action.\n\nNote that this is meant to be used for Contracts and Operations. This function will return \u2018Infinity\u2019 for actions such as Training and Field Analysis. This function will return 1 for BlackOps not yet completed regardless of whether the player has the required rank to attempt the mission or not.\n\n", "ns.bladeburner.getactioncountremaining.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionCountRemaining](./bitburner.bladeburner.getactioncountremaining.md)\n\n## Bladeburner.getActionCountRemaining() method\n\nGet action count remaining.\n\n**Signature:**\n\n```typescript\ngetActionCountRemaining(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nRemaining count of the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the remaining count of the specified action.\n\nNote that this is meant to be used for Contracts and Operations. This function will return \u2018Infinity\u2019 for actions such as Training and Field Analysis. This function will return 1 for BlackOps not yet completed regardless of whether the player has the required rank to attempt the mission or not.\n\n", "bitburner.bitnodemultipliers.codingcontractmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CodingContractMoney](./bitburner.bitnodemultipliers.codingcontractmoney.md)\n\n## BitNodeMultipliers.CodingContractMoney property\n\nInfluences the amount of money gained from completing Coding Contracts\n\n**Signature:**\n\n```typescript\nCodingContractMoney: number;\n```\n", "ns.bitnodemultipliers.codingcontractmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CodingContractMoney](./bitburner.bitnodemultipliers.codingcontractmoney.md)\n\n## BitNodeMultipliers.CodingContractMoney property\n\nInfluences the amount of money gained from completing Coding Contracts\n\n**Signature:**\n\n```typescript\nCodingContractMoney: number;\n```\n", "bitburner.product.citydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [cityData](./bitburner.product.citydata.md)\n\n## Product.cityData property\n\nData refers to the production, sale, and quantity of the products These values are specific to a city For each city, the data is \\[qty, prod, sell\\]\n\n**Signature:**\n\n```typescript\ncityData: Record<CityName | `${CityName}`, number[]>;\n```\n", "ns.product.citydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [cityData](./bitburner.product.citydata.md)\n\n## Product.cityData property\n\nData refers to the production, sale, and quantity of the products These values are specific to a city For each city, the data is \\[qty, prod, sell\\]\n\n**Signature:**\n\n```typescript\ncityData: Record<CityName | `${CityName}`, number[]>;\n```\n", "bitburner.formulas.hacknetservers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [hacknetServers](./bitburner.formulas.hacknetservers.md)\n\n## Formulas.hacknetServers property\n\nHacknet Servers formulas\n\n**Signature:**\n\n```typescript\nhacknetServers: HacknetServersFormulas;\n```\n", "ns.formulas.hacknetservers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [hacknetServers](./bitburner.formulas.hacknetservers.md)\n\n## Formulas.hacknetServers property\n\nHacknet Servers formulas\n\n**Signature:**\n\n```typescript\nhacknetServers: HacknetServersFormulas;\n```\n", "bitburner.bitnodemultipliers.foursigmamarketdataapicost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FourSigmaMarketDataApiCost](./bitburner.bitnodemultipliers.foursigmamarketdataapicost.md)\n\n## BitNodeMultipliers.FourSigmaMarketDataApiCost property\n\nInfluences how much it costs to unlock the stock market's 4S Market Data API\n\n**Signature:**\n\n```typescript\nFourSigmaMarketDataApiCost: number;\n```\n", "ns.bitnodemultipliers.foursigmamarketdataapicost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FourSigmaMarketDataApiCost](./bitburner.bitnodemultipliers.foursigmamarketdataapicost.md)\n\n## BitNodeMultipliers.FourSigmaMarketDataApiCost property\n\nInfluences how much it costs to unlock the stock market's 4S Market Data API\n\n**Signature:**\n\n```typescript\nFourSigmaMarketDataApiCost: number;\n```\n", "bitburner.hacknetserverconstants.basecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [BaseCost](./bitburner.hacknetserverconstants.basecost.md)\n\n## HacknetServerConstants.BaseCost property\n\nBase cost for a new server\n\n**Signature:**\n\n```typescript\nBaseCost: number;\n```\n", "ns.hacknetserverconstants.basecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [BaseCost](./bitburner.hacknetserverconstants.basecost.md)\n\n## HacknetServerConstants.BaseCost property\n\nBase cost for a new server\n\n**Signature:**\n\n```typescript\nBaseCost: number;\n```\n", "bitburner.sleeve.purchasesleeveaug.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [purchaseSleeveAug](./bitburner.sleeve.purchasesleeveaug.md)\n\n## Sleeve.purchaseSleeveAug() method\n\nPurchase an aug for a sleeve.\n\n**Signature:**\n\n```typescript\npurchaseSleeveAug(sleeveNumber: number, augName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to buy an aug for. |\n|  augName | string | Name of the aug to buy. Must be an exact match. |\n\n**Returns:**\n\nboolean\n\nTrue if the aug was purchased and installed on the sleeve, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn true if the aug was purchased and installed on the sleeve.\n\n", "ns.sleeve.purchasesleeveaug.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [purchaseSleeveAug](./bitburner.sleeve.purchasesleeveaug.md)\n\n## Sleeve.purchaseSleeveAug() method\n\nPurchase an aug for a sleeve.\n\n**Signature:**\n\n```typescript\npurchaseSleeveAug(sleeveNumber: number, augName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to buy an aug for. |\n|  augName | string | Name of the aug to buy. Must be an exact match. |\n\n**Returns:**\n\nboolean\n\nTrue if the aug was purchased and installed on the sleeve, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn true if the aug was purchased and installed on the sleeve.\n\n", "bitburner.officeapi.getofficesizeupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getOfficeSizeUpgradeCost](./bitburner.officeapi.getofficesizeupgradecost.md)\n\n## OfficeAPI.getOfficeSizeUpgradeCost() method\n\nCost to Upgrade office size.\n\n**Signature:**\n\n```typescript\ngetOfficeSizeUpgradeCost(divisionName: string, city: CityName | `${CityName}`, asize: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  asize | number |  |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the office\n\n", "ns.officeapi.getofficesizeupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getOfficeSizeUpgradeCost](./bitburner.officeapi.getofficesizeupgradecost.md)\n\n## OfficeAPI.getOfficeSizeUpgradeCost() method\n\nCost to Upgrade office size.\n\n**Signature:**\n\n```typescript\ngetOfficeSizeUpgradeCost(divisionName: string, city: CityName | `${CityName}`, asize: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  asize | number |  |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the office\n\n", "bitburner.sleeveperson.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md)\n\n## SleevePerson interface\n\n\n**Signature:**\n\n```typescript\ninterface SleevePerson extends Person \n```\n**Extends:** [Person](./bitburner.person.md)\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [memory](./bitburner.sleeveperson.memory.md) |  | number | Number 1-100 initial Value of sync on BN start |\n|  [shock](./bitburner.sleeveperson.shock.md) |  | number | Number 0-100 Experience earned and shared is multiplied with shock% before sync% |\n|  [storedCycles](./bitburner.sleeveperson.storedcycles.md) |  | number | Number of 200ms cycles which are stored as bonus time |\n|  [sync](./bitburner.sleeveperson.sync.md) |  | number | Number 1-100 Experience earned by this sleeve and shared with the player is multiplied with sync% after shock% |\n\n", "ns.sleeveperson.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md)\n\n## SleevePerson interface\n\n\n**Signature:**\n\n```typescript\ninterface SleevePerson extends Person \n```\n**Extends:** [Person](./bitburner.person.md)\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [memory](./bitburner.sleeveperson.memory.md) |  | number | Number 1-100 initial Value of sync on BN start |\n|  [shock](./bitburner.sleeveperson.shock.md) |  | number | Number 0-100 Experience earned and shared is multiplied with shock% before sync% |\n|  [storedCycles](./bitburner.sleeveperson.storedcycles.md) |  | number | Number of 200ms cycles which are stored as bonus time |\n|  [sync](./bitburner.sleeveperson.sync.md) |  | number | Number 1-100 Experience earned by this sleeve and shared with the player is multiplied with sync% after shock% |\n\n", "bitburner.bitnodemultipliers.defenselevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [DefenseLevelMultiplier](./bitburner.bitnodemultipliers.defenselevelmultiplier.md)\n\n## BitNodeMultipliers.DefenseLevelMultiplier property\n\nInfluences how quickly the player's defense level (not exp) scales\n\n**Signature:**\n\n```typescript\nDefenseLevelMultiplier: number;\n```\n", "ns.bitnodemultipliers.defenselevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [DefenseLevelMultiplier](./bitburner.bitnodemultipliers.defenselevelmultiplier.md)\n\n## BitNodeMultipliers.DefenseLevelMultiplier property\n\nInfluences how quickly the player's defense level (not exp) scales\n\n**Signature:**\n\n```typescript\nDefenseLevelMultiplier: number;\n```\n", "bitburner.crimestats.defense_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [defense\\_success\\_weight](./bitburner.crimestats.defense_success_weight.md)\n\n## CrimeStats.defense\\_success\\_weight property\n\ndefense level impact on success change of the crime\n\n**Signature:**\n\n```typescript\ndefense_success_weight: number;\n```\n", "ns.crimestats.defense_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [defense\\_success\\_weight](./bitburner.crimestats.defense_success_weight.md)\n\n## CrimeStats.defense\\_success\\_weight property\n\ndefense level impact on success change of the crime\n\n**Signature:**\n\n```typescript\ndefense_success_weight: number;\n```\n", "bitburner.moneysource.stock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [stock](./bitburner.moneysource.stock.md)\n\n## MoneySource.stock property\n\n**Signature:**\n\n```typescript\nstock: number;\n```\n", "ns.moneysource.stock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [stock](./bitburner.moneysource.stock.md)\n\n## MoneySource.stock property\n\n**Signature:**\n\n```typescript\nstock: number;\n```\n", "bitburner.ilocation.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ILocation](./bitburner.ilocation.md) &gt; [name](./bitburner.ilocation.name.md)\n\n## ILocation.name property\n\n**Signature:**\n\n```typescript\nname: LocationName;\n```\n", "ns.ilocation.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ILocation](./bitburner.ilocation.md) &gt; [name](./bitburner.ilocation.name.md)\n\n## ILocation.name property\n\n**Signature:**\n\n```typescript\nname: LocationName;\n```\n", "bitburner.bitnodemultipliers.serverweakenrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerWeakenRate](./bitburner.bitnodemultipliers.serverweakenrate.md)\n\n## BitNodeMultipliers.ServerWeakenRate property\n\nInfluences the weaken amount per invocation against a server.\n\n**Signature:**\n\n```typescript\nServerWeakenRate: number;\n```\n", "ns.bitnodemultipliers.serverweakenrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerWeakenRate](./bitburner.bitnodemultipliers.serverweakenrate.md)\n\n## BitNodeMultipliers.ServerWeakenRate property\n\nInfluences the weaken amount per invocation against a server.\n\n**Signature:**\n\n```typescript\nServerWeakenRate: number;\n```\n", "bitburner.warehouseapi.exportmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [exportMaterial](./bitburner.warehouseapi.exportmaterial.md)\n\n## WarehouseAPI.exportMaterial() method\n\nSet material export data\n\n**Signature:**\n\n```typescript\nexportMaterial(\n    sourceDivision: string,\n    sourceCity: CityName | `${CityName}`,\n    targetDivision: string,\n    targetCity: CityName | `${CityName}`,\n    materialName: string,\n    amt: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sourceDivision | string | Source division |\n|  sourceCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Source city |\n|  targetDivision | string | Target division |\n|  targetCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Target city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to export. |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.exportmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [exportMaterial](./bitburner.warehouseapi.exportmaterial.md)\n\n## WarehouseAPI.exportMaterial() method\n\nSet material export data\n\n**Signature:**\n\n```typescript\nexportMaterial(\n    sourceDivision: string,\n    sourceCity: CityName | `${CityName}`,\n    targetDivision: string,\n    targetCity: CityName | `${CityName}`,\n    materialName: string,\n    amt: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sourceDivision | string | Source division |\n|  sourceCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Source city |\n|  targetDivision | string | Target division |\n|  targetCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Target city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to export. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.ns.getplayer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPlayer](./bitburner.ns.getplayer.md)\n\n## NS.getPlayer() method\n\nGet information about the player.\n\n**Signature:**\n\n```typescript\ngetPlayer(): Player;\n```\n**Returns:**\n\n[Player](./bitburner.player.md)\n\nPlayer info\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nReturns an object with information on the current player.\n\n", "ns.ns.getplayer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPlayer](./bitburner.ns.getplayer.md)\n\n## NS.getPlayer() method\n\nGet information about the player.\n\n**Signature:**\n\n```typescript\ngetPlayer(): Player;\n```\n**Returns:**\n\n[Player](./bitburner.player.md)\n\nPlayer info\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nReturns an object with information on the current player.\n\n", "bitburner.gangformulas.wantedlevelgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [wantedLevelGain](./bitburner.gangformulas.wantedlevelgain.md)\n\n## GangFormulas.wantedLevelGain() method\n\nCalculate wanted gain per tick.\n\n**Signature:**\n\n```typescript\nwantedLevelGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n|  member | [GangMemberInfo](./bitburner.gangmemberinfo.md) | Member info from [getMemberInformation](./bitburner.gang.getmemberinformation.md) |\n|  task | [GangTaskStats](./bitburner.gangtaskstats.md) | Task info from [getTaskStats](./bitburner.gang.gettaskstats.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated wanted gain.\n\n", "ns.gangformulas.wantedlevelgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [wantedLevelGain](./bitburner.gangformulas.wantedlevelgain.md)\n\n## GangFormulas.wantedLevelGain() method\n\nCalculate wanted gain per tick.\n\n**Signature:**\n\n```typescript\nwantedLevelGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n|  member | [GangMemberInfo](./bitburner.gangmemberinfo.md) | Member info from [getMemberInformation](./bitburner.gang.getmemberinformation.md) |\n|  task | [GangTaskStats](./bitburner.gangtaskstats.md) | Task info from [getTaskStats](./bitburner.gang.gettaskstats.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated wanted gain.\n\n", "bitburner.ns.tprintf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tprintf](./bitburner.ns.tprintf.md)\n\n## NS.tprintf() method\n\nPrints a raw value or a variable to the Terminal.\n\n**Signature:**\n\n```typescript\ntprintf(format: string, ...values: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | Format of the message. |\n|  values | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n- See [print](./bitburner.ns.print.md) for how to add color to your printed strings.\n\n- See [printf](./bitburner.ns.printf.md) for examples on formatted strings.\n\n- For more detail, see: https://github.com/alexei/sprintf.js\n\n", "ns.ns.tprintf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tprintf](./bitburner.ns.tprintf.md)\n\n## NS.tprintf() method\n\nPrints a raw value or a variable to the Terminal.\n\n**Signature:**\n\n```typescript\ntprintf(format: string, ...values: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | Format of the message. |\n|  values | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n- See [print](./bitburner.ns.print.md) for how to add color to your printed strings.\n\n- See [printf](./bitburner.ns.printf.md) for examples on formatted strings.\n\n- For more detail, see: https://github.com/alexei/sprintf.js\n\n", "bitburner.moneysources.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySources](./bitburner.moneysources.md)\n\n## MoneySources interface\n\n\n**Signature:**\n\n```typescript\ninterface MoneySources \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [sinceInstall](./bitburner.moneysources.sinceinstall.md) |  | [MoneySource](./bitburner.moneysource.md) |  |\n|  [sinceStart](./bitburner.moneysources.sincestart.md) |  | [MoneySource](./bitburner.moneysource.md) |  |\n\n", "ns.moneysources.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySources](./bitburner.moneysources.md)\n\n## MoneySources interface\n\n\n**Signature:**\n\n```typescript\ninterface MoneySources \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [sinceInstall](./bitburner.moneysources.sinceinstall.md) |  | [MoneySource](./bitburner.moneysource.md) |  |\n|  [sinceStart](./bitburner.moneysources.sincestart.md) |  | [MoneySource](./bitburner.moneysource.md) |  |\n\n", "bitburner.office.maxhap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [maxHap](./bitburner.office.maxhap.md)\n\n## Office.maxHap property\n\nMaximum happiness of the employees\n\n**Signature:**\n\n```typescript\nmaxHap: number;\n```\n", "ns.office.maxhap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [maxHap](./bitburner.office.maxhap.md)\n\n## Office.maxHap property\n\nMaximum happiness of the employees\n\n**Signature:**\n\n```typescript\nmaxHap: number;\n```\n", "bitburner.multipliers.crime_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [crime\\_money](./bitburner.multipliers.crime_money.md)\n\n## Multipliers.crime\\_money property\n\nMultiplier to amount of money gained from crimes\n\n**Signature:**\n\n```typescript\ncrime_money: number;\n```\n", "ns.multipliers.crime_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [crime\\_money](./bitburner.multipliers.crime_money.md)\n\n## Multipliers.crime\\_money property\n\nMultiplier to amount of money gained from crimes\n\n**Signature:**\n\n```typescript\ncrime_money: number;\n```\n", "bitburner.nodestats.ramused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [ramUsed](./bitburner.nodestats.ramused.md)\n\n## NodeStats.ramUsed property\n\nNode's used RAM (GB)\n\n**Signature:**\n\n```typescript\nramUsed?: number;\n```\n", "ns.nodestats.ramused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [ramUsed](./bitburner.nodestats.ramused.md)\n\n## NodeStats.ramUsed property\n\nNode's used RAM (GB)\n\n**Signature:**\n\n```typescript\nramUsed?: number;\n```\n", "bitburner.singularity.purchasetor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [purchaseTor](./bitburner.singularity.purchasetor.md)\n\n## Singularity.purchaseTor() method\n\nPurchase the TOR router.\n\n**Signature:**\n\n```typescript\npurchaseTor(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if actions is successful or you already own TOR router, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function allows you to automatically purchase a TOR router. The cost for purchasing a TOR router using this function is the same as if you were to manually purchase one.\n\n", "ns.singularity.purchasetor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [purchaseTor](./bitburner.singularity.purchasetor.md)\n\n## Singularity.purchaseTor() method\n\nPurchase the TOR router.\n\n**Signature:**\n\n```typescript\npurchaseTor(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if actions is successful or you already own TOR router, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function allows you to automatically purchase a TOR router. The cost for purchasing a TOR router using this function is the same as if you were to manually purchase one.\n\n", "bitburner.gangtaskstats.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [name](./bitburner.gangtaskstats.name.md)\n\n## GangTaskStats.name property\n\nTask name\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.gangtaskstats.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [name](./bitburner.gangtaskstats.name.md)\n\n## GangTaskStats.name property\n\nTask name\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.server.servergrowth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [serverGrowth](./bitburner.server.servergrowth.md)\n\n## Server.serverGrowth property\n\nParameter that affects how effectively this server's money can be increased using the grow() Netscript function\n\n**Signature:**\n\n```typescript\nserverGrowth: number;\n```\n", "ns.server.servergrowth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [serverGrowth](./bitburner.server.servergrowth.md)\n\n## Server.serverGrowth property\n\nParameter that affects how effectively this server's money can be increased using the grow() Netscript function\n\n**Signature:**\n\n```typescript\nserverGrowth: number;\n```\n", "bitburner.ns.prompt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [prompt](./bitburner.ns.prompt.md)\n\n## NS.prompt() method\n\nPrompt the player with an input modal.\n\n**Signature:**\n\n```typescript\nprompt(\n    txt: string,\n    options?: { type?: \"boolean\" | \"text\" | \"select\"; choices?: string[] },\n  ): Promise<boolean | string>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  txt | string | Text to appear in the prompt dialog box. |\n|  options | { type?: \"boolean\" \\| \"text\" \\| \"select\"; choices?: string\\[\\] } | _(Optional)_ Options to modify the prompt the player is shown. |\n\n**Returns:**\n\nPromise&lt;boolean \\| string&gt;\n\nTrue if the player clicks \u201cYes\u201d; false if the player clicks \u201cNo\u201d; or the value entered by the player.\n\n## Remarks\n\nRAM cost: 0 GB\n\nPrompts the player with a dialog box. Here is an explanation of the various options.\n\n- `options.type` is not provided to the function. If `options.type` is left out and only a string is passed to the function, then the default behavior is to create a boolean dialog box.\n\n- `options.type` has value `undefined` or `\"boolean\"`<!-- -->. A boolean dialog box is created. The player is shown \"Yes\" and \"No\" prompts, which return true and false respectively. The script's execution is halted until the player presses either the \"Yes\" or \"No\" button.\n\n- `options.type` has value `\"text\"`<!-- -->. The player is given a text field to enter free-form text. The script's execution is halted until the player enters some text and/or presses the \"Confirm\" button.\n\n- `options.type` has value `\"select\"`<!-- -->. The player is shown a drop-down field. Choosing type `\"select\"` will require an array to be passed via the `options.choices` property. The array can be an array of strings, an array of numbers (not BigInt numbers), or a mixture of both numbers and strings. Any other types of array elements will result in an error or an undefined/unexpected behavior. The `options.choices` property will be ignored if `options.type` has a value other than `\"select\"`<!-- -->. The script's execution is halted until the player chooses one of the provided options and presses the \"Confirm\" button.\n\n## Example 1\n\n\n```ts\n// NS1\n// A Yes/No question. The default is to create a boolean dialog box.\nvar queryA = \"Do you enjoy Bitburner?\";\nvar resultA = prompt(queryA);\ntprint(queryA + \" \" + resultA);\n\n// Another Yes/No question. Can also create a boolean dialog box by explicitly\n// passing the option {\"type\": \"boolean\"}.\nvar queryB = \"Is programming fun?\";\nvar resultB = prompt(queryB, { type: \"boolean\" });\ntprint(queryB + \" \" + resultB);\n\n// Free-form text box.\nvar resultC = prompt(\"Please enter your name.\", { type: \"text\" });\ntprint(\"Hello, \" + resultC + \".\");\n\n// A drop-down list.\nvar resultD = prompt(\"Please select your favorite fruit.\", {\n    type: \"select\",\n    choices: [\"Apple\", \"Banana\", \"Orange\", \"Pear\", \"Strawberry\"]\n});\ntprint(\"Your favorite fruit is \" + resultD.toLowerCase() + \".\");\n```\n\n## Example 2\n\n\n```ts\n// NS2\n// A Yes/No question. The default is to create a boolean dialog box.\nconst queryA = \"Do you enjoy Bitburner?\";\nconst resultA = await ns.prompt(queryA);\nns.tprint(`${queryA} ${resultA}`);\n\n// Another Yes/No question. Can also create a boolean dialog box by explicitly\n// passing the option {\"type\": \"boolean\"}.\nconst queryB = \"Is programming fun?\";\nconst resultB = await ns.prompt(queryB, { type: \"boolean\" });\nns.tprint(`${queryB} ${resultB}`);\n\n// Free-form text box.\nconst resultC = await ns.prompt(\"Please enter your name.\", { type: \"text\" });\nns.tprint(`Hello, ${resultC}.`);\n\n// A drop-down list.\nconst resultD = await ns.prompt(\"Please select your favorite fruit.\", {\n    type: \"select\",\n    choices: [\"Apple\", \"Banana\", \"Orange\", \"Pear\", \"Strawberry\"]\n});\nns.tprint(`Your favorite fruit is ${resultD.toLowerCase()}.`);\n```\n\n", "ns.ns.prompt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [prompt](./bitburner.ns.prompt.md)\n\n## NS.prompt() method\n\nPrompt the player with an input modal.\n\n**Signature:**\n\n```typescript\nprompt(\n    txt: string,\n    options?: { type?: \"boolean\" | \"text\" | \"select\"; choices?: string[] },\n  ): Promise<boolean | string>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  txt | string | Text to appear in the prompt dialog box. |\n|  options | { type?: \"boolean\" \\| \"text\" \\| \"select\"; choices?: string\\[\\] } | _(Optional)_ Options to modify the prompt the player is shown. |\n\n**Returns:**\n\nPromise&lt;boolean \\| string&gt;\n\nTrue if the player clicks \u201cYes\u201d; false if the player clicks \u201cNo\u201d; or the value entered by the player.\n\n## Remarks\n\nRAM cost: 0 GB\n\nPrompts the player with a dialog box. Here is an explanation of the various options.\n\n- `options.type` is not provided to the function. If `options.type` is left out and only a string is passed to the function, then the default behavior is to create a boolean dialog box.\n\n- `options.type` has value `undefined` or `\"boolean\"`<!-- -->. A boolean dialog box is created. The player is shown \"Yes\" and \"No\" prompts, which return true and false respectively. The script's execution is halted until the player presses either the \"Yes\" or \"No\" button.\n\n- `options.type` has value `\"text\"`<!-- -->. The player is given a text field to enter free-form text. The script's execution is halted until the player enters some text and/or presses the \"Confirm\" button.\n\n- `options.type` has value `\"select\"`<!-- -->. The player is shown a drop-down field. Choosing type `\"select\"` will require an array to be passed via the `options.choices` property. The array can be an array of strings, an array of numbers (not BigInt numbers), or a mixture of both numbers and strings. Any other types of array elements will result in an error or an undefined/unexpected behavior. The `options.choices` property will be ignored if `options.type` has a value other than `\"select\"`<!-- -->. The script's execution is halted until the player chooses one of the provided options and presses the \"Confirm\" button.\n\n## Example 1\n\n\n```ts\n// NS1\n// A Yes/No question. The default is to create a boolean dialog box.\nvar queryA = \"Do you enjoy Bitburner?\";\nvar resultA = prompt(queryA);\ntprint(queryA + \" \" + resultA);\n\n// Another Yes/No question. Can also create a boolean dialog box by explicitly\n// passing the option {\"type\": \"boolean\"}.\nvar queryB = \"Is programming fun?\";\nvar resultB = prompt(queryB, { type: \"boolean\" });\ntprint(queryB + \" \" + resultB);\n\n// Free-form text box.\nvar resultC = prompt(\"Please enter your name.\", { type: \"text\" });\ntprint(\"Hello, \" + resultC + \".\");\n\n// A drop-down list.\nvar resultD = prompt(\"Please select your favorite fruit.\", {\n    type: \"select\",\n    choices: [\"Apple\", \"Banana\", \"Orange\", \"Pear\", \"Strawberry\"]\n});\ntprint(\"Your favorite fruit is \" + resultD.toLowerCase() + \".\");\n```\n\n## Example 2\n\n\n```ts\n// NS2\n// A Yes/No question. The default is to create a boolean dialog box.\nconst queryA = \"Do you enjoy Bitburner?\";\nconst resultA = await ns.prompt(queryA);\nns.tprint(`${queryA} ${resultA}`);\n\n// Another Yes/No question. Can also create a boolean dialog box by explicitly\n// passing the option {\"type\": \"boolean\"}.\nconst queryB = \"Is programming fun?\";\nconst resultB = await ns.prompt(queryB, { type: \"boolean\" });\nns.tprint(`${queryB} ${resultB}`);\n\n// Free-form text box.\nconst resultC = await ns.prompt(\"Please enter your name.\", { type: \"text\" });\nns.tprint(`Hello, ${resultC}.`);\n\n// A drop-down list.\nconst resultD = await ns.prompt(\"Please select your favorite fruit.\", {\n    type: \"select\",\n    choices: [\"Apple\", \"Banana\", \"Orange\", \"Pear\", \"Strawberry\"]\n});\nns.tprint(`Your favorite fruit is ${resultD.toLowerCase()}.`);\n```\n\n", "bitburner.sleeve.getsleevepurchasableaugs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleevePurchasableAugs](./bitburner.sleeve.getsleevepurchasableaugs.md)\n\n## Sleeve.getSleevePurchasableAugs() method\n\nList purchasable augs for a sleeve.\n\n**Signature:**\n\n```typescript\ngetSleevePurchasableAugs(sleeveNumber: number): AugmentPair[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve purchasable augmentations from. |\n\n**Returns:**\n\n[AugmentPair](./bitburner.augmentpair.md)<!-- -->\\[\\]\n\nList of augmentations that the player can buy for this sleeve.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a list of augmentations that the player can buy for this sleeve.\n\n", "ns.sleeve.getsleevepurchasableaugs.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleevePurchasableAugs](./bitburner.sleeve.getsleevepurchasableaugs.md)\n\n## Sleeve.getSleevePurchasableAugs() method\n\nList purchasable augs for a sleeve.\n\n**Signature:**\n\n```typescript\ngetSleevePurchasableAugs(sleeveNumber: number): AugmentPair[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve purchasable augmentations from. |\n\n**Returns:**\n\n[AugmentPair](./bitburner.augmentpair.md)<!-- -->\\[\\]\n\nList of augmentations that the player can buy for this sleeve.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a list of augmentations that the player can buy for this sleeve.\n\n", "bitburner.ns.weakenanalyze.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [weakenAnalyze](./bitburner.ns.weakenanalyze.md)\n\n## NS.weakenAnalyze() method\n\nPredict the effect of weaken.\n\n**Signature:**\n\n```typescript\nweakenAnalyze(threads: number, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  threads | number | Amount of threads that will be used. |\n|  cores | number | _(Optional)_ Optional. The number of cores of the server that would run weaken. |\n\n**Returns:**\n\nnumber\n\nThe security decrease.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the security decrease that would occur if a weaken with this many threads happened.\n\n", "ns.ns.weakenanalyze.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [weakenAnalyze](./bitburner.ns.weakenanalyze.md)\n\n## NS.weakenAnalyze() method\n\nPredict the effect of weaken.\n\n**Signature:**\n\n```typescript\nweakenAnalyze(threads: number, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  threads | number | Amount of threads that will be used. |\n|  cores | number | _(Optional)_ Optional. The number of cores of the server that would run weaken. |\n\n**Returns:**\n\nnumber\n\nThe security decrease.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the security decrease that would occur if a weaken with this many threads happened.\n\n", "bitburner.ns.httpworm.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [httpworm](./bitburner.ns.httpworm.md)\n\n## NS.httpworm() method\n\nRuns HTTPWorm.exe on a server.\n\n**Signature:**\n\n```typescript\nhttpworm(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the HTTPWorm.exe program on the target server. HTTPWorm.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nhttpworm(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.httpworm(\"foodnstuff\");\n```\n\n", "ns.ns.httpworm.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [httpworm](./bitburner.ns.httpworm.md)\n\n## NS.httpworm() method\n\nRuns HTTPWorm.exe on a server.\n\n**Signature:**\n\n```typescript\nhttpworm(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the HTTPWorm.exe program on the target server. HTTPWorm.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nhttpworm(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.httpworm(\"foodnstuff\");\n```\n\n", "bitburner.hacknetnodeconstants.upgradecoremult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [UpgradeCoreMult](./bitburner.hacknetnodeconstants.upgradecoremult.md)\n\n## HacknetNodeConstants.UpgradeCoreMult property\n\nMultiplier to increase cores\n\n**Signature:**\n\n```typescript\nUpgradeCoreMult: number;\n```\n", "ns.hacknetnodeconstants.upgradecoremult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [UpgradeCoreMult](./bitburner.hacknetnodeconstants.upgradecoremult.md)\n\n## HacknetNodeConstants.UpgradeCoreMult property\n\nMultiplier to increase cores\n\n**Signature:**\n\n```typescript\nUpgradeCoreMult: number;\n```\n", "bitburner.gangmemberinfo.agi_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_asc\\_mult](./bitburner.gangmemberinfo.agi_asc_mult.md)\n\n## GangMemberInfo.agi\\_asc\\_mult property\n\nAgility multiplier from ascensions\n\n**Signature:**\n\n```typescript\nagi_asc_mult: number;\n```\n", "ns.gangmemberinfo.agi_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_asc\\_mult](./bitburner.gangmemberinfo.agi_asc_mult.md)\n\n## GangMemberInfo.agi\\_asc\\_mult property\n\nAgility multiplier from ascensions\n\n**Signature:**\n\n```typescript\nagi_asc_mult: number;\n```\n", "bitburner.userinterfacetheme.secondarylight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [secondarylight](./bitburner.userinterfacetheme.secondarylight.md)\n\n## UserInterfaceTheme.secondarylight property\n\n**Signature:**\n\n```typescript\nsecondarylight: string;\n```\n", "ns.userinterfacetheme.secondarylight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [secondarylight](./bitburner.userinterfacetheme.secondarylight.md)\n\n## UserInterfaceTheme.secondarylight property\n\n**Signature:**\n\n```typescript\nsecondarylight: string;\n```\n", "bitburner.skills.defense.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [defense](./bitburner.skills.defense.md)\n\n## Skills.defense property\n\n**Signature:**\n\n```typescript\ndefense: number;\n```\n", "ns.skills.defense.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [defense](./bitburner.skills.defense.md)\n\n## Skills.defense property\n\n**Signature:**\n\n```typescript\ndefense: number;\n```\n", "bitburner.ns.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md)\n\n## NS interface\n\nCollection of all functions passed to scripts\n\n**Signature:**\n\n```typescript\nexport interface NS \n```\n\n## Remarks\n\n<b>Basic ns1 usage example:</b>\n\n```ts\n // Basic ns functions can be used directly\n getHostname();\n // Some related functions are gathered within a common namespace\n stock.getPrice();\n```\n[ns1 in-game docs](https://bitburner-official.readthedocs.io/en/latest/netscript/netscript1.html) <hr> <b>Basic ns2 usage example:</b>\n\n```ts\nexport async function main(ns) {\n // Basic ns functions can be accessed on the ns object\n ns.getHostname();\n // Some related functions are gathered under a sub-property of the ns object\n ns.stock.getPrice();\n // Some functions need to be awaited\n await ns.hack('n00dles');\n}\n```\n[ns2 in-game docs](https://bitburner-official.readthedocs.io/en/latest/netscript/netscriptjs.html) <hr>\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [args](./bitburner.ns.args.md) | <code>readonly</code> | (string \\| number \\| boolean)\\[\\] | Arguments passed into the script. |\n|  [bladeburner](./bitburner.ns.bladeburner.md) | <code>readonly</code> | [Bladeburner](./bitburner.bladeburner.md) | Namespace for bladeburner functions. |\n|  [codingcontract](./bitburner.ns.codingcontract.md) | <code>readonly</code> | [CodingContract](./bitburner.codingcontract.md) | Namespace for codingcontract functions. |\n|  [corporation](./bitburner.ns.corporation.md) | <code>readonly</code> | [Corporation](./bitburner.corporation.md) | Namespace for corporation functions. RAM cost: 1022.4 GB |\n|  [enums](./bitburner.ns.enums.md) |  | [NSEnums](./bitburner.nsenums.md) |  |\n|  [formulas](./bitburner.ns.formulas.md) | <code>readonly</code> | [Formulas](./bitburner.formulas.md) | Namespace for formulas functions. |\n|  [gang](./bitburner.ns.gang.md) | <code>readonly</code> | [Gang](./bitburner.gang.md) | Namespace for gang functions. |\n|  [grafting](./bitburner.ns.grafting.md) | <code>readonly</code> | [Grafting](./bitburner.grafting.md) | Namespace for grafting functions. |\n|  [hacknet](./bitburner.ns.hacknet.md) | <code>readonly</code> | [Hacknet](./bitburner.hacknet.md) | Namespace for hacknet functions. |\n|  [infiltration](./bitburner.ns.infiltration.md) | <code>readonly</code> | [Infiltration](./bitburner.infiltration.md) | Namespace for infiltration functions. RAM cost: 0 GB |\n|  [pid](./bitburner.ns.pid.md) | <code>readonly</code> | number | The current script's PID |\n|  [singularity](./bitburner.ns.singularity.md) | <code>readonly</code> | [Singularity](./bitburner.singularity.md) | Namespace for singularity functions. RAM cost: 0 GB |\n|  [sleeve](./bitburner.ns.sleeve.md) | <code>readonly</code> | [Sleeve](./bitburner.sleeve.md) | Namespace for sleeve functions. |\n|  [stanek](./bitburner.ns.stanek.md) | <code>readonly</code> | [Stanek](./bitburner.stanek.md) | Namespace for stanek functions. RAM cost: 0 GB |\n|  [stock](./bitburner.ns.stock.md) | <code>readonly</code> | [TIX](./bitburner.tix.md) | Namespace for stock functions. |\n|  [ui](./bitburner.ns.ui.md) | <code>readonly</code> | [UserInterface](./bitburner.userinterface.md) | Namespace for user interface functions. RAM cost: 0 GB |\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [alert(msg)](./bitburner.ns.alert.md) | Open up a message box. |\n|  [asleep(millis)](./bitburner.ns.asleep.md) | Suspends the script for n milliseconds. Doesn't block with concurrent calls. You should prefer 'sleep' over 'asleep' except when doing very complex UI work. |\n|  [atExit(f)](./bitburner.ns.atexit.md) | Add callback function when the script dies |\n|  [brutessh(host)](./bitburner.ns.brutessh.md) | Runs BruteSSH.exe on a server. |\n|  [clear(handle)](./bitburner.ns.clear.md) | Clear data from a file. |\n|  [clearLog()](./bitburner.ns.clearlog.md) | Clears the script\u2019s logs. |\n|  [clearPort(handle)](./bitburner.ns.clearport.md) | Clear data from a port. |\n|  [closeTail(pid)](./bitburner.ns.closetail.md) | Close the tail window of a script. |\n|  [deleteServer(host)](./bitburner.ns.deleteserver.md) | Delete a purchased server. |\n|  [disableLog(fn)](./bitburner.ns.disablelog.md) | Disables logging for the given function. |\n|  [enableLog(fn)](./bitburner.ns.enablelog.md) | Enable logging for a certain function. |\n|  [exec(script, hostname, numThreads, args)](./bitburner.ns.exec.md) | Start another script on any server. |\n|  [exit()](./bitburner.ns.exit.md) | Terminates the current script immediately. |\n|  [fileExists(filename, host)](./bitburner.ns.fileexists.md) | Check if a file exists. |\n|  [flags(schema)](./bitburner.ns.flags.md) | Parse command line flags. |\n|  [formatNumber(n, fractionalDigits, suffixStart, isInteger)](./bitburner.ns.formatnumber.md) | Format a number. |\n|  [formatPercent(n, fractionalDigits)](./bitburner.ns.formatpercent.md) | Format a number as a percentage. |\n|  [formatRam(n, fractionalDigits)](./bitburner.ns.formatram.md) | Format a number as an amount of ram. |\n|  [ftpcrack(host)](./bitburner.ns.ftpcrack.md) | Runs FTPCrack.exe on a server. |\n|  [getBitNodeMultipliers(n, lvl)](./bitburner.ns.getbitnodemultipliers.md) | Get the current Bitnode multipliers. |\n|  [getFavorToDonate()](./bitburner.ns.getfavortodonate.md) | Returns the amount of Faction favor required to be able to donate to a faction. |\n|  [getGrowTime(host)](./bitburner.ns.getgrowtime.md) | Get the execution time of a grow() call. |\n|  [getHackingLevel()](./bitburner.ns.gethackinglevel.md) | Returns the player\u2019s current hacking level. |\n|  [getHackingMultipliers()](./bitburner.ns.gethackingmultipliers.md) | Get hacking related multipliers. |\n|  [getHacknetMultipliers()](./bitburner.ns.gethacknetmultipliers.md) | Get hacknet related multipliers. |\n|  [getHackTime(host)](./bitburner.ns.gethacktime.md) | Get the execution time of a hack() call. |\n|  [getHostname()](./bitburner.ns.gethostname.md) | Returns a string with the hostname of the server that the script is running on. |\n|  [getMoneySources()](./bitburner.ns.getmoneysources.md) | Get information about the sources of income for this run. |\n|  [getPlayer()](./bitburner.ns.getplayer.md) | Get information about the player. |\n|  [getPortHandle(port)](./bitburner.ns.getporthandle.md) | Get all data on a port. |\n|  [getPurchasedServerCost(ram)](./bitburner.ns.getpurchasedservercost.md) | Get cost of purchasing a server. |\n|  [getPurchasedServerLimit()](./bitburner.ns.getpurchasedserverlimit.md) | Returns the maximum number of servers you can purchase. |\n|  [getPurchasedServerMaxRam()](./bitburner.ns.getpurchasedservermaxram.md) | Returns the maximum RAM that a purchased server can have. |\n|  [getPurchasedServers()](./bitburner.ns.getpurchasedservers.md) | Returns an array with the hostnames of all of the servers you have purchased. |\n|  [getPurchasedServerUpgradeCost(hostname, ram)](./bitburner.ns.getpurchasedserverupgradecost.md) | Get cost of upgrading a purchased server to the given ram. |\n|  [getRecentScripts()](./bitburner.ns.getrecentscripts.md) | Get an array of recently killed scripts across all servers. |\n|  [getRunningScript(filename, hostname, args)](./bitburner.ns.getrunningscript.md) | Get general info about a running script. |\n|  [getScriptExpGain(script, host, args)](./bitburner.ns.getscriptexpgain.md) | Get the exp gain of a script. |\n|  [getScriptIncome(script, host, args)](./bitburner.ns.getscriptincome.md) | Get the income of a script. |\n|  [getScriptLogs(fn, host, args)](./bitburner.ns.getscriptlogs.md) | Get all the logs of a script. |\n|  [getScriptName()](./bitburner.ns.getscriptname.md) | Returns the current script name. |\n|  [getScriptRam(script, host)](./bitburner.ns.getscriptram.md) | Get the ram cost of a script. |\n|  [getServer(host)](./bitburner.ns.getserver.md) | Returns a server object for the given server. Defaults to the running script's server if host is not specified. |\n|  [getServerBaseSecurityLevel(host)](./bitburner.ns.getserverbasesecuritylevel.md) |  |\n|  [getServerGrowth(host)](./bitburner.ns.getservergrowth.md) | Get a server growth parameter. |\n|  [getServerMaxMoney(host)](./bitburner.ns.getservermaxmoney.md) | Get the maximum money available on a server. |\n|  [getServerMaxRam(host)](./bitburner.ns.getservermaxram.md) | Get the maximum amount of RAM on a server. |\n|  [getServerMinSecurityLevel(host)](./bitburner.ns.getserverminsecuritylevel.md) | Returns the minimum security level of the target server. |\n|  [getServerMoneyAvailable(host)](./bitburner.ns.getservermoneyavailable.md) | Get money available on a server. |\n|  [getServerNumPortsRequired(host)](./bitburner.ns.getservernumportsrequired.md) | Returns the number of open ports required to successfully run NUKE.exe on the specified server. |\n|  [getServerRequiredHackingLevel(host)](./bitburner.ns.getserverrequiredhackinglevel.md) | Returns the required hacking level of the target server. |\n|  [getServerSecurityLevel(host)](./bitburner.ns.getserversecuritylevel.md) | Get server security level. |\n|  [getServerUsedRam(host)](./bitburner.ns.getserverusedram.md) | Get the used RAM on a server. |\n|  [getSharePower()](./bitburner.ns.getsharepower.md) | Calculate your share power. Based on all the active share calls. |\n|  [getTimeSinceLastAug()](./bitburner.ns.gettimesincelastaug.md) | Returns the amount of time in milliseconds that have passed since you last installed Augmentations. |\n|  [getTotalScriptExpGain()](./bitburner.ns.gettotalscriptexpgain.md) | Get the exp gain of all scripts. |\n|  [getTotalScriptIncome()](./bitburner.ns.gettotalscriptincome.md) | Get the income of all scripts. |\n|  [getWeakenTime(host)](./bitburner.ns.getweakentime.md) | Get the execution time of a weaken() call. |\n|  [grow(host, opts)](./bitburner.ns.grow.md) | Spoof money in a server's bank account, increasing the amount available. |\n|  [growthAnalyze(host, growthAmount, cores)](./bitburner.ns.growthanalyze.md) | Calculate the number of grow threads needed to grow a server by a certain multiplier. |\n|  [growthAnalyzeSecurity(threads, hostname, cores)](./bitburner.ns.growthanalyzesecurity.md) | Calculate the security increase for a number of threads. |\n|  [hack(host, opts)](./bitburner.ns.hack.md) | Steal a server's money. |\n|  [hackAnalyze(host)](./bitburner.ns.hackanalyze.md) | Get the part of money stolen with a single thread. |\n|  [hackAnalyzeChance(host)](./bitburner.ns.hackanalyzechance.md) | Get the chance of successfully hacking a server. |\n|  [hackAnalyzeSecurity(threads, hostname)](./bitburner.ns.hackanalyzesecurity.md) | Get the security increase for a number of threads. |\n|  [hackAnalyzeThreads(host, hackAmount)](./bitburner.ns.hackanalyzethreads.md) | Predict the effect of hack. |\n|  [hasRootAccess(host)](./bitburner.ns.hasrootaccess.md) | Check if you have root access on a server. |\n|  [hasTorRouter()](./bitburner.ns.hastorrouter.md) | Returns whether the player has access to the darkweb. |\n|  [httpworm(host)](./bitburner.ns.httpworm.md) | Runs HTTPWorm.exe on a server. |\n|  [isLogEnabled(fn)](./bitburner.ns.islogenabled.md) | Checks the status of the logging for the given function. |\n|  [isRunning(script, host, args)](./bitburner.ns.isrunning.md) | Check if a script is running. |\n|  [kill(pid)](./bitburner.ns.kill.md) | Terminate the script with the provided PID. |\n|  [kill(filename, hostname, args)](./bitburner.ns.kill_1.md) | Terminate the script with the provided filename, hostname, and script arguments. |\n|  [killall(host, safetyguard)](./bitburner.ns.killall.md) | Terminate all scripts on a server. |\n|  [ls(host, grep)](./bitburner.ns.ls.md) | List files on a server. |\n|  [moveTail(x, y, pid)](./bitburner.ns.movetail.md) | Move a tail window. |\n|  [mv(host, source, destination)](./bitburner.ns.mv.md) | Move a file on the target server. |\n|  [nFormat(n, format)](./bitburner.ns.nformat.md) | Format a number using the numeral library. This function is deprecated and will be removed in 2.3. |\n|  [nuke(host)](./bitburner.ns.nuke.md) | Runs NUKE.exe on a server. |\n|  [peek(port)](./bitburner.ns.peek.md) | Get a copy of the data from a port without popping it. |\n|  [print(args)](./bitburner.ns.print.md) | Prints one or more values or variables to the script\u2019s logs. |\n|  [printf(format, args)](./bitburner.ns.printf.md) | Prints a formatted string to the script\u2019s logs. |\n|  [prompt(txt, options)](./bitburner.ns.prompt.md) | Prompt the player with an input modal. |\n|  [ps(host)](./bitburner.ns.ps.md) | List running scripts on a server. |\n|  [purchaseServer(hostname, ram)](./bitburner.ns.purchaseserver.md) | Purchase a server. |\n|  [read(filename)](./bitburner.ns.read.md) | Read content of a file. |\n|  [readPort(port)](./bitburner.ns.readport.md) | Read data from a port. |\n|  [relaysmtp(host)](./bitburner.ns.relaysmtp.md) | Runs relaySMTP.exe on a server. |\n|  [renamePurchasedServer(hostname, newName)](./bitburner.ns.renamepurchasedserver.md) | Rename a purchased server. |\n|  [resizeTail(width, height, pid)](./bitburner.ns.resizetail.md) | Resize a tail window. |\n|  [rm(name, host)](./bitburner.ns.rm.md) | Delete a file. |\n|  [run(script, numThreads, args)](./bitburner.ns.run.md) | Start another script on the current server. |\n|  [scan(host)](./bitburner.ns.scan.md) | Get the list of servers connected to a server. |\n|  [scp(files, destination, source)](./bitburner.ns.scp.md) | Copy file between servers. |\n|  [scriptKill(script, host)](./bitburner.ns.scriptkill.md) | Kill all scripts with a filename. |\n|  [scriptRunning(script, host)](./bitburner.ns.scriptrunning.md) | Check if any script with a filename is running. |\n|  [serverExists(host)](./bitburner.ns.serverexists.md) | Returns a boolean denoting whether or not the specified server exists. |\n|  [share()](./bitburner.ns.share.md) | Share your computer with your factions. |\n|  [sleep(millis)](./bitburner.ns.sleep.md) | Suspends the script for n milliseconds. |\n|  [spawn(script, numThreads, args)](./bitburner.ns.spawn.md) | Terminate current script and start another in 10 seconds. |\n|  [sprintf(format, args)](./bitburner.ns.sprintf.md) | Format a string. |\n|  [sqlinject(host)](./bitburner.ns.sqlinject.md) | Runs SQLInject.exe on a server. |\n|  [tail(fn, host, args)](./bitburner.ns.tail.md) | Open the tail window of a script. |\n|  [tFormat(milliseconds, milliPrecision)](./bitburner.ns.tformat.md) | Format time to a readable string. |\n|  [toast(msg, variant, duration)](./bitburner.ns.toast.md) | Queue a toast (bottom-right notification). |\n|  [tprint(args)](./bitburner.ns.tprint.md) | Prints one or more values or variables to the Terminal. |\n|  [tprintf(format, values)](./bitburner.ns.tprintf.md) | Prints a raw value or a variable to the Terminal. |\n|  [tryWritePort(port, data)](./bitburner.ns.trywriteport.md) | Attempt to write to a port. |\n|  [upgradePurchasedServer(hostname, ram)](./bitburner.ns.upgradepurchasedserver.md) | Upgrade a purchased server's RAM. |\n|  [vsprintf(format, args)](./bitburner.ns.vsprintf.md) | Format a string with an array of arguments. |\n|  [weaken(host, opts)](./bitburner.ns.weaken.md) | Reduce a server's security level. |\n|  [weakenAnalyze(threads, cores)](./bitburner.ns.weakenanalyze.md) | Predict the effect of weaken. |\n|  [wget(url, target, host)](./bitburner.ns.wget.md) | Download a file from the internet. |\n|  [write(filename, data, mode)](./bitburner.ns.write.md) | Write data to a file. |\n|  [writePort(port, data)](./bitburner.ns.writeport.md) | Write data to a port. |\n\n", "ns.ns.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md)\n\n## NS interface\n\nCollection of all functions passed to scripts\n\n**Signature:**\n\n```typescript\nexport interface NS \n```\n\n## Remarks\n\n<b>Basic ns1 usage example:</b>\n\n```ts\n // Basic ns functions can be used directly\n getHostname();\n // Some related functions are gathered within a common namespace\n stock.getPrice();\n```\n[ns1 in-game docs](https://bitburner-official.readthedocs.io/en/latest/netscript/netscript1.html) <hr> <b>Basic ns2 usage example:</b>\n\n```ts\nexport async function main(ns) {\n // Basic ns functions can be accessed on the ns object\n ns.getHostname();\n // Some related functions are gathered under a sub-property of the ns object\n ns.stock.getPrice();\n // Some functions need to be awaited\n await ns.hack('n00dles');\n}\n```\n[ns2 in-game docs](https://bitburner-official.readthedocs.io/en/latest/netscript/netscriptjs.html) <hr>\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [args](./bitburner.ns.args.md) | <code>readonly</code> | (string \\| number \\| boolean)\\[\\] | Arguments passed into the script. |\n|  [bladeburner](./bitburner.ns.bladeburner.md) | <code>readonly</code> | [Bladeburner](./bitburner.bladeburner.md) | Namespace for bladeburner functions. |\n|  [codingcontract](./bitburner.ns.codingcontract.md) | <code>readonly</code> | [CodingContract](./bitburner.codingcontract.md) | Namespace for codingcontract functions. |\n|  [corporation](./bitburner.ns.corporation.md) | <code>readonly</code> | [Corporation](./bitburner.corporation.md) | Namespace for corporation functions. RAM cost: 1022.4 GB |\n|  [enums](./bitburner.ns.enums.md) |  | [NSEnums](./bitburner.nsenums.md) |  |\n|  [formulas](./bitburner.ns.formulas.md) | <code>readonly</code> | [Formulas](./bitburner.formulas.md) | Namespace for formulas functions. |\n|  [gang](./bitburner.ns.gang.md) | <code>readonly</code> | [Gang](./bitburner.gang.md) | Namespace for gang functions. |\n|  [grafting](./bitburner.ns.grafting.md) | <code>readonly</code> | [Grafting](./bitburner.grafting.md) | Namespace for grafting functions. |\n|  [hacknet](./bitburner.ns.hacknet.md) | <code>readonly</code> | [Hacknet](./bitburner.hacknet.md) | Namespace for hacknet functions. |\n|  [infiltration](./bitburner.ns.infiltration.md) | <code>readonly</code> | [Infiltration](./bitburner.infiltration.md) | Namespace for infiltration functions. RAM cost: 0 GB |\n|  [pid](./bitburner.ns.pid.md) | <code>readonly</code> | number | The current script's PID |\n|  [singularity](./bitburner.ns.singularity.md) | <code>readonly</code> | [Singularity](./bitburner.singularity.md) | Namespace for singularity functions. RAM cost: 0 GB |\n|  [sleeve](./bitburner.ns.sleeve.md) | <code>readonly</code> | [Sleeve](./bitburner.sleeve.md) | Namespace for sleeve functions. |\n|  [stanek](./bitburner.ns.stanek.md) | <code>readonly</code> | [Stanek](./bitburner.stanek.md) | Namespace for stanek functions. RAM cost: 0 GB |\n|  [stock](./bitburner.ns.stock.md) | <code>readonly</code> | [TIX](./bitburner.tix.md) | Namespace for stock functions. |\n|  [ui](./bitburner.ns.ui.md) | <code>readonly</code> | [UserInterface](./bitburner.userinterface.md) | Namespace for user interface functions. RAM cost: 0 GB |\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [alert(msg)](./bitburner.ns.alert.md) | Open up a message box. |\n|  [asleep(millis)](./bitburner.ns.asleep.md) | Suspends the script for n milliseconds. Doesn't block with concurrent calls. You should prefer 'sleep' over 'asleep' except when doing very complex UI work. |\n|  [atExit(f)](./bitburner.ns.atexit.md) | Add callback function when the script dies |\n|  [brutessh(host)](./bitburner.ns.brutessh.md) | Runs BruteSSH.exe on a server. |\n|  [clear(handle)](./bitburner.ns.clear.md) | Clear data from a file. |\n|  [clearLog()](./bitburner.ns.clearlog.md) | Clears the script\u2019s logs. |\n|  [clearPort(handle)](./bitburner.ns.clearport.md) | Clear data from a port. |\n|  [closeTail(pid)](./bitburner.ns.closetail.md) | Close the tail window of a script. |\n|  [deleteServer(host)](./bitburner.ns.deleteserver.md) | Delete a purchased server. |\n|  [disableLog(fn)](./bitburner.ns.disablelog.md) | Disables logging for the given function. |\n|  [enableLog(fn)](./bitburner.ns.enablelog.md) | Enable logging for a certain function. |\n|  [exec(script, hostname, numThreads, args)](./bitburner.ns.exec.md) | Start another script on any server. |\n|  [exit()](./bitburner.ns.exit.md) | Terminates the current script immediately. |\n|  [fileExists(filename, host)](./bitburner.ns.fileexists.md) | Check if a file exists. |\n|  [flags(schema)](./bitburner.ns.flags.md) | Parse command line flags. |\n|  [formatNumber(n, fractionalDigits, suffixStart, isInteger)](./bitburner.ns.formatnumber.md) | Format a number. |\n|  [formatPercent(n, fractionalDigits)](./bitburner.ns.formatpercent.md) | Format a number as a percentage. |\n|  [formatRam(n, fractionalDigits)](./bitburner.ns.formatram.md) | Format a number as an amount of ram. |\n|  [ftpcrack(host)](./bitburner.ns.ftpcrack.md) | Runs FTPCrack.exe on a server. |\n|  [getBitNodeMultipliers(n, lvl)](./bitburner.ns.getbitnodemultipliers.md) | Get the current Bitnode multipliers. |\n|  [getFavorToDonate()](./bitburner.ns.getfavortodonate.md) | Returns the amount of Faction favor required to be able to donate to a faction. |\n|  [getGrowTime(host)](./bitburner.ns.getgrowtime.md) | Get the execution time of a grow() call. |\n|  [getHackingLevel()](./bitburner.ns.gethackinglevel.md) | Returns the player\u2019s current hacking level. |\n|  [getHackingMultipliers()](./bitburner.ns.gethackingmultipliers.md) | Get hacking related multipliers. |\n|  [getHacknetMultipliers()](./bitburner.ns.gethacknetmultipliers.md) | Get hacknet related multipliers. |\n|  [getHackTime(host)](./bitburner.ns.gethacktime.md) | Get the execution time of a hack() call. |\n|  [getHostname()](./bitburner.ns.gethostname.md) | Returns a string with the hostname of the server that the script is running on. |\n|  [getMoneySources()](./bitburner.ns.getmoneysources.md) | Get information about the sources of income for this run. |\n|  [getPlayer()](./bitburner.ns.getplayer.md) | Get information about the player. |\n|  [getPortHandle(port)](./bitburner.ns.getporthandle.md) | Get all data on a port. |\n|  [getPurchasedServerCost(ram)](./bitburner.ns.getpurchasedservercost.md) | Get cost of purchasing a server. |\n|  [getPurchasedServerLimit()](./bitburner.ns.getpurchasedserverlimit.md) | Returns the maximum number of servers you can purchase. |\n|  [getPurchasedServerMaxRam()](./bitburner.ns.getpurchasedservermaxram.md) | Returns the maximum RAM that a purchased server can have. |\n|  [getPurchasedServers()](./bitburner.ns.getpurchasedservers.md) | Returns an array with the hostnames of all of the servers you have purchased. |\n|  [getPurchasedServerUpgradeCost(hostname, ram)](./bitburner.ns.getpurchasedserverupgradecost.md) | Get cost of upgrading a purchased server to the given ram. |\n|  [getRecentScripts()](./bitburner.ns.getrecentscripts.md) | Get an array of recently killed scripts across all servers. |\n|  [getRunningScript(filename, hostname, args)](./bitburner.ns.getrunningscript.md) | Get general info about a running script. |\n|  [getScriptExpGain(script, host, args)](./bitburner.ns.getscriptexpgain.md) | Get the exp gain of a script. |\n|  [getScriptIncome(script, host, args)](./bitburner.ns.getscriptincome.md) | Get the income of a script. |\n|  [getScriptLogs(fn, host, args)](./bitburner.ns.getscriptlogs.md) | Get all the logs of a script. |\n|  [getScriptName()](./bitburner.ns.getscriptname.md) | Returns the current script name. |\n|  [getScriptRam(script, host)](./bitburner.ns.getscriptram.md) | Get the ram cost of a script. |\n|  [getServer(host)](./bitburner.ns.getserver.md) | Returns a server object for the given server. Defaults to the running script's server if host is not specified. |\n|  [getServerBaseSecurityLevel(host)](./bitburner.ns.getserverbasesecuritylevel.md) |  |\n|  [getServerGrowth(host)](./bitburner.ns.getservergrowth.md) | Get a server growth parameter. |\n|  [getServerMaxMoney(host)](./bitburner.ns.getservermaxmoney.md) | Get the maximum money available on a server. |\n|  [getServerMaxRam(host)](./bitburner.ns.getservermaxram.md) | Get the maximum amount of RAM on a server. |\n|  [getServerMinSecurityLevel(host)](./bitburner.ns.getserverminsecuritylevel.md) | Returns the minimum security level of the target server. |\n|  [getServerMoneyAvailable(host)](./bitburner.ns.getservermoneyavailable.md) | Get money available on a server. |\n|  [getServerNumPortsRequired(host)](./bitburner.ns.getservernumportsrequired.md) | Returns the number of open ports required to successfully run NUKE.exe on the specified server. |\n|  [getServerRequiredHackingLevel(host)](./bitburner.ns.getserverrequiredhackinglevel.md) | Returns the required hacking level of the target server. |\n|  [getServerSecurityLevel(host)](./bitburner.ns.getserversecuritylevel.md) | Get server security level. |\n|  [getServerUsedRam(host)](./bitburner.ns.getserverusedram.md) | Get the used RAM on a server. |\n|  [getSharePower()](./bitburner.ns.getsharepower.md) | Calculate your share power. Based on all the active share calls. |\n|  [getTimeSinceLastAug()](./bitburner.ns.gettimesincelastaug.md) | Returns the amount of time in milliseconds that have passed since you last installed Augmentations. |\n|  [getTotalScriptExpGain()](./bitburner.ns.gettotalscriptexpgain.md) | Get the exp gain of all scripts. |\n|  [getTotalScriptIncome()](./bitburner.ns.gettotalscriptincome.md) | Get the income of all scripts. |\n|  [getWeakenTime(host)](./bitburner.ns.getweakentime.md) | Get the execution time of a weaken() call. |\n|  [grow(host, opts)](./bitburner.ns.grow.md) | Spoof money in a server's bank account, increasing the amount available. |\n|  [growthAnalyze(host, growthAmount, cores)](./bitburner.ns.growthanalyze.md) | Calculate the number of grow threads needed to grow a server by a certain multiplier. |\n|  [growthAnalyzeSecurity(threads, hostname, cores)](./bitburner.ns.growthanalyzesecurity.md) | Calculate the security increase for a number of threads. |\n|  [hack(host, opts)](./bitburner.ns.hack.md) | Steal a server's money. |\n|  [hackAnalyze(host)](./bitburner.ns.hackanalyze.md) | Get the part of money stolen with a single thread. |\n|  [hackAnalyzeChance(host)](./bitburner.ns.hackanalyzechance.md) | Get the chance of successfully hacking a server. |\n|  [hackAnalyzeSecurity(threads, hostname)](./bitburner.ns.hackanalyzesecurity.md) | Get the security increase for a number of threads. |\n|  [hackAnalyzeThreads(host, hackAmount)](./bitburner.ns.hackanalyzethreads.md) | Predict the effect of hack. |\n|  [hasRootAccess(host)](./bitburner.ns.hasrootaccess.md) | Check if you have root access on a server. |\n|  [hasTorRouter()](./bitburner.ns.hastorrouter.md) | Returns whether the player has access to the darkweb. |\n|  [httpworm(host)](./bitburner.ns.httpworm.md) | Runs HTTPWorm.exe on a server. |\n|  [isLogEnabled(fn)](./bitburner.ns.islogenabled.md) | Checks the status of the logging for the given function. |\n|  [isRunning(script, host, args)](./bitburner.ns.isrunning.md) | Check if a script is running. |\n|  [kill(pid)](./bitburner.ns.kill.md) | Terminate the script with the provided PID. |\n|  [kill(filename, hostname, args)](./bitburner.ns.kill_1.md) | Terminate the script with the provided filename, hostname, and script arguments. |\n|  [killall(host, safetyguard)](./bitburner.ns.killall.md) | Terminate all scripts on a server. |\n|  [ls(host, grep)](./bitburner.ns.ls.md) | List files on a server. |\n|  [moveTail(x, y, pid)](./bitburner.ns.movetail.md) | Move a tail window. |\n|  [mv(host, source, destination)](./bitburner.ns.mv.md) | Move a file on the target server. |\n|  [nFormat(n, format)](./bitburner.ns.nformat.md) | Format a number using the numeral library. This function is deprecated and will be removed in 2.3. |\n|  [nuke(host)](./bitburner.ns.nuke.md) | Runs NUKE.exe on a server. |\n|  [peek(port)](./bitburner.ns.peek.md) | Get a copy of the data from a port without popping it. |\n|  [print(args)](./bitburner.ns.print.md) | Prints one or more values or variables to the script\u2019s logs. |\n|  [printf(format, args)](./bitburner.ns.printf.md) | Prints a formatted string to the script\u2019s logs. |\n|  [prompt(txt, options)](./bitburner.ns.prompt.md) | Prompt the player with an input modal. |\n|  [ps(host)](./bitburner.ns.ps.md) | List running scripts on a server. |\n|  [purchaseServer(hostname, ram)](./bitburner.ns.purchaseserver.md) | Purchase a server. |\n|  [read(filename)](./bitburner.ns.read.md) | Read content of a file. |\n|  [readPort(port)](./bitburner.ns.readport.md) | Read data from a port. |\n|  [relaysmtp(host)](./bitburner.ns.relaysmtp.md) | Runs relaySMTP.exe on a server. |\n|  [renamePurchasedServer(hostname, newName)](./bitburner.ns.renamepurchasedserver.md) | Rename a purchased server. |\n|  [resizeTail(width, height, pid)](./bitburner.ns.resizetail.md) | Resize a tail window. |\n|  [rm(name, host)](./bitburner.ns.rm.md) | Delete a file. |\n|  [run(script, numThreads, args)](./bitburner.ns.run.md) | Start another script on the current server. |\n|  [scan(host)](./bitburner.ns.scan.md) | Get the list of servers connected to a server. |\n|  [scp(files, destination, source)](./bitburner.ns.scp.md) | Copy file between servers. |\n|  [scriptKill(script, host)](./bitburner.ns.scriptkill.md) | Kill all scripts with a filename. |\n|  [scriptRunning(script, host)](./bitburner.ns.scriptrunning.md) | Check if any script with a filename is running. |\n|  [serverExists(host)](./bitburner.ns.serverexists.md) | Returns a boolean denoting whether or not the specified server exists. |\n|  [share()](./bitburner.ns.share.md) | Share your computer with your factions. |\n|  [sleep(millis)](./bitburner.ns.sleep.md) | Suspends the script for n milliseconds. |\n|  [spawn(script, numThreads, args)](./bitburner.ns.spawn.md) | Terminate current script and start another in 10 seconds. |\n|  [sprintf(format, args)](./bitburner.ns.sprintf.md) | Format a string. |\n|  [sqlinject(host)](./bitburner.ns.sqlinject.md) | Runs SQLInject.exe on a server. |\n|  [tail(fn, host, args)](./bitburner.ns.tail.md) | Open the tail window of a script. |\n|  [tFormat(milliseconds, milliPrecision)](./bitburner.ns.tformat.md) | Format time to a readable string. |\n|  [toast(msg, variant, duration)](./bitburner.ns.toast.md) | Queue a toast (bottom-right notification). |\n|  [tprint(args)](./bitburner.ns.tprint.md) | Prints one or more values or variables to the Terminal. |\n|  [tprintf(format, values)](./bitburner.ns.tprintf.md) | Prints a raw value or a variable to the Terminal. |\n|  [tryWritePort(port, data)](./bitburner.ns.trywriteport.md) | Attempt to write to a port. |\n|  [upgradePurchasedServer(hostname, ram)](./bitburner.ns.upgradepurchasedserver.md) | Upgrade a purchased server's RAM. |\n|  [vsprintf(format, args)](./bitburner.ns.vsprintf.md) | Format a string with an array of arguments. |\n|  [weaken(host, opts)](./bitburner.ns.weaken.md) | Reduce a server's security level. |\n|  [weakenAnalyze(threads, cores)](./bitburner.ns.weakenanalyze.md) | Predict the effect of weaken. |\n|  [wget(url, target, host)](./bitburner.ns.wget.md) | Download a file from the internet. |\n|  [write(filename, data, mode)](./bitburner.ns.write.md) | Write data to a file. |\n|  [writePort(port, data)](./bitburner.ns.writeport.md) | Write data to a port. |\n\n", "bitburner.warehouse.loc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [loc](./bitburner.warehouse.loc.md)\n\n## Warehouse.loc property\n\nCity in which the warehouse is located\n\n**Signature:**\n\n```typescript\nloc: CityName;\n```\n", "ns.warehouse.loc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [loc](./bitburner.warehouse.loc.md)\n\n## Warehouse.loc property\n\nCity in which the warehouse is located\n\n**Signature:**\n\n```typescript\nloc: CityName;\n```\n", "bitburner.codingcontract.getdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getData](./bitburner.codingcontract.getdata.md)\n\n## CodingContract.getData() method\n\nGet the input data.\n\n**Signature:**\n\n```typescript\ngetData(filename: string, host?: string): CodingContractData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Host of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\n[CodingContractData](./bitburner.codingcontractdata.md)\n\nThe specified contract\u2019s data, data type depends on contract type.\n\n## Remarks\n\nRAM cost: 5 GB\n\nGet the data associated with the specific Coding Contract. Note that this is not the same as the contract\u2019s description. This is just the data that the contract wants you to act on in order to solve the contract.\n\n", "ns.codingcontract.getdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getData](./bitburner.codingcontract.getdata.md)\n\n## CodingContract.getData() method\n\nGet the input data.\n\n**Signature:**\n\n```typescript\ngetData(filename: string, host?: string): CodingContractData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Host of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\n[CodingContractData](./bitburner.codingcontractdata.md)\n\nThe specified contract\u2019s data, data type depends on contract type.\n\n## Remarks\n\nRAM cost: 5 GB\n\nGet the data associated with the specific Coding Contract. Note that this is not the same as the contract\u2019s description. This is just the data that the contract wants you to act on in order to solve the contract.\n\n", "bitburner.bitnodemultipliers.factionpassiverepgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FactionPassiveRepGain](./bitburner.bitnodemultipliers.factionpassiverepgain.md)\n\n## BitNodeMultipliers.FactionPassiveRepGain property\n\nInfluences how much rep the player gains in each faction simply by being a member.\n\n**Signature:**\n\n```typescript\nFactionPassiveRepGain: number;\n```\n", "ns.bitnodemultipliers.factionpassiverepgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FactionPassiveRepGain](./bitburner.bitnodemultipliers.factionpassiverepgain.md)\n\n## BitNodeMultipliers.FactionPassiveRepGain property\n\nInfluences how much rep the player gains in each faction simply by being a member.\n\n**Signature:**\n\n```typescript\nFactionPassiveRepGain: number;\n```\n", "bitburner.hackingformulas.weakentime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [weakenTime](./bitburner.hackingformulas.weakentime.md)\n\n## HackingFormulas.weakenTime() method\n\nCalculate weaken time.\n\n**Signature:**\n\n```typescript\nweakenTime(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated weaken time.\n\n", "ns.hackingformulas.weakentime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [weakenTime](./bitburner.hackingformulas.weakentime.md)\n\n## HackingFormulas.weakenTime() method\n\nCalculate weaken time.\n\n**Signature:**\n\n```typescript\nweakenTime(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated weaken time.\n\n", "bitburner.workformulas.crimesuccesschance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [crimeSuccessChance](./bitburner.workformulas.crimesuccesschance.md)\n\n## WorkFormulas.crimeSuccessChance() method\n\n**Signature:**\n\n```typescript\ncrimeSuccessChance(person: Person, crimeType: CrimeType | `${CrimeType}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  crimeType | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` |  |\n\n**Returns:**\n\nnumber\n\n", "ns.workformulas.crimesuccesschance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [crimeSuccessChance](./bitburner.workformulas.crimesuccesschance.md)\n\n## WorkFormulas.crimeSuccessChance() method\n\n**Signature:**\n\n```typescript\ncrimeSuccessChance(person: Person, crimeType: CrimeType | `${CrimeType}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  crimeType | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` |  |\n\n**Returns:**\n\nnumber\n\n", "bitburner.gangmemberinfo.agi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi](./bitburner.gangmemberinfo.agi.md)\n\n## GangMemberInfo.agi property\n\nAgility skill level\n\n**Signature:**\n\n```typescript\nagi: number;\n```\n", "ns.gangmemberinfo.agi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi](./bitburner.gangmemberinfo.agi.md)\n\n## GangMemberInfo.agi property\n\nAgility skill level\n\n**Signature:**\n\n```typescript\nagi: number;\n```\n", "bitburner.ns.gethacknetmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHacknetMultipliers](./bitburner.ns.gethacknetmultipliers.md)\n\n## NS.getHacknetMultipliers() method\n\nGet hacknet related multipliers.\n\n**Signature:**\n\n```typescript\ngetHacknetMultipliers(): HacknetMultipliers;\n```\n**Returns:**\n\n[HacknetMultipliers](./bitburner.hacknetmultipliers.md)\n\nObject containing the Player\u2019s hacknet related multipliers.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\nReturns an object containing the Player\u2019s hacknet related multipliers. These multipliers are returned in fractional forms, not percentages (e.g. 1.5 instead of 150%).\n\n## Example 1\n\n\n```ts\n// NS1:\n// Example of how this can be used:\nvar mults = getHacknetMultipliers();\nprint(mults.production);\nprint(mults.purchaseCost);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n// Example of how this can be used:\nconst {production, purchaseCost} = ns.getHacknetMultipliers();\nprint(production);\nprint(purchaseCost);\n```\n\n", "ns.ns.gethacknetmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHacknetMultipliers](./bitburner.ns.gethacknetmultipliers.md)\n\n## NS.getHacknetMultipliers() method\n\nGet hacknet related multipliers.\n\n**Signature:**\n\n```typescript\ngetHacknetMultipliers(): HacknetMultipliers;\n```\n**Returns:**\n\n[HacknetMultipliers](./bitburner.hacknetmultipliers.md)\n\nObject containing the Player\u2019s hacknet related multipliers.\n\n## Remarks\n\nRAM cost: 0.25 GB\n\nReturns an object containing the Player\u2019s hacknet related multipliers. These multipliers are returned in fractional forms, not percentages (e.g. 1.5 instead of 150%).\n\n## Example 1\n\n\n```ts\n// NS1:\n// Example of how this can be used:\nvar mults = getHacknetMultipliers();\nprint(mults.production);\nprint(mults.purchaseCost);\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n// Example of how this can be used:\nconst {production, purchaseCost} = ns.getHacknetMultipliers();\nprint(production);\nprint(purchaseCost);\n```\n\n", "bitburner.userinterfacetheme.info.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [info](./bitburner.userinterfacetheme.info.md)\n\n## UserInterfaceTheme.info property\n\n**Signature:**\n\n```typescript\ninfo: string;\n```\n", "ns.userinterfacetheme.info.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [info](./bitburner.userinterfacetheme.info.md)\n\n## UserInterfaceTheme.info property\n\n**Signature:**\n\n```typescript\ninfo: string;\n```\n", "bitburner.export.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md)\n\n## Export interface\n\nExport order for a material\n\n**Signature:**\n\n```typescript\ninterface Export \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [amt](./bitburner.export.amt.md) |  | string | Amount of material exported |\n|  [div](./bitburner.export.div.md) |  | string | Division the material is being exported to |\n|  [loc](./bitburner.export.loc.md) |  | [CityName](./bitburner.cityname.md) | City the material is being exported to |\n\n", "ns.export.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md)\n\n## Export interface\n\nExport order for a material\n\n**Signature:**\n\n```typescript\ninterface Export \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [amt](./bitburner.export.amt.md) |  | string | Amount of material exported |\n|  [div](./bitburner.export.div.md) |  | string | Division the material is being exported to |\n|  [loc](./bitburner.export.loc.md) |  | [CityName](./bitburner.cityname.md) | City the material is being exported to |\n\n", "bitburner.corpconstants.dividendmaxrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [dividendMaxRate](./bitburner.corpconstants.dividendmaxrate.md)\n\n## CorpConstants.dividendMaxRate property\n\n**Signature:**\n\n```typescript\ndividendMaxRate: number;\n```\n", "ns.corpconstants.dividendmaxrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [dividendMaxRate](./bitburner.corpconstants.dividendmaxrate.md)\n\n## CorpConstants.dividendMaxRate property\n\n**Signature:**\n\n```typescript\ndividendMaxRate: number;\n```\n", "bitburner.nsenums.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NSEnums](./bitburner.nsenums.md)\n\n## NSEnums type\n\n\n**Signature:**\n\n```typescript\nexport type NSEnums = {\n  CityName: typeof CityName;\n  CrimeType: typeof CrimeType;\n  FactionWorkType: typeof FactionWorkType;\n  GymType: typeof GymType;\n  JobName: typeof JobName;\n  LocationName: typeof LocationName;\n  ToastVariant: typeof ToastVariant;\n  UniversityClassType: typeof UniversityClassType;\n};\n```\n**References:** [CityName](./bitburner.cityname.md)<!-- -->, [CrimeType](./bitburner.crimetype.md)<!-- -->, [FactionWorkType](./bitburner.factionworktype.md)<!-- -->, [GymType](./bitburner.gymtype.md)<!-- -->, [JobName](./bitburner.jobname.md)<!-- -->, [LocationName](./bitburner.locationname.md)<!-- -->, [ToastVariant](./bitburner.toastvariant.md)<!-- -->, [UniversityClassType](./bitburner.universityclasstype.md)\n\n", "ns.nsenums.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NSEnums](./bitburner.nsenums.md)\n\n## NSEnums type\n\n\n**Signature:**\n\n```typescript\nexport type NSEnums = {\n  CityName: typeof CityName;\n  CrimeType: typeof CrimeType;\n  FactionWorkType: typeof FactionWorkType;\n  GymType: typeof GymType;\n  JobName: typeof JobName;\n  LocationName: typeof LocationName;\n  ToastVariant: typeof ToastVariant;\n  UniversityClassType: typeof UniversityClassType;\n};\n```\n**References:** [CityName](./bitburner.cityname.md)<!-- -->, [CrimeType](./bitburner.crimetype.md)<!-- -->, [FactionWorkType](./bitburner.factionworktype.md)<!-- -->, [GymType](./bitburner.gymtype.md)<!-- -->, [JobName](./bitburner.jobname.md)<!-- -->, [LocationName](./bitburner.locationname.md)<!-- -->, [ToastVariant](./bitburner.toastvariant.md)<!-- -->, [UniversityClassType](./bitburner.universityclasstype.md)\n\n", "bitburner.gang.gettaskstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getTaskStats](./bitburner.gang.gettaskstats.md)\n\n## Gang.getTaskStats() method\n\nGet stats of a task.\n\n**Signature:**\n\n```typescript\ngetTaskStats(name: string): GangTaskStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of the task. |\n\n**Returns:**\n\n[GangTaskStats](./bitburner.gangtaskstats.md)\n\nDetailed stats of a task.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the stats of a gang task stats. This is typically used to evaluate which action should be executed next.\n\n", "ns.gang.gettaskstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getTaskStats](./bitburner.gang.gettaskstats.md)\n\n## Gang.getTaskStats() method\n\nGet stats of a task.\n\n**Signature:**\n\n```typescript\ngetTaskStats(name: string): GangTaskStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of the task. |\n\n**Returns:**\n\n[GangTaskStats](./bitburner.gangtaskstats.md)\n\nDetailed stats of a task.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the stats of a gang task stats. This is typically used to evaluate which action should be executed next.\n\n", "bitburner.gangmemberinfo.cha_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_asc\\_points](./bitburner.gangmemberinfo.cha_asc_points.md)\n\n## GangMemberInfo.cha\\_asc\\_points property\n\nTotal earned charisma experience\n\n**Signature:**\n\n```typescript\ncha_asc_points: number;\n```\n", "ns.gangmemberinfo.cha_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_asc\\_points](./bitburner.gangmemberinfo.cha_asc_points.md)\n\n## GangMemberInfo.cha\\_asc\\_points property\n\nTotal earned charisma experience\n\n**Signature:**\n\n```typescript\ncha_asc_points: number;\n```\n", "bitburner.server.cpucores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [cpuCores](./bitburner.server.cpucores.md)\n\n## Server.cpuCores property\n\nHow many CPU cores this server has. Maximum of 8. Affects magnitude of grow and weaken.\n\n**Signature:**\n\n```typescript\ncpuCores: number;\n```\n", "ns.server.cpucores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [cpuCores](./bitburner.server.cpucores.md)\n\n## Server.cpuCores property\n\nHow many CPU cores this server has. Maximum of 8. Affects magnitude of grow and weaken.\n\n**Signature:**\n\n```typescript\ncpuCores: number;\n```\n", "bitburner.bitnodemultipliers.foursigmamarketdatacost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FourSigmaMarketDataCost](./bitburner.bitnodemultipliers.foursigmamarketdatacost.md)\n\n## BitNodeMultipliers.FourSigmaMarketDataCost property\n\nInfluences how much it costs to unlock the stock market's 4S Market Data (NOT API)\n\n**Signature:**\n\n```typescript\nFourSigmaMarketDataCost: number;\n```\n", "ns.bitnodemultipliers.foursigmamarketdatacost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [FourSigmaMarketDataCost](./bitburner.bitnodemultipliers.foursigmamarketdatacost.md)\n\n## BitNodeMultipliers.FourSigmaMarketDataCost property\n\nInfluences how much it costs to unlock the stock market's 4S Market Data (NOT API)\n\n**Signature:**\n\n```typescript\nFourSigmaMarketDataCost: number;\n```\n", "bitburner.corporation.gopublic.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [goPublic](./bitburner.corporation.gopublic.md)\n\n## Corporation.goPublic() method\n\nGo public\n\n**Signature:**\n\n```typescript\ngoPublic(numShares: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  numShares | number | number of shares you would like to issue for your IPO |\n\n**Returns:**\n\nboolean\n\ntrue if you successfully go public, false if not\n\n", "ns.corporation.gopublic.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [goPublic](./bitburner.corporation.gopublic.md)\n\n## Corporation.goPublic() method\n\nGo public\n\n**Signature:**\n\n```typescript\ngoPublic(numShares: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  numShares | number | number of shares you would like to issue for your IPO |\n\n**Returns:**\n\nboolean\n\ntrue if you successfully go public, false if not\n\n", "bitburner.crimestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md)\n\n## CrimeStats interface\n\nData representing the internal values of a crime.\n\n**Signature:**\n\n```typescript\ninterface CrimeStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agility\\_exp](./bitburner.crimestats.agility_exp.md) |  | number | agility exp gained from crime |\n|  [agility\\_success\\_weight](./bitburner.crimestats.agility_success_weight.md) |  | number | agility level impact on success change of the crime |\n|  [charisma\\_exp](./bitburner.crimestats.charisma_exp.md) |  | number | charisma exp gained from crime |\n|  [charisma\\_success\\_weight](./bitburner.crimestats.charisma_success_weight.md) |  | number | charisma level impact on success change of the crime |\n|  [defense\\_exp](./bitburner.crimestats.defense_exp.md) |  | number | defense exp gained from crime |\n|  [defense\\_success\\_weight](./bitburner.crimestats.defense_success_weight.md) |  | number | defense level impact on success change of the crime |\n|  [dexterity\\_exp](./bitburner.crimestats.dexterity_exp.md) |  | number | dexterity exp gained from crime |\n|  [dexterity\\_success\\_weight](./bitburner.crimestats.dexterity_success_weight.md) |  | number | dexterity level impact on success change of the crime |\n|  [difficulty](./bitburner.crimestats.difficulty.md) |  | number | Number representing the difficulty of the crime. Used for success chance calculations |\n|  [hacking\\_exp](./bitburner.crimestats.hacking_exp.md) |  | number | hacking exp gained from crime |\n|  [hacking\\_success\\_weight](./bitburner.crimestats.hacking_success_weight.md) |  | number | hacking level impact on success change of the crime |\n|  [intelligence\\_exp](./bitburner.crimestats.intelligence_exp.md) |  | number | intelligence exp gained from crime |\n|  [karma](./bitburner.crimestats.karma.md) |  | number | Amount of karma lost for successfully committing this crime |\n|  [kills](./bitburner.crimestats.kills.md) |  | number | How many people die as a result of this crime |\n|  [money](./bitburner.crimestats.money.md) |  | number | How much money is given |\n|  [strength\\_exp](./bitburner.crimestats.strength_exp.md) |  | number | strength exp gained from crime |\n|  [strength\\_success\\_weight](./bitburner.crimestats.strength_success_weight.md) |  | number | strength level impact on success change of the crime |\n|  [time](./bitburner.crimestats.time.md) |  | number | Milliseconds it takes to attempt the crime |\n|  [type](./bitburner.crimestats.type.md) |  | string | Description of the crime activity |\n\n", "ns.crimestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md)\n\n## CrimeStats interface\n\nData representing the internal values of a crime.\n\n**Signature:**\n\n```typescript\ninterface CrimeStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agility\\_exp](./bitburner.crimestats.agility_exp.md) |  | number | agility exp gained from crime |\n|  [agility\\_success\\_weight](./bitburner.crimestats.agility_success_weight.md) |  | number | agility level impact on success change of the crime |\n|  [charisma\\_exp](./bitburner.crimestats.charisma_exp.md) |  | number | charisma exp gained from crime |\n|  [charisma\\_success\\_weight](./bitburner.crimestats.charisma_success_weight.md) |  | number | charisma level impact on success change of the crime |\n|  [defense\\_exp](./bitburner.crimestats.defense_exp.md) |  | number | defense exp gained from crime |\n|  [defense\\_success\\_weight](./bitburner.crimestats.defense_success_weight.md) |  | number | defense level impact on success change of the crime |\n|  [dexterity\\_exp](./bitburner.crimestats.dexterity_exp.md) |  | number | dexterity exp gained from crime |\n|  [dexterity\\_success\\_weight](./bitburner.crimestats.dexterity_success_weight.md) |  | number | dexterity level impact on success change of the crime |\n|  [difficulty](./bitburner.crimestats.difficulty.md) |  | number | Number representing the difficulty of the crime. Used for success chance calculations |\n|  [hacking\\_exp](./bitburner.crimestats.hacking_exp.md) |  | number | hacking exp gained from crime |\n|  [hacking\\_success\\_weight](./bitburner.crimestats.hacking_success_weight.md) |  | number | hacking level impact on success change of the crime |\n|  [intelligence\\_exp](./bitburner.crimestats.intelligence_exp.md) |  | number | intelligence exp gained from crime |\n|  [karma](./bitburner.crimestats.karma.md) |  | number | Amount of karma lost for successfully committing this crime |\n|  [kills](./bitburner.crimestats.kills.md) |  | number | How many people die as a result of this crime |\n|  [money](./bitburner.crimestats.money.md) |  | number | How much money is given |\n|  [strength\\_exp](./bitburner.crimestats.strength_exp.md) |  | number | strength exp gained from crime |\n|  [strength\\_success\\_weight](./bitburner.crimestats.strength_success_weight.md) |  | number | strength level impact on success change of the crime |\n|  [time](./bitburner.crimestats.time.md) |  | number | Milliseconds it takes to attempt the crime |\n|  [type](./bitburner.crimestats.type.md) |  | string | Description of the crime activity |\n\n", "bitburner.moneysource.hospitalization.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hospitalization](./bitburner.moneysource.hospitalization.md)\n\n## MoneySource.hospitalization property\n\n**Signature:**\n\n```typescript\nhospitalization: number;\n```\n", "ns.moneysource.hospitalization.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hospitalization](./bitburner.moneysource.hospitalization.md)\n\n## MoneySource.hospitalization property\n\n**Signature:**\n\n```typescript\nhospitalization: number;\n```\n", "bitburner.ns.gettotalscriptincome.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getTotalScriptIncome](./bitburner.ns.gettotalscriptincome.md)\n\n## NS.getTotalScriptIncome() method\n\nGet the income of all scripts.\n\n**Signature:**\n\n```typescript\ngetTotalScriptIncome(): [number, number];\n```\n**Returns:**\n\n\\[number, number\\]\n\nAn array of two values. The first value is the total income (dollar / second) of all of your active scripts (scripts that are currently running on any server). The second value is the total income (dollar / second) that you\u2019ve earned from scripts since you last installed Augmentations.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.gettotalscriptincome.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getTotalScriptIncome](./bitburner.ns.gettotalscriptincome.md)\n\n## NS.getTotalScriptIncome() method\n\nGet the income of all scripts.\n\n**Signature:**\n\n```typescript\ngetTotalScriptIncome(): [number, number];\n```\n**Returns:**\n\n\\[number, number\\]\n\nAn array of two values. The first value is the total income (dollar / second) of all of your active scripts (scripts that are currently running on any server). The second value is the total income (dollar / second) that you\u2019ve earned from scripts since you last installed Augmentations.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.crimestats.defense_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [defense\\_exp](./bitburner.crimestats.defense_exp.md)\n\n## CrimeStats.defense\\_exp property\n\ndefense exp gained from crime\n\n**Signature:**\n\n```typescript\ndefense_exp: number;\n```\n", "ns.crimestats.defense_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [defense\\_exp](./bitburner.crimestats.defense_exp.md)\n\n## CrimeStats.defense\\_exp property\n\ndefense exp gained from crime\n\n**Signature:**\n\n```typescript\ndefense_exp: number;\n```\n", "bitburner.tix.getbidprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getBidPrice](./bitburner.tix.getbidprice.md)\n\n## TIX.getBidPrice() method\n\nReturns the bid price of that stock.\n\n**Signature:**\n\n```typescript\ngetBidPrice(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nThe bid price of a stock.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "ns.tix.getbidprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getBidPrice](./bitburner.tix.getbidprice.md)\n\n## TIX.getBidPrice() method\n\nReturns the bid price of that stock.\n\n**Signature:**\n\n```typescript\ngetBidPrice(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nThe bid price of a stock.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "bitburner.corpindustrydata.sciencefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [scienceFactor](./bitburner.corpindustrydata.sciencefactor.md)\n\n## CorpIndustryData.scienceFactor property\n\nScientific research factor (affects quality)\n\n**Signature:**\n\n```typescript\nscienceFactor?: number;\n```\n", "ns.corpindustrydata.sciencefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [scienceFactor](./bitburner.corpindustrydata.sciencefactor.md)\n\n## CorpIndustryData.scienceFactor property\n\nScientific research factor (affects quality)\n\n**Signature:**\n\n```typescript\nscienceFactor?: number;\n```\n", "bitburner.ns.formatpercent.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formatPercent](./bitburner.ns.formatpercent.md)\n\n## NS.formatPercent() method\n\nFormat a number as a percentage.\n\n**Signature:**\n\n```typescript\nformatPercent(n: number, fractionalDigits?: number): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format as a percentage. |\n|  fractionalDigits | number | _(Optional)_ Number of digits to show in the fractional part of the decimal number. Optional, defaults to 2. |\n\n**Returns:**\n\nstring\n\nFormatted percentage.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a percentage string with the specified number of fractional digits. This is the same function that the game itself uses to display percentages. The format also depends on the Numeric Display settings (all options on the \"Numeric Display\" options page) To format plain numbers or ram, see [formatNumber](./bitburner.ns.formatnumber.md) and [formatRam](./bitburner.ns.formatram.md)\n\n", "ns.ns.formatpercent.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formatPercent](./bitburner.ns.formatpercent.md)\n\n## NS.formatPercent() method\n\nFormat a number as a percentage.\n\n**Signature:**\n\n```typescript\nformatPercent(n: number, fractionalDigits?: number): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format as a percentage. |\n|  fractionalDigits | number | _(Optional)_ Number of digits to show in the fractional part of the decimal number. Optional, defaults to 2. |\n\n**Returns:**\n\nstring\n\nFormatted percentage.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a percentage string with the specified number of fractional digits. This is the same function that the game itself uses to display percentages. The format also depends on the Numeric Display settings (all options on the \"Numeric Display\" options page) To format plain numbers or ram, see [formatNumber](./bitburner.ns.formatnumber.md) and [formatRam](./bitburner.ns.formatram.md)\n\n", "bitburner.hacknetmultipliers.corecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [coreCost](./bitburner.hacknetmultipliers.corecost.md)\n\n## HacknetMultipliers.coreCost property\n\nPlayer's hacknet core cost multiplier\n\n**Signature:**\n\n```typescript\ncoreCost: number;\n```\n", "ns.hacknetmultipliers.corecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [coreCost](./bitburner.hacknetmultipliers.corecost.md)\n\n## HacknetMultipliers.coreCost property\n\nPlayer's hacknet core cost multiplier\n\n**Signature:**\n\n```typescript\ncoreCost: number;\n```\n", "bitburner.singularity.getdarkwebprogramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getDarkwebProgramCost](./bitburner.singularity.getdarkwebprogramcost.md)\n\n## Singularity.getDarkwebProgramCost() method\n\nCheck the price of an exploit on the dark web\n\n**Signature:**\n\n```typescript\ngetDarkwebProgramCost(programName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  programName | string | Name of program to check the price of |\n\n**Returns:**\n\nnumber\n\nPrice of the specified darkweb program (if not yet purchased), 0 if it has already been purchased, or -1 if Tor has not been purchased. Throws an error if the specified program/exploit does not exist\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\nThis function allows you to check the price of a darkweb exploit/program. You MUST have a TOR router in order to use this function. The price returned by this function is the same price you would see with buy -l from the terminal. Returns the cost of the program if it has not been purchased yet, 0 if it has already been purchased, or -1 if Tor has not been purchased (and thus the program/exploit is not available for purchase).\n\nIf the program does not exist, an error is thrown.\n\n## Example 1\n\n\n```ts\n// NS1\ngetDarkwebProgramCost(\"brutessh.exe\");\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.getDarkwebProgramCost(\"brutessh.exe\");\n```\n\n", "ns.singularity.getdarkwebprogramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getDarkwebProgramCost](./bitburner.singularity.getdarkwebprogramcost.md)\n\n## Singularity.getDarkwebProgramCost() method\n\nCheck the price of an exploit on the dark web\n\n**Signature:**\n\n```typescript\ngetDarkwebProgramCost(programName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  programName | string | Name of program to check the price of |\n\n**Returns:**\n\nnumber\n\nPrice of the specified darkweb program (if not yet purchased), 0 if it has already been purchased, or -1 if Tor has not been purchased. Throws an error if the specified program/exploit does not exist\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\nThis function allows you to check the price of a darkweb exploit/program. You MUST have a TOR router in order to use this function. The price returned by this function is the same price you would see with buy -l from the terminal. Returns the cost of the program if it has not been purchased yet, 0 if it has already been purchased, or -1 if Tor has not been purchased (and thus the program/exploit is not available for purchase).\n\nIf the program does not exist, an error is thrown.\n\n## Example 1\n\n\n```ts\n// NS1\ngetDarkwebProgramCost(\"brutessh.exe\");\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.getDarkwebProgramCost(\"brutessh.exe\");\n```\n\n", "bitburner.hacknetserversformulas.cacheupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [cacheUpgradeCost](./bitburner.hacknetserversformulas.cacheupgradecost.md)\n\n## HacknetServersFormulas.cacheUpgradeCost() method\n\nCalculate cost of upgrading hacknet server cache.\n\n**Signature:**\n\n```typescript\ncacheUpgradeCost(startingCache: number, extraCache?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingCache | number | starting cache level |\n|  extraCache | number | _(Optional)_ amount of levels of cache to purchase (defaults to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetserversformulas.cacheupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [cacheUpgradeCost](./bitburner.hacknetserversformulas.cacheupgradecost.md)\n\n## HacknetServersFormulas.cacheUpgradeCost() method\n\nCalculate cost of upgrading hacknet server cache.\n\n**Signature:**\n\n```typescript\ncacheUpgradeCost(startingCache: number, extraCache?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingCache | number | starting cache level |\n|  extraCache | number | _(Optional)_ amount of levels of cache to purchase (defaults to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.corpconstants.warehouseinitialcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [warehouseInitialCost](./bitburner.corpconstants.warehouseinitialcost.md)\n\n## CorpConstants.warehouseInitialCost property\n\n**Signature:**\n\n```typescript\nwarehouseInitialCost: number;\n```\n", "ns.corpconstants.warehouseinitialcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [warehouseInitialCost](./bitburner.corpconstants.warehouseinitialcost.md)\n\n## CorpConstants.warehouseInitialCost property\n\n**Signature:**\n\n```typescript\nwarehouseInitialCost: number;\n```\n", "bitburner.reputationformulas.repfromdonation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md) &gt; [repFromDonation](./bitburner.reputationformulas.repfromdonation.md)\n\n## ReputationFormulas.repFromDonation() method\n\nCalculate how much rep would be gained.\n\n**Signature:**\n\n```typescript\nrepFromDonation(amount: number, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | Amount of money donated |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\n", "ns.reputationformulas.repfromdonation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md) &gt; [repFromDonation](./bitburner.reputationformulas.repfromdonation.md)\n\n## ReputationFormulas.repFromDonation() method\n\nCalculate how much rep would be gained.\n\n**Signature:**\n\n```typescript\nrepFromDonation(amount: number, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | Amount of money donated |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\n", "bitburner.ns.ui.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ui](./bitburner.ns.ui.md)\n\n## NS.ui property\n\nNamespace for user interface functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly ui: UserInterface;\n```\n", "ns.ns.ui.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ui](./bitburner.ns.ui.md)\n\n## NS.ui property\n\nNamespace for user interface functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly ui: UserInterface;\n```\n", "bitburner.singularity.manualhack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [manualHack](./bitburner.singularity.manualhack.md)\n\n## Singularity.manualHack() method\n\nRun the hack command in the terminal.\n\n**Signature:**\n\n```typescript\nmanualHack(): Promise<number>;\n```\n**Returns:**\n\nPromise&lt;number&gt;\n\nAmount of money stolen by manual hacking.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\n", "ns.singularity.manualhack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [manualHack](./bitburner.singularity.manualhack.md)\n\n## Singularity.manualHack() method\n\nRun the hack command in the terminal.\n\n**Signature:**\n\n```typescript\nmanualHack(): Promise<number>;\n```\n**Returns:**\n\nPromise&lt;number&gt;\n\nAmount of money stolen by manual hacking.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\n", "bitburner.person.hp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [hp](./bitburner.person.hp.md)\n\n## Person.hp property\n\n**Signature:**\n\n```typescript\nhp: HP;\n```\n", "ns.person.hp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [hp](./bitburner.person.hp.md)\n\n## Person.hp property\n\n**Signature:**\n\n```typescript\nhp: HP;\n```\n", "bitburner.ns.getscriptincome.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptIncome](./bitburner.ns.getscriptincome.md)\n\n## NS.getScriptIncome() method\n\nGet the income of a script.\n\n**Signature:**\n\n```typescript\ngetScriptIncome(script: string, host: string, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script. |\n|  host | string | Server on which script is running. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments that the script is running with. |\n\n**Returns:**\n\nnumber\n\nAmount of income the specified script generates while online.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of income the specified script generates while online (when the game is open, does not apply for offline income). Remember that a script is uniquely identified by both its name and its arguments. So for example if you ran a script with the arguments \u201cfoodnstuff\u201d and \u201c5\u201d then in order to use this function to get that script\u2019s income you must specify those same arguments in the same order in this function call.\n\n", "ns.ns.getscriptincome.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getScriptIncome](./bitburner.ns.getscriptincome.md)\n\n## NS.getScriptIncome() method\n\nGet the income of a script.\n\n**Signature:**\n\n```typescript\ngetScriptIncome(script: string, host: string, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script. |\n|  host | string | Server on which script is running. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments that the script is running with. |\n\n**Returns:**\n\nnumber\n\nAmount of income the specified script generates while online.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of income the specified script generates while online (when the game is open, does not apply for offline income). Remember that a script is uniquely identified by both its name and its arguments. So for example if you ran a script with the arguments \u201cfoodnstuff\u201d and \u201c5\u201d then in order to use this function to get that script\u2019s income you must specify those same arguments in the same order in this function call.\n\n", "bitburner.gangmemberascension.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [hack](./bitburner.gangmemberascension.hack.md)\n\n## GangMemberAscension.hack property\n\nHacking multiplier gained from ascending\n\n**Signature:**\n\n```typescript\nhack: number;\n```\n", "ns.gangmemberascension.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [hack](./bitburner.gangmemberascension.hack.md)\n\n## GangMemberAscension.hack property\n\nHacking multiplier gained from ascending\n\n**Signature:**\n\n```typescript\nhack: number;\n```\n", "bitburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md)\n\n## bitburner package\n\n## Enumerations\n\n|  Enumeration | Description |\n|  --- | --- |\n|  [CityName](./bitburner.cityname.md) | Names of all cities |\n|  [CrimeType](./bitburner.crimetype.md) |  |\n|  [FactionWorkType](./bitburner.factionworktype.md) |  |\n|  [GymType](./bitburner.gymtype.md) |  |\n|  [JobName](./bitburner.jobname.md) |  |\n|  [LocationName](./bitburner.locationname.md) | Names of all locations |\n|  [OrderTypes](./bitburner.ordertypes.md) |  |\n|  [PositionTypes](./bitburner.positiontypes.md) |  |\n|  [ToastVariant](./bitburner.toastvariant.md) |  |\n|  [UniversityClassType](./bitburner.universityclasstype.md) |  |\n\n## Interfaces\n\n|  Interface | Description |\n|  --- | --- |\n|  [ActiveFragment](./bitburner.activefragment.md) |  |\n|  [AugmentPair](./bitburner.augmentpair.md) | Return value of [getSleevePurchasableAugs](./bitburner.sleeve.getsleevepurchasableaugs.md) |\n|  [AutocompleteData](./bitburner.autocompletedata.md) | Used for autocompletion |\n|  [BasicHGWOptions](./bitburner.basichgwoptions.md) | Options to affect the behavior of [hack](./bitburner.ns.hack.md)<!-- -->, [grow](./bitburner.ns.grow.md)<!-- -->, and [weaken](./bitburner.ns.weaken.md)<!-- -->. |\n|  [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) | All multipliers affecting the difficulty of the current challenge. |\n|  [Bladeburner](./bitburner.bladeburner.md) | Bladeburner API |\n|  [BladeburnerCurAction](./bitburner.bladeburnercuraction.md) | Bladeburner current action. |\n|  [CodingContract](./bitburner.codingcontract.md) | Coding Contract API |\n|  [CorpConstants](./bitburner.corpconstants.md) | Corporation related constants |\n|  [CorpIndustryData](./bitburner.corpindustrydata.md) | Data for an individual industry |\n|  [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) | Corporation material information |\n|  [Corporation](./bitburner.corporation.md) | Corporation API |\n|  [CorporationInfo](./bitburner.corporationinfo.md) | General info about a corporation |\n|  [CorpProductData](./bitburner.corpproductdata.md) | Product rating information |\n|  [CrimeStats](./bitburner.crimestats.md) | Data representing the internal values of a crime. |\n|  [Division](./bitburner.division.md) | Corporation division |\n|  [EquipmentStats](./bitburner.equipmentstats.md) | Object representing data representing a gang member equipment. |\n|  [Export](./bitburner.export.md) | Export order for a material |\n|  [Formulas](./bitburner.formulas.md) | Formulas API |\n|  [Fragment](./bitburner.fragment.md) |  |\n|  [GameInfo](./bitburner.gameinfo.md) | Game Information |\n|  [Gang](./bitburner.gang.md) | Gang API |\n|  [GangFormulas](./bitburner.gangformulas.md) | Gang formulas |\n|  [GangGenInfo](./bitburner.ganggeninfo.md) | Gang general info. |\n|  [GangMemberAscension](./bitburner.gangmemberascension.md) |  |\n|  [GangMemberInfo](./bitburner.gangmemberinfo.md) |  |\n|  [GangOtherInfo](./bitburner.gangotherinfo.md) |  |\n|  [GangOtherInfoObject](./bitburner.gangotherinfoobject.md) |  |\n|  [GangTaskStats](./bitburner.gangtaskstats.md) | Object representing data representing a gang member task. |\n|  [GangTerritory](./bitburner.gangterritory.md) |  |\n|  [Grafting](./bitburner.grafting.md) | Grafting API |\n|  [HackingFormulas](./bitburner.hackingformulas.md) | Hacking formulas |\n|  [HackingMultipliers](./bitburner.hackingmultipliers.md) | Hack related multipliers. |\n|  [Hacknet](./bitburner.hacknet.md) | Hacknet API |\n|  [HacknetMultipliers](./bitburner.hacknetmultipliers.md) | Hacknet related multipliers. |\n|  [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) | Hacknet node related constants |\n|  [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) | Hacknet Node formulas |\n|  [HacknetServerConstants](./bitburner.hacknetserverconstants.md) | Hacknet server related constants |\n|  [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) | Hacknet Server formulas |\n|  [HP](./bitburner.hp.md) |  |\n|  [ILocation](./bitburner.ilocation.md) |  |\n|  [IndustryData](./bitburner.industrydata.md) | Corporation industry information |\n|  [Infiltration](./bitburner.infiltration.md) | Infiltration API. |\n|  [InfiltrationLocation](./bitburner.infiltrationlocation.md) |  |\n|  [InfiltrationReward](./bitburner.infiltrationreward.md) |  |\n|  [InvestmentOffer](./bitburner.investmentoffer.md) | Corporation investment offer |\n|  [IStyleSettings](./bitburner.istylesettings.md) | Interface Styles |\n|  [Material](./bitburner.material.md) | Material in a warehouse |\n|  [MoneySource](./bitburner.moneysource.md) |  |\n|  [MoneySources](./bitburner.moneysources.md) |  |\n|  [Multipliers](./bitburner.multipliers.md) |  |\n|  [NetscriptPort](./bitburner.netscriptport.md) | Object representing a port. A port is a serialized queue. |\n|  [NodeStats](./bitburner.nodestats.md) | Object representing all the values related to a hacknet node. |\n|  [NS](./bitburner.ns.md) | Collection of all functions passed to scripts |\n|  [Office](./bitburner.office.md) | Office for a division in a city. |\n|  [OfficeAPI](./bitburner.officeapi.md) | Corporation Office API |\n|  [Person](./bitburner.person.md) |  |\n|  [Player](./bitburner.player.md) |  |\n|  [ProcessInfo](./bitburner.processinfo.md) | A single process on a server. |\n|  [Product](./bitburner.product.md) | Product in a warehouse |\n|  [RecentScript](./bitburner.recentscript.md) |  |\n|  [ReputationFormulas](./bitburner.reputationformulas.md) | Reputation formulas |\n|  [RunningScript](./bitburner.runningscript.md) |  |\n|  [Server](./bitburner.server.md) | A single server. |\n|  [Singularity](./bitburner.singularity.md) | Singularity API |\n|  [Skills](./bitburner.skills.md) |  |\n|  [SkillsFormulas](./bitburner.skillsformulas.md) | Skills formulas |\n|  [Sleeve](./bitburner.sleeve.md) | Sleeve API |\n|  [SleevePerson](./bitburner.sleeveperson.md) |  |\n|  [SourceFileLvl](./bitburner.sourcefilelvl.md) |  |\n|  [Stanek](./bitburner.stanek.md) | Stanek's Gift API. |\n|  [StockOrder](./bitburner.stockorder.md) | <p>Return value of [getOrders](./bitburner.tix.getorders.md)</p><p>Keys are stock symbols, properties are arrays of [StockOrderObject](./bitburner.stockorderobject.md)</p> |\n|  [StockOrderObject](./bitburner.stockorderobject.md) | Value in map of [StockOrder](./bitburner.stockorder.md) |\n|  [TIX](./bitburner.tix.md) | Stock market API |\n|  [UserInterface](./bitburner.userinterface.md) | User Interface API. |\n|  [UserInterfaceTheme](./bitburner.userinterfacetheme.md) | Interface Theme |\n|  [Warehouse](./bitburner.warehouse.md) | Warehouse for a division in a city |\n|  [WarehouseAPI](./bitburner.warehouseapi.md) | Corporation Warehouse API |\n|  [WorkFormulas](./bitburner.workformulas.md) | Work formulas |\n|  [WorkStats](./bitburner.workstats.md) |  |\n\n## Type Aliases\n\n|  Type Alias | Description |\n|  --- | --- |\n|  [CodingContractData](./bitburner.codingcontractdata.md) | Coding contract data will differ depending on coding contract. |\n|  [CorpEmployeePosition](./bitburner.corpemployeeposition.md) |  |\n|  [CorpIndustryName](./bitburner.corpindustryname.md) |  |\n|  [CorpMaterialName](./bitburner.corpmaterialname.md) |  |\n|  [CorpResearchName](./bitburner.corpresearchname.md) |  |\n|  [CorpStateName](./bitburner.corpstatename.md) |  |\n|  [CorpUnlockName](./bitburner.corpunlockname.md) |  |\n|  [CorpUpgradeName](./bitburner.corpupgradename.md) |  |\n|  [FilenameOrPID](./bitburner.filenameorpid.md) |  |\n|  [NSEnums](./bitburner.nsenums.md) |  |\n|  [PortData](./bitburner.portdata.md) |  |\n|  [ScriptArg](./bitburner.scriptarg.md) |  |\n|  [SleeveBladeburnerTask](./bitburner.sleevebladeburnertask.md) |  |\n|  [SleeveClassTask](./bitburner.sleeveclasstask.md) |  |\n|  [SleeveCompanyTask](./bitburner.sleevecompanytask.md) |  |\n|  [SleeveCrimeTask](./bitburner.sleevecrimetask.md) |  |\n|  [SleeveFactionTask](./bitburner.sleevefactiontask.md) |  |\n|  [SleeveInfiltrateTask](./bitburner.sleeveinfiltratetask.md) |  |\n|  [SleeveRecoveryTask](./bitburner.sleeverecoverytask.md) |  |\n|  [SleeveSupportTask](./bitburner.sleevesupporttask.md) |  |\n|  [SleeveSynchroTask](./bitburner.sleevesynchrotask.md) |  |\n|  [SleeveTask](./bitburner.sleevetask.md) | Object representing a sleeve current task. |\n\n", "ns.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md)\n\n## bitburner package\n\n## Enumerations\n\n|  Enumeration | Description |\n|  --- | --- |\n|  [CityName](./bitburner.cityname.md) | Names of all cities |\n|  [CrimeType](./bitburner.crimetype.md) |  |\n|  [FactionWorkType](./bitburner.factionworktype.md) |  |\n|  [GymType](./bitburner.gymtype.md) |  |\n|  [JobName](./bitburner.jobname.md) |  |\n|  [LocationName](./bitburner.locationname.md) | Names of all locations |\n|  [OrderTypes](./bitburner.ordertypes.md) |  |\n|  [PositionTypes](./bitburner.positiontypes.md) |  |\n|  [ToastVariant](./bitburner.toastvariant.md) |  |\n|  [UniversityClassType](./bitburner.universityclasstype.md) |  |\n\n## Interfaces\n\n|  Interface | Description |\n|  --- | --- |\n|  [ActiveFragment](./bitburner.activefragment.md) |  |\n|  [AugmentPair](./bitburner.augmentpair.md) | Return value of [getSleevePurchasableAugs](./bitburner.sleeve.getsleevepurchasableaugs.md) |\n|  [AutocompleteData](./bitburner.autocompletedata.md) | Used for autocompletion |\n|  [BasicHGWOptions](./bitburner.basichgwoptions.md) | Options to affect the behavior of [hack](./bitburner.ns.hack.md)<!-- -->, [grow](./bitburner.ns.grow.md)<!-- -->, and [weaken](./bitburner.ns.weaken.md)<!-- -->. |\n|  [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) | All multipliers affecting the difficulty of the current challenge. |\n|  [Bladeburner](./bitburner.bladeburner.md) | Bladeburner API |\n|  [BladeburnerCurAction](./bitburner.bladeburnercuraction.md) | Bladeburner current action. |\n|  [CodingContract](./bitburner.codingcontract.md) | Coding Contract API |\n|  [CorpConstants](./bitburner.corpconstants.md) | Corporation related constants |\n|  [CorpIndustryData](./bitburner.corpindustrydata.md) | Data for an individual industry |\n|  [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) | Corporation material information |\n|  [Corporation](./bitburner.corporation.md) | Corporation API |\n|  [CorporationInfo](./bitburner.corporationinfo.md) | General info about a corporation |\n|  [CorpProductData](./bitburner.corpproductdata.md) | Product rating information |\n|  [CrimeStats](./bitburner.crimestats.md) | Data representing the internal values of a crime. |\n|  [Division](./bitburner.division.md) | Corporation division |\n|  [EquipmentStats](./bitburner.equipmentstats.md) | Object representing data representing a gang member equipment. |\n|  [Export](./bitburner.export.md) | Export order for a material |\n|  [Formulas](./bitburner.formulas.md) | Formulas API |\n|  [Fragment](./bitburner.fragment.md) |  |\n|  [GameInfo](./bitburner.gameinfo.md) | Game Information |\n|  [Gang](./bitburner.gang.md) | Gang API |\n|  [GangFormulas](./bitburner.gangformulas.md) | Gang formulas |\n|  [GangGenInfo](./bitburner.ganggeninfo.md) | Gang general info. |\n|  [GangMemberAscension](./bitburner.gangmemberascension.md) |  |\n|  [GangMemberInfo](./bitburner.gangmemberinfo.md) |  |\n|  [GangOtherInfo](./bitburner.gangotherinfo.md) |  |\n|  [GangOtherInfoObject](./bitburner.gangotherinfoobject.md) |  |\n|  [GangTaskStats](./bitburner.gangtaskstats.md) | Object representing data representing a gang member task. |\n|  [GangTerritory](./bitburner.gangterritory.md) |  |\n|  [Grafting](./bitburner.grafting.md) | Grafting API |\n|  [HackingFormulas](./bitburner.hackingformulas.md) | Hacking formulas |\n|  [HackingMultipliers](./bitburner.hackingmultipliers.md) | Hack related multipliers. |\n|  [Hacknet](./bitburner.hacknet.md) | Hacknet API |\n|  [HacknetMultipliers](./bitburner.hacknetmultipliers.md) | Hacknet related multipliers. |\n|  [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) | Hacknet node related constants |\n|  [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) | Hacknet Node formulas |\n|  [HacknetServerConstants](./bitburner.hacknetserverconstants.md) | Hacknet server related constants |\n|  [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) | Hacknet Server formulas |\n|  [HP](./bitburner.hp.md) |  |\n|  [ILocation](./bitburner.ilocation.md) |  |\n|  [IndustryData](./bitburner.industrydata.md) | Corporation industry information |\n|  [Infiltration](./bitburner.infiltration.md) | Infiltration API. |\n|  [InfiltrationLocation](./bitburner.infiltrationlocation.md) |  |\n|  [InfiltrationReward](./bitburner.infiltrationreward.md) |  |\n|  [InvestmentOffer](./bitburner.investmentoffer.md) | Corporation investment offer |\n|  [IStyleSettings](./bitburner.istylesettings.md) | Interface Styles |\n|  [Material](./bitburner.material.md) | Material in a warehouse |\n|  [MoneySource](./bitburner.moneysource.md) |  |\n|  [MoneySources](./bitburner.moneysources.md) |  |\n|  [Multipliers](./bitburner.multipliers.md) |  |\n|  [NetscriptPort](./bitburner.netscriptport.md) | Object representing a port. A port is a serialized queue. |\n|  [NodeStats](./bitburner.nodestats.md) | Object representing all the values related to a hacknet node. |\n|  [NS](./bitburner.ns.md) | Collection of all functions passed to scripts |\n|  [Office](./bitburner.office.md) | Office for a division in a city. |\n|  [OfficeAPI](./bitburner.officeapi.md) | Corporation Office API |\n|  [Person](./bitburner.person.md) |  |\n|  [Player](./bitburner.player.md) |  |\n|  [ProcessInfo](./bitburner.processinfo.md) | A single process on a server. |\n|  [Product](./bitburner.product.md) | Product in a warehouse |\n|  [RecentScript](./bitburner.recentscript.md) |  |\n|  [ReputationFormulas](./bitburner.reputationformulas.md) | Reputation formulas |\n|  [RunningScript](./bitburner.runningscript.md) |  |\n|  [Server](./bitburner.server.md) | A single server. |\n|  [Singularity](./bitburner.singularity.md) | Singularity API |\n|  [Skills](./bitburner.skills.md) |  |\n|  [SkillsFormulas](./bitburner.skillsformulas.md) | Skills formulas |\n|  [Sleeve](./bitburner.sleeve.md) | Sleeve API |\n|  [SleevePerson](./bitburner.sleeveperson.md) |  |\n|  [SourceFileLvl](./bitburner.sourcefilelvl.md) |  |\n|  [Stanek](./bitburner.stanek.md) | Stanek's Gift API. |\n|  [StockOrder](./bitburner.stockorder.md) | <p>Return value of [getOrders](./bitburner.tix.getorders.md)</p><p>Keys are stock symbols, properties are arrays of [StockOrderObject](./bitburner.stockorderobject.md)</p> |\n|  [StockOrderObject](./bitburner.stockorderobject.md) | Value in map of [StockOrder](./bitburner.stockorder.md) |\n|  [TIX](./bitburner.tix.md) | Stock market API |\n|  [UserInterface](./bitburner.userinterface.md) | User Interface API. |\n|  [UserInterfaceTheme](./bitburner.userinterfacetheme.md) | Interface Theme |\n|  [Warehouse](./bitburner.warehouse.md) | Warehouse for a division in a city |\n|  [WarehouseAPI](./bitburner.warehouseapi.md) | Corporation Warehouse API |\n|  [WorkFormulas](./bitburner.workformulas.md) | Work formulas |\n|  [WorkStats](./bitburner.workstats.md) |  |\n\n## Type Aliases\n\n|  Type Alias | Description |\n|  --- | --- |\n|  [CodingContractData](./bitburner.codingcontractdata.md) | Coding contract data will differ depending on coding contract. |\n|  [CorpEmployeePosition](./bitburner.corpemployeeposition.md) |  |\n|  [CorpIndustryName](./bitburner.corpindustryname.md) |  |\n|  [CorpMaterialName](./bitburner.corpmaterialname.md) |  |\n|  [CorpResearchName](./bitburner.corpresearchname.md) |  |\n|  [CorpStateName](./bitburner.corpstatename.md) |  |\n|  [CorpUnlockName](./bitburner.corpunlockname.md) |  |\n|  [CorpUpgradeName](./bitburner.corpupgradename.md) |  |\n|  [FilenameOrPID](./bitburner.filenameorpid.md) |  |\n|  [NSEnums](./bitburner.nsenums.md) |  |\n|  [PortData](./bitburner.portdata.md) |  |\n|  [ScriptArg](./bitburner.scriptarg.md) |  |\n|  [SleeveBladeburnerTask](./bitburner.sleevebladeburnertask.md) |  |\n|  [SleeveClassTask](./bitburner.sleeveclasstask.md) |  |\n|  [SleeveCompanyTask](./bitburner.sleevecompanytask.md) |  |\n|  [SleeveCrimeTask](./bitburner.sleevecrimetask.md) |  |\n|  [SleeveFactionTask](./bitburner.sleevefactiontask.md) |  |\n|  [SleeveInfiltrateTask](./bitburner.sleeveinfiltratetask.md) |  |\n|  [SleeveRecoveryTask](./bitburner.sleeverecoverytask.md) |  |\n|  [SleeveSupportTask](./bitburner.sleevesupporttask.md) |  |\n|  [SleeveSynchroTask](./bitburner.sleevesynchrotask.md) |  |\n|  [SleeveTask](./bitburner.sleevetask.md) | Object representing a sleeve current task. |\n\n", "bitburner.corpconstants.sellsharescooldown.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [sellSharesCooldown](./bitburner.corpconstants.sellsharescooldown.md)\n\n## CorpConstants.sellSharesCooldown property\n\nCooldown for selling shares in game cycles (1 game cycle = 200ms)\n\n**Signature:**\n\n```typescript\nsellSharesCooldown: number;\n```\n", "ns.corpconstants.sellsharescooldown.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [sellSharesCooldown](./bitburner.corpconstants.sellsharescooldown.md)\n\n## CorpConstants.sellSharesCooldown property\n\nCooldown for selling shares in game cycles (1 game cycle = 200ms)\n\n**Signature:**\n\n```typescript\nsellSharesCooldown: number;\n```\n", "bitburner.ns.getservermaxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMaxRam](./bitburner.ns.getservermaxram.md)\n\n## NS.getServerMaxRam() method\n\nGet the maximum amount of RAM on a server.\n\n**Signature:**\n\n```typescript\ngetServerMaxRam(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe maximum amount of RAM (GB) a server can have.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.getservermaxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMaxRam](./bitburner.ns.getservermaxram.md)\n\n## NS.getServerMaxRam() method\n\nGet the maximum amount of RAM on a server.\n\n**Signature:**\n\n```typescript\ngetServerMaxRam(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe maximum amount of RAM (GB) a server can have.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.multipliers.hacking_speed.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_speed](./bitburner.multipliers.hacking_speed.md)\n\n## Multipliers.hacking\\_speed property\n\nMultiplier to hacking speed\n\n**Signature:**\n\n```typescript\nhacking_speed: number;\n```\n", "ns.multipliers.hacking_speed.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_speed](./bitburner.multipliers.hacking_speed.md)\n\n## Multipliers.hacking\\_speed property\n\nMultiplier to hacking speed\n\n**Signature:**\n\n```typescript\nhacking_speed: number;\n```\n", "bitburner.codingcontract.getcontracttype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getContractType](./bitburner.codingcontract.getcontracttype.md)\n\n## CodingContract.getContractType() method\n\nGet the type of a coding contract.\n\n**Signature:**\n\n```typescript\ngetContractType(filename: string, host?: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nstring\n\nName describing the type of problem posed by the Coding Contract.\n\n## Remarks\n\nRAM cost: 5 GB\n\nReturns a name describing the type of problem posed by the Coding Contract. (e.g. Find Largest Prime Factor, Total Ways to Sum, etc.)\n\n", "ns.codingcontract.getcontracttype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getContractType](./bitburner.codingcontract.getcontracttype.md)\n\n## CodingContract.getContractType() method\n\nGet the type of a coding contract.\n\n**Signature:**\n\n```typescript\ngetContractType(filename: string, host?: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nstring\n\nName describing the type of problem posed by the Coding Contract.\n\n## Remarks\n\nRAM cost: 5 GB\n\nReturns a name describing the type of problem posed by the Coding Contract. (e.g. Find Largest Prime Factor, Total Ways to Sum, etc.)\n\n", "bitburner.warehouseapi.getupgradewarehousecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getUpgradeWarehouseCost](./bitburner.warehouseapi.getupgradewarehousecost.md)\n\n## WarehouseAPI.getUpgradeWarehouseCost() method\n\nGets the cost to upgrade a warehouse to the next level\n\n**Signature:**\n\n```typescript\ngetUpgradeWarehouseCost(divisionName: string, city: CityName | `${CityName}`, amt?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  amt | number | _(Optional)_ amount of upgrades. Optional, defaults to 1 |\n\n**Returns:**\n\nnumber\n\ncost to upgrade\n\n", "ns.warehouseapi.getupgradewarehousecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [getUpgradeWarehouseCost](./bitburner.warehouseapi.getupgradewarehousecost.md)\n\n## WarehouseAPI.getUpgradeWarehouseCost() method\n\nGets the cost to upgrade a warehouse to the next level\n\n**Signature:**\n\n```typescript\ngetUpgradeWarehouseCost(divisionName: string, city: CityName | `${CityName}`, amt?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  amt | number | _(Optional)_ amount of upgrades. Optional, defaults to 1 |\n\n**Returns:**\n\nnumber\n\ncost to upgrade\n\n", "bitburner.sleeve.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md)\n\n## Sleeve interface\n\nSleeve API\n\n**Signature:**\n\n```typescript\nexport interface Sleeve \n```\n\n## Remarks\n\nIf you are not in BitNode-10, then you must have Source-File 10 in order to use this API.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getNumSleeves()](./bitburner.sleeve.getnumsleeves.md) | Get the number of sleeves you own. |\n|  [getSleeve(sleeveNumber)](./bitburner.sleeve.getsleeve.md) | Get information about a sleeve. |\n|  [getSleeveAugmentationPrice(augName)](./bitburner.sleeve.getsleeveaugmentationprice.md) | Get price of an augmentation. |\n|  [getSleeveAugmentationRepReq(augName)](./bitburner.sleeve.getsleeveaugmentationrepreq.md) | Get reputation requirement of an augmentation. |\n|  [getSleeveAugmentations(sleeveNumber)](./bitburner.sleeve.getsleeveaugmentations.md) | Get augmentations installed on a sleeve. |\n|  [getSleevePurchasableAugs(sleeveNumber)](./bitburner.sleeve.getsleevepurchasableaugs.md) | List purchasable augs for a sleeve. |\n|  [getTask(sleeveNumber)](./bitburner.sleeve.gettask.md) | Get task of a sleeve. |\n|  [purchaseSleeveAug(sleeveNumber, augName)](./bitburner.sleeve.purchasesleeveaug.md) | Purchase an aug for a sleeve. |\n|  [setToBladeburnerAction(sleeveNumber, action, contract)](./bitburner.sleeve.settobladeburneraction.md) | Set a sleeve to perform bladeburner actions. |\n|  [setToCommitCrime(sleeveNumber, crimeType)](./bitburner.sleeve.settocommitcrime.md) | Set a sleeve to commit crime. |\n|  [setToCompanyWork(sleeveNumber, companyName)](./bitburner.sleeve.settocompanywork.md) | Set a sleeve to work for a company. |\n|  [setToFactionWork(sleeveNumber, factionName, factionWorkType)](./bitburner.sleeve.settofactionwork.md) | Set a sleeve to work for a faction. |\n|  [setToGymWorkout(sleeveNumber, gymName, stat)](./bitburner.sleeve.settogymworkout.md) | Set a sleeve to workout at the gym. |\n|  [setToShockRecovery(sleeveNumber)](./bitburner.sleeve.settoshockrecovery.md) | Set a sleeve to shock recovery. |\n|  [setToSynchronize(sleeveNumber)](./bitburner.sleeve.settosynchronize.md) | Set a sleeve to synchronize. |\n|  [setToUniversityCourse(sleeveNumber, university, className)](./bitburner.sleeve.settouniversitycourse.md) | Set a sleeve to take a class at a university. |\n|  [travel(sleeveNumber, city)](./bitburner.sleeve.travel.md) | Make a sleeve travel to another city. |\n\n", "ns.sleeve.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md)\n\n## Sleeve interface\n\nSleeve API\n\n**Signature:**\n\n```typescript\nexport interface Sleeve \n```\n\n## Remarks\n\nIf you are not in BitNode-10, then you must have Source-File 10 in order to use this API.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getNumSleeves()](./bitburner.sleeve.getnumsleeves.md) | Get the number of sleeves you own. |\n|  [getSleeve(sleeveNumber)](./bitburner.sleeve.getsleeve.md) | Get information about a sleeve. |\n|  [getSleeveAugmentationPrice(augName)](./bitburner.sleeve.getsleeveaugmentationprice.md) | Get price of an augmentation. |\n|  [getSleeveAugmentationRepReq(augName)](./bitburner.sleeve.getsleeveaugmentationrepreq.md) | Get reputation requirement of an augmentation. |\n|  [getSleeveAugmentations(sleeveNumber)](./bitburner.sleeve.getsleeveaugmentations.md) | Get augmentations installed on a sleeve. |\n|  [getSleevePurchasableAugs(sleeveNumber)](./bitburner.sleeve.getsleevepurchasableaugs.md) | List purchasable augs for a sleeve. |\n|  [getTask(sleeveNumber)](./bitburner.sleeve.gettask.md) | Get task of a sleeve. |\n|  [purchaseSleeveAug(sleeveNumber, augName)](./bitburner.sleeve.purchasesleeveaug.md) | Purchase an aug for a sleeve. |\n|  [setToBladeburnerAction(sleeveNumber, action, contract)](./bitburner.sleeve.settobladeburneraction.md) | Set a sleeve to perform bladeburner actions. |\n|  [setToCommitCrime(sleeveNumber, crimeType)](./bitburner.sleeve.settocommitcrime.md) | Set a sleeve to commit crime. |\n|  [setToCompanyWork(sleeveNumber, companyName)](./bitburner.sleeve.settocompanywork.md) | Set a sleeve to work for a company. |\n|  [setToFactionWork(sleeveNumber, factionName, factionWorkType)](./bitburner.sleeve.settofactionwork.md) | Set a sleeve to work for a faction. |\n|  [setToGymWorkout(sleeveNumber, gymName, stat)](./bitburner.sleeve.settogymworkout.md) | Set a sleeve to workout at the gym. |\n|  [setToShockRecovery(sleeveNumber)](./bitburner.sleeve.settoshockrecovery.md) | Set a sleeve to shock recovery. |\n|  [setToSynchronize(sleeveNumber)](./bitburner.sleeve.settosynchronize.md) | Set a sleeve to synchronize. |\n|  [setToUniversityCourse(sleeveNumber, university, className)](./bitburner.sleeve.settouniversitycourse.md) | Set a sleeve to take a class at a university. |\n|  [travel(sleeveNumber, city)](./bitburner.sleeve.travel.md) | Make a sleeve travel to another city. |\n\n", "bitburner.corporation.levelupgrade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [levelUpgrade](./bitburner.corporation.levelupgrade.md)\n\n## Corporation.levelUpgrade() method\n\nLevel an upgrade.\n\n**Signature:**\n\n```typescript\nlevelUpgrade(upgradeName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.levelupgrade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [levelUpgrade](./bitburner.corporation.levelupgrade.md)\n\n## Corporation.levelUpgrade() method\n\nLevel an upgrade.\n\n**Signature:**\n\n```typescript\nlevelUpgrade(upgradeName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nvoid\n\n", "bitburner.singularity.quitjob.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [quitJob](./bitburner.singularity.quitjob.md)\n\n## Singularity.quitJob() method\n\nQuit jobs by company.\n\n**Signature:**\n\n```typescript\nquitJob(companyName?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | _(Optional)_ Name of the company. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will finish work with the company provided and quit any jobs.\n\n", "ns.singularity.quitjob.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [quitJob](./bitburner.singularity.quitjob.md)\n\n## Singularity.quitJob() method\n\nQuit jobs by company.\n\n**Signature:**\n\n```typescript\nquitJob(companyName?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | _(Optional)_ Name of the company. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will finish work with the company provided and quit any jobs.\n\n", "bitburner.hacknetserverconstants.maxcores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxCores](./bitburner.hacknetserverconstants.maxcores.md)\n\n## HacknetServerConstants.MaxCores property\n\nMax number of cores\n\n**Signature:**\n\n```typescript\nMaxCores: number;\n```\n", "ns.hacknetserverconstants.maxcores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxCores](./bitburner.hacknetserverconstants.maxcores.md)\n\n## HacknetServerConstants.MaxCores property\n\nMax number of cores\n\n**Signature:**\n\n```typescript\nMaxCores: number;\n```\n", "bitburner.ns.getserverminsecuritylevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMinSecurityLevel](./bitburner.ns.getserverminsecuritylevel.md)\n\n## NS.getServerMinSecurityLevel() method\n\nReturns the minimum security level of the target server.\n\n**Signature:**\n\n```typescript\ngetServerMinSecurityLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nMinimum security level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.getserverminsecuritylevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMinSecurityLevel](./bitburner.ns.getserverminsecuritylevel.md)\n\n## NS.getServerMinSecurityLevel() method\n\nReturns the minimum security level of the target server.\n\n**Signature:**\n\n```typescript\ngetServerMinSecurityLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nMinimum security level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.universityclasstype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UniversityClassType](./bitburner.universityclasstype.md)\n\n## UniversityClassType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum UniversityClassType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  algorithms | <code>&quot;Algorithms&quot;</code> |  |\n|  computerScience | <code>&quot;Computer Science&quot;</code> |  |\n|  dataStructures | <code>&quot;Data Structures&quot;</code> |  |\n|  leadership | <code>&quot;Leadership&quot;</code> |  |\n|  management | <code>&quot;Management&quot;</code> |  |\n|  networks | <code>&quot;Networks&quot;</code> |  |\n\n", "ns.universityclasstype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UniversityClassType](./bitburner.universityclasstype.md)\n\n## UniversityClassType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum UniversityClassType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  algorithms | <code>&quot;Algorithms&quot;</code> |  |\n|  computerScience | <code>&quot;Computer Science&quot;</code> |  |\n|  dataStructures | <code>&quot;Data Structures&quot;</code> |  |\n|  leadership | <code>&quot;Leadership&quot;</code> |  |\n|  management | <code>&quot;Management&quot;</code> |  |\n|  networks | <code>&quot;Networks&quot;</code> |  |\n\n", "bitburner.bladeburner.getcurrentaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCurrentAction](./bitburner.bladeburner.getcurrentaction.md)\n\n## Bladeburner.getCurrentAction() method\n\nGet current action.\n\n**Signature:**\n\n```typescript\ngetCurrentAction(): BladeburnerCurAction;\n```\n**Returns:**\n\n[BladeburnerCurAction](./bitburner.bladeburnercuraction.md)\n\nObject that represents the player\u2019s current Bladeburner action.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns an object that represents the player\u2019s current Bladeburner action. If the player is not performing an action, the function will return an object with the \u2018type\u2019 property set to \u201cIdle\u201d.\n\n", "ns.bladeburner.getcurrentaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCurrentAction](./bitburner.bladeburner.getcurrentaction.md)\n\n## Bladeburner.getCurrentAction() method\n\nGet current action.\n\n**Signature:**\n\n```typescript\ngetCurrentAction(): BladeburnerCurAction;\n```\n**Returns:**\n\n[BladeburnerCurAction](./bitburner.bladeburnercuraction.md)\n\nObject that represents the player\u2019s current Bladeburner action.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns an object that represents the player\u2019s current Bladeburner action. If the player is not performing an action, the function will return an object with the \u2018type\u2019 property set to \u201cIdle\u201d.\n\n", "bitburner.skillsformulas.calculateexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SkillsFormulas](./bitburner.skillsformulas.md) &gt; [calculateExp](./bitburner.skillsformulas.calculateexp.md)\n\n## SkillsFormulas.calculateExp() method\n\nCalculate exp for skill level.\n\n**Signature:**\n\n```typescript\ncalculateExp(skill: number, skillMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  skill | number | target skill level |\n|  skillMult | number | _(Optional)_ Multiplier for that skill, defaults to 1. |\n\n**Returns:**\n\nnumber\n\nThe calculated exp required.\n\n", "ns.skillsformulas.calculateexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SkillsFormulas](./bitburner.skillsformulas.md) &gt; [calculateExp](./bitburner.skillsformulas.calculateexp.md)\n\n## SkillsFormulas.calculateExp() method\n\nCalculate exp for skill level.\n\n**Signature:**\n\n```typescript\ncalculateExp(skill: number, skillMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  skill | number | target skill level |\n|  skillMult | number | _(Optional)_ Multiplier for that skill, defaults to 1. |\n\n**Returns:**\n\nnumber\n\nThe calculated exp required.\n\n", "bitburner.bitnodemultipliers.corporationsoftcap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CorporationSoftcap](./bitburner.bitnodemultipliers.corporationsoftcap.md)\n\n## BitNodeMultipliers.CorporationSoftcap property\n\nInfluences the money gain from dividends of corporations created by the player.\n\n**Signature:**\n\n```typescript\nCorporationSoftcap: number;\n```\n", "ns.bitnodemultipliers.corporationsoftcap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CorporationSoftcap](./bitburner.bitnodemultipliers.corporationsoftcap.md)\n\n## BitNodeMultipliers.CorporationSoftcap property\n\nInfluences the money gain from dividends of corporations created by the player.\n\n**Signature:**\n\n```typescript\nCorporationSoftcap: number;\n```\n", "bitburner.ns.write.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [write](./bitburner.ns.write.md)\n\n## NS.write() method\n\nWrite data to a file.\n\n**Signature:**\n\n```typescript\nwrite(filename: string, data?: string, mode?: \"w\" | \"a\"): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Name of the file to be written to. |\n|  data | string | _(Optional)_ Data to write. |\n|  mode | \"w\" \\| \"a\" | _(Optional)_ Defines the write mode. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function can be used to write data to a text file (.txt) or a script (.js or .script).\n\nThis function will write data to that file. If the specified file does not exist, then it will be created. The third argument mode defines how the data will be written to the file. If mode is set to \u201cw\u201d, then the data is written in \u201cwrite\u201d mode which means that it will overwrite all existing data on the file. If mode is set to any other value then the data will be written in \u201cappend\u201d mode which means that the data will be added at the end of the file.\n\n", "ns.ns.write.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [write](./bitburner.ns.write.md)\n\n## NS.write() method\n\nWrite data to a file.\n\n**Signature:**\n\n```typescript\nwrite(filename: string, data?: string, mode?: \"w\" | \"a\"): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Name of the file to be written to. |\n|  data | string | _(Optional)_ Data to write. |\n|  mode | \"w\" \\| \"a\" | _(Optional)_ Defines the write mode. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function can be used to write data to a text file (.txt) or a script (.js or .script).\n\nThis function will write data to that file. If the specified file does not exist, then it will be created. The third argument mode defines how the data will be written to the file. If mode is set to \u201cw\u201d, then the data is written in \u201cwrite\u201d mode which means that it will overwrite all existing data on the file. If mode is set to any other value then the data will be written in \u201cappend\u201d mode which means that the data will be added at the end of the file.\n\n", "bitburner.ns.hackanalyzesecurity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyzeSecurity](./bitburner.ns.hackanalyzesecurity.md)\n\n## NS.hackAnalyzeSecurity() method\n\nGet the security increase for a number of threads.\n\n**Signature:**\n\n```typescript\nhackAnalyzeSecurity(threads: number, hostname?: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  threads | number | Amount of threads that will be used. |\n|  hostname | string | _(Optional)_ Hostname of the target server. The number of threads is limited to the number needed to hack the server's maximum amount of money. |\n\n**Returns:**\n\nnumber\n\nThe security increase.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the security increase that would occur if a hack with this many threads happened.\n\n", "ns.ns.hackanalyzesecurity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyzeSecurity](./bitburner.ns.hackanalyzesecurity.md)\n\n## NS.hackAnalyzeSecurity() method\n\nGet the security increase for a number of threads.\n\n**Signature:**\n\n```typescript\nhackAnalyzeSecurity(threads: number, hostname?: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  threads | number | Amount of threads that will be used. |\n|  hostname | string | _(Optional)_ Hostname of the target server. The number of threads is limited to the number needed to hack the server's maximum amount of money. |\n\n**Returns:**\n\nnumber\n\nThe security increase.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the security increase that would occur if a hack with this many threads happened.\n\n", "bitburner.division.lastcyclerevenue.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [lastCycleRevenue](./bitburner.division.lastcyclerevenue.md)\n\n## Division.lastCycleRevenue property\n\nRevenue last cycle\n\n**Signature:**\n\n```typescript\nlastCycleRevenue: number;\n```\n", "ns.division.lastcyclerevenue.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [lastCycleRevenue](./bitburner.division.lastcyclerevenue.md)\n\n## Division.lastCycleRevenue property\n\nRevenue last cycle\n\n**Signature:**\n\n```typescript\nlastCycleRevenue: number;\n```\n", "bitburner.sourcefilelvl.n.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SourceFileLvl](./bitburner.sourcefilelvl.md) &gt; [n](./bitburner.sourcefilelvl.n.md)\n\n## SourceFileLvl.n property\n\nThe number of the source file\n\n**Signature:**\n\n```typescript\nn: number;\n```\n", "ns.sourcefilelvl.n.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SourceFileLvl](./bitburner.sourcefilelvl.md) &gt; [n](./bitburner.sourcefilelvl.n.md)\n\n## SourceFileLvl.n property\n\nThe number of the source file\n\n**Signature:**\n\n```typescript\nn: number;\n```\n", "bitburner.warehouseapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md)\n\n## WarehouseAPI interface\n\nCorporation Warehouse API\n\n**Signature:**\n\n```typescript\nexport interface WarehouseAPI \n```\n\n## Remarks\n\nRequires the Warehouse API upgrade from your corporation.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [bulkPurchase(divisionName, city, materialName, amt)](./bitburner.warehouseapi.bulkpurchase.md) | Set material to bulk buy |\n|  [buyMaterial(divisionName, city, materialName, amt)](./bitburner.warehouseapi.buymaterial.md) | Set material buy data |\n|  [cancelExportMaterial(sourceDivision, sourceCity, targetDivision, targetCity, materialName, amt)](./bitburner.warehouseapi.cancelexportmaterial.md) | Cancel material export |\n|  [discontinueProduct(divisionName, productName)](./bitburner.warehouseapi.discontinueproduct.md) | Discontinue a product. |\n|  [exportMaterial(sourceDivision, sourceCity, targetDivision, targetCity, materialName, amt)](./bitburner.warehouseapi.exportmaterial.md) | Set material export data |\n|  [getMaterial(divisionName, city, materialName)](./bitburner.warehouseapi.getmaterial.md) | Get material data |\n|  [getProduct(divisionName, productName)](./bitburner.warehouseapi.getproduct.md) | Get product data |\n|  [getUpgradeWarehouseCost(divisionName, city, amt)](./bitburner.warehouseapi.getupgradewarehousecost.md) | Gets the cost to upgrade a warehouse to the next level |\n|  [getWarehouse(divisionName, city)](./bitburner.warehouseapi.getwarehouse.md) | Get warehouse data |\n|  [hasWarehouse(divisionName, city)](./bitburner.warehouseapi.haswarehouse.md) | Check if you have a warehouse in city |\n|  [limitMaterialProduction(divisionName, city, materialName, qty)](./bitburner.warehouseapi.limitmaterialproduction.md) | Limit Material Production. |\n|  [limitProductProduction(divisionName, city, productName, qty)](./bitburner.warehouseapi.limitproductproduction.md) | Limit Product Production. |\n|  [makeProduct(divisionName, city, productName, designInvest, marketingInvest)](./bitburner.warehouseapi.makeproduct.md) | Create a new product |\n|  [purchaseWarehouse(divisionName, city)](./bitburner.warehouseapi.purchasewarehouse.md) | Purchase warehouse for a new city |\n|  [sellMaterial(divisionName, city, materialName, amt, price)](./bitburner.warehouseapi.sellmaterial.md) | Set material sell data. |\n|  [sellProduct(divisionName, city, productName, amt, price, all)](./bitburner.warehouseapi.sellproduct.md) | Set product sell data. |\n|  [setMaterialMarketTA1(divisionName, city, materialName, on)](./bitburner.warehouseapi.setmaterialmarketta1.md) | Set market TA 1 for a material. |\n|  [setMaterialMarketTA2(divisionName, city, materialName, on)](./bitburner.warehouseapi.setmaterialmarketta2.md) | Set market TA 2 for a material. |\n|  [setProductMarketTA1(divisionName, productName, on)](./bitburner.warehouseapi.setproductmarketta1.md) | Set market TA 1 for a product. |\n|  [setProductMarketTA2(divisionName, productName, on)](./bitburner.warehouseapi.setproductmarketta2.md) | Set market TA 2 for a product. |\n|  [setSmartSupply(divisionName, city, enabled)](./bitburner.warehouseapi.setsmartsupply.md) | Set smart supply |\n|  [setSmartSupplyUseLeftovers(divisionName, city, materialName, enabled)](./bitburner.warehouseapi.setsmartsupplyuseleftovers.md) | Set whether smart supply uses leftovers before buying |\n|  [upgradeWarehouse(divisionName, city, amt)](./bitburner.warehouseapi.upgradewarehouse.md) | Upgrade warehouse |\n\n", "ns.warehouseapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md)\n\n## WarehouseAPI interface\n\nCorporation Warehouse API\n\n**Signature:**\n\n```typescript\nexport interface WarehouseAPI \n```\n\n## Remarks\n\nRequires the Warehouse API upgrade from your corporation.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [bulkPurchase(divisionName, city, materialName, amt)](./bitburner.warehouseapi.bulkpurchase.md) | Set material to bulk buy |\n|  [buyMaterial(divisionName, city, materialName, amt)](./bitburner.warehouseapi.buymaterial.md) | Set material buy data |\n|  [cancelExportMaterial(sourceDivision, sourceCity, targetDivision, targetCity, materialName, amt)](./bitburner.warehouseapi.cancelexportmaterial.md) | Cancel material export |\n|  [discontinueProduct(divisionName, productName)](./bitburner.warehouseapi.discontinueproduct.md) | Discontinue a product. |\n|  [exportMaterial(sourceDivision, sourceCity, targetDivision, targetCity, materialName, amt)](./bitburner.warehouseapi.exportmaterial.md) | Set material export data |\n|  [getMaterial(divisionName, city, materialName)](./bitburner.warehouseapi.getmaterial.md) | Get material data |\n|  [getProduct(divisionName, productName)](./bitburner.warehouseapi.getproduct.md) | Get product data |\n|  [getUpgradeWarehouseCost(divisionName, city, amt)](./bitburner.warehouseapi.getupgradewarehousecost.md) | Gets the cost to upgrade a warehouse to the next level |\n|  [getWarehouse(divisionName, city)](./bitburner.warehouseapi.getwarehouse.md) | Get warehouse data |\n|  [hasWarehouse(divisionName, city)](./bitburner.warehouseapi.haswarehouse.md) | Check if you have a warehouse in city |\n|  [limitMaterialProduction(divisionName, city, materialName, qty)](./bitburner.warehouseapi.limitmaterialproduction.md) | Limit Material Production. |\n|  [limitProductProduction(divisionName, city, productName, qty)](./bitburner.warehouseapi.limitproductproduction.md) | Limit Product Production. |\n|  [makeProduct(divisionName, city, productName, designInvest, marketingInvest)](./bitburner.warehouseapi.makeproduct.md) | Create a new product |\n|  [purchaseWarehouse(divisionName, city)](./bitburner.warehouseapi.purchasewarehouse.md) | Purchase warehouse for a new city |\n|  [sellMaterial(divisionName, city, materialName, amt, price)](./bitburner.warehouseapi.sellmaterial.md) | Set material sell data. |\n|  [sellProduct(divisionName, city, productName, amt, price, all)](./bitburner.warehouseapi.sellproduct.md) | Set product sell data. |\n|  [setMaterialMarketTA1(divisionName, city, materialName, on)](./bitburner.warehouseapi.setmaterialmarketta1.md) | Set market TA 1 for a material. |\n|  [setMaterialMarketTA2(divisionName, city, materialName, on)](./bitburner.warehouseapi.setmaterialmarketta2.md) | Set market TA 2 for a material. |\n|  [setProductMarketTA1(divisionName, productName, on)](./bitburner.warehouseapi.setproductmarketta1.md) | Set market TA 1 for a product. |\n|  [setProductMarketTA2(divisionName, productName, on)](./bitburner.warehouseapi.setproductmarketta2.md) | Set market TA 2 for a product. |\n|  [setSmartSupply(divisionName, city, enabled)](./bitburner.warehouseapi.setsmartsupply.md) | Set smart supply |\n|  [setSmartSupplyUseLeftovers(divisionName, city, materialName, enabled)](./bitburner.warehouseapi.setsmartsupplyuseleftovers.md) | Set whether smart supply uses leftovers before buying |\n|  [upgradeWarehouse(divisionName, city, amt)](./bitburner.warehouseapi.upgradewarehouse.md) | Upgrade warehouse |\n\n", "bitburner.runningscript.offlinemoneymade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [offlineMoneyMade](./bitburner.runningscript.offlinemoneymade.md)\n\n## RunningScript.offlineMoneyMade property\n\nTotal amount of money made by this script when offline\n\n**Signature:**\n\n```typescript\nofflineMoneyMade: number;\n```\n", "ns.runningscript.offlinemoneymade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [offlineMoneyMade](./bitburner.runningscript.offlinemoneymade.md)\n\n## RunningScript.offlineMoneyMade property\n\nTotal amount of money made by this script when offline\n\n**Signature:**\n\n```typescript\nofflineMoneyMade: number;\n```\n", "bitburner.formulas.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [hacking](./bitburner.formulas.hacking.md)\n\n## Formulas.hacking property\n\nHacking formulas\n\n**Signature:**\n\n```typescript\nhacking: HackingFormulas;\n```\n", "ns.formulas.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [hacking](./bitburner.formulas.hacking.md)\n\n## Formulas.hacking property\n\nHacking formulas\n\n**Signature:**\n\n```typescript\nhacking: HackingFormulas;\n```\n", "bitburner.ns.serverexists.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [serverExists](./bitburner.ns.serverexists.md)\n\n## NS.serverExists() method\n\nReturns a boolean denoting whether or not the specified server exists.\n\n**Signature:**\n\n```typescript\nserverExists(host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified server exists, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.serverexists.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [serverExists](./bitburner.ns.serverexists.md)\n\n## NS.serverExists() method\n\nReturns a boolean denoting whether or not the specified server exists.\n\n**Signature:**\n\n```typescript\nserverExists(host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified server exists, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.gangmemberascension.dex.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [dex](./bitburner.gangmemberascension.dex.md)\n\n## GangMemberAscension.dex property\n\nDexterity multiplier gained from ascending\n\n**Signature:**\n\n```typescript\ndex: number;\n```\n", "ns.gangmemberascension.dex.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [dex](./bitburner.gangmemberascension.dex.md)\n\n## GangMemberAscension.dex property\n\nDexterity multiplier gained from ascending\n\n**Signature:**\n\n```typescript\ndex: number;\n```\n", "bitburner.material.dmd.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [dmd](./bitburner.material.dmd.md)\n\n## Material.dmd property\n\nDemand for the material, only present if \"Market Research - Demand\" unlocked\n\n**Signature:**\n\n```typescript\ndmd: number | undefined;\n```\n", "ns.material.dmd.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [dmd](./bitburner.material.dmd.md)\n\n## Material.dmd property\n\nDemand for the material, only present if \"Market Research - Demand\" unlocked\n\n**Signature:**\n\n```typescript\ndmd: number | undefined;\n```\n", "bitburner.gangmemberinfo.cha_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_asc\\_mult](./bitburner.gangmemberinfo.cha_asc_mult.md)\n\n## GangMemberInfo.cha\\_asc\\_mult property\n\nCharisma multiplier from ascensions\n\n**Signature:**\n\n```typescript\ncha_asc_mult: number;\n```\n", "ns.gangmemberinfo.cha_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_asc\\_mult](./bitburner.gangmemberinfo.cha_asc_mult.md)\n\n## GangMemberInfo.cha\\_asc\\_mult property\n\nCharisma multiplier from ascensions\n\n**Signature:**\n\n```typescript\ncha_asc_mult: number;\n```\n", "bitburner.gangtaskstats.hackweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [hackWeight](./bitburner.gangtaskstats.hackweight.md)\n\n## GangTaskStats.hackWeight property\n\nHacking skill impact on task scaling\n\n**Signature:**\n\n```typescript\nhackWeight: number;\n```\n", "ns.gangtaskstats.hackweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [hackWeight](./bitburner.gangtaskstats.hackweight.md)\n\n## GangTaskStats.hackWeight property\n\nHacking skill impact on task scaling\n\n**Signature:**\n\n```typescript\nhackWeight: number;\n```\n", "bitburner.corpindustrydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md)\n\n## CorpIndustryData interface\n\nData for an individual industry\n\n**Signature:**\n\n```typescript\ninterface CorpIndustryData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [advertisingFactor?](./bitburner.corpindustrydata.advertisingfactor.md) |  | number | _(Optional)_ Advertising factor (affects sales) |\n|  [aiCoreFactor?](./bitburner.corpindustrydata.aicorefactor.md) |  | number | _(Optional)_ AI Cores factor |\n|  [description](./bitburner.corpindustrydata.description.md) |  | string |  |\n|  [hardwareFactor?](./bitburner.corpindustrydata.hardwarefactor.md) |  | number | _(Optional)_ Hardware factor |\n|  [producedMaterials?](./bitburner.corpindustrydata.producedmaterials.md) |  | [CorpMaterialName](./bitburner.corpmaterialname.md)<!-- -->\\[\\] | _(Optional)_ |\n|  [product?](./bitburner.corpindustrydata.product.md) |  | [CorpProductData](./bitburner.corpproductdata.md) | _(Optional)_ |\n|  [realEstateFactor?](./bitburner.corpindustrydata.realestatefactor.md) |  | number | _(Optional)_ Real estate factor |\n|  [recommendStarting](./bitburner.corpindustrydata.recommendstarting.md) |  | boolean |  |\n|  [requiredMaterials](./bitburner.corpindustrydata.requiredmaterials.md) |  | Partial&lt;Record&lt;[CorpMaterialName](./bitburner.corpmaterialname.md)<!-- -->, number&gt;&gt; |  |\n|  [robotFactor?](./bitburner.corpindustrydata.robotfactor.md) |  | number | _(Optional)_ Robots factor |\n|  [scienceFactor?](./bitburner.corpindustrydata.sciencefactor.md) |  | number | _(Optional)_ Scientific research factor (affects quality) |\n|  [startingCost](./bitburner.corpindustrydata.startingcost.md) |  | number |  |\n\n", "ns.corpindustrydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md)\n\n## CorpIndustryData interface\n\nData for an individual industry\n\n**Signature:**\n\n```typescript\ninterface CorpIndustryData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [advertisingFactor?](./bitburner.corpindustrydata.advertisingfactor.md) |  | number | _(Optional)_ Advertising factor (affects sales) |\n|  [aiCoreFactor?](./bitburner.corpindustrydata.aicorefactor.md) |  | number | _(Optional)_ AI Cores factor |\n|  [description](./bitburner.corpindustrydata.description.md) |  | string |  |\n|  [hardwareFactor?](./bitburner.corpindustrydata.hardwarefactor.md) |  | number | _(Optional)_ Hardware factor |\n|  [producedMaterials?](./bitburner.corpindustrydata.producedmaterials.md) |  | [CorpMaterialName](./bitburner.corpmaterialname.md)<!-- -->\\[\\] | _(Optional)_ |\n|  [product?](./bitburner.corpindustrydata.product.md) |  | [CorpProductData](./bitburner.corpproductdata.md) | _(Optional)_ |\n|  [realEstateFactor?](./bitburner.corpindustrydata.realestatefactor.md) |  | number | _(Optional)_ Real estate factor |\n|  [recommendStarting](./bitburner.corpindustrydata.recommendstarting.md) |  | boolean |  |\n|  [requiredMaterials](./bitburner.corpindustrydata.requiredmaterials.md) |  | Partial&lt;Record&lt;[CorpMaterialName](./bitburner.corpmaterialname.md)<!-- -->, number&gt;&gt; |  |\n|  [robotFactor?](./bitburner.corpindustrydata.robotfactor.md) |  | number | _(Optional)_ Robots factor |\n|  [scienceFactor?](./bitburner.corpindustrydata.sciencefactor.md) |  | number | _(Optional)_ Scientific research factor (affects quality) |\n|  [startingCost](./bitburner.corpindustrydata.startingcost.md) |  | number |  |\n\n", "bitburner.processinfo.args.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [args](./bitburner.processinfo.args.md)\n\n## ProcessInfo.args property\n\nScript's arguments\n\n**Signature:**\n\n```typescript\nargs: (string | number | boolean)[];\n```\n", "ns.processinfo.args.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [args](./bitburner.processinfo.args.md)\n\n## ProcessInfo.args property\n\nScript's arguments\n\n**Signature:**\n\n```typescript\nargs: (string | number | boolean)[];\n```\n", "bitburner.warehouseapi.setsmartsupplyuseleftovers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setSmartSupplyUseLeftovers](./bitburner.warehouseapi.setsmartsupplyuseleftovers.md)\n\n## WarehouseAPI.setSmartSupplyUseLeftovers() method\n\nSet whether smart supply uses leftovers before buying\n\n**Signature:**\n\n```typescript\nsetSmartSupplyUseLeftovers(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    materialName: string,\n    enabled: boolean,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  enabled | boolean | smart supply use leftovers enabled |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.setsmartsupplyuseleftovers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setSmartSupplyUseLeftovers](./bitburner.warehouseapi.setsmartsupplyuseleftovers.md)\n\n## WarehouseAPI.setSmartSupplyUseLeftovers() method\n\nSet whether smart supply uses leftovers before buying\n\n**Signature:**\n\n```typescript\nsetSmartSupplyUseLeftovers(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    materialName: string,\n    enabled: boolean,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  enabled | boolean | smart supply use leftovers enabled |\n\n**Returns:**\n\nvoid\n\n", "bitburner.augmentpair.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AugmentPair](./bitburner.augmentpair.md)\n\n## AugmentPair interface\n\nReturn value of [getSleevePurchasableAugs](./bitburner.sleeve.getsleevepurchasableaugs.md)\n\n**Signature:**\n\n```typescript\ninterface AugmentPair \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cost](./bitburner.augmentpair.cost.md) |  | number | augmentation cost |\n|  [name](./bitburner.augmentpair.name.md) |  | string | augmentation name |\n\n", "ns.augmentpair.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AugmentPair](./bitburner.augmentpair.md)\n\n## AugmentPair interface\n\nReturn value of [getSleevePurchasableAugs](./bitburner.sleeve.getsleevepurchasableaugs.md)\n\n**Signature:**\n\n```typescript\ninterface AugmentPair \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cost](./bitburner.augmentpair.cost.md) |  | number | augmentation cost |\n|  [name](./bitburner.augmentpair.name.md) |  | string | augmentation name |\n\n", "bitburner.gangtaskstats.territory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [territory](./bitburner.gangtaskstats.territory.md)\n\n## GangTaskStats.territory property\n\nTerritory impact on task scaling\n\n**Signature:**\n\n```typescript\nterritory: GangTerritory;\n```\n", "ns.gangtaskstats.territory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [territory](./bitburner.gangtaskstats.territory.md)\n\n## GangTaskStats.territory property\n\nTerritory impact on task scaling\n\n**Signature:**\n\n```typescript\nterritory: GangTerritory;\n```\n", "bitburner.corporation.issuenewshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [issueNewShares](./bitburner.corporation.issuenewshares.md)\n\n## Corporation.issueNewShares() method\n\nIssue new shares\n\n**Signature:**\n\n```typescript\nissueNewShares(amount?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | _(Optional)_ Number of new shares to issue, will be rounded to nearest 10m. Defaults to max amount. |\n\n**Returns:**\n\nnumber\n\nAmount of funds generated for the corporation.\n\n", "ns.corporation.issuenewshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [issueNewShares](./bitburner.corporation.issuenewshares.md)\n\n## Corporation.issueNewShares() method\n\nIssue new shares\n\n**Signature:**\n\n```typescript\nissueNewShares(amount?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | _(Optional)_ Number of new shares to issue, will be rounded to nearest 10m. Defaults to max amount. |\n\n**Returns:**\n\nnumber\n\nAmount of funds generated for the corporation.\n\n", "bitburner.product.developmentprogress.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [developmentProgress](./bitburner.product.developmentprogress.md)\n\n## Product.developmentProgress property\n\nCreation progress - A number between 0-100 representing percentage\n\n**Signature:**\n\n```typescript\ndevelopmentProgress: number;\n```\n", "ns.product.developmentprogress.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [developmentProgress](./bitburner.product.developmentprogress.md)\n\n## Product.developmentProgress property\n\nCreation progress - A number between 0-100 representing percentage\n\n**Signature:**\n\n```typescript\ndevelopmentProgress: number;\n```\n", "bitburner.sleeve.getsleeve.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeve](./bitburner.sleeve.getsleeve.md)\n\n## Sleeve.getSleeve() method\n\nGet information about a sleeve.\n\n**Signature:**\n\n```typescript\ngetSleeve(sleeveNumber: number): SleevePerson;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve information. |\n\n**Returns:**\n\n[SleevePerson](./bitburner.sleeveperson.md)\n\nObject containing information about this sleeve.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a person object for this sleeve\n\nstoredCycles is the amount of Bonus Time in cycles, each translates to 200ms\n\n", "ns.sleeve.getsleeve.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeve](./bitburner.sleeve.getsleeve.md)\n\n## Sleeve.getSleeve() method\n\nGet information about a sleeve.\n\n**Signature:**\n\n```typescript\ngetSleeve(sleeveNumber: number): SleevePerson;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to retrieve information. |\n\n**Returns:**\n\n[SleevePerson](./bitburner.sleeveperson.md)\n\nObject containing information about this sleeve.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a person object for this sleeve\n\nstoredCycles is the amount of Bonus Time in cycles, each translates to 200ms\n\n", "bitburner.moneysources.sincestart.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySources](./bitburner.moneysources.md) &gt; [sinceStart](./bitburner.moneysources.sincestart.md)\n\n## MoneySources.sinceStart property\n\n**Signature:**\n\n```typescript\nsinceStart: MoneySource;\n```\n", "ns.moneysources.sincestart.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySources](./bitburner.moneysources.md) &gt; [sinceStart](./bitburner.moneysources.sincestart.md)\n\n## MoneySources.sinceStart property\n\n**Signature:**\n\n```typescript\nsinceStart: MoneySource;\n```\n", "bitburner.hacknetserverconstants.maxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxRam](./bitburner.hacknetserverconstants.maxram.md)\n\n## HacknetServerConstants.MaxRam property\n\nMax amount of RAM in GB\n\n**Signature:**\n\n```typescript\nMaxRam: number;\n```\n", "ns.hacknetserverconstants.maxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxRam](./bitburner.hacknetserverconstants.maxram.md)\n\n## HacknetServerConstants.MaxRam property\n\nMax amount of RAM in GB\n\n**Signature:**\n\n```typescript\nMaxRam: number;\n```\n", "bitburner.bladeburner.getskilllevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillLevel](./bitburner.bladeburner.getskilllevel.md)\n\n## Bladeburner.getSkillLevel() method\n\nGet skill level.\n\n**Signature:**\n\n```typescript\ngetSkillLevel(name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string |  |\n\n**Returns:**\n\nnumber\n\nLevel in the specified skill.\n\n## Remarks\n\nRAM cost: 4 GB\n\nThis function returns your level in the specified skill.\n\nThe function returns -1 if an invalid skill name is passed in.\n\n", "ns.bladeburner.getskilllevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillLevel](./bitburner.bladeburner.getskilllevel.md)\n\n## Bladeburner.getSkillLevel() method\n\nGet skill level.\n\n**Signature:**\n\n```typescript\ngetSkillLevel(name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string |  |\n\n**Returns:**\n\nnumber\n\nLevel in the specified skill.\n\n## Remarks\n\nRAM cost: 4 GB\n\nThis function returns your level in the specified skill.\n\nThe function returns -1 if an invalid skill name is passed in.\n\n", "bitburner.warehouseapi.cancelexportmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [cancelExportMaterial](./bitburner.warehouseapi.cancelexportmaterial.md)\n\n## WarehouseAPI.cancelExportMaterial() method\n\nCancel material export\n\n**Signature:**\n\n```typescript\ncancelExportMaterial(\n    sourceDivision: string,\n    sourceCity: CityName | `${CityName}`,\n    targetDivision: string,\n    targetCity: CityName | `${CityName}`,\n    materialName: string,\n    amt: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sourceDivision | string | Source division |\n|  sourceCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Source city |\n|  targetDivision | string | Target division |\n|  targetCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Target city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to export. |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.cancelexportmaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [cancelExportMaterial](./bitburner.warehouseapi.cancelexportmaterial.md)\n\n## WarehouseAPI.cancelExportMaterial() method\n\nCancel material export\n\n**Signature:**\n\n```typescript\ncancelExportMaterial(\n    sourceDivision: string,\n    sourceCity: CityName | `${CityName}`,\n    targetDivision: string,\n    targetCity: CityName | `${CityName}`,\n    materialName: string,\n    amt: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sourceDivision | string | Source division |\n|  sourceCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Source city |\n|  targetDivision | string | Target division |\n|  targetCity | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Target city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to export. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.corporation.sellshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [sellShares](./bitburner.corporation.sellshares.md)\n\n## Corporation.sellShares() method\n\nSell Shares\n\n**Signature:**\n\n```typescript\nsellShares(amount: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | Amount of shares to sell. |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.sellshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [sellShares](./bitburner.corporation.sellshares.md)\n\n## Corporation.sellShares() method\n\nSell Shares\n\n**Signature:**\n\n```typescript\nsellShares(amount: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  amount | number | Amount of shares to sell. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.userinterfacetheme.combat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [combat](./bitburner.userinterfacetheme.combat.md)\n\n## UserInterfaceTheme.combat property\n\n**Signature:**\n\n```typescript\ncombat: string;\n```\n", "ns.userinterfacetheme.combat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [combat](./bitburner.userinterfacetheme.combat.md)\n\n## UserInterfaceTheme.combat property\n\n**Signature:**\n\n```typescript\ncombat: string;\n```\n", "bitburner.userinterface.resettheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [resetTheme](./bitburner.userinterface.resettheme.md)\n\n## UserInterface.resetTheme() method\n\nResets the player's theme to the default values\n\n**Signature:**\n\n```typescript\nresetTheme(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.userinterface.resettheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [resetTheme](./bitburner.userinterface.resettheme.md)\n\n## UserInterface.resetTheme() method\n\nResets the player's theme to the default values\n\n**Signature:**\n\n```typescript\nresetTheme(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.processinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md)\n\n## ProcessInfo interface\n\nA single process on a server.\n\n**Signature:**\n\n```typescript\ninterface ProcessInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [args](./bitburner.processinfo.args.md) |  | (string \\| number \\| boolean)\\[\\] | Script's arguments |\n|  [filename](./bitburner.processinfo.filename.md) |  | string | Script name. |\n|  [pid](./bitburner.processinfo.pid.md) |  | number | Process ID |\n|  [threads](./bitburner.processinfo.threads.md) |  | number | Number of threads script is running with |\n\n", "ns.processinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md)\n\n## ProcessInfo interface\n\nA single process on a server.\n\n**Signature:**\n\n```typescript\ninterface ProcessInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [args](./bitburner.processinfo.args.md) |  | (string \\| number \\| boolean)\\[\\] | Script's arguments |\n|  [filename](./bitburner.processinfo.filename.md) |  | string | Script name. |\n|  [pid](./bitburner.processinfo.pid.md) |  | number | Process ID |\n|  [threads](./bitburner.processinfo.threads.md) |  | number | Number of threads script is running with |\n\n", "bitburner.hacknetserverconstants.upgradelevelmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeLevelMult](./bitburner.hacknetserverconstants.upgradelevelmult.md)\n\n## HacknetServerConstants.UpgradeLevelMult property\n\nMultiplier to increase server level\n\n**Signature:**\n\n```typescript\nUpgradeLevelMult: number;\n```\n", "ns.hacknetserverconstants.upgradelevelmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeLevelMult](./bitburner.hacknetserverconstants.upgradelevelmult.md)\n\n## HacknetServerConstants.UpgradeLevelMult property\n\nMultiplier to increase server level\n\n**Signature:**\n\n```typescript\nUpgradeLevelMult: number;\n```\n", "bitburner.ns.tformat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tFormat](./bitburner.ns.tformat.md)\n\n## NS.tFormat() method\n\nFormat time to a readable string.\n\n**Signature:**\n\n```typescript\ntFormat(milliseconds: number, milliPrecision?: boolean): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  milliseconds | number | Number of millisecond to format. |\n|  milliPrecision | boolean | _(Optional)_ Format time with subsecond precision. Defaults to false. |\n\n**Returns:**\n\nstring\n\nThe formatted time.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.tformat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tFormat](./bitburner.ns.tformat.md)\n\n## NS.tFormat() method\n\nFormat time to a readable string.\n\n**Signature:**\n\n```typescript\ntFormat(milliseconds: number, milliPrecision?: boolean): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  milliseconds | number | Number of millisecond to format. |\n|  milliPrecision | boolean | _(Optional)_ Format time with subsecond precision. Defaults to false. |\n\n**Returns:**\n\nstring\n\nThe formatted time.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bladeburner.getactioncurrentlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionCurrentLevel](./bitburner.bladeburner.getactioncurrentlevel.md)\n\n## Bladeburner.getActionCurrentLevel() method\n\nGet the current level of an action.\n\n**Signature:**\n\n```typescript\ngetActionCurrentLevel(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nCurrent level of the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the current level of this action.\n\nReturns -1 if an invalid action is specified.\n\n", "ns.bladeburner.getactioncurrentlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionCurrentLevel](./bitburner.bladeburner.getactioncurrentlevel.md)\n\n## Bladeburner.getActionCurrentLevel() method\n\nGet the current level of an action.\n\n**Signature:**\n\n```typescript\ngetActionCurrentLevel(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nCurrent level of the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the current level of this action.\n\nReturns -1 if an invalid action is specified.\n\n", "bitburner.ns.getserverusedram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerUsedRam](./bitburner.ns.getserverusedram.md)\n\n## NS.getServerUsedRam() method\n\nGet the used RAM on a server.\n\n**Signature:**\n\n```typescript\ngetServerUsedRam(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe amount of used RAM (GB) on the specified server.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.getserverusedram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerUsedRam](./bitburner.ns.getserverusedram.md)\n\n## NS.getServerUsedRam() method\n\nGet the used RAM on a server.\n\n**Signature:**\n\n```typescript\ngetServerUsedRam(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe amount of used RAM (GB) on the specified server.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.industrydata.producedmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [producedMaterials](./bitburner.industrydata.producedmaterials.md)\n\n## IndustryData.producedMaterials property\n\nMaterials produced\n\n**Signature:**\n\n```typescript\nproducedMaterials?: string[];\n```\n", "ns.industrydata.producedmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [producedMaterials](./bitburner.industrydata.producedmaterials.md)\n\n## IndustryData.producedMaterials property\n\nMaterials produced\n\n**Signature:**\n\n```typescript\nproducedMaterials?: string[];\n```\n", "bitburner.corpconstants.unlocknames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [unlockNames](./bitburner.corpconstants.unlocknames.md)\n\n## CorpConstants.unlockNames property\n\nNames of all one-time corporation-wide unlocks\n\n**Signature:**\n\n```typescript\nunlockNames: CorpUnlockName[];\n```\n", "ns.corpconstants.unlocknames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [unlockNames](./bitburner.corpconstants.unlocknames.md)\n\n## CorpConstants.unlockNames property\n\nNames of all one-time corporation-wide unlocks\n\n**Signature:**\n\n```typescript\nunlockNames: CorpUnlockName[];\n```\n", "bitburner.gang.creategang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [createGang](./bitburner.gang.creategang.md)\n\n## Gang.createGang() method\n\nCreate a gang.\n\n**Signature:**\n\n```typescript\ncreateGang(faction: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string |  |\n\n**Returns:**\n\nboolean\n\nTrue if the gang was created, false otherwise.\n\n## Remarks\n\nRAM cost: 1GB\n\nCreate a gang with the specified faction.\n\n", "ns.gang.creategang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [createGang](./bitburner.gang.creategang.md)\n\n## Gang.createGang() method\n\nCreate a gang.\n\n**Signature:**\n\n```typescript\ncreateGang(faction: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string |  |\n\n**Returns:**\n\nboolean\n\nTrue if the gang was created, false otherwise.\n\n## Remarks\n\nRAM cost: 1GB\n\nCreate a gang with the specified faction.\n\n", "bitburner.corpconstants.gamecyclespercorpstatecycle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [gameCyclesPerCorpStateCycle](./bitburner.corpconstants.gamecyclespercorpstatecycle.md)\n\n## CorpConstants.gameCyclesPerCorpStateCycle property\n\n**Signature:**\n\n```typescript\ngameCyclesPerCorpStateCycle: number;\n```\n", "ns.corpconstants.gamecyclespercorpstatecycle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [gameCyclesPerCorpStateCycle](./bitburner.corpconstants.gamecyclespercorpstatecycle.md)\n\n## CorpConstants.gameCyclesPerCorpStateCycle property\n\n**Signature:**\n\n```typescript\ngameCyclesPerCorpStateCycle: number;\n```\n", "bitburner.ns.grafting.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [grafting](./bitburner.ns.grafting.md)\n\n## NS.grafting property\n\nNamespace for grafting functions.\n\n**Signature:**\n\n```typescript\nreadonly grafting: Grafting;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.grafting.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [grafting](./bitburner.ns.grafting.md)\n\n## NS.grafting property\n\nNamespace for grafting functions.\n\n**Signature:**\n\n```typescript\nreadonly grafting: Grafting;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.corpstatename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpStateName](./bitburner.corpstatename.md)\n\n## CorpStateName type\n\n\n**Signature:**\n\n```typescript\ntype CorpStateName = \"START\" | \"PURCHASE\" | \"PRODUCTION\" | \"EXPORT\" | \"SALE\";\n```\n", "ns.corpstatename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpStateName](./bitburner.corpstatename.md)\n\n## CorpStateName type\n\n\n**Signature:**\n\n```typescript\ntype CorpStateName = \"START\" | \"PURCHASE\" | \"PRODUCTION\" | \"EXPORT\" | \"SALE\";\n```\n", "bitburner.corporationinfo.expenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [expenses](./bitburner.corporationinfo.expenses.md)\n\n## CorporationInfo.expenses property\n\nExpenses per second this cycle\n\n**Signature:**\n\n```typescript\nexpenses: number;\n```\n", "ns.corporationinfo.expenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [expenses](./bitburner.corporationinfo.expenses.md)\n\n## CorporationInfo.expenses property\n\nExpenses per second this cycle\n\n**Signature:**\n\n```typescript\nexpenses: number;\n```\n", "bitburner.material.exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [exp](./bitburner.material.exp.md)\n\n## Material.exp property\n\nExport orders\n\n**Signature:**\n\n```typescript\nexp: Export[];\n```\n", "ns.material.exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [exp](./bitburner.material.exp.md)\n\n## Material.exp property\n\nExport orders\n\n**Signature:**\n\n```typescript\nexp: Export[];\n```\n", "bitburner.division.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [name](./bitburner.division.name.md)\n\n## Division.name property\n\nName of the division\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.division.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [name](./bitburner.division.name.md)\n\n## Division.name property\n\nName of the division\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.ns.args.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [args](./bitburner.ns.args.md)\n\n## NS.args property\n\nArguments passed into the script.\n\n**Signature:**\n\n```typescript\nreadonly args: (string | number | boolean)[];\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\nArguments passed into a script can be accessed as a normal array by using the `[]` operator (`args[0]`<!-- -->, `args[1]`<!-- -->, etc...). Arguments can be string, number, or boolean. Use `args.length` to get the number of arguments that were passed into a script.\n\n## Example\n\n`run example.js 7 text true`\n\n```js\n// example.js\nexport async function main(ns) {\n  ns.tprint(ns.args.length) // 3\n  ns.tprint(ns.args[0]); // 7 (number)\n  ns.tprint(ns.args[1]); // \"text\" (string)\n  ns.tprint(ns.args[2]); // true (boolean)\n  ns.tprint(ns.args[3]); // undefined, because only 3 arguments were provided\n}\n```\n\n", "ns.ns.args.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [args](./bitburner.ns.args.md)\n\n## NS.args property\n\nArguments passed into the script.\n\n**Signature:**\n\n```typescript\nreadonly args: (string | number | boolean)[];\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\nArguments passed into a script can be accessed as a normal array by using the `[]` operator (`args[0]`<!-- -->, `args[1]`<!-- -->, etc...). Arguments can be string, number, or boolean. Use `args.length` to get the number of arguments that were passed into a script.\n\n## Example\n\n`run example.js 7 text true`\n\n```js\n// example.js\nexport async function main(ns) {\n  ns.tprint(ns.args.length) // 3\n  ns.tprint(ns.args[0]); // 7 (number)\n  ns.tprint(ns.args[1]); // \"text\" (string)\n  ns.tprint(ns.args[2]); // true (boolean)\n  ns.tprint(ns.args[3]); // undefined, because only 3 arguments were provided\n}\n```\n\n", "bitburner.material.sell.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [sell](./bitburner.material.sell.md)\n\n## Material.sell property\n\nAmount of material sold\n\n**Signature:**\n\n```typescript\nsell: number;\n```\n", "ns.material.sell.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [sell](./bitburner.material.sell.md)\n\n## Material.sell property\n\nAmount of material sold\n\n**Signature:**\n\n```typescript\nsell: number;\n```\n", "bitburner.reputationformulas.calculatefavortorep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md) &gt; [calculateFavorToRep](./bitburner.reputationformulas.calculatefavortorep.md)\n\n## ReputationFormulas.calculateFavorToRep() method\n\nCalculate the total required amount of faction reputation to reach a target favor.\n\n**Signature:**\n\n```typescript\ncalculateFavorToRep(favor: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  favor | number | target faction favor. |\n\n**Returns:**\n\nnumber\n\nThe calculated faction reputation required.\n\n", "ns.reputationformulas.calculatefavortorep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md) &gt; [calculateFavorToRep](./bitburner.reputationformulas.calculatefavortorep.md)\n\n## ReputationFormulas.calculateFavorToRep() method\n\nCalculate the total required amount of faction reputation to reach a target favor.\n\n**Signature:**\n\n```typescript\ncalculateFavorToRep(favor: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  favor | number | target faction favor. |\n\n**Returns:**\n\nnumber\n\nThe calculated faction reputation required.\n\n", "bitburner.singularity.isfocused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [isFocused](./bitburner.singularity.isfocused.md)\n\n## Singularity.isFocused() method\n\nCheck if the player is focused.\n\n**Signature:**\n\n```typescript\nisFocused(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player is focused.\n\n## Remarks\n\nRAM cost: 0.1 GB \\* 16/4/1\n\n", "ns.singularity.isfocused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [isFocused](./bitburner.singularity.isfocused.md)\n\n## Singularity.isFocused() method\n\nCheck if the player is focused.\n\n**Signature:**\n\n```typescript\nisFocused(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player is focused.\n\n## Remarks\n\nRAM cost: 0.1 GB \\* 16/4/1\n\n", "bitburner.userinterfacetheme.success.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [success](./bitburner.userinterfacetheme.success.md)\n\n## UserInterfaceTheme.success property\n\n**Signature:**\n\n```typescript\nsuccess: string;\n```\n", "ns.userinterfacetheme.success.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [success](./bitburner.userinterfacetheme.success.md)\n\n## UserInterfaceTheme.success property\n\n**Signature:**\n\n```typescript\nsuccess: string;\n```\n", "bitburner.sourcefilelvl.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SourceFileLvl](./bitburner.sourcefilelvl.md)\n\n## SourceFileLvl interface\n\n\n**Signature:**\n\n```typescript\ninterface SourceFileLvl \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [lvl](./bitburner.sourcefilelvl.lvl.md) |  | number | The level of the source file |\n|  [n](./bitburner.sourcefilelvl.n.md) |  | number | The number of the source file |\n\n", "ns.sourcefilelvl.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SourceFileLvl](./bitburner.sourcefilelvl.md)\n\n## SourceFileLvl interface\n\n\n**Signature:**\n\n```typescript\ninterface SourceFileLvl \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [lvl](./bitburner.sourcefilelvl.lvl.md) |  | number | The level of the source file |\n|  [n](./bitburner.sourcefilelvl.n.md) |  | number | The number of the source file |\n\n", "bitburner.investmentoffer.shares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md) &gt; [shares](./bitburner.investmentoffer.shares.md)\n\n## InvestmentOffer.shares property\n\nAmount of share you will give in exchange for this investment\n\n**Signature:**\n\n```typescript\nshares: number;\n```\n", "ns.investmentoffer.shares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md) &gt; [shares](./bitburner.investmentoffer.shares.md)\n\n## InvestmentOffer.shares property\n\nAmount of share you will give in exchange for this investment\n\n**Signature:**\n\n```typescript\nshares: number;\n```\n", "bitburner.investmentoffer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md)\n\n## InvestmentOffer interface\n\nCorporation investment offer\n\n**Signature:**\n\n```typescript\ninterface InvestmentOffer \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [funds](./bitburner.investmentoffer.funds.md) |  | number | Amount of funds you will get from this investment |\n|  [round](./bitburner.investmentoffer.round.md) |  | number | Current round of funding (max 4) |\n|  [shares](./bitburner.investmentoffer.shares.md) |  | number | Amount of share you will give in exchange for this investment |\n\n", "ns.investmentoffer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md)\n\n## InvestmentOffer interface\n\nCorporation investment offer\n\n**Signature:**\n\n```typescript\ninterface InvestmentOffer \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [funds](./bitburner.investmentoffer.funds.md) |  | number | Amount of funds you will get from this investment |\n|  [round](./bitburner.investmentoffer.round.md) |  | number | Current round of funding (max 4) |\n|  [shares](./bitburner.investmentoffer.shares.md) |  | number | Amount of share you will give in exchange for this investment |\n\n", "bitburner.gangmemberinfo.def_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_mult](./bitburner.gangmemberinfo.def_mult.md)\n\n## GangMemberInfo.def\\_mult property\n\nDefense multiplier from equipment\n\n**Signature:**\n\n```typescript\ndef_mult: number;\n```\n", "ns.gangmemberinfo.def_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_mult](./bitburner.gangmemberinfo.def_mult.md)\n\n## GangMemberInfo.def\\_mult property\n\nDefense multiplier from equipment\n\n**Signature:**\n\n```typescript\ndef_mult: number;\n```\n", "bitburner.ns.flags.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [flags](./bitburner.ns.flags.md)\n\n## NS.flags() method\n\nParse command line flags.\n\n**Signature:**\n\n```typescript\nflags(schema: [string, string | number | boolean | string[]][]): { [key: string]: ScriptArg | string[] };\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  schema | \\[string, string \\| number \\| boolean \\| string\\[\\]\\]\\[\\] |  |\n\n**Returns:**\n\n{ \\[key: string\\]: [ScriptArg](./bitburner.scriptarg.md) \\| string\\[\\] }\n\n## Remarks\n\nRAM cost: 0 GB\n\nAllows Unix-like flag parsing.\n\n## Example\n\n\n```js\nexport async function main(ns) {\n  const data = ns.flags([\n    ['delay', 0], // a default number means this flag is a number\n    ['server', 'foodnstuff'], //  a default string means this flag is a string\n    ['exclude', []], // a default array means this flag is a default array of string\n    ['help', false], // a default boolean means this flag is a boolean\n  ]);\n  ns.tprint(data);\n}\n\n// [home ~/]> run example.js\n// {\"_\":[],\"delay\":0,\"server\":\"foodnstuff\",\"exclude\":[],\"help\":false}\n// [home ~/]> run example.js --delay 3000\n// {\"_\":[],\"server\":\"foodnstuff\",\"exclude\":[],\"help\":false,\"delay\":3000}\n// [home ~/]> run example.js --delay 3000 --server harakiri-sushi\n// {\"_\":[],\"exclude\":[],\"help\":false,\"delay\":3000,\"server\":\"harakiri-sushi\"}\n// [home ~/]> run example.js --delay 3000 --server harakiri-sushi hello world\n// {\"_\":[\"hello\",\"world\"],\"exclude\":[],\"help\":false,\"delay\":3000,\"server\":\"harakiri-sushi\"}\n// [home ~/]> run example.js --delay 3000 --server harakiri-sushi hello world --exclude a --exclude b\n// {\"_\":[\"hello\",\"world\"],\"help\":false,\"delay\":3000,\"server\":\"harakiri-sushi\",\"exclude\":[\"a\",\"b\"]}\n// [home ~/]> run example.script --help\n// {\"_\":[],\"delay\":0,\"server\":\"foodnstuff\",\"exclude\":[],\"help\":true}\n```\n\n", "ns.ns.flags.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [flags](./bitburner.ns.flags.md)\n\n## NS.flags() method\n\nParse command line flags.\n\n**Signature:**\n\n```typescript\nflags(schema: [string, string | number | boolean | string[]][]): { [key: string]: ScriptArg | string[] };\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  schema | \\[string, string \\| number \\| boolean \\| string\\[\\]\\]\\[\\] |  |\n\n**Returns:**\n\n{ \\[key: string\\]: [ScriptArg](./bitburner.scriptarg.md) \\| string\\[\\] }\n\n## Remarks\n\nRAM cost: 0 GB\n\nAllows Unix-like flag parsing.\n\n## Example\n\n\n```js\nexport async function main(ns) {\n  const data = ns.flags([\n    ['delay', 0], // a default number means this flag is a number\n    ['server', 'foodnstuff'], //  a default string means this flag is a string\n    ['exclude', []], // a default array means this flag is a default array of string\n    ['help', false], // a default boolean means this flag is a boolean\n  ]);\n  ns.tprint(data);\n}\n\n// [home ~/]> run example.js\n// {\"_\":[],\"delay\":0,\"server\":\"foodnstuff\",\"exclude\":[],\"help\":false}\n// [home ~/]> run example.js --delay 3000\n// {\"_\":[],\"server\":\"foodnstuff\",\"exclude\":[],\"help\":false,\"delay\":3000}\n// [home ~/]> run example.js --delay 3000 --server harakiri-sushi\n// {\"_\":[],\"exclude\":[],\"help\":false,\"delay\":3000,\"server\":\"harakiri-sushi\"}\n// [home ~/]> run example.js --delay 3000 --server harakiri-sushi hello world\n// {\"_\":[\"hello\",\"world\"],\"exclude\":[],\"help\":false,\"delay\":3000,\"server\":\"harakiri-sushi\"}\n// [home ~/]> run example.js --delay 3000 --server harakiri-sushi hello world --exclude a --exclude b\n// {\"_\":[\"hello\",\"world\"],\"help\":false,\"delay\":3000,\"server\":\"harakiri-sushi\",\"exclude\":[\"a\",\"b\"]}\n// [home ~/]> run example.script --help\n// {\"_\":[],\"delay\":0,\"server\":\"foodnstuff\",\"exclude\":[],\"help\":true}\n```\n\n", "bitburner.hacknetmultipliers.purchasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [purchaseCost](./bitburner.hacknetmultipliers.purchasecost.md)\n\n## HacknetMultipliers.purchaseCost property\n\nPlayer's hacknet purchase cost multiplier\n\n**Signature:**\n\n```typescript\npurchaseCost: number;\n```\n", "ns.hacknetmultipliers.purchasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [purchaseCost](./bitburner.hacknetmultipliers.purchasecost.md)\n\n## HacknetMultipliers.purchaseCost property\n\nPlayer's hacknet purchase cost multiplier\n\n**Signature:**\n\n```typescript\npurchaseCost: number;\n```\n", "bitburner.corpconstants.coffeecostperemployee.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [coffeeCostPerEmployee](./bitburner.corpconstants.coffeecostperemployee.md)\n\n## CorpConstants.coffeeCostPerEmployee property\n\n**Signature:**\n\n```typescript\ncoffeeCostPerEmployee: number;\n```\n", "ns.corpconstants.coffeecostperemployee.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [coffeeCostPerEmployee](./bitburner.corpconstants.coffeecostperemployee.md)\n\n## CorpConstants.coffeeCostPerEmployee property\n\n**Signature:**\n\n```typescript\ncoffeeCostPerEmployee: number;\n```\n", "bitburner.bitnodemultipliers.corporationvaluation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CorporationValuation](./bitburner.bitnodemultipliers.corporationvaluation.md)\n\n## BitNodeMultipliers.CorporationValuation property\n\nInfluences the valuation of corporations created by the player.\n\n**Signature:**\n\n```typescript\nCorporationValuation: number;\n```\n", "ns.bitnodemultipliers.corporationvaluation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CorporationValuation](./bitburner.bitnodemultipliers.corporationvaluation.md)\n\n## BitNodeMultipliers.CorporationValuation property\n\nInfluences the valuation of corporations created by the player.\n\n**Signature:**\n\n```typescript\nCorporationValuation: number;\n```\n", "bitburner.gangmemberinfo.dex.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex](./bitburner.gangmemberinfo.dex.md)\n\n## GangMemberInfo.dex property\n\nDexterity skill level\n\n**Signature:**\n\n```typescript\ndex: number;\n```\n", "ns.gangmemberinfo.dex.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex](./bitburner.gangmemberinfo.dex.md)\n\n## GangMemberInfo.dex property\n\nDexterity skill level\n\n**Signature:**\n\n```typescript\ndex: number;\n```\n", "bitburner.ns.sqlinject.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sqlinject](./bitburner.ns.sqlinject.md)\n\n## NS.sqlinject() method\n\nRuns SQLInject.exe on a server.\n\n**Signature:**\n\n```typescript\nsqlinject(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n## Example 1\n\n\n```ts\n// NS1:\nsqlinject(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.sqlinject(\"foodnstuff\");\n```\n\n", "ns.ns.sqlinject.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sqlinject](./bitburner.ns.sqlinject.md)\n\n## NS.sqlinject() method\n\nRuns SQLInject.exe on a server.\n\n**Signature:**\n\n```typescript\nsqlinject(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n## Example 1\n\n\n```ts\n// NS1:\nsqlinject(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.sqlinject(\"foodnstuff\");\n```\n\n", "bitburner.material.qlt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [qlt](./bitburner.material.qlt.md)\n\n## Material.qlt property\n\nQuality of the material\n\n**Signature:**\n\n```typescript\nqlt: number;\n```\n", "ns.material.qlt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [qlt](./bitburner.material.qlt.md)\n\n## Material.qlt property\n\nQuality of the material\n\n**Signature:**\n\n```typescript\nqlt: number;\n```\n", "bitburner.bitnodemultipliers.purchasedserversoftcap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerSoftcap](./bitburner.bitnodemultipliers.purchasedserversoftcap.md)\n\n## BitNodeMultipliers.PurchasedServerSoftcap property\n\nInfluences cost of any purchased server at or above 128GB\n\n**Signature:**\n\n```typescript\nPurchasedServerSoftcap: number;\n```\n", "ns.bitnodemultipliers.purchasedserversoftcap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerSoftcap](./bitburner.bitnodemultipliers.purchasedserversoftcap.md)\n\n## BitNodeMultipliers.PurchasedServerSoftcap property\n\nInfluences cost of any purchased server at or above 128GB\n\n**Signature:**\n\n```typescript\nPurchasedServerSoftcap: number;\n```\n", "bitburner.runningscript.offlinerunningtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [offlineRunningTime](./bitburner.runningscript.offlinerunningtime.md)\n\n## RunningScript.offlineRunningTime property\n\nNumber of seconds that the script has been running offline\n\n**Signature:**\n\n```typescript\nofflineRunningTime: number;\n```\n", "ns.runningscript.offlinerunningtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [offlineRunningTime](./bitburner.runningscript.offlinerunningtime.md)\n\n## RunningScript.offlineRunningTime property\n\nNumber of seconds that the script has been running offline\n\n**Signature:**\n\n```typescript\nofflineRunningTime: number;\n```\n", "bitburner.corpconstants.warehousesizeupgradecostbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [warehouseSizeUpgradeCostBase](./bitburner.corpconstants.warehousesizeupgradecostbase.md)\n\n## CorpConstants.warehouseSizeUpgradeCostBase property\n\n**Signature:**\n\n```typescript\nwarehouseSizeUpgradeCostBase: number;\n```\n", "ns.corpconstants.warehousesizeupgradecostbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [warehouseSizeUpgradeCostBase](./bitburner.corpconstants.warehousesizeupgradecostbase.md)\n\n## CorpConstants.warehouseSizeUpgradeCostBase property\n\n**Signature:**\n\n```typescript\nwarehouseSizeUpgradeCostBase: number;\n```\n", "bitburner.corpproductdata.ratingweights.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [ratingWeights](./bitburner.corpproductdata.ratingweights.md)\n\n## CorpProductData.ratingWeights property\n\nWeighting factors for product\n\n**Signature:**\n\n```typescript\nratingWeights: {\n    aesthetics?: number;\n    durability?: number;\n    features?: number;\n    quality?: number;\n    performance?: number;\n    reliability?: number;\n  };\n```\n", "ns.corpproductdata.ratingweights.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [ratingWeights](./bitburner.corpproductdata.ratingweights.md)\n\n## CorpProductData.ratingWeights property\n\nWeighting factors for product\n\n**Signature:**\n\n```typescript\nratingWeights: {\n    aesthetics?: number;\n    durability?: number;\n    features?: number;\n    quality?: number;\n    performance?: number;\n    reliability?: number;\n  };\n```\n", "bitburner.hacknetmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md)\n\n## HacknetMultipliers interface\n\nHacknet related multipliers.\n\n**Signature:**\n\n```typescript\ninterface HacknetMultipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [coreCost](./bitburner.hacknetmultipliers.corecost.md) |  | number | Player's hacknet core cost multiplier |\n|  [levelCost](./bitburner.hacknetmultipliers.levelcost.md) |  | number | Player's hacknet level cost multiplier |\n|  [production](./bitburner.hacknetmultipliers.production.md) |  | number | Player's hacknet production multiplier |\n|  [purchaseCost](./bitburner.hacknetmultipliers.purchasecost.md) |  | number | Player's hacknet purchase cost multiplier |\n|  [ramCost](./bitburner.hacknetmultipliers.ramcost.md) |  | number | Player's hacknet ram cost multiplier |\n\n", "ns.hacknetmultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md)\n\n## HacknetMultipliers interface\n\nHacknet related multipliers.\n\n**Signature:**\n\n```typescript\ninterface HacknetMultipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [coreCost](./bitburner.hacknetmultipliers.corecost.md) |  | number | Player's hacknet core cost multiplier |\n|  [levelCost](./bitburner.hacknetmultipliers.levelcost.md) |  | number | Player's hacknet level cost multiplier |\n|  [production](./bitburner.hacknetmultipliers.production.md) |  | number | Player's hacknet production multiplier |\n|  [purchaseCost](./bitburner.hacknetmultipliers.purchasecost.md) |  | number | Player's hacknet purchase cost multiplier |\n|  [ramCost](./bitburner.hacknetmultipliers.ramcost.md) |  | number | Player's hacknet ram cost multiplier |\n\n", "bitburner.netscriptport.nextwrite.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [nextWrite](./bitburner.netscriptport.nextwrite.md)\n\n## NetscriptPort.nextWrite() method\n\nSleeps until the port is written to.\n\n**Signature:**\n\n```typescript\nnextWrite(): Promise<void>;\n```\n**Returns:**\n\nPromise&lt;void&gt;\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.netscriptport.nextwrite.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [nextWrite](./bitburner.netscriptport.nextwrite.md)\n\n## NetscriptPort.nextWrite() method\n\nSleeps until the port is written to.\n\n**Signature:**\n\n```typescript\nnextWrite(): Promise<void>;\n```\n**Returns:**\n\nPromise&lt;void&gt;\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.formulas.work.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [work](./bitburner.formulas.work.md)\n\n## Formulas.work property\n\nWork formulas\n\n**Signature:**\n\n```typescript\nwork: WorkFormulas;\n```\n", "ns.formulas.work.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [work](./bitburner.formulas.work.md)\n\n## Formulas.work property\n\nWork formulas\n\n**Signature:**\n\n```typescript\nwork: WorkFormulas;\n```\n", "bitburner.ns.renamepurchasedserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [renamePurchasedServer](./bitburner.ns.renamepurchasedserver.md)\n\n## NS.renamePurchasedServer() method\n\nRename a purchased server.\n\n**Signature:**\n\n```typescript\nrenamePurchasedServer(hostname: string, newName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Current server hostname. |\n|  newName | string | New server hostname. |\n\n**Returns:**\n\nboolean\n\nTrue if the upgrade succeeded, and false otherwise.\n\n## Remarks\n\nRAM cost: 2.00 GB\n\n", "ns.ns.renamepurchasedserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [renamePurchasedServer](./bitburner.ns.renamepurchasedserver.md)\n\n## NS.renamePurchasedServer() method\n\nRename a purchased server.\n\n**Signature:**\n\n```typescript\nrenamePurchasedServer(hostname: string, newName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Current server hostname. |\n|  newName | string | New server hostname. |\n\n**Returns:**\n\nboolean\n\nTrue if the upgrade succeeded, and false otherwise.\n\n## Remarks\n\nRAM cost: 2.00 GB\n\n", "bitburner.corpconstants.officesizeupgradecostbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [officeSizeUpgradeCostBase](./bitburner.corpconstants.officesizeupgradecostbase.md)\n\n## CorpConstants.officeSizeUpgradeCostBase property\n\n**Signature:**\n\n```typescript\nofficeSizeUpgradeCostBase: number;\n```\n", "ns.corpconstants.officesizeupgradecostbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [officeSizeUpgradeCostBase](./bitburner.corpconstants.officesizeupgradecostbase.md)\n\n## CorpConstants.officeSizeUpgradeCostBase property\n\n**Signature:**\n\n```typescript\nofficeSizeUpgradeCostBase: number;\n```\n", "bitburner.corpconstants.researchnamesbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [researchNamesBase](./bitburner.corpconstants.researchnamesbase.md)\n\n## CorpConstants.researchNamesBase property\n\nNames of all researches common to all industries\n\n**Signature:**\n\n```typescript\nresearchNamesBase: CorpResearchName[];\n```\n", "ns.corpconstants.researchnamesbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [researchNamesBase](./bitburner.corpconstants.researchnamesbase.md)\n\n## CorpConstants.researchNamesBase property\n\nNames of all researches common to all industries\n\n**Signature:**\n\n```typescript\nresearchNamesBase: CorpResearchName[];\n```\n", "bitburner.multipliers.dexterity_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [dexterity\\_exp](./bitburner.multipliers.dexterity_exp.md)\n\n## Multipliers.dexterity\\_exp property\n\nMultiplier to dexterity experience gain rate\n\n**Signature:**\n\n```typescript\ndexterity_exp: number;\n```\n", "ns.multipliers.dexterity_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [dexterity\\_exp](./bitburner.multipliers.dexterity_exp.md)\n\n## Multipliers.dexterity\\_exp property\n\nMultiplier to dexterity experience gain rate\n\n**Signature:**\n\n```typescript\ndexterity_exp: number;\n```\n", "bitburner.officeapi.hireemployee.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [hireEmployee](./bitburner.officeapi.hireemployee.md)\n\n## OfficeAPI.hireEmployee() method\n\nHire an employee.\n\n**Signature:**\n\n```typescript\nhireEmployee(divisionName: string, city: CityName | `${CityName}`, employeePosition?: CorpEmployeePosition): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  employeePosition | [CorpEmployeePosition](./bitburner.corpemployeeposition.md) | _(Optional)_ Position to place into. Defaults to \"Unassigned\". |\n\n**Returns:**\n\nboolean\n\nTrue if an employee was hired, false otherwise\n\n", "ns.officeapi.hireemployee.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [hireEmployee](./bitburner.officeapi.hireemployee.md)\n\n## OfficeAPI.hireEmployee() method\n\nHire an employee.\n\n**Signature:**\n\n```typescript\nhireEmployee(divisionName: string, city: CityName | `${CityName}`, employeePosition?: CorpEmployeePosition): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  employeePosition | [CorpEmployeePosition](./bitburner.corpemployeeposition.md) | _(Optional)_ Position to place into. Defaults to \"Unassigned\". |\n\n**Returns:**\n\nboolean\n\nTrue if an employee was hired, false otherwise\n\n", "bitburner.activefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md)\n\n## ActiveFragment interface\n\n\n**Signature:**\n\n```typescript\ninterface ActiveFragment \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [highestCharge](./bitburner.activefragment.highestcharge.md) |  | number |  |\n|  [id](./bitburner.activefragment.id.md) |  | number |  |\n|  [numCharge](./bitburner.activefragment.numcharge.md) |  | number |  |\n|  [rotation](./bitburner.activefragment.rotation.md) |  | number |  |\n|  [x](./bitburner.activefragment.x.md) |  | number |  |\n|  [y](./bitburner.activefragment.y.md) |  | number |  |\n\n", "ns.activefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md)\n\n## ActiveFragment interface\n\n\n**Signature:**\n\n```typescript\ninterface ActiveFragment \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [highestCharge](./bitburner.activefragment.highestcharge.md) |  | number |  |\n|  [id](./bitburner.activefragment.id.md) |  | number |  |\n|  [numCharge](./bitburner.activefragment.numcharge.md) |  | number |  |\n|  [rotation](./bitburner.activefragment.rotation.md) |  | number |  |\n|  [x](./bitburner.activefragment.x.md) |  | number |  |\n|  [y](./bitburner.activefragment.y.md) |  | number |  |\n\n", "bitburner.multipliers.bladeburner_analysis.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_analysis](./bitburner.multipliers.bladeburner_analysis.md)\n\n## Multipliers.bladeburner\\_analysis property\n\nMultiplier to effectiveness in Bladeburner Field Analysis\n\n**Signature:**\n\n```typescript\nbladeburner_analysis: number;\n```\n", "ns.multipliers.bladeburner_analysis.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_analysis](./bitburner.multipliers.bladeburner_analysis.md)\n\n## Multipliers.bladeburner\\_analysis property\n\nMultiplier to effectiveness in Bladeburner Field Analysis\n\n**Signature:**\n\n```typescript\nbladeburner_analysis: number;\n```\n", "bitburner.workstats.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [money](./bitburner.workstats.money.md)\n\n## WorkStats.money property\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "ns.workstats.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [money](./bitburner.workstats.money.md)\n\n## WorkStats.money property\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "bitburner.bladeburner.getactiontime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionTime](./bitburner.bladeburner.getactiontime.md)\n\n## Bladeburner.getActionTime() method\n\nGet the time to complete an action.\n\n**Signature:**\n\n```typescript\ngetActionTime(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nNumber of milliseconds it takes to complete the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of milliseconds it takes to complete the specified action\n\n", "ns.bladeburner.getactiontime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionTime](./bitburner.bladeburner.getactiontime.md)\n\n## Bladeburner.getActionTime() method\n\nGet the time to complete an action.\n\n**Signature:**\n\n```typescript\ngetActionTime(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nNumber of milliseconds it takes to complete the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of milliseconds it takes to complete the specified action\n\n", "bitburner.formulas.reputation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [reputation](./bitburner.formulas.reputation.md)\n\n## Formulas.reputation property\n\nReputation formulas\n\n**Signature:**\n\n```typescript\nreputation: ReputationFormulas;\n```\n", "ns.formulas.reputation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [reputation](./bitburner.formulas.reputation.md)\n\n## Formulas.reputation property\n\nReputation formulas\n\n**Signature:**\n\n```typescript\nreputation: ReputationFormulas;\n```\n", "bitburner.product.cmp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [cmp](./bitburner.product.cmp.md)\n\n## Product.cmp property\n\nCompetition for the product, only present if \"Market Research - Competition\" unlocked\n\n**Signature:**\n\n```typescript\ncmp: number | undefined;\n```\n", "ns.product.cmp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [cmp](./bitburner.product.cmp.md)\n\n## Product.cmp property\n\nCompetition for the product, only present if \"Market Research - Competition\" unlocked\n\n**Signature:**\n\n```typescript\ncmp: number | undefined;\n```\n", "bitburner.ns.nformat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [nFormat](./bitburner.ns.nformat.md)\n\n## NS.nFormat() method\n\nFormat a number using the numeral library. This function is deprecated and will be removed in 2.3.\n\n**Signature:**\n\n```typescript\nnFormat(n: number, format: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format. |\n|  format | string | Formatting options. See http://numeraljs.com/\\#format for valid formats. |\n\n**Returns:**\n\nstring\n\nFormatted number.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a string with the specified format options. See http://numeraljs.com/\\#format for documentation on format strings supported.\n\nThis function is deprecated and will be removed in 2.3.\n\n", "ns.ns.nformat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [nFormat](./bitburner.ns.nformat.md)\n\n## NS.nFormat() method\n\nFormat a number using the numeral library. This function is deprecated and will be removed in 2.3.\n\n**Signature:**\n\n```typescript\nnFormat(n: number, format: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format. |\n|  format | string | Formatting options. See http://numeraljs.com/\\#format for valid formats. |\n\n**Returns:**\n\nstring\n\nFormatted number.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a string with the specified format options. See http://numeraljs.com/\\#format for documentation on format strings supported.\n\nThis function is deprecated and will be removed in 2.3.\n\n", "bitburner.netscriptport.full.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [full](./bitburner.netscriptport.full.md)\n\n## NetscriptPort.full() method\n\nCheck if the port is full.\n\n**Signature:**\n\n```typescript\nfull(): boolean;\n```\n**Returns:**\n\nboolean\n\ntrue if the port is full, otherwise false\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.netscriptport.full.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [full](./bitburner.netscriptport.full.md)\n\n## NetscriptPort.full() method\n\nCheck if the port is full.\n\n**Signature:**\n\n```typescript\nfull(): boolean;\n```\n**Returns:**\n\nboolean\n\ntrue if the port is full, otherwise false\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.server.moneyavailable.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [moneyAvailable](./bitburner.server.moneyavailable.md)\n\n## Server.moneyAvailable property\n\nHow much money currently resides on the server and can be hacked\n\n**Signature:**\n\n```typescript\nmoneyAvailable: number;\n```\n", "ns.server.moneyavailable.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [moneyAvailable](./bitburner.server.moneyavailable.md)\n\n## Server.moneyAvailable property\n\nHow much money currently resides on the server and can be hacked\n\n**Signature:**\n\n```typescript\nmoneyAvailable: number;\n```\n", "bitburner.codingcontract.createdummycontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [createDummyContract](./bitburner.codingcontract.createdummycontract.md)\n\n## CodingContract.createDummyContract() method\n\nGenerate a dummy contract.\n\n**Signature:**\n\n```typescript\ncreateDummyContract(type: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of contract to generate |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nGenerate a dummy contract on the home computer with no reward. Used to test various algorithms.\n\n", "ns.codingcontract.createdummycontract.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [createDummyContract](./bitburner.codingcontract.createdummycontract.md)\n\n## CodingContract.createDummyContract() method\n\nGenerate a dummy contract.\n\n**Signature:**\n\n```typescript\ncreateDummyContract(type: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of contract to generate |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nGenerate a dummy contract on the home computer with no reward. Used to test various algorithms.\n\n", "bitburner.ns.formatram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formatRam](./bitburner.ns.formatram.md)\n\n## NS.formatRam() method\n\nFormat a number as an amount of ram.\n\n**Signature:**\n\n```typescript\nformatRam(n: number, fractionalDigits?: number): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format as an amount of ram, in base units of GB (or GiB if that Numeric Display option is set). |\n|  fractionalDigits | number | _(Optional)_ Number of digits to show in the fractional part of the decimal number. Optional, defaults to 2. |\n\n**Returns:**\n\nstring\n\nFormatted ram amount.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a ram string with the specified number of fractional digits. This is the same function that the game itself uses to display ram. The format also depends on the Numeric Display settings (all options on the \"Numeric Display\" options page) To format plain numbers or percentages, see [formatNumber](./bitburner.ns.formatnumber.md) and [formatPercent](./bitburner.ns.formatpercent.md)\n\n", "ns.ns.formatram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formatRam](./bitburner.ns.formatram.md)\n\n## NS.formatRam() method\n\nFormat a number as an amount of ram.\n\n**Signature:**\n\n```typescript\nformatRam(n: number, fractionalDigits?: number): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format as an amount of ram, in base units of GB (or GiB if that Numeric Display option is set). |\n|  fractionalDigits | number | _(Optional)_ Number of digits to show in the fractional part of the decimal number. Optional, defaults to 2. |\n\n**Returns:**\n\nstring\n\nFormatted ram amount.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a ram string with the specified number of fractional digits. This is the same function that the game itself uses to display ram. The format also depends on the Numeric Display settings (all options on the \"Numeric Display\" options page) To format plain numbers or percentages, see [formatNumber](./bitburner.ns.formatnumber.md) and [formatPercent](./bitburner.ns.formatpercent.md)\n\n", "bitburner.bladeburner.getbonustime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getBonusTime](./bitburner.bladeburner.getbonustime.md)\n\n## Bladeburner.getBonusTime() method\n\nGet bladeburner bonus time.\n\n**Signature:**\n\n```typescript\ngetBonusTime(): number;\n```\n**Returns:**\n\nnumber\n\nAmount of accumulated \u201cbonus time\u201d (milliseconds) for the Bladeburner mechanic.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the amount of accumulated \u201cbonus time\u201d (milliseconds) for the Bladeburner mechanic.\n\n\u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser.\n\n\u201cBonus time\u201d makes the game progress faster, up to 5x the normal speed. For example, if an action takes 30 seconds to complete but you\u2019ve accumulated over 30 seconds in bonus time, then the action will only take 6 seconds in real life to complete.\n\n", "ns.bladeburner.getbonustime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getBonusTime](./bitburner.bladeburner.getbonustime.md)\n\n## Bladeburner.getBonusTime() method\n\nGet bladeburner bonus time.\n\n**Signature:**\n\n```typescript\ngetBonusTime(): number;\n```\n**Returns:**\n\nnumber\n\nAmount of accumulated \u201cbonus time\u201d (milliseconds) for the Bladeburner mechanic.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the amount of accumulated \u201cbonus time\u201d (milliseconds) for the Bladeburner mechanic.\n\n\u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser.\n\n\u201cBonus time\u201d makes the game progress faster, up to 5x the normal speed. For example, if an action takes 30 seconds to complete but you\u2019ve accumulated over 30 seconds in bonus time, then the action will only take 6 seconds in real life to complete.\n\n", "bitburner.nodestats.totalproduction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [totalProduction](./bitburner.nodestats.totalproduction.md)\n\n## NodeStats.totalProduction property\n\nTotal number of money Node has produced\n\n**Signature:**\n\n```typescript\ntotalProduction: number;\n```\n", "ns.nodestats.totalproduction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [totalProduction](./bitburner.nodestats.totalproduction.md)\n\n## NodeStats.totalProduction property\n\nTotal number of money Node has produced\n\n**Signature:**\n\n```typescript\ntotalProduction: number;\n```\n", "bitburner.corpconstants.initialshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [initialShares](./bitburner.corpconstants.initialshares.md)\n\n## CorpConstants.initialShares property\n\n**Signature:**\n\n```typescript\ninitialShares: number;\n```\n", "ns.corpconstants.initialshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [initialShares](./bitburner.corpconstants.initialshares.md)\n\n## CorpConstants.initialShares property\n\n**Signature:**\n\n```typescript\ninitialShares: number;\n```\n", "bitburner.sleeverecoverytask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveRecoveryTask](./bitburner.sleeverecoverytask.md)\n\n## SleeveRecoveryTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveRecoveryTask = { type: \"RECOVERY\" };\n```\n", "ns.sleeverecoverytask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveRecoveryTask](./bitburner.sleeverecoverytask.md)\n\n## SleeveRecoveryTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveRecoveryTask = { type: \"RECOVERY\" };\n```\n", "bitburner.singularity.applytocompany.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [applyToCompany](./bitburner.singularity.applytocompany.md)\n\n## Singularity.applyToCompany() method\n\nApply for a job at a company.\n\n**Signature:**\n\n```typescript\napplyToCompany(companyName: string, field: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of company to apply to. |\n|  field | string | Field to which you want to apply. |\n\n**Returns:**\n\nboolean\n\nTrue if the player successfully get a job/promotion, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will automatically try to apply to the specified company for a position in the specified field. This function can also be used to apply for promotions by specifying the company and field you are already employed at.\n\nThis function will return true if you successfully get a job/promotion, and false otherwise. Note that if you are trying to use this function to apply for a promotion and you don\u2019t get one, it will return false.\n\n", "ns.singularity.applytocompany.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [applyToCompany](./bitburner.singularity.applytocompany.md)\n\n## Singularity.applyToCompany() method\n\nApply for a job at a company.\n\n**Signature:**\n\n```typescript\napplyToCompany(companyName: string, field: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of company to apply to. |\n|  field | string | Field to which you want to apply. |\n\n**Returns:**\n\nboolean\n\nTrue if the player successfully get a job/promotion, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will automatically try to apply to the specified company for a position in the specified field. This function can also be used to apply for promotions by specifying the company and field you are already employed at.\n\nThis function will return true if you successfully get a job/promotion, and false otherwise. Note that if you are trying to use this function to apply for a promotion and you don\u2019t get one, it will return false.\n\n", "bitburner.multipliers.agility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [agility](./bitburner.multipliers.agility.md)\n\n## Multipliers.agility property\n\nMultiplier to agility skill\n\n**Signature:**\n\n```typescript\nagility: number;\n```\n", "ns.multipliers.agility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [agility](./bitburner.multipliers.agility.md)\n\n## Multipliers.agility property\n\nMultiplier to agility skill\n\n**Signature:**\n\n```typescript\nagility: number;\n```\n", "bitburner.ns.formatnumber.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formatNumber](./bitburner.ns.formatnumber.md)\n\n## NS.formatNumber() method\n\nFormat a number.\n\n**Signature:**\n\n```typescript\nformatNumber(n: number, fractionalDigits?: number, suffixStart?: number, isInteger?: boolean): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format. |\n|  fractionalDigits | number | _(Optional)_ Number of digits to show in the fractional part of the decimal number. Optional, defaults to 3. |\n|  suffixStart | number | _(Optional)_ How high a number must be before a suffix will be added. Optional, defaults to 1000. |\n|  isInteger | boolean | _(Optional)_ Whether the number represents an integer. Integers do not display fractional digits until a suffix is present. Optional, defaults to false. |\n\n**Returns:**\n\nstring\n\nFormatted number.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a numeric string with the specified format options. This is the same function that the game itself uses to display numbers. The format also depends on the Numeric Display settings (all options on the \"Numeric Display\" options page) To format ram or percentages, see [formatRam](./bitburner.ns.formatram.md) and [formatPercent](./bitburner.ns.formatpercent.md)\n\n", "ns.ns.formatnumber.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [formatNumber](./bitburner.ns.formatnumber.md)\n\n## NS.formatNumber() method\n\nFormat a number.\n\n**Signature:**\n\n```typescript\nformatNumber(n: number, fractionalDigits?: number, suffixStart?: number, isInteger?: boolean): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | Number to format. |\n|  fractionalDigits | number | _(Optional)_ Number of digits to show in the fractional part of the decimal number. Optional, defaults to 3. |\n|  suffixStart | number | _(Optional)_ How high a number must be before a suffix will be added. Optional, defaults to 1000. |\n|  isInteger | boolean | _(Optional)_ Whether the number represents an integer. Integers do not display fractional digits until a suffix is present. Optional, defaults to false. |\n\n**Returns:**\n\nstring\n\nFormatted number.\n\n## Remarks\n\nRAM cost: 0 GB\n\nConverts a number into a numeric string with the specified format options. This is the same function that the game itself uses to display numbers. The format also depends on the Numeric Display settings (all options on the \"Numeric Display\" options page) To format ram or percentages, see [formatRam](./bitburner.ns.formatram.md) and [formatPercent](./bitburner.ns.formatpercent.md)\n\n", "bitburner.hacknet.upgraderam.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeRam](./bitburner.hacknet.upgraderam.md)\n\n## Hacknet.upgradeRam() method\n\nUpgrade the RAM of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeRam(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade RAM. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s RAM is successfully upgraded, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nTries to upgrade the specified Hacknet Node\u2019s RAM n times. Note that each upgrade doubles the Node\u2019s RAM. So this is equivalent to multiplying the Node\u2019s RAM by 2 n.\n\nReturns true if the Hacknet Node\u2019s RAM is successfully upgraded n times or if it is upgraded some positive number of times and the Node reaches its max RAM.\n\nReturns false otherwise.\n\n", "ns.hacknet.upgraderam.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [upgradeRam](./bitburner.hacknet.upgraderam.md)\n\n## Hacknet.upgradeRam() method\n\nUpgrade the RAM of a hacknet node.\n\n**Signature:**\n\n```typescript\nupgradeRam(index: number, n: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade RAM. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nboolean\n\nTrue if the Hacknet Node\u2019s RAM is successfully upgraded, false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nTries to upgrade the specified Hacknet Node\u2019s RAM n times. Note that each upgrade doubles the Node\u2019s RAM. So this is equivalent to multiplying the Node\u2019s RAM by 2 n.\n\nReturns true if the Hacknet Node\u2019s RAM is successfully upgraded n times or if it is upgraded some positive number of times and the Node reaches its max RAM.\n\nReturns false otherwise.\n\n", "bitburner.crimestats.difficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [difficulty](./bitburner.crimestats.difficulty.md)\n\n## CrimeStats.difficulty property\n\nNumber representing the difficulty of the crime. Used for success chance calculations\n\n**Signature:**\n\n```typescript\ndifficulty: number;\n```\n", "ns.crimestats.difficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [difficulty](./bitburner.crimestats.difficulty.md)\n\n## CrimeStats.difficulty property\n\nNumber representing the difficulty of the crime. Used for success chance calculations\n\n**Signature:**\n\n```typescript\ndifficulty: number;\n```\n", "bitburner.player.factions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [factions](./bitburner.player.factions.md)\n\n## Player.factions property\n\n**Signature:**\n\n```typescript\nfactions: string[];\n```\n", "ns.player.factions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [factions](./bitburner.player.factions.md)\n\n## Player.factions property\n\n**Signature:**\n\n```typescript\nfactions: string[];\n```\n", "bitburner.singularity.workforcompany.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [workForCompany](./bitburner.singularity.workforcompany.md)\n\n## Singularity.workForCompany() method\n\nWork for a company.\n\n**Signature:**\n\n```typescript\nworkForCompany(companyName: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of company to work for. Must be an exact match. Optional. If not specified, this argument defaults to the last job that you worked. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this work operation. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if the player starts working, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will set you to start working at your current job at a specified company at which you are employed. If you are already in the middle of some \u201cworking\u201d action (such as working for a faction, training at a gym, or creating a program), then running this function will cancel that action.\n\nThis function will return true if the player starts working, and false otherwise.\n\n## Example 1\n\n\n```js\n// NS1:\nvar COMPANY_NAME = \"Noodle Bar\";\n\nvar success = singularity.workForCompany(COMPANY_NAME);\nif (!success) tprint(\"ERROR: Failed to start work at \" + COMPANY_NAME + \".\");\n```\n\n## Example 2\n\n\n```js\n// NS2:\nconst COMPANY_NAME = \"Noodle Bar\";\n\nlet success = ns.singularity.workForCompany(COMPANY_NAME);\nif (!success) ns.tprint(`ERROR: Failed to start work at ${COMPANY_NAME].`);\n```\n\n", "ns.singularity.workforcompany.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [workForCompany](./bitburner.singularity.workforcompany.md)\n\n## Singularity.workForCompany() method\n\nWork for a company.\n\n**Signature:**\n\n```typescript\nworkForCompany(companyName: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of company to work for. Must be an exact match. Optional. If not specified, this argument defaults to the last job that you worked. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this work operation. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if the player starts working, and false otherwise.\n\n## Remarks\n\nRAM cost: 3 GB \\* 16/4/1\n\nThis function will set you to start working at your current job at a specified company at which you are employed. If you are already in the middle of some \u201cworking\u201d action (such as working for a faction, training at a gym, or creating a program), then running this function will cancel that action.\n\nThis function will return true if the player starts working, and false otherwise.\n\n## Example 1\n\n\n```js\n// NS1:\nvar COMPANY_NAME = \"Noodle Bar\";\n\nvar success = singularity.workForCompany(COMPANY_NAME);\nif (!success) tprint(\"ERROR: Failed to start work at \" + COMPANY_NAME + \".\");\n```\n\n## Example 2\n\n\n```js\n// NS2:\nconst COMPANY_NAME = \"Noodle Bar\";\n\nlet success = ns.singularity.workForCompany(COMPANY_NAME);\nif (!success) ns.tprint(`ERROR: Failed to start work at ${COMPANY_NAME].`);\n```\n\n", "bitburner.hacknet.getcoreupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getCoreUpgradeCost](./bitburner.hacknet.getcoreupgradecost.md)\n\n## Hacknet.getCoreUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node cores.\n\n**Signature:**\n\n```typescript\ngetCoreUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade cores. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node's number of cores.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of upgrading the number of cores of the specified Hacknet Node by n.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node is already at max level, then Infinity is returned.\n\n", "ns.hacknet.getcoreupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getCoreUpgradeCost](./bitburner.hacknet.getcoreupgradecost.md)\n\n## Hacknet.getCoreUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node cores.\n\n**Signature:**\n\n```typescript\ngetCoreUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade cores. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node's number of cores.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of upgrading the number of cores of the specified Hacknet Node by n.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node is already at max level, then Infinity is returned.\n\n", "bitburner.tix.purchasetixapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchaseTixApi](./bitburner.tix.purchasetixapi.md)\n\n## TIX.purchaseTixApi() method\n\nPurchase TIX API Access\n\n**Signature:**\n\n```typescript\npurchaseTixApi(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "ns.tix.purchasetixapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchaseTixApi](./bitburner.tix.purchasetixapi.md)\n\n## TIX.purchaseTixApi() method\n\nPurchase TIX API Access\n\n**Signature:**\n\n```typescript\npurchaseTixApi(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "bitburner.userinterfacetheme.rep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [rep](./bitburner.userinterfacetheme.rep.md)\n\n## UserInterfaceTheme.rep property\n\n**Signature:**\n\n```typescript\nrep: string;\n```\n", "ns.userinterfacetheme.rep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [rep](./bitburner.userinterfacetheme.rep.md)\n\n## UserInterfaceTheme.rep property\n\n**Signature:**\n\n```typescript\nrep: string;\n```\n", "bitburner.tix.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md)\n\n## TIX interface\n\nStock market API\n\n**Signature:**\n\n```typescript\nexport interface TIX \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [buyShort(sym, shares)](./bitburner.tix.buyshort.md) | Short stocks. |\n|  [buyStock(sym, shares)](./bitburner.tix.buystock.md) | Buy stocks. |\n|  [cancelOrder(sym, shares, price, type, pos)](./bitburner.tix.cancelorder.md) | Cancel order for stocks. |\n|  [getAskPrice(sym)](./bitburner.tix.getaskprice.md) | Returns the ask price of that stock. |\n|  [getBidPrice(sym)](./bitburner.tix.getbidprice.md) | Returns the bid price of that stock. |\n|  [getForecast(sym)](./bitburner.tix.getforecast.md) | Returns the probability that the specified stock\u2019s price will increase (as opposed to decrease) during the next tick. |\n|  [getMaxShares(sym)](./bitburner.tix.getmaxshares.md) | Returns the maximum number of shares of a stock. |\n|  [getOrders()](./bitburner.tix.getorders.md) | Returns your order book for the stock market. |\n|  [getOrganization(sym)](./bitburner.tix.getorganization.md) | Returns the organization associated with a stock symbol. |\n|  [getPosition(sym)](./bitburner.tix.getposition.md) | Returns the player\u2019s position in a stock. |\n|  [getPrice(sym)](./bitburner.tix.getprice.md) | Returns the price of a stock. |\n|  [getPurchaseCost(sym, shares, posType)](./bitburner.tix.getpurchasecost.md) | Calculates cost of buying stocks. |\n|  [getSaleGain(sym, shares, posType)](./bitburner.tix.getsalegain.md) | Calculate profit of selling stocks. |\n|  [getSymbols()](./bitburner.tix.getsymbols.md) | Returns an array of the symbols of the tradable stocks |\n|  [getVolatility(sym)](./bitburner.tix.getvolatility.md) | Returns the volatility of the specified stock. |\n|  [has4SData()](./bitburner.tix.has4sdata.md) | Returns true if the player has access to the 4S Data |\n|  [has4SDataTIXAPI()](./bitburner.tix.has4sdatatixapi.md) | Returns true if the player has access to the 4SData TIX API |\n|  [hasTIXAPIAccess()](./bitburner.tix.hastixapiaccess.md) | Returns true if the player has access to the TIX API |\n|  [hasWSEAccount()](./bitburner.tix.haswseaccount.md) | Returns true if the player has access to a WSE Account |\n|  [placeOrder(sym, shares, price, type, pos)](./bitburner.tix.placeorder.md) | Place order for stocks. |\n|  [purchase4SMarketData()](./bitburner.tix.purchase4smarketdata.md) | Purchase 4S Market Data Access. |\n|  [purchase4SMarketDataTixApi()](./bitburner.tix.purchase4smarketdatatixapi.md) | Purchase 4S Market Data TIX API Access. |\n|  [purchaseTixApi()](./bitburner.tix.purchasetixapi.md) | Purchase TIX API Access |\n|  [purchaseWseAccount()](./bitburner.tix.purchasewseaccount.md) | Purchase WSE Account. |\n|  [sellShort(sym, shares)](./bitburner.tix.sellshort.md) | Sell short stock. |\n|  [sellStock(sym, shares)](./bitburner.tix.sellstock.md) | Sell stocks. |\n\n", "ns.tix.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md)\n\n## TIX interface\n\nStock market API\n\n**Signature:**\n\n```typescript\nexport interface TIX \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [buyShort(sym, shares)](./bitburner.tix.buyshort.md) | Short stocks. |\n|  [buyStock(sym, shares)](./bitburner.tix.buystock.md) | Buy stocks. |\n|  [cancelOrder(sym, shares, price, type, pos)](./bitburner.tix.cancelorder.md) | Cancel order for stocks. |\n|  [getAskPrice(sym)](./bitburner.tix.getaskprice.md) | Returns the ask price of that stock. |\n|  [getBidPrice(sym)](./bitburner.tix.getbidprice.md) | Returns the bid price of that stock. |\n|  [getForecast(sym)](./bitburner.tix.getforecast.md) | Returns the probability that the specified stock\u2019s price will increase (as opposed to decrease) during the next tick. |\n|  [getMaxShares(sym)](./bitburner.tix.getmaxshares.md) | Returns the maximum number of shares of a stock. |\n|  [getOrders()](./bitburner.tix.getorders.md) | Returns your order book for the stock market. |\n|  [getOrganization(sym)](./bitburner.tix.getorganization.md) | Returns the organization associated with a stock symbol. |\n|  [getPosition(sym)](./bitburner.tix.getposition.md) | Returns the player\u2019s position in a stock. |\n|  [getPrice(sym)](./bitburner.tix.getprice.md) | Returns the price of a stock. |\n|  [getPurchaseCost(sym, shares, posType)](./bitburner.tix.getpurchasecost.md) | Calculates cost of buying stocks. |\n|  [getSaleGain(sym, shares, posType)](./bitburner.tix.getsalegain.md) | Calculate profit of selling stocks. |\n|  [getSymbols()](./bitburner.tix.getsymbols.md) | Returns an array of the symbols of the tradable stocks |\n|  [getVolatility(sym)](./bitburner.tix.getvolatility.md) | Returns the volatility of the specified stock. |\n|  [has4SData()](./bitburner.tix.has4sdata.md) | Returns true if the player has access to the 4S Data |\n|  [has4SDataTIXAPI()](./bitburner.tix.has4sdatatixapi.md) | Returns true if the player has access to the 4SData TIX API |\n|  [hasTIXAPIAccess()](./bitburner.tix.hastixapiaccess.md) | Returns true if the player has access to the TIX API |\n|  [hasWSEAccount()](./bitburner.tix.haswseaccount.md) | Returns true if the player has access to a WSE Account |\n|  [placeOrder(sym, shares, price, type, pos)](./bitburner.tix.placeorder.md) | Place order for stocks. |\n|  [purchase4SMarketData()](./bitburner.tix.purchase4smarketdata.md) | Purchase 4S Market Data Access. |\n|  [purchase4SMarketDataTixApi()](./bitburner.tix.purchase4smarketdatatixapi.md) | Purchase 4S Market Data TIX API Access. |\n|  [purchaseTixApi()](./bitburner.tix.purchasetixapi.md) | Purchase TIX API Access |\n|  [purchaseWseAccount()](./bitburner.tix.purchasewseaccount.md) | Purchase WSE Account. |\n|  [sellShort(sym, shares)](./bitburner.tix.sellshort.md) | Sell short stock. |\n|  [sellStock(sym, shares)](./bitburner.tix.sellstock.md) | Sell stocks. |\n\n", "bitburner.industrydata.producttype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [productType](./bitburner.industrydata.producttype.md)\n\n## IndustryData.productType property\n\nProduct type\n\n**Signature:**\n\n```typescript\nproductType?: string;\n```\n", "ns.industrydata.producttype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [productType](./bitburner.industrydata.producttype.md)\n\n## IndustryData.productType property\n\nProduct type\n\n**Signature:**\n\n```typescript\nproductType?: string;\n```\n", "bitburner.corpconstants.officeinitialcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [officeInitialCost](./bitburner.corpconstants.officeinitialcost.md)\n\n## CorpConstants.officeInitialCost property\n\n**Signature:**\n\n```typescript\nofficeInitialCost: number;\n```\n", "ns.corpconstants.officeinitialcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [officeInitialCost](./bitburner.corpconstants.officeinitialcost.md)\n\n## CorpConstants.officeInitialCost property\n\n**Signature:**\n\n```typescript\nofficeInitialCost: number;\n```\n", "bitburner.hacknet.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md)\n\n## Hacknet interface\n\nHacknet API\n\n**Signature:**\n\n```typescript\nexport interface Hacknet \n```\n\n## Remarks\n\nNot all these functions are immediately available.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getCacheUpgradeCost(index, n)](./bitburner.hacknet.getcacheupgradecost.md) | Calculate the cost of upgrading hacknet node cache. |\n|  [getCoreUpgradeCost(index, n)](./bitburner.hacknet.getcoreupgradecost.md) | Calculate the cost of upgrading hacknet node cores. |\n|  [getHashUpgradeLevel(upgName)](./bitburner.hacknet.gethashupgradelevel.md) | Get the level of a hash upgrade. |\n|  [getHashUpgrades()](./bitburner.hacknet.gethashupgrades.md) | Get the list of hash upgrades |\n|  [getLevelUpgradeCost(index, n)](./bitburner.hacknet.getlevelupgradecost.md) | Calculate the cost of upgrading hacknet node levels. |\n|  [getNodeStats(index)](./bitburner.hacknet.getnodestats.md) | Get the stats of a hacknet node. |\n|  [getPurchaseNodeCost()](./bitburner.hacknet.getpurchasenodecost.md) | Get the price of the next hacknet node. |\n|  [getRamUpgradeCost(index, n)](./bitburner.hacknet.getramupgradecost.md) | Calculate the cost of upgrading hacknet node RAM. |\n|  [getStudyMult()](./bitburner.hacknet.getstudymult.md) | Get the multiplier to study. |\n|  [getTrainingMult()](./bitburner.hacknet.gettrainingmult.md) | Get the multiplier to training. |\n|  [hashCapacity()](./bitburner.hacknet.hashcapacity.md) | Get the maximum number of hashes you can store. |\n|  [hashCost(upgName, count)](./bitburner.hacknet.hashcost.md) | Get the cost of a hash upgrade. |\n|  [maxNumNodes()](./bitburner.hacknet.maxnumnodes.md) | Get the maximum number of hacknet nodes. |\n|  [numHashes()](./bitburner.hacknet.numhashes.md) | Get the total number of hashes stored. |\n|  [numNodes()](./bitburner.hacknet.numnodes.md) | Get the number of hacknet nodes you own. |\n|  [purchaseNode()](./bitburner.hacknet.purchasenode.md) | Purchase a new hacknet node. |\n|  [spendHashes(upgName, upgTarget, count)](./bitburner.hacknet.spendhashes.md) | Purchase a hash upgrade. |\n|  [upgradeCache(index, n)](./bitburner.hacknet.upgradecache.md) | Upgrade the cache of a hacknet node. |\n|  [upgradeCore(index, n)](./bitburner.hacknet.upgradecore.md) | Upgrade the core of a hacknet node. |\n|  [upgradeLevel(index, n)](./bitburner.hacknet.upgradelevel.md) | Upgrade the level of a hacknet node. |\n|  [upgradeRam(index, n)](./bitburner.hacknet.upgraderam.md) | Upgrade the RAM of a hacknet node. |\n\n", "ns.hacknet.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md)\n\n## Hacknet interface\n\nHacknet API\n\n**Signature:**\n\n```typescript\nexport interface Hacknet \n```\n\n## Remarks\n\nNot all these functions are immediately available.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getCacheUpgradeCost(index, n)](./bitburner.hacknet.getcacheupgradecost.md) | Calculate the cost of upgrading hacknet node cache. |\n|  [getCoreUpgradeCost(index, n)](./bitburner.hacknet.getcoreupgradecost.md) | Calculate the cost of upgrading hacknet node cores. |\n|  [getHashUpgradeLevel(upgName)](./bitburner.hacknet.gethashupgradelevel.md) | Get the level of a hash upgrade. |\n|  [getHashUpgrades()](./bitburner.hacknet.gethashupgrades.md) | Get the list of hash upgrades |\n|  [getLevelUpgradeCost(index, n)](./bitburner.hacknet.getlevelupgradecost.md) | Calculate the cost of upgrading hacknet node levels. |\n|  [getNodeStats(index)](./bitburner.hacknet.getnodestats.md) | Get the stats of a hacknet node. |\n|  [getPurchaseNodeCost()](./bitburner.hacknet.getpurchasenodecost.md) | Get the price of the next hacknet node. |\n|  [getRamUpgradeCost(index, n)](./bitburner.hacknet.getramupgradecost.md) | Calculate the cost of upgrading hacknet node RAM. |\n|  [getStudyMult()](./bitburner.hacknet.getstudymult.md) | Get the multiplier to study. |\n|  [getTrainingMult()](./bitburner.hacknet.gettrainingmult.md) | Get the multiplier to training. |\n|  [hashCapacity()](./bitburner.hacknet.hashcapacity.md) | Get the maximum number of hashes you can store. |\n|  [hashCost(upgName, count)](./bitburner.hacknet.hashcost.md) | Get the cost of a hash upgrade. |\n|  [maxNumNodes()](./bitburner.hacknet.maxnumnodes.md) | Get the maximum number of hacknet nodes. |\n|  [numHashes()](./bitburner.hacknet.numhashes.md) | Get the total number of hashes stored. |\n|  [numNodes()](./bitburner.hacknet.numnodes.md) | Get the number of hacknet nodes you own. |\n|  [purchaseNode()](./bitburner.hacknet.purchasenode.md) | Purchase a new hacknet node. |\n|  [spendHashes(upgName, upgTarget, count)](./bitburner.hacknet.spendhashes.md) | Purchase a hash upgrade. |\n|  [upgradeCache(index, n)](./bitburner.hacknet.upgradecache.md) | Upgrade the cache of a hacknet node. |\n|  [upgradeCore(index, n)](./bitburner.hacknet.upgradecore.md) | Upgrade the core of a hacknet node. |\n|  [upgradeLevel(index, n)](./bitburner.hacknet.upgradelevel.md) | Upgrade the level of a hacknet node. |\n|  [upgradeRam(index, n)](./bitburner.hacknet.upgraderam.md) | Upgrade the RAM of a hacknet node. |\n\n", "bitburner.fragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md)\n\n## Fragment interface\n\n\n**Signature:**\n\n```typescript\ninterface Fragment \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [id](./bitburner.fragment.id.md) |  | number |  |\n|  [limit](./bitburner.fragment.limit.md) |  | number |  |\n|  [power](./bitburner.fragment.power.md) |  | number |  |\n|  [shape](./bitburner.fragment.shape.md) |  | boolean\\[\\]\\[\\] |  |\n|  [type](./bitburner.fragment.type.md) |  | number |  |\n\n", "ns.fragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md)\n\n## Fragment interface\n\n\n**Signature:**\n\n```typescript\ninterface Fragment \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [id](./bitburner.fragment.id.md) |  | number |  |\n|  [limit](./bitburner.fragment.limit.md) |  | number |  |\n|  [power](./bitburner.fragment.power.md) |  | number |  |\n|  [shape](./bitburner.fragment.shape.md) |  | boolean\\[\\]\\[\\] |  |\n|  [type](./bitburner.fragment.type.md) |  | number |  |\n\n", "bitburner.bitnodemultipliers.hackinglevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HackingLevelMultiplier](./bitburner.bitnodemultipliers.hackinglevelmultiplier.md)\n\n## BitNodeMultipliers.HackingLevelMultiplier property\n\nInfluences how quickly the player's hacking level (not experience) scales\n\n**Signature:**\n\n```typescript\nHackingLevelMultiplier: number;\n```\n", "ns.bitnodemultipliers.hackinglevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HackingLevelMultiplier](./bitburner.bitnodemultipliers.hackinglevelmultiplier.md)\n\n## BitNodeMultipliers.HackingLevelMultiplier property\n\nInfluences how quickly the player's hacking level (not experience) scales\n\n**Signature:**\n\n```typescript\nHackingLevelMultiplier: number;\n```\n", "bitburner.gang.getmemberinformation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getMemberInformation](./bitburner.gang.getmemberinformation.md)\n\n## Gang.getMemberInformation() method\n\nGet information about a specific gang member.\n\n**Signature:**\n\n```typescript\ngetMemberInformation(name: string): GangMemberInfo;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of member. |\n\n**Returns:**\n\n[GangMemberInfo](./bitburner.gangmemberinfo.md)\n\nObject containing stat and equipment-related information about a Gang Member.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet stat and equipment-related information about a Gang Member\n\n", "ns.gang.getmemberinformation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getMemberInformation](./bitburner.gang.getmemberinformation.md)\n\n## Gang.getMemberInformation() method\n\nGet information about a specific gang member.\n\n**Signature:**\n\n```typescript\ngetMemberInformation(name: string): GangMemberInfo;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of member. |\n\n**Returns:**\n\n[GangMemberInfo](./bitburner.gangmemberinfo.md)\n\nObject containing stat and equipment-related information about a Gang Member.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet stat and equipment-related information about a Gang Member\n\n", "bitburner.gangmemberascension.str.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [str](./bitburner.gangmemberascension.str.md)\n\n## GangMemberAscension.str property\n\nStrength multiplier gained from ascending\n\n**Signature:**\n\n```typescript\nstr: number;\n```\n", "ns.gangmemberascension.str.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [str](./bitburner.gangmemberascension.str.md)\n\n## GangMemberAscension.str property\n\nStrength multiplier gained from ascending\n\n**Signature:**\n\n```typescript\nstr: number;\n```\n", "bitburner.gameinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md)\n\n## GameInfo interface\n\nGame Information\n\n**Signature:**\n\n```typescript\ninterface GameInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [commit](./bitburner.gameinfo.commit.md) |  | string |  |\n|  [platform](./bitburner.gameinfo.platform.md) |  | string |  |\n|  [version](./bitburner.gameinfo.version.md) |  | string |  |\n\n", "ns.gameinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md)\n\n## GameInfo interface\n\nGame Information\n\n**Signature:**\n\n```typescript\ninterface GameInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [commit](./bitburner.gameinfo.commit.md) |  | string |  |\n|  [platform](./bitburner.gameinfo.platform.md) |  | string |  |\n|  [version](./bitburner.gameinfo.version.md) |  | string |  |\n\n", "bitburner.ns.tail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tail](./bitburner.ns.tail.md)\n\n## NS.tail() method\n\nOpen the tail window of a script.\n\n**Signature:**\n\n```typescript\ntail(fn?: FilenameOrPID, host?: string, ...args: (string | number | boolean)[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | [FilenameOrPID](./bitburner.filenameorpid.md) | _(Optional)_ Optional. Filename or PID of the script being tailed. If omitted, the current script is tailed. |\n|  host | string | _(Optional)_ Optional. Hostname of the script being tailed. Defaults to the server this script is running on. If args are specified, this is not optional. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments for the script being tailed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nOpens a script\u2019s logs. This is functionally the same as the tail Terminal command.\n\nIf the function is called with no arguments, it will open the current script\u2019s logs.\n\nOtherwise, the fn, hostname/ip, and args\u2026 arguments can be used to get the logs from another script. Remember that scripts are uniquely identified by both their names and arguments.\n\n## Example\n\n\n```js\n//Open logs from foo.js on the current server that was run with no args\nns.tail(\"foo.js\");\n\n//Get logs from foo.js on the foodnstuff server that was run with no args\nns.tail(\"foo.js\", \"foodnstuff\");\n\n//Get logs from foo.js on the foodnstuff server that was run with the arguments [1, \"test\"]\nns.tail(\"foo.js\", \"foodnstuff\", 1, \"test\");\n```\n\n", "ns.ns.tail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tail](./bitburner.ns.tail.md)\n\n## NS.tail() method\n\nOpen the tail window of a script.\n\n**Signature:**\n\n```typescript\ntail(fn?: FilenameOrPID, host?: string, ...args: (string | number | boolean)[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  fn | [FilenameOrPID](./bitburner.filenameorpid.md) | _(Optional)_ Optional. Filename or PID of the script being tailed. If omitted, the current script is tailed. |\n|  host | string | _(Optional)_ Optional. Hostname of the script being tailed. Defaults to the server this script is running on. If args are specified, this is not optional. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments for the script being tailed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nOpens a script\u2019s logs. This is functionally the same as the tail Terminal command.\n\nIf the function is called with no arguments, it will open the current script\u2019s logs.\n\nOtherwise, the fn, hostname/ip, and args\u2026 arguments can be used to get the logs from another script. Remember that scripts are uniquely identified by both their names and arguments.\n\n## Example\n\n\n```js\n//Open logs from foo.js on the current server that was run with no args\nns.tail(\"foo.js\");\n\n//Get logs from foo.js on the foodnstuff server that was run with no args\nns.tail(\"foo.js\", \"foodnstuff\");\n\n//Get logs from foo.js on the foodnstuff server that was run with the arguments [1, \"test\"]\nns.tail(\"foo.js\", \"foodnstuff\", 1, \"test\");\n```\n\n", "bitburner.gang.getequipmentnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentNames](./bitburner.gang.getequipmentnames.md)\n\n## Gang.getEquipmentNames() method\n\nList equipment names.\n\n**Signature:**\n\n```typescript\ngetEquipmentNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nNames of all Equipments/Augmentations.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the name of all possible equipment/upgrades you can purchase for your Gang Members. This includes Augmentations.\n\n", "ns.gang.getequipmentnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentNames](./bitburner.gang.getequipmentnames.md)\n\n## Gang.getEquipmentNames() method\n\nList equipment names.\n\n**Signature:**\n\n```typescript\ngetEquipmentNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nNames of all Equipments/Augmentations.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the name of all possible equipment/upgrades you can purchase for your Gang Members. This includes Augmentations.\n\n", "bitburner.gangmemberinfo.upgrades.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [upgrades](./bitburner.gangmemberinfo.upgrades.md)\n\n## GangMemberInfo.upgrades property\n\n**Signature:**\n\n```typescript\nupgrades: string[];\n```\n", "ns.gangmemberinfo.upgrades.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [upgrades](./bitburner.gangmemberinfo.upgrades.md)\n\n## GangMemberInfo.upgrades property\n\n**Signature:**\n\n```typescript\nupgrades: string[];\n```\n", "bitburner.ns.resizetail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [resizeTail](./bitburner.ns.resizetail.md)\n\n## NS.resizeTail() method\n\nResize a tail window.\n\n**Signature:**\n\n```typescript\nresizeTail(width: number, height: number, pid?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  width | number | Width of the window. |\n|  height | number | Height of the window. |\n|  pid | number | _(Optional)_ Optional. PID of the script having its tail resized. If omitted, the current script is used. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nResize a tail window. Size are in pixel.\n\n", "ns.ns.resizetail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [resizeTail](./bitburner.ns.resizetail.md)\n\n## NS.resizeTail() method\n\nResize a tail window.\n\n**Signature:**\n\n```typescript\nresizeTail(width: number, height: number, pid?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  width | number | Width of the window. |\n|  height | number | Height of the window. |\n|  pid | number | _(Optional)_ Optional. PID of the script having its tail resized. If omitted, the current script is used. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nResize a tail window. Size are in pixel.\n\n", "bitburner.hacknet.numnodes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [numNodes](./bitburner.hacknet.numnodes.md)\n\n## Hacknet.numNodes() method\n\nGet the number of hacknet nodes you own.\n\n**Signature:**\n\n```typescript\nnumNodes(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of hacknet nodes.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the number of Hacknet Nodes you own.\n\n", "ns.hacknet.numnodes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [numNodes](./bitburner.hacknet.numnodes.md)\n\n## Hacknet.numNodes() method\n\nGet the number of hacknet nodes you own.\n\n**Signature:**\n\n```typescript\nnumNodes(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of hacknet nodes.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the number of Hacknet Nodes you own.\n\n", "bitburner.corporation.hascorporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [hasCorporation](./bitburner.corporation.hascorporation.md)\n\n## Corporation.hasCorporation() method\n\nReturns whether the player has a corporation. Does not require API access.\n\n**Signature:**\n\n```typescript\nhasCorporation(): boolean;\n```\n**Returns:**\n\nboolean\n\nwhether the player has a corporation\n\n", "ns.corporation.hascorporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [hasCorporation](./bitburner.corporation.hascorporation.md)\n\n## Corporation.hasCorporation() method\n\nReturns whether the player has a corporation. Does not require API access.\n\n**Signature:**\n\n```typescript\nhasCorporation(): boolean;\n```\n**Returns:**\n\nboolean\n\nwhether the player has a corporation\n\n", "bitburner.ns.closetail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [closeTail](./bitburner.ns.closetail.md)\n\n## NS.closeTail() method\n\nClose the tail window of a script.\n\n**Signature:**\n\n```typescript\ncloseTail(pid?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  pid | number | _(Optional)_ Optional. PID of the script having its tail closed. If omitted, the current script is used. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nCloses a script\u2019s logs. This is functionally the same as pressing the \"Close\" button on the tail window.\n\nIf the function is called with no arguments, it will close the current script\u2019s logs.\n\nOtherwise, the pid argument can be used to close the logs from another script.\n\n", "ns.ns.closetail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [closeTail](./bitburner.ns.closetail.md)\n\n## NS.closeTail() method\n\nClose the tail window of a script.\n\n**Signature:**\n\n```typescript\ncloseTail(pid?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  pid | number | _(Optional)_ Optional. PID of the script having its tail closed. If omitted, the current script is used. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nCloses a script\u2019s logs. This is functionally the same as pressing the \"Close\" button on the tail window.\n\nIf the function is called with no arguments, it will close the current script\u2019s logs.\n\nOtherwise, the pid argument can be used to close the logs from another script.\n\n", "bitburner.stanek.canplacefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [canPlaceFragment](./bitburner.stanek.canplacefragment.md)\n\n## Stanek.canPlaceFragment() method\n\nCheck if fragment can be placed at specified location.\n\n**Signature:**\n\n```typescript\ncanPlaceFragment(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | rootX Root X against which to align the top left of the fragment. |\n|  rootY | number | rootY Root Y against which to align the top left of the fragment. |\n|  rotation | number | rotation A number from 0 to 3, the mount of 90 degree turn to take. |\n|  fragmentId | number | fragmentId ID of the fragment to place. |\n\n**Returns:**\n\nboolean\n\ntrue if the fragment can be placed at that position. false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\n", "ns.stanek.canplacefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [canPlaceFragment](./bitburner.stanek.canplacefragment.md)\n\n## Stanek.canPlaceFragment() method\n\nCheck if fragment can be placed at specified location.\n\n**Signature:**\n\n```typescript\ncanPlaceFragment(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | rootX Root X against which to align the top left of the fragment. |\n|  rootY | number | rootY Root Y against which to align the top left of the fragment. |\n|  rotation | number | rotation A number from 0 to 3, the mount of 90 degree turn to take. |\n|  fragmentId | number | fragmentId ID of the fragment to place. |\n\n**Returns:**\n\nboolean\n\ntrue if the fragment can be placed at that position. false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\n", "bitburner.hacknetserverconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md)\n\n## HacknetServerConstants interface\n\nHacknet server related constants\n\n**Signature:**\n\n```typescript\ninterface HacknetServerConstants \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [BaseCost](./bitburner.hacknetserverconstants.basecost.md) |  | number | Base cost for a new server |\n|  [CacheBaseCost](./bitburner.hacknetserverconstants.cachebasecost.md) |  | number | Base cost to upgrade cache |\n|  [CoreBaseCost](./bitburner.hacknetserverconstants.corebasecost.md) |  | number | Base cost to increase cores |\n|  [HashesPerLevel](./bitburner.hacknetserverconstants.hashesperlevel.md) |  | number | Number of hashes calculated per level |\n|  [MaxCache](./bitburner.hacknetserverconstants.maxcache.md) |  | number | Max cache size |\n|  [MaxCores](./bitburner.hacknetserverconstants.maxcores.md) |  | number | Max number of cores |\n|  [MaxLevel](./bitburner.hacknetserverconstants.maxlevel.md) |  | number | Max level for a server |\n|  [MaxRam](./bitburner.hacknetserverconstants.maxram.md) |  | number | Max amount of RAM in GB |\n|  [MaxServers](./bitburner.hacknetserverconstants.maxservers.md) |  | number | Max number of servers |\n|  [PurchaseMult](./bitburner.hacknetserverconstants.purchasemult.md) |  | number | Multiplier to purchase a new server |\n|  [RamBaseCost](./bitburner.hacknetserverconstants.rambasecost.md) |  | number | Base cost to increase RAM |\n|  [UpgradeCacheMult](./bitburner.hacknetserverconstants.upgradecachemult.md) |  | number | Multiplier to upgrade cache |\n|  [UpgradeCoreMult](./bitburner.hacknetserverconstants.upgradecoremult.md) |  | number | Multiplier to increase cores |\n|  [UpgradeLevelMult](./bitburner.hacknetserverconstants.upgradelevelmult.md) |  | number | Multiplier to increase server level |\n|  [UpgradeRamMult](./bitburner.hacknetserverconstants.upgraderammult.md) |  | number | Multiplier to increase RAM |\n\n", "ns.hacknetserverconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md)\n\n## HacknetServerConstants interface\n\nHacknet server related constants\n\n**Signature:**\n\n```typescript\ninterface HacknetServerConstants \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [BaseCost](./bitburner.hacknetserverconstants.basecost.md) |  | number | Base cost for a new server |\n|  [CacheBaseCost](./bitburner.hacknetserverconstants.cachebasecost.md) |  | number | Base cost to upgrade cache |\n|  [CoreBaseCost](./bitburner.hacknetserverconstants.corebasecost.md) |  | number | Base cost to increase cores |\n|  [HashesPerLevel](./bitburner.hacknetserverconstants.hashesperlevel.md) |  | number | Number of hashes calculated per level |\n|  [MaxCache](./bitburner.hacknetserverconstants.maxcache.md) |  | number | Max cache size |\n|  [MaxCores](./bitburner.hacknetserverconstants.maxcores.md) |  | number | Max number of cores |\n|  [MaxLevel](./bitburner.hacknetserverconstants.maxlevel.md) |  | number | Max level for a server |\n|  [MaxRam](./bitburner.hacknetserverconstants.maxram.md) |  | number | Max amount of RAM in GB |\n|  [MaxServers](./bitburner.hacknetserverconstants.maxservers.md) |  | number | Max number of servers |\n|  [PurchaseMult](./bitburner.hacknetserverconstants.purchasemult.md) |  | number | Multiplier to purchase a new server |\n|  [RamBaseCost](./bitburner.hacknetserverconstants.rambasecost.md) |  | number | Base cost to increase RAM |\n|  [UpgradeCacheMult](./bitburner.hacknetserverconstants.upgradecachemult.md) |  | number | Multiplier to upgrade cache |\n|  [UpgradeCoreMult](./bitburner.hacknetserverconstants.upgradecoremult.md) |  | number | Multiplier to increase cores |\n|  [UpgradeLevelMult](./bitburner.hacknetserverconstants.upgradelevelmult.md) |  | number | Multiplier to increase server level |\n|  [UpgradeRamMult](./bitburner.hacknetserverconstants.upgraderammult.md) |  | number | Multiplier to increase RAM |\n\n", "bitburner.bladeburner.getcityestimatedpopulation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCityEstimatedPopulation](./bitburner.bladeburner.getcityestimatedpopulation.md)\n\n## Bladeburner.getCityEstimatedPopulation() method\n\nGet estimated population in city.\n\n**Signature:**\n\n```typescript\ngetCityEstimatedPopulation(city: CityName | `${CityName}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nnumber\n\nEstimated number of Synthoids in the specified city.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the estimated number of Synthoids in the specified city, or -1 if an invalid city was specified.\n\n", "ns.bladeburner.getcityestimatedpopulation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCityEstimatedPopulation](./bitburner.bladeburner.getcityestimatedpopulation.md)\n\n## Bladeburner.getCityEstimatedPopulation() method\n\nGet estimated population in city.\n\n**Signature:**\n\n```typescript\ngetCityEstimatedPopulation(city: CityName | `${CityName}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nnumber\n\nEstimated number of Synthoids in the specified city.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the estimated number of Synthoids in the specified city, or -1 if an invalid city was specified.\n\n", "bitburner.recentscript.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RecentScript](./bitburner.recentscript.md)\n\n## RecentScript interface\n\n\n**Signature:**\n\n```typescript\ninterface RecentScript extends RunningScript \n```\n**Extends:** [RunningScript](./bitburner.runningscript.md)\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [timeOfDeath](./bitburner.recentscript.timeofdeath.md) |  | Date | Timestamp of when the script was killed |\n\n", "ns.recentscript.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RecentScript](./bitburner.recentscript.md)\n\n## RecentScript interface\n\n\n**Signature:**\n\n```typescript\ninterface RecentScript extends RunningScript \n```\n**Extends:** [RunningScript](./bitburner.runningscript.md)\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [timeOfDeath](./bitburner.recentscript.timeofdeath.md) |  | Date | Timestamp of when the script was killed |\n\n", "bitburner.hacknet.getramupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getRamUpgradeCost](./bitburner.hacknet.getramupgradecost.md)\n\n## Hacknet.getRamUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node RAM.\n\n**Signature:**\n\n```typescript\ngetRamUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade RAM. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node's RAM.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of upgrading the RAM of the specified Hacknet Node n times.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node already has max RAM, then Infinity is returned.\n\n", "ns.hacknet.getramupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getRamUpgradeCost](./bitburner.hacknet.getramupgradecost.md)\n\n## Hacknet.getRamUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node RAM.\n\n**Signature:**\n\n```typescript\ngetRamUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of times to upgrade RAM. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node's RAM.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of upgrading the RAM of the specified Hacknet Node n times.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node already has max RAM, then Infinity is returned.\n\n", "bitburner.codingcontract.attempt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [attempt](./bitburner.codingcontract.attempt.md)\n\n## CodingContract.attempt() method\n\nAttempts a coding contract, returning a reward string on success or empty string on failure.\n\n**Signature:**\n\n```typescript\nattempt(answer: string | number | any[], filename: string, host?: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  answer | string \\| number \\| any\\[\\] | Attempted solution for the contract. |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nstring\n\nA reward description string on success, or an empty string on failure.\n\n## Remarks\n\nRAM cost: 10 GB\n\nAttempts to solve the Coding Contract with the provided solution.\n\n## Example 1\n\n\n```js\n// NS1\nvar reward = codingcontract.attempt(yourSolution, filename, hostname);\nif (reward) {\n  tprint(\"Contract solved successfully! Reward: \" + reward)\n} else tprint(\"Failed to solve contract.\")\n```\n\n## Example 2\n\n\n```js\n// NS2\nconst reward = codingcontract.attempt(yourSolution, filename, hostname);\nif (reward) {\n  ns.tprint(`Contract solved successfully! Reward: ${reward}`)\n} else ns.tprint(\"Failed to solve contract.\")\n```\n\n", "ns.codingcontract.attempt.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [attempt](./bitburner.codingcontract.attempt.md)\n\n## CodingContract.attempt() method\n\nAttempts a coding contract, returning a reward string on success or empty string on failure.\n\n**Signature:**\n\n```typescript\nattempt(answer: string | number | any[], filename: string, host?: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  answer | string \\| number \\| any\\[\\] | Attempted solution for the contract. |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nstring\n\nA reward description string on success, or an empty string on failure.\n\n## Remarks\n\nRAM cost: 10 GB\n\nAttempts to solve the Coding Contract with the provided solution.\n\n## Example 1\n\n\n```js\n// NS1\nvar reward = codingcontract.attempt(yourSolution, filename, hostname);\nif (reward) {\n  tprint(\"Contract solved successfully! Reward: \" + reward)\n} else tprint(\"Failed to solve contract.\")\n```\n\n## Example 2\n\n\n```js\n// NS2\nconst reward = codingcontract.attempt(yourSolution, filename, hostname);\nif (reward) {\n  ns.tprint(`Contract solved successfully! Reward: ${reward}`)\n} else ns.tprint(\"Failed to solve contract.\")\n```\n\n", "bitburner.investmentoffer.funds.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md) &gt; [funds](./bitburner.investmentoffer.funds.md)\n\n## InvestmentOffer.funds property\n\nAmount of funds you will get from this investment\n\n**Signature:**\n\n```typescript\nfunds: number;\n```\n", "ns.investmentoffer.funds.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InvestmentOffer](./bitburner.investmentoffer.md) &gt; [funds](./bitburner.investmentoffer.funds.md)\n\n## InvestmentOffer.funds property\n\nAmount of funds you will get from this investment\n\n**Signature:**\n\n```typescript\nfunds: number;\n```\n", "bitburner.corporationinfo.dividendrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [dividendRate](./bitburner.corporationinfo.dividendrate.md)\n\n## CorporationInfo.dividendRate property\n\nFraction of profits issued as dividends\n\n**Signature:**\n\n```typescript\ndividendRate: number;\n```\n", "ns.corporationinfo.dividendrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [dividendRate](./bitburner.corporationinfo.dividendrate.md)\n\n## CorporationInfo.dividendRate property\n\nFraction of profits issued as dividends\n\n**Signature:**\n\n```typescript\ndividendRate: number;\n```\n", "bitburner.userinterfacetheme.button.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [button](./bitburner.userinterfacetheme.button.md)\n\n## UserInterfaceTheme.button property\n\n**Signature:**\n\n```typescript\nbutton: string;\n```\n", "ns.userinterfacetheme.button.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [button](./bitburner.userinterfacetheme.button.md)\n\n## UserInterfaceTheme.button property\n\n**Signature:**\n\n```typescript\nbutton: string;\n```\n", "bitburner.bladeburner.getblackopnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getBlackOpNames](./bitburner.bladeburner.getblackopnames.md)\n\n## Bladeburner.getBlackOpNames() method\n\nList all black ops.\n\n**Signature:**\n\n```typescript\ngetBlackOpNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all Bladeburner Black Ops.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all Bladeburner Black Ops.\n\n", "ns.bladeburner.getblackopnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getBlackOpNames](./bitburner.bladeburner.getblackopnames.md)\n\n## Bladeburner.getBlackOpNames() method\n\nList all black ops.\n\n**Signature:**\n\n```typescript\ngetBlackOpNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all Bladeburner Black Ops.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all Bladeburner Black Ops.\n\n", "bitburner.division.research.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [research](./bitburner.division.research.md)\n\n## Division.research property\n\nAmount of research in that division\n\n**Signature:**\n\n```typescript\nresearch: number;\n```\n", "ns.division.research.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [research](./bitburner.division.research.md)\n\n## Division.research property\n\nAmount of research in that division\n\n**Signature:**\n\n```typescript\nresearch: number;\n```\n", "bitburner.hacknetnodeconstants.levelbasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [LevelBaseCost](./bitburner.hacknetnodeconstants.levelbasecost.md)\n\n## HacknetNodeConstants.LevelBaseCost property\n\nBase cost per level\n\n**Signature:**\n\n```typescript\nLevelBaseCost: number;\n```\n", "ns.hacknetnodeconstants.levelbasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [LevelBaseCost](./bitburner.hacknetnodeconstants.levelbasecost.md)\n\n## HacknetNodeConstants.LevelBaseCost property\n\nBase cost per level\n\n**Signature:**\n\n```typescript\nLevelBaseCost: number;\n```\n", "bitburner.corpconstants.gamecyclespermarketcycle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [gameCyclesPerMarketCycle](./bitburner.corpconstants.gamecyclespermarketcycle.md)\n\n## CorpConstants.gameCyclesPerMarketCycle property\n\n**Signature:**\n\n```typescript\ngameCyclesPerMarketCycle: number;\n```\n", "ns.corpconstants.gamecyclespermarketcycle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [gameCyclesPerMarketCycle](./bitburner.corpconstants.gamecyclespermarketcycle.md)\n\n## CorpConstants.gameCyclesPerMarketCycle property\n\n**Signature:**\n\n```typescript\ngameCyclesPerMarketCycle: number;\n```\n", "bitburner.product.rat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [rat](./bitburner.product.rat.md)\n\n## Product.rat property\n\nProduct Rating\n\n**Signature:**\n\n```typescript\nrat: number;\n```\n", "ns.product.rat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [rat](./bitburner.product.rat.md)\n\n## Product.rat property\n\nProduct Rating\n\n**Signature:**\n\n```typescript\nrat: number;\n```\n", "bitburner.corpmaterialconstantdata.basemarkup.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [baseMarkup](./bitburner.corpmaterialconstantdata.basemarkup.md)\n\n## CorpMaterialConstantData.baseMarkup property\n\n**Signature:**\n\n```typescript\nbaseMarkup: number;\n```\n", "ns.corpmaterialconstantdata.basemarkup.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [baseMarkup](./bitburner.corpmaterialconstantdata.basemarkup.md)\n\n## CorpMaterialConstantData.baseMarkup property\n\n**Signature:**\n\n```typescript\nbaseMarkup: number;\n```\n", "bitburner.corpconstants.sharesperpriceupdate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [sharesPerPriceUpdate](./bitburner.corpconstants.sharesperpriceupdate.md)\n\n## CorpConstants.sharesPerPriceUpdate property\n\nWhen selling large number of shares, price is dynamically updated for every batch of this amount\n\n**Signature:**\n\n```typescript\nsharesPerPriceUpdate: number;\n```\n", "ns.corpconstants.sharesperpriceupdate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [sharesPerPriceUpdate](./bitburner.corpconstants.sharesperpriceupdate.md)\n\n## CorpConstants.sharesPerPriceUpdate property\n\nWhen selling large number of shares, price is dynamically updated for every batch of this amount\n\n**Signature:**\n\n```typescript\nsharesPerPriceUpdate: number;\n```\n", "bitburner.corpconstants.statenames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [stateNames](./bitburner.corpconstants.statenames.md)\n\n## CorpConstants.stateNames property\n\nNames of all corporation game states\n\n**Signature:**\n\n```typescript\nstateNames: CorpStateName[];\n```\n", "ns.corpconstants.statenames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [stateNames](./bitburner.corpconstants.statenames.md)\n\n## CorpConstants.stateNames property\n\nNames of all corporation game states\n\n**Signature:**\n\n```typescript\nstateNames: CorpStateName[];\n```\n", "bitburner.fragment.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [type](./bitburner.fragment.type.md)\n\n## Fragment.type property\n\n**Signature:**\n\n```typescript\ntype: number;\n```\n", "ns.fragment.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [type](./bitburner.fragment.type.md)\n\n## Fragment.type property\n\n**Signature:**\n\n```typescript\ntype: number;\n```\n", "bitburner.hackingformulas.hackpercent.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackPercent](./bitburner.hackingformulas.hackpercent.md)\n\n## HackingFormulas.hackPercent() method\n\nCalculate hack percent for one thread. (Ex: 0.25 would steal 25% of the server's current value.)\n\n**Signature:**\n\n```typescript\nhackPercent(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack percent.\n\n## Remarks\n\nMultiply by thread to get total percent hacked.\n\n", "ns.hackingformulas.hackpercent.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackPercent](./bitburner.hackingformulas.hackpercent.md)\n\n## HackingFormulas.hackPercent() method\n\nCalculate hack percent for one thread. (Ex: 0.25 would steal 25% of the server's current value.)\n\n**Signature:**\n\n```typescript\nhackPercent(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack percent.\n\n## Remarks\n\nMultiply by thread to get total percent hacked.\n\n", "bitburner.person.mults.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [mults](./bitburner.person.mults.md)\n\n## Person.mults property\n\n**Signature:**\n\n```typescript\nmults: Multipliers;\n```\n", "ns.person.mults.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [mults](./bitburner.person.mults.md)\n\n## Person.mults property\n\n**Signature:**\n\n```typescript\nmults: Multipliers;\n```\n", "bitburner.bitnodemultipliers.purchasedserverlimit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerLimit](./bitburner.bitnodemultipliers.purchasedserverlimit.md)\n\n## BitNodeMultipliers.PurchasedServerLimit property\n\nInfluences the maximum number of purchased servers you can have\n\n**Signature:**\n\n```typescript\nPurchasedServerLimit: number;\n```\n", "ns.bitnodemultipliers.purchasedserverlimit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [PurchasedServerLimit](./bitburner.bitnodemultipliers.purchasedserverlimit.md)\n\n## BitNodeMultipliers.PurchasedServerLimit property\n\nInfluences the maximum number of purchased servers you can have\n\n**Signature:**\n\n```typescript\nPurchasedServerLimit: number;\n```\n", "bitburner.officeapi.throwparty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [throwParty](./bitburner.officeapi.throwparty.md)\n\n## OfficeAPI.throwParty() method\n\nThrow a party for your employees\n\n**Signature:**\n\n```typescript\nthrowParty(divisionName: string, city: CityName | `${CityName}`, costPerEmployee: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  costPerEmployee | number | Amount to spend per employee. |\n\n**Returns:**\n\nnumber\n\nMultiplier for happiness and morale, or zero on failure\n\n", "ns.officeapi.throwparty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [throwParty](./bitburner.officeapi.throwparty.md)\n\n## OfficeAPI.throwParty() method\n\nThrow a party for your employees\n\n**Signature:**\n\n```typescript\nthrowParty(divisionName: string, city: CityName | `${CityName}`, costPerEmployee: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  costPerEmployee | number | Amount to spend per employee. |\n\n**Returns:**\n\nnumber\n\nMultiplier for happiness and morale, or zero on failure\n\n", "bitburner.hacknetserverconstants.purchasemult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [PurchaseMult](./bitburner.hacknetserverconstants.purchasemult.md)\n\n## HacknetServerConstants.PurchaseMult property\n\nMultiplier to purchase a new server\n\n**Signature:**\n\n```typescript\nPurchaseMult: number;\n```\n", "ns.hacknetserverconstants.purchasemult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [PurchaseMult](./bitburner.hacknetserverconstants.purchasemult.md)\n\n## HacknetServerConstants.PurchaseMult property\n\nMultiplier to purchase a new server\n\n**Signature:**\n\n```typescript\nPurchaseMult: number;\n```\n", "bitburner.tix.getsymbols.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getSymbols](./bitburner.tix.getsymbols.md)\n\n## TIX.getSymbols() method\n\nReturns an array of the symbols of the tradable stocks\n\n**Signature:**\n\n```typescript\ngetSymbols(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of the symbols of the tradable stocks.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "ns.tix.getsymbols.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getSymbols](./bitburner.tix.getsymbols.md)\n\n## TIX.getSymbols() method\n\nReturns an array of the symbols of the tradable stocks\n\n**Signature:**\n\n```typescript\ngetSymbols(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of the symbols of the tradable stocks.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "bitburner.ns.share.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [share](./bitburner.ns.share.md)\n\n## NS.share() method\n\nShare your computer with your factions.\n\n**Signature:**\n\n```typescript\nshare(): Promise<void>;\n```\n**Returns:**\n\nPromise&lt;void&gt;\n\n## Remarks\n\nRAM cost: 2.4 GB\n\nIncreases your rep gain of all faction work types while share is called. Scales with thread count.\n\n", "ns.ns.share.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [share](./bitburner.ns.share.md)\n\n## NS.share() method\n\nShare your computer with your factions.\n\n**Signature:**\n\n```typescript\nshare(): Promise<void>;\n```\n**Returns:**\n\nPromise&lt;void&gt;\n\n## Remarks\n\nRAM cost: 2.4 GB\n\nIncreases your rep gain of all faction work types while share is called. Scales with thread count.\n\n", "bitburner.gangmemberinfo.def_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_asc\\_mult](./bitburner.gangmemberinfo.def_asc_mult.md)\n\n## GangMemberInfo.def\\_asc\\_mult property\n\nDefense multiplier from ascensions\n\n**Signature:**\n\n```typescript\ndef_asc_mult: number;\n```\n", "ns.gangmemberinfo.def_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_asc\\_mult](./bitburner.gangmemberinfo.def_asc_mult.md)\n\n## GangMemberInfo.def\\_asc\\_mult property\n\nDefense multiplier from ascensions\n\n**Signature:**\n\n```typescript\ndef_asc_mult: number;\n```\n", "bitburner.bitnodemultipliers.hacknetnodemoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HacknetNodeMoney](./bitburner.bitnodemultipliers.hacknetnodemoney.md)\n\n## BitNodeMultipliers.HacknetNodeMoney property\n\nInfluences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9)\n\n**Signature:**\n\n```typescript\nHacknetNodeMoney: number;\n```\n", "ns.bitnodemultipliers.hacknetnodemoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HacknetNodeMoney](./bitburner.bitnodemultipliers.hacknetnodemoney.md)\n\n## BitNodeMultipliers.HacknetNodeMoney property\n\nInfluences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9)\n\n**Signature:**\n\n```typescript\nHacknetNodeMoney: number;\n```\n", "bitburner.stockorderobject.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [type](./bitburner.stockorderobject.type.md)\n\n## StockOrderObject.type property\n\nOrder type\n\n**Signature:**\n\n```typescript\ntype: OrderTypes;\n```\n", "ns.stockorderobject.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [type](./bitburner.stockorderobject.type.md)\n\n## StockOrderObject.type property\n\nOrder type\n\n**Signature:**\n\n```typescript\ntype: OrderTypes;\n```\n", "bitburner.bitnodemultipliers.servermaxmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerMaxMoney](./bitburner.bitnodemultipliers.servermaxmoney.md)\n\n## BitNodeMultipliers.ServerMaxMoney property\n\nInfluences the maximum money that a server can grow to.\n\n**Signature:**\n\n```typescript\nServerMaxMoney: number;\n```\n", "ns.bitnodemultipliers.servermaxmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerMaxMoney](./bitburner.bitnodemultipliers.servermaxmoney.md)\n\n## BitNodeMultipliers.ServerMaxMoney property\n\nInfluences the maximum money that a server can grow to.\n\n**Signature:**\n\n```typescript\nServerMaxMoney: number;\n```\n", "bitburner.bladeburner.upgradeskill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [upgradeSkill](./bitburner.bladeburner.upgradeskill.md)\n\n## Bladeburner.upgradeSkill() method\n\nUpgrade skill.\n\n**Signature:**\n\n```typescript\nupgradeSkill(name: string, count?: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string |  |\n|  count | number | _(Optional)_ Number of times to upgrade the skill. Defaults to 1 if not specified. |\n\n**Returns:**\n\nboolean\n\ntrue if the skill is successfully upgraded, and false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempts to upgrade the specified Bladeburner skill the specified number of times.\n\nReturns true if the skill is successfully upgraded, and false otherwise.\n\n", "ns.bladeburner.upgradeskill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [upgradeSkill](./bitburner.bladeburner.upgradeskill.md)\n\n## Bladeburner.upgradeSkill() method\n\nUpgrade skill.\n\n**Signature:**\n\n```typescript\nupgradeSkill(name: string, count?: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string |  |\n|  count | number | _(Optional)_ Number of times to upgrade the skill. Defaults to 1 if not specified. |\n\n**Returns:**\n\nboolean\n\ntrue if the skill is successfully upgraded, and false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempts to upgrade the specified Bladeburner skill the specified number of times.\n\nReturns true if the skill is successfully upgraded, and false otherwise.\n\n", "bitburner.workformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md)\n\n## WorkFormulas interface\n\nWork formulas\n\n**Signature:**\n\n```typescript\ninterface WorkFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [companyGains(person, companyName, workType, favor)](./bitburner.workformulas.companygains.md) |  |\n|  [crimeGains(person, crimeType)](./bitburner.workformulas.crimegains.md) |  |\n|  [crimeSuccessChance(person, crimeType)](./bitburner.workformulas.crimesuccesschance.md) |  |\n|  [factionGains(person, workType, favor)](./bitburner.workformulas.factiongains.md) |  |\n|  [gymGains(person, gymType, locationName)](./bitburner.workformulas.gymgains.md) |  |\n|  [universityGains(person, classType, locationName)](./bitburner.workformulas.universitygains.md) |  |\n\n", "ns.workformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md)\n\n## WorkFormulas interface\n\nWork formulas\n\n**Signature:**\n\n```typescript\ninterface WorkFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [companyGains(person, companyName, workType, favor)](./bitburner.workformulas.companygains.md) |  |\n|  [crimeGains(person, crimeType)](./bitburner.workformulas.crimegains.md) |  |\n|  [crimeSuccessChance(person, crimeType)](./bitburner.workformulas.crimesuccesschance.md) |  |\n|  [factionGains(person, workType, favor)](./bitburner.workformulas.factiongains.md) |  |\n|  [gymGains(person, gymType, locationName)](./bitburner.workformulas.gymgains.md) |  |\n|  [universityGains(person, classType, locationName)](./bitburner.workformulas.universitygains.md) |  |\n\n", "bitburner.crimestats.hacking_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [hacking\\_success\\_weight](./bitburner.crimestats.hacking_success_weight.md)\n\n## CrimeStats.hacking\\_success\\_weight property\n\nhacking level impact on success change of the crime\n\n**Signature:**\n\n```typescript\nhacking_success_weight: number;\n```\n", "ns.crimestats.hacking_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [hacking\\_success\\_weight](./bitburner.crimestats.hacking_success_weight.md)\n\n## CrimeStats.hacking\\_success\\_weight property\n\nhacking level impact on success change of the crime\n\n**Signature:**\n\n```typescript\nhacking_success_weight: number;\n```\n", "bitburner.bladeburner.getstamina.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getStamina](./bitburner.bladeburner.getstamina.md)\n\n## Bladeburner.getStamina() method\n\nGet bladeburner stamina.\n\n**Signature:**\n\n```typescript\ngetStamina(): [number, number];\n```\n**Returns:**\n\n\\[number, number\\]\n\nArray containing current stamina and max stamina.\n\n## Remarks\n\nRAM cost: 4 GB Returns an array with two elements: \\* \\[Current stamina, Max stamina\\]\n\n## Example 1\n\n\n```ts\n// NS1:\nfunction getStaminaPercentage() {\n   var res = bladeburner.getStamina();\n   return res[0] / res[1];\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nfunction getStaminaPercentage() {\n   const [current, max] = ns.bladeburner.getStamina();\n   return current / max;\n}\n```\n\n", "ns.bladeburner.getstamina.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getStamina](./bitburner.bladeburner.getstamina.md)\n\n## Bladeburner.getStamina() method\n\nGet bladeburner stamina.\n\n**Signature:**\n\n```typescript\ngetStamina(): [number, number];\n```\n**Returns:**\n\n\\[number, number\\]\n\nArray containing current stamina and max stamina.\n\n## Remarks\n\nRAM cost: 4 GB Returns an array with two elements: \\* \\[Current stamina, Max stamina\\]\n\n## Example 1\n\n\n```ts\n// NS1:\nfunction getStaminaPercentage() {\n   var res = bladeburner.getStamina();\n   return res[0] / res[1];\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nfunction getStaminaPercentage() {\n   const [current, max] = ns.bladeburner.getStamina();\n   return current / max;\n}\n```\n\n", "bitburner.corporationinfo.divisions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [divisions](./bitburner.corporationinfo.divisions.md)\n\n## CorporationInfo.divisions property\n\nArray of all division names\n\n**Signature:**\n\n```typescript\ndivisions: string[];\n```\n", "ns.corporationinfo.divisions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [divisions](./bitburner.corporationinfo.divisions.md)\n\n## CorporationInfo.divisions property\n\nArray of all division names\n\n**Signature:**\n\n```typescript\ndivisions: string[];\n```\n", "bitburner.bladeburner.setactionautolevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [setActionAutolevel](./bitburner.bladeburner.setactionautolevel.md)\n\n## Bladeburner.setActionAutolevel() method\n\nSet an action autolevel.\n\n**Signature:**\n\n```typescript\nsetActionAutolevel(type: string, name: string, autoLevel: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  autoLevel | boolean | Whether or not to autolevel this action |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 4 GB\n\nEnable/disable autoleveling for the specified action.\n\n", "ns.bladeburner.setactionautolevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [setActionAutolevel](./bitburner.bladeburner.setactionautolevel.md)\n\n## Bladeburner.setActionAutolevel() method\n\nSet an action autolevel.\n\n**Signature:**\n\n```typescript\nsetActionAutolevel(type: string, name: string, autoLevel: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  autoLevel | boolean | Whether or not to autolevel this action |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 4 GB\n\nEnable/disable autoleveling for the specified action.\n\n", "bitburner.gangterritory.respect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md) &gt; [respect](./bitburner.gangterritory.respect.md)\n\n## GangTerritory.respect property\n\nRespect gain impact on task scaling\n\n**Signature:**\n\n```typescript\nrespect: number;\n```\n", "ns.gangterritory.respect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md) &gt; [respect](./bitburner.gangterritory.respect.md)\n\n## GangTerritory.respect property\n\nRespect gain impact on task scaling\n\n**Signature:**\n\n```typescript\nrespect: number;\n```\n", "bitburner.multipliers.bladeburner_max_stamina.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_max\\_stamina](./bitburner.multipliers.bladeburner_max_stamina.md)\n\n## Multipliers.bladeburner\\_max\\_stamina property\n\nMultiplier to Bladeburner max stamina\n\n**Signature:**\n\n```typescript\nbladeburner_max_stamina: number;\n```\n", "ns.multipliers.bladeburner_max_stamina.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [bladeburner\\_max\\_stamina](./bitburner.multipliers.bladeburner_max_stamina.md)\n\n## Multipliers.bladeburner\\_max\\_stamina property\n\nMultiplier to Bladeburner max stamina\n\n**Signature:**\n\n```typescript\nbladeburner_max_stamina: number;\n```\n", "bitburner.hackingmultipliers.chance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [chance](./bitburner.hackingmultipliers.chance.md)\n\n## HackingMultipliers.chance property\n\nPlayer's hacking chance multiplier.\n\n**Signature:**\n\n```typescript\nchance: number;\n```\n", "ns.hackingmultipliers.chance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [chance](./bitburner.hackingmultipliers.chance.md)\n\n## HackingMultipliers.chance property\n\nPlayer's hacking chance multiplier.\n\n**Signature:**\n\n```typescript\nchance: number;\n```\n", "bitburner.corpindustrydata.aicorefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [aiCoreFactor](./bitburner.corpindustrydata.aicorefactor.md)\n\n## CorpIndustryData.aiCoreFactor property\n\nAI Cores factor\n\n**Signature:**\n\n```typescript\naiCoreFactor?: number;\n```\n", "ns.corpindustrydata.aicorefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [aiCoreFactor](./bitburner.corpindustrydata.aicorefactor.md)\n\n## CorpIndustryData.aiCoreFactor property\n\nAI Cores factor\n\n**Signature:**\n\n```typescript\naiCoreFactor?: number;\n```\n", "bitburner.ns.hacknet.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hacknet](./bitburner.ns.hacknet.md)\n\n## NS.hacknet property\n\nNamespace for hacknet functions.\n\n**Signature:**\n\n```typescript\nreadonly hacknet: Hacknet;\n```\n\n## Remarks\n\nRAM cost: 4 GB\n\n", "ns.ns.hacknet.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hacknet](./bitburner.ns.hacknet.md)\n\n## NS.hacknet property\n\nNamespace for hacknet functions.\n\n**Signature:**\n\n```typescript\nreadonly hacknet: Hacknet;\n```\n\n## Remarks\n\nRAM cost: 4 GB\n\n", "bitburner.runningscript.onlinemoneymade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [onlineMoneyMade](./bitburner.runningscript.onlinemoneymade.md)\n\n## RunningScript.onlineMoneyMade property\n\nTotal amount of money made by this script when online\n\n**Signature:**\n\n```typescript\nonlineMoneyMade: number;\n```\n", "ns.runningscript.onlinemoneymade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [onlineMoneyMade](./bitburner.runningscript.onlinemoneymade.md)\n\n## RunningScript.onlineMoneyMade property\n\nTotal amount of money made by this script when online\n\n**Signature:**\n\n```typescript\nonlineMoneyMade: number;\n```\n", "bitburner.userinterfacetheme.well.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [well](./bitburner.userinterfacetheme.well.md)\n\n## UserInterfaceTheme.well property\n\n**Signature:**\n\n```typescript\nwell: string;\n```\n", "ns.userinterfacetheme.well.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [well](./bitburner.userinterfacetheme.well.md)\n\n## UserInterfaceTheme.well property\n\n**Signature:**\n\n```typescript\nwell: string;\n```\n", "bitburner.division.lastcycleexpenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [lastCycleExpenses](./bitburner.division.lastcycleexpenses.md)\n\n## Division.lastCycleExpenses property\n\nExpenses last cycle\n\n**Signature:**\n\n```typescript\nlastCycleExpenses: number;\n```\n", "ns.division.lastcycleexpenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [lastCycleExpenses](./bitburner.division.lastcycleexpenses.md)\n\n## Division.lastCycleExpenses property\n\nExpenses last cycle\n\n**Signature:**\n\n```typescript\nlastCycleExpenses: number;\n```\n", "bitburner.equipmentstats.agi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [agi](./bitburner.equipmentstats.agi.md)\n\n## EquipmentStats.agi property\n\nAgility multiplier\n\n**Signature:**\n\n```typescript\nagi?: number;\n```\n", "ns.equipmentstats.agi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [agi](./bitburner.equipmentstats.agi.md)\n\n## EquipmentStats.agi property\n\nAgility multiplier\n\n**Signature:**\n\n```typescript\nagi?: number;\n```\n", "bitburner.export.div.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md) &gt; [div](./bitburner.export.div.md)\n\n## Export.div property\n\nDivision the material is being exported to\n\n**Signature:**\n\n```typescript\ndiv: string;\n```\n", "ns.export.div.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md) &gt; [div](./bitburner.export.div.md)\n\n## Export.div property\n\nDivision the material is being exported to\n\n**Signature:**\n\n```typescript\ndiv: string;\n```\n", "bitburner.skills.dexterity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [dexterity](./bitburner.skills.dexterity.md)\n\n## Skills.dexterity property\n\n**Signature:**\n\n```typescript\ndexterity: number;\n```\n", "ns.skills.dexterity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [dexterity](./bitburner.skills.dexterity.md)\n\n## Skills.dexterity property\n\n**Signature:**\n\n```typescript\ndexterity: number;\n```\n", "bitburner.bladeburner.setactionlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [setActionLevel](./bitburner.bladeburner.setactionlevel.md)\n\n## Bladeburner.setActionLevel() method\n\nSet the level of an action.\n\n**Signature:**\n\n```typescript\nsetActionLevel(type: string, name: string, level: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  level | number | Level to set this action to. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 4 GB\n\nSet the level for the specified action.\n\n", "ns.bladeburner.setactionlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [setActionLevel](./bitburner.bladeburner.setactionlevel.md)\n\n## Bladeburner.setActionLevel() method\n\nSet the level of an action.\n\n**Signature:**\n\n```typescript\nsetActionLevel(type: string, name: string, level: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n|  level | number | Level to set this action to. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 4 GB\n\nSet the level for the specified action.\n\n", "bitburner.gangmemberinfo.task.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [task](./bitburner.gangmemberinfo.task.md)\n\n## GangMemberInfo.task property\n\nCurrently assigned task\n\n**Signature:**\n\n```typescript\ntask: string;\n```\n", "ns.gangmemberinfo.task.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [task](./bitburner.gangmemberinfo.task.md)\n\n## GangMemberInfo.task property\n\nCurrently assigned task\n\n**Signature:**\n\n```typescript\ntask: string;\n```\n", "bitburner.gang.purchaseequipment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [purchaseEquipment](./bitburner.gang.purchaseequipment.md)\n\n## Gang.purchaseEquipment() method\n\nPurchase an equipment for a gang member.\n\n**Signature:**\n\n```typescript\npurchaseEquipment(memberName: string, equipName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of Gang member to purchase the equipment for. |\n|  equipName | string | Name of Equipment/Augmentation to purchase. |\n\n**Returns:**\n\nboolean\n\nTrue if the equipment was successfully purchased. False otherwise\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempt to purchase the specified Equipment/Augmentation for the specified Gang member.\n\n", "ns.gang.purchaseequipment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [purchaseEquipment](./bitburner.gang.purchaseequipment.md)\n\n## Gang.purchaseEquipment() method\n\nPurchase an equipment for a gang member.\n\n**Signature:**\n\n```typescript\npurchaseEquipment(memberName: string, equipName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  memberName | string | Name of Gang member to purchase the equipment for. |\n|  equipName | string | Name of Equipment/Augmentation to purchase. |\n\n**Returns:**\n\nboolean\n\nTrue if the equipment was successfully purchased. False otherwise\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempt to purchase the specified Equipment/Augmentation for the specified Gang member.\n\n", "bitburner.userinterfacetheme.infolight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [infolight](./bitburner.userinterfacetheme.infolight.md)\n\n## UserInterfaceTheme.infolight property\n\n**Signature:**\n\n```typescript\ninfolight: string;\n```\n", "ns.userinterfacetheme.infolight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [infolight](./bitburner.userinterfacetheme.infolight.md)\n\n## UserInterfaceTheme.infolight property\n\n**Signature:**\n\n```typescript\ninfolight: string;\n```\n", "bitburner.warehouseapi.setproductmarketta2.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setProductMarketTA2](./bitburner.warehouseapi.setproductmarketta2.md)\n\n## WarehouseAPI.setProductMarketTA2() method\n\nSet market TA 2 for a product.\n\n**Signature:**\n\n```typescript\nsetProductMarketTA2(divisionName: string, productName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.setproductmarketta2.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setProductMarketTA2](./bitburner.warehouseapi.setproductmarketta2.md)\n\n## WarehouseAPI.setProductMarketTA2() method\n\nSet market TA 2 for a product.\n\n**Signature:**\n\n```typescript\nsetProductMarketTA2(divisionName: string, productName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "bitburner.ns.getservermaxmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMaxMoney](./bitburner.ns.getservermaxmoney.md)\n\n## NS.getServerMaxMoney() method\n\nGet the maximum money available on a server.\n\n**Signature:**\n\n```typescript\ngetServerMaxMoney(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nMaximum amount of money available on the server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the maximum amount of money that can be available on a server.\n\n", "ns.ns.getservermaxmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMaxMoney](./bitburner.ns.getservermaxmoney.md)\n\n## NS.getServerMaxMoney() method\n\nGet the maximum money available on a server.\n\n**Signature:**\n\n```typescript\ngetServerMaxMoney(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nMaximum amount of money available on the server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the maximum amount of money that can be available on a server.\n\n", "bitburner.gangformulas.respectgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [respectGain](./bitburner.gangformulas.respectgain.md)\n\n## GangFormulas.respectGain() method\n\nCalculate respect gain per tick.\n\n**Signature:**\n\n```typescript\nrespectGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n|  member | [GangMemberInfo](./bitburner.gangmemberinfo.md) | Gang info from [getMemberInformation](./bitburner.gang.getmemberinformation.md) |\n|  task | [GangTaskStats](./bitburner.gangtaskstats.md) | Gang info from [getTaskStats](./bitburner.gang.gettaskstats.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated respect gain.\n\n", "ns.gangformulas.respectgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [respectGain](./bitburner.gangformulas.respectgain.md)\n\n## GangFormulas.respectGain() method\n\nCalculate respect gain per tick.\n\n**Signature:**\n\n```typescript\nrespectGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n|  member | [GangMemberInfo](./bitburner.gangmemberinfo.md) | Gang info from [getMemberInformation](./bitburner.gang.getmemberinformation.md) |\n|  task | [GangTaskStats](./bitburner.gangtaskstats.md) | Gang info from [getTaskStats](./bitburner.gang.gettaskstats.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated respect gain.\n\n", "bitburner.industrydata.cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [cost](./bitburner.industrydata.cost.md)\n\n## IndustryData.cost property\n\nCost to expand to the division\n\n**Signature:**\n\n```typescript\ncost: number;\n```\n", "ns.industrydata.cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [cost](./bitburner.industrydata.cost.md)\n\n## IndustryData.cost property\n\nCost to expand to the division\n\n**Signature:**\n\n```typescript\ncost: number;\n```\n", "bitburner.server.purchasedbyplayer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [purchasedByPlayer](./bitburner.server.purchasedbyplayer.md)\n\n## Server.purchasedByPlayer property\n\nFlag indicating whether this is a purchased server\n\n**Signature:**\n\n```typescript\npurchasedByPlayer: boolean;\n```\n", "ns.server.purchasedbyplayer.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [purchasedByPlayer](./bitburner.server.purchasedbyplayer.md)\n\n## Server.purchasedByPlayer property\n\nFlag indicating whether this is a purchased server\n\n**Signature:**\n\n```typescript\npurchasedByPlayer: boolean;\n```\n", "bitburner.office.avgene.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [avgEne](./bitburner.office.avgene.md)\n\n## Office.avgEne property\n\nAverage energy of the employees\n\n**Signature:**\n\n```typescript\navgEne: number;\n```\n", "ns.office.avgene.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [avgEne](./bitburner.office.avgene.md)\n\n## Office.avgEne property\n\nAverage energy of the employees\n\n**Signature:**\n\n```typescript\navgEne: number;\n```\n", "bitburner.moneysource.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hacking](./bitburner.moneysource.hacking.md)\n\n## MoneySource.hacking property\n\n**Signature:**\n\n```typescript\nhacking: number;\n```\n", "ns.moneysource.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hacking](./bitburner.moneysource.hacking.md)\n\n## MoneySource.hacking property\n\n**Signature:**\n\n```typescript\nhacking: number;\n```\n", "bitburner.gangformulas.ascensionpointsgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [ascensionPointsGain](./bitburner.gangformulas.ascensionpointsgain.md)\n\n## GangFormulas.ascensionPointsGain() method\n\nCalculate ascension point gain.\n\n**Signature:**\n\n```typescript\nascensionPointsGain(exp: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  exp | number | Experience point before ascension. |\n\n**Returns:**\n\nnumber\n\nThe calculated ascension point gain.\n\n", "ns.gangformulas.ascensionpointsgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [ascensionPointsGain](./bitburner.gangformulas.ascensionpointsgain.md)\n\n## GangFormulas.ascensionPointsGain() method\n\nCalculate ascension point gain.\n\n**Signature:**\n\n```typescript\nascensionPointsGain(exp: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  exp | number | Experience point before ascension. |\n\n**Returns:**\n\nnumber\n\nThe calculated ascension point gain.\n\n", "bitburner.hacknetserversformulas.coreupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [coreUpgradeCost](./bitburner.hacknetserversformulas.coreupgradecost.md)\n\n## HacknetServersFormulas.coreUpgradeCost() method\n\nCalculate cost of upgrading hacknet server cores.\n\n**Signature:**\n\n```typescript\ncoreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingCore | number | starting cores |\n|  extraCores | number | _(Optional)_ amount of cores to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetserversformulas.coreupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [coreUpgradeCost](./bitburner.hacknetserversformulas.coreupgradecost.md)\n\n## HacknetServersFormulas.coreUpgradeCost() method\n\nCalculate cost of upgrading hacknet server cores.\n\n**Signature:**\n\n```typescript\ncoreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingCore | number | starting cores |\n|  extraCores | number | _(Optional)_ amount of cores to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.bladeburner.getgeneralactionnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getGeneralActionNames](./bitburner.bladeburner.getgeneralactionnames.md)\n\n## Bladeburner.getGeneralActionNames() method\n\nList all general actions.\n\n**Signature:**\n\n```typescript\ngetGeneralActionNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all general Bladeburner actions.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all general Bladeburner actions.\n\n", "ns.bladeburner.getgeneralactionnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getGeneralActionNames](./bitburner.bladeburner.getgeneralactionnames.md)\n\n## Bladeburner.getGeneralActionNames() method\n\nList all general actions.\n\n**Signature:**\n\n```typescript\ngetGeneralActionNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all general Bladeburner actions.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all general Bladeburner actions.\n\n", "bitburner.fragment.power.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [power](./bitburner.fragment.power.md)\n\n## Fragment.power property\n\n**Signature:**\n\n```typescript\npower: number;\n```\n", "ns.fragment.power.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Fragment](./bitburner.fragment.md) &gt; [power](./bitburner.fragment.power.md)\n\n## Fragment.power property\n\n**Signature:**\n\n```typescript\npower: number;\n```\n", "bitburner.ganggeninfo.wantedlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [wantedLevel](./bitburner.ganggeninfo.wantedlevel.md)\n\n## GangGenInfo.wantedLevel property\n\nGang's wanted level\n\n**Signature:**\n\n```typescript\nwantedLevel: number;\n```\n", "ns.ganggeninfo.wantedlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [wantedLevel](./bitburner.ganggeninfo.wantedlevel.md)\n\n## GangGenInfo.wantedLevel property\n\nGang's wanted level\n\n**Signature:**\n\n```typescript\nwantedLevel: number;\n```\n", "bitburner.singularity.getaugmentationprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationPrice](./bitburner.singularity.getaugmentationprice.md)\n\n## Singularity.getAugmentationPrice() method\n\nGet price of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationPrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nPrice of the augmentation.\n\n## Remarks\n\nRAM cost: 2.5 GB \\* 16/4/1\n\n", "ns.singularity.getaugmentationprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationPrice](./bitburner.singularity.getaugmentationprice.md)\n\n## Singularity.getAugmentationPrice() method\n\nGet price of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationPrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nPrice of the augmentation.\n\n## Remarks\n\nRAM cost: 2.5 GB \\* 16/4/1\n\n", "bitburner.singularity.getaugmentationbaseprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationBasePrice](./bitburner.singularity.getaugmentationbaseprice.md)\n\n## Singularity.getAugmentationBasePrice() method\n\nGet base price of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationBasePrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nBase price of the augmentation, before price multiplier.\n\n## Remarks\n\nRAM cost: 2.5 GB \\* 16/4/1\n\n", "ns.singularity.getaugmentationbaseprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationBasePrice](./bitburner.singularity.getaugmentationbaseprice.md)\n\n## Singularity.getAugmentationBasePrice() method\n\nGet base price of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationBasePrice(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nBase price of the augmentation, before price multiplier.\n\n## Remarks\n\nRAM cost: 2.5 GB \\* 16/4/1\n\n", "bitburner.tix.getposition.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getPosition](./bitburner.tix.getposition.md)\n\n## TIX.getPosition() method\n\nReturns the player\u2019s position in a stock.\n\n**Signature:**\n\n```typescript\ngetPosition(sym: string): [number, number, number, number];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\n\\[number, number, number, number\\]\n\nArray of four elements that represents the player\u2019s position in a stock.\n\n## Remarks\n\nRAM cost: 2 GB Returns an array of four elements that represents the player\u2019s position in a stock.\n\nThe first element is the returned array is the number of shares the player owns of the stock in the Long position. The second element in the array is the average price of the player\u2019s shares in the Long position.\n\nThe third element in the array is the number of shares the player owns of the stock in the Short position. The fourth element in the array is the average price of the player\u2019s Short position.\n\nAll elements in the returned array are numeric.\n\n## Example 1\n\n\n```ts\n// NS1\nvar pos = stock.getPosition(\"ECP\");\nvar shares      = pos[0];\nvar avgPx       = pos[1];\nvar sharesShort = pos[2];\nvar avgPxShort  = pos[3];\n```\n\n## Example 2\n\n\n```ts\n// NS2\nconst [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(\"ECP\");\n```\n\n", "ns.tix.getposition.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getPosition](./bitburner.tix.getposition.md)\n\n## TIX.getPosition() method\n\nReturns the player\u2019s position in a stock.\n\n**Signature:**\n\n```typescript\ngetPosition(sym: string): [number, number, number, number];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\n\\[number, number, number, number\\]\n\nArray of four elements that represents the player\u2019s position in a stock.\n\n## Remarks\n\nRAM cost: 2 GB Returns an array of four elements that represents the player\u2019s position in a stock.\n\nThe first element is the returned array is the number of shares the player owns of the stock in the Long position. The second element in the array is the average price of the player\u2019s shares in the Long position.\n\nThe third element in the array is the number of shares the player owns of the stock in the Short position. The fourth element in the array is the average price of the player\u2019s Short position.\n\nAll elements in the returned array are numeric.\n\n## Example 1\n\n\n```ts\n// NS1\nvar pos = stock.getPosition(\"ECP\");\nvar shares      = pos[0];\nvar avgPx       = pos[1];\nvar sharesShort = pos[2];\nvar avgPxShort  = pos[3];\n```\n\n## Example 2\n\n\n```ts\n// NS2\nconst [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(\"ECP\");\n```\n\n", "bitburner.hacknetnodeconstants.purchasenextmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [PurchaseNextMult](./bitburner.hacknetnodeconstants.purchasenextmult.md)\n\n## HacknetNodeConstants.PurchaseNextMult property\n\nMultiplier to purchase new node\n\n**Signature:**\n\n```typescript\nPurchaseNextMult: number;\n```\n", "ns.hacknetnodeconstants.purchasenextmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [PurchaseNextMult](./bitburner.hacknetnodeconstants.purchasenextmult.md)\n\n## HacknetNodeConstants.PurchaseNextMult property\n\nMultiplier to purchase new node\n\n**Signature:**\n\n```typescript\nPurchaseNextMult: number;\n```\n", "bitburner.tix.cancelorder.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [cancelOrder](./bitburner.tix.cancelorder.md)\n\n## TIX.cancelOrder() method\n\nCancel order for stocks.\n\n**Signature:**\n\n```typescript\ncancelOrder(sym: string, shares: number, price: number, type: string, pos: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares for order. Must be positive. Will be rounded to nearest integer. |\n|  price | number | Execution price for the order. |\n|  type | string | Type of order. |\n|  pos | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2.5 GB Cancels an outstanding Limit or Stop order on the stock market.\n\nThe ability to use limit and stop orders is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\n", "ns.tix.cancelorder.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [cancelOrder](./bitburner.tix.cancelorder.md)\n\n## TIX.cancelOrder() method\n\nCancel order for stocks.\n\n**Signature:**\n\n```typescript\ncancelOrder(sym: string, shares: number, price: number, type: string, pos: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares for order. Must be positive. Will be rounded to nearest integer. |\n|  price | number | Execution price for the order. |\n|  type | string | Type of order. |\n|  pos | string | Specifies whether the order is a \u201cLong\u201d or \u201cShort\u201d position. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2.5 GB Cancels an outstanding Limit or Stop order on the stock market.\n\nThe ability to use limit and stop orders is \\*\\*not\\*\\* immediately available to the player and must be unlocked later on in the game.\n\n", "bitburner.singularity.purchaseprogram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [purchaseProgram](./bitburner.singularity.purchaseprogram.md)\n\n## Singularity.purchaseProgram() method\n\nPurchase a program from the dark web.\n\n**Signature:**\n\n```typescript\npurchaseProgram(programName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  programName | string | Name of program to purchase. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified program is purchased, and false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function allows you to automatically purchase programs. You MUST have a TOR router in order to use this function. The cost of purchasing programs using this function is the same as if you were purchasing them through the Dark Web using the Terminal buy command.\n\n## Example 1\n\n\n```ts\n// NS1\npurchaseProgram(\"brutessh.exe\");\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.purchaseProgram(\"brutessh.exe\");\n```\n\n", "ns.singularity.purchaseprogram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [purchaseProgram](./bitburner.singularity.purchaseprogram.md)\n\n## Singularity.purchaseProgram() method\n\nPurchase a program from the dark web.\n\n**Signature:**\n\n```typescript\npurchaseProgram(programName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  programName | string | Name of program to purchase. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified program is purchased, and false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\nThis function allows you to automatically purchase programs. You MUST have a TOR router in order to use this function. The cost of purchasing programs using this function is the same as if you were purchasing them through the Dark Web using the Terminal buy command.\n\n## Example 1\n\n\n```ts\n// NS1\npurchaseProgram(\"brutessh.exe\");\n```\n\n## Example 2\n\n\n```ts\n// NS2\nns.purchaseProgram(\"brutessh.exe\");\n```\n\n", "bitburner.corporation.unlockupgrade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [unlockUpgrade](./bitburner.corporation.unlockupgrade.md)\n\n## Corporation.unlockUpgrade() method\n\nUnlock an upgrade\n\n**Signature:**\n\n```typescript\nunlockUpgrade(upgradeName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.unlockupgrade.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [unlockUpgrade](./bitburner.corporation.unlockupgrade.md)\n\n## Corporation.unlockUpgrade() method\n\nUnlock an upgrade\n\n**Signature:**\n\n```typescript\nunlockUpgrade(upgradeName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nvoid\n\n", "bitburner.stanek.chargefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [chargeFragment](./bitburner.stanek.chargefragment.md)\n\n## Stanek.chargeFragment() method\n\nCharge a fragment, increasing its power.\n\n**Signature:**\n\n```typescript\nchargeFragment(rootX: number, rootY: number): Promise<void>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | rootX Root X against which to align the top left of the fragment. |\n|  rootY | number | rootY Root Y against which to align the top left of the fragment. |\n\n**Returns:**\n\nPromise&lt;void&gt;\n\nPromise that lasts until the charge action is over.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\n", "ns.stanek.chargefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [chargeFragment](./bitburner.stanek.chargefragment.md)\n\n## Stanek.chargeFragment() method\n\nCharge a fragment, increasing its power.\n\n**Signature:**\n\n```typescript\nchargeFragment(rootX: number, rootY: number): Promise<void>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | rootX Root X against which to align the top left of the fragment. |\n|  rootY | number | rootY Root Y against which to align the top left of the fragment. |\n\n**Returns:**\n\nPromise&lt;void&gt;\n\nPromise that lasts until the charge action is over.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\n", "bitburner.warehouseapi.purchasewarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [purchaseWarehouse](./bitburner.warehouseapi.purchasewarehouse.md)\n\n## WarehouseAPI.purchaseWarehouse() method\n\nPurchase warehouse for a new city\n\n**Signature:**\n\n```typescript\npurchaseWarehouse(divisionName: string, city: CityName | `${CityName}`): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.purchasewarehouse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [purchaseWarehouse](./bitburner.warehouseapi.purchasewarehouse.md)\n\n## WarehouseAPI.purchaseWarehouse() method\n\nPurchase warehouse for a new city\n\n**Signature:**\n\n```typescript\npurchaseWarehouse(divisionName: string, city: CityName | `${CityName}`): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\nvoid\n\n", "bitburner.corporationinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md)\n\n## CorporationInfo interface\n\nGeneral info about a corporation\n\n**Signature:**\n\n```typescript\ninterface CorporationInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [dividendEarnings](./bitburner.corporationinfo.dividendearnings.md) |  | number | Your earnings as a shareholder per second this cycle |\n|  [dividendRate](./bitburner.corporationinfo.dividendrate.md) |  | number | Fraction of profits issued as dividends |\n|  [dividendTax](./bitburner.corporationinfo.dividendtax.md) |  | number | Tax applied on your earnings as a shareholder |\n|  [divisions](./bitburner.corporationinfo.divisions.md) |  | string\\[\\] | Array of all division names |\n|  [expenses](./bitburner.corporationinfo.expenses.md) |  | number | Expenses per second this cycle |\n|  [funds](./bitburner.corporationinfo.funds.md) |  | number | Funds available |\n|  [issuedShares](./bitburner.corporationinfo.issuedshares.md) |  | number | Amount of acquirable shares. |\n|  [name](./bitburner.corporationinfo.name.md) |  | string | Name of the corporation |\n|  [numShares](./bitburner.corporationinfo.numshares.md) |  | number | Amount of share owned |\n|  [public](./bitburner.corporationinfo.public.md) |  | boolean | Indicating if the company is public |\n|  [revenue](./bitburner.corporationinfo.revenue.md) |  | number | Revenue per second this cycle |\n|  [sharePrice](./bitburner.corporationinfo.shareprice.md) |  | number | Price of the shares |\n|  [shareSaleCooldown](./bitburner.corporationinfo.sharesalecooldown.md) |  | number | Cooldown until shares can be sold again |\n|  [state](./bitburner.corporationinfo.state.md) |  | string | State of the corporation. Possible states are START, PURCHASE, PRODUCTION, EXPORT, SALE. |\n|  [totalShares](./bitburner.corporationinfo.totalshares.md) |  | number | Total number of shares issues by this corporation |\n\n", "ns.corporationinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md)\n\n## CorporationInfo interface\n\nGeneral info about a corporation\n\n**Signature:**\n\n```typescript\ninterface CorporationInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [dividendEarnings](./bitburner.corporationinfo.dividendearnings.md) |  | number | Your earnings as a shareholder per second this cycle |\n|  [dividendRate](./bitburner.corporationinfo.dividendrate.md) |  | number | Fraction of profits issued as dividends |\n|  [dividendTax](./bitburner.corporationinfo.dividendtax.md) |  | number | Tax applied on your earnings as a shareholder |\n|  [divisions](./bitburner.corporationinfo.divisions.md) |  | string\\[\\] | Array of all division names |\n|  [expenses](./bitburner.corporationinfo.expenses.md) |  | number | Expenses per second this cycle |\n|  [funds](./bitburner.corporationinfo.funds.md) |  | number | Funds available |\n|  [issuedShares](./bitburner.corporationinfo.issuedshares.md) |  | number | Amount of acquirable shares. |\n|  [name](./bitburner.corporationinfo.name.md) |  | string | Name of the corporation |\n|  [numShares](./bitburner.corporationinfo.numshares.md) |  | number | Amount of share owned |\n|  [public](./bitburner.corporationinfo.public.md) |  | boolean | Indicating if the company is public |\n|  [revenue](./bitburner.corporationinfo.revenue.md) |  | number | Revenue per second this cycle |\n|  [sharePrice](./bitburner.corporationinfo.shareprice.md) |  | number | Price of the shares |\n|  [shareSaleCooldown](./bitburner.corporationinfo.sharesalecooldown.md) |  | number | Cooldown until shares can be sold again |\n|  [state](./bitburner.corporationinfo.state.md) |  | string | State of the corporation. Possible states are START, PURCHASE, PRODUCTION, EXPORT, SALE. |\n|  [totalShares](./bitburner.corporationinfo.totalshares.md) |  | number | Total number of shares issues by this corporation |\n\n", "bitburner.ns.getpurchasedservermaxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerMaxRam](./bitburner.ns.getpurchasedservermaxram.md)\n\n## NS.getPurchasedServerMaxRam() method\n\nReturns the maximum RAM that a purchased server can have.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerMaxRam(): number;\n```\n**Returns:**\n\nnumber\n\nReturns the maximum RAM (in GB) that a purchased server can have.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.getpurchasedservermaxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerMaxRam](./bitburner.ns.getpurchasedservermaxram.md)\n\n## NS.getPurchasedServerMaxRam() method\n\nReturns the maximum RAM that a purchased server can have.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerMaxRam(): number;\n```\n**Returns:**\n\nnumber\n\nReturns the maximum RAM (in GB) that a purchased server can have.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.tix.purchase4smarketdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchase4SMarketData](./bitburner.tix.purchase4smarketdata.md)\n\n## TIX.purchase4SMarketData() method\n\nPurchase 4S Market Data Access.\n\n**Signature:**\n\n```typescript\npurchase4SMarketData(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "ns.tix.purchase4smarketdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [purchase4SMarketData](./bitburner.tix.purchase4smarketdata.md)\n\n## TIX.purchase4SMarketData() method\n\nPurchase 4S Market Data Access.\n\n**Signature:**\n\n```typescript\npurchase4SMarketData(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully purchased it or if you already have access, false otherwise.\n\n## Remarks\n\nRAM cost: 2.5 GB\n\n", "bitburner.crimestats.kills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [kills](./bitburner.crimestats.kills.md)\n\n## CrimeStats.kills property\n\nHow many people die as a result of this crime\n\n**Signature:**\n\n```typescript\nkills: number;\n```\n", "ns.crimestats.kills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [kills](./bitburner.crimestats.kills.md)\n\n## CrimeStats.kills property\n\nHow many people die as a result of this crime\n\n**Signature:**\n\n```typescript\nkills: number;\n```\n", "bitburner.ns.kill_1.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [kill](./bitburner.ns.kill_1.md)\n\n## NS.kill() method\n\nTerminate the script with the provided filename, hostname, and script arguments.\n\n**Signature:**\n\n```typescript\nkill(filename: string, hostname?: string, ...args: ScriptArg[]): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the script to kill. |\n|  hostname | string | _(Optional)_ Hostname where the script to kill is running. Defaults to the current server. |\n|  args | [ScriptArg](./bitburner.scriptarg.md)<!-- -->\\[\\] | Arguments of the script to kill. |\n\n**Returns:**\n\nboolean\n\nTrue if the script is successfully killed, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nKills the script with the provided filename, running on the specified host with the specified args. To instead kill a script using its PID, see [the other ns.kill entry](./bitburner.ns.kill.md)<!-- -->.\n\n## Example\n\n\n```js\n// kill the script \"foo.js\" on the same server the current script is running from, with no arguments\nns.kill(\"foo.js\");\n\n// kill the script \"foo.js\" on the \"n00dles\" server with no arguments.\nns.kill(\"foo.js\", \"n00dles\");\n\n// kill the script foo.js on the current server that was ran with the arguments [1, \u201cfoodnstuff\u201d, false]:\nns.kill(\"foo.js\", ns.getHostname(), 1, \"foodnstuff\", false);\n```\n\n", "ns.ns.kill_1.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [kill](./bitburner.ns.kill_1.md)\n\n## NS.kill() method\n\nTerminate the script with the provided filename, hostname, and script arguments.\n\n**Signature:**\n\n```typescript\nkill(filename: string, hostname?: string, ...args: ScriptArg[]): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the script to kill. |\n|  hostname | string | _(Optional)_ Hostname where the script to kill is running. Defaults to the current server. |\n|  args | [ScriptArg](./bitburner.scriptarg.md)<!-- -->\\[\\] | Arguments of the script to kill. |\n\n**Returns:**\n\nboolean\n\nTrue if the script is successfully killed, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nKills the script with the provided filename, running on the specified host with the specified args. To instead kill a script using its PID, see [the other ns.kill entry](./bitburner.ns.kill.md)<!-- -->.\n\n## Example\n\n\n```js\n// kill the script \"foo.js\" on the same server the current script is running from, with no arguments\nns.kill(\"foo.js\");\n\n// kill the script \"foo.js\" on the \"n00dles\" server with no arguments.\nns.kill(\"foo.js\", \"n00dles\");\n\n// kill the script foo.js on the current server that was ran with the arguments [1, \u201cfoodnstuff\u201d, false]:\nns.kill(\"foo.js\", ns.getHostname(), 1, \"foodnstuff\", false);\n```\n\n", "bitburner.gangmemberinfo.str_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_asc\\_points](./bitburner.gangmemberinfo.str_asc_points.md)\n\n## GangMemberInfo.str\\_asc\\_points property\n\nTotal earned strength experience\n\n**Signature:**\n\n```typescript\nstr_asc_points: number;\n```\n", "ns.gangmemberinfo.str_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_asc\\_points](./bitburner.gangmemberinfo.str_asc_points.md)\n\n## GangMemberInfo.str\\_asc\\_points property\n\nTotal earned strength experience\n\n**Signature:**\n\n```typescript\nstr_asc_points: number;\n```\n", "bitburner.factionworktype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [FactionWorkType](./bitburner.factionworktype.md)\n\n## FactionWorkType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum FactionWorkType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  field | <code>&quot;field&quot;</code> |  |\n|  hacking | <code>&quot;hacking&quot;</code> |  |\n|  security | <code>&quot;security&quot;</code> |  |\n\n", "ns.factionworktype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [FactionWorkType](./bitburner.factionworktype.md)\n\n## FactionWorkType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum FactionWorkType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  field | <code>&quot;field&quot;</code> |  |\n|  hacking | <code>&quot;hacking&quot;</code> |  |\n|  security | <code>&quot;security&quot;</code> |  |\n\n", "bitburner.bladeburner.joinbladeburnerfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [joinBladeburnerFaction](./bitburner.bladeburner.joinbladeburnerfaction.md)\n\n## Bladeburner.joinBladeburnerFaction() method\n\nJoin the bladeburner faction.\n\n**Signature:**\n\n```typescript\njoinBladeburnerFaction(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully join the Bladeburner faction, or if you are already a member, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB Attempts to join the Bladeburner faction.\n\nReturns true if you successfully join the Bladeburner faction, or if you are already a member.\n\nReturns false otherwise.\n\n", "ns.bladeburner.joinbladeburnerfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [joinBladeburnerFaction](./bitburner.bladeburner.joinbladeburnerfaction.md)\n\n## Bladeburner.joinBladeburnerFaction() method\n\nJoin the bladeburner faction.\n\n**Signature:**\n\n```typescript\njoinBladeburnerFaction(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully join the Bladeburner faction, or if you are already a member, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB Attempts to join the Bladeburner faction.\n\nReturns true if you successfully join the Bladeburner faction, or if you are already a member.\n\nReturns false otherwise.\n\n", "bitburner.warehouseapi.buymaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [buyMaterial](./bitburner.warehouseapi.buymaterial.md)\n\n## WarehouseAPI.buyMaterial() method\n\nSet material buy data\n\n**Signature:**\n\n```typescript\nbuyMaterial(divisionName: string, city: CityName | `${CityName}`, materialName: string, amt: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to buy |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.buymaterial.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [buyMaterial](./bitburner.warehouseapi.buymaterial.md)\n\n## WarehouseAPI.buyMaterial() method\n\nSet material buy data\n\n**Signature:**\n\n```typescript\nbuyMaterial(divisionName: string, city: CityName | `${CityName}`, materialName: string, amt: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to buy |\n\n**Returns:**\n\nvoid\n\n", "bitburner.tix.getaskprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getAskPrice](./bitburner.tix.getaskprice.md)\n\n## TIX.getAskPrice() method\n\nReturns the ask price of that stock.\n\n**Signature:**\n\n```typescript\ngetAskPrice(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nThe ask price of a stock.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "ns.tix.getaskprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getAskPrice](./bitburner.tix.getaskprice.md)\n\n## TIX.getAskPrice() method\n\nReturns the ask price of that stock.\n\n**Signature:**\n\n```typescript\ngetAskPrice(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nThe ask price of a stock.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "bitburner.runningscript.pid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [pid](./bitburner.runningscript.pid.md)\n\n## RunningScript.pid property\n\nProcess ID. Must be an integer\n\n**Signature:**\n\n```typescript\npid: number;\n```\n", "ns.runningscript.pid.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [pid](./bitburner.runningscript.pid.md)\n\n## RunningScript.pid property\n\nProcess ID. Must be an integer\n\n**Signature:**\n\n```typescript\npid: number;\n```\n", "bitburner.userinterfacetheme.primary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [primary](./bitburner.userinterfacetheme.primary.md)\n\n## UserInterfaceTheme.primary property\n\n**Signature:**\n\n```typescript\nprimary: string;\n```\n", "ns.userinterfacetheme.primary.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [primary](./bitburner.userinterfacetheme.primary.md)\n\n## UserInterfaceTheme.primary property\n\n**Signature:**\n\n```typescript\nprimary: string;\n```\n", "bitburner.gangterritory.wanted.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md) &gt; [wanted](./bitburner.gangterritory.wanted.md)\n\n## GangTerritory.wanted property\n\nWanted gain impact on task scaling\n\n**Signature:**\n\n```typescript\nwanted: number;\n```\n", "ns.gangterritory.wanted.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md) &gt; [wanted](./bitburner.gangterritory.wanted.md)\n\n## GangTerritory.wanted property\n\nWanted gain impact on task scaling\n\n**Signature:**\n\n```typescript\nwanted: number;\n```\n", "bitburner.corporationinfo.public.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [public](./bitburner.corporationinfo.public.md)\n\n## CorporationInfo.public property\n\nIndicating if the company is public\n\n**Signature:**\n\n```typescript\npublic: boolean;\n```\n", "ns.corporationinfo.public.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [public](./bitburner.corporationinfo.public.md)\n\n## CorporationInfo.public property\n\nIndicating if the company is public\n\n**Signature:**\n\n```typescript\npublic: boolean;\n```\n", "bitburner.multipliers.defense.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [defense](./bitburner.multipliers.defense.md)\n\n## Multipliers.defense property\n\nMultiplier to defense skill\n\n**Signature:**\n\n```typescript\ndefense: number;\n```\n", "ns.multipliers.defense.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [defense](./bitburner.multipliers.defense.md)\n\n## Multipliers.defense property\n\nMultiplier to defense skill\n\n**Signature:**\n\n```typescript\ndefense: number;\n```\n", "bitburner.userinterfacetheme.errordark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [errordark](./bitburner.userinterfacetheme.errordark.md)\n\n## UserInterfaceTheme.errordark property\n\n**Signature:**\n\n```typescript\nerrordark: string;\n```\n", "ns.userinterfacetheme.errordark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [errordark](./bitburner.userinterfacetheme.errordark.md)\n\n## UserInterfaceTheme.errordark property\n\n**Signature:**\n\n```typescript\nerrordark: string;\n```\n", "bitburner.bladeburner.getcitychaos.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCityChaos](./bitburner.bladeburner.getcitychaos.md)\n\n## Bladeburner.getCityChaos() method\n\nGet chaos of a city.\n\n**Signature:**\n\n```typescript\ngetCityChaos(city: CityName | `${CityName}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nnumber\n\nChaos in the specified city.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the chaos in the specified city, or -1 if an invalid city was specified.\n\n", "ns.bladeburner.getcitychaos.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCityChaos](./bitburner.bladeburner.getcitychaos.md)\n\n## Bladeburner.getCityChaos() method\n\nGet chaos of a city.\n\n**Signature:**\n\n```typescript\ngetCityChaos(city: CityName | `${CityName}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nnumber\n\nChaos in the specified city.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the chaos in the specified city, or -1 if an invalid city was specified.\n\n", "bitburner.ns.sleep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sleep](./bitburner.ns.sleep.md)\n\n## NS.sleep() method\n\nSuspends the script for n milliseconds.\n\n**Signature:**\n\n```typescript\nsleep(millis: number): Promise<true>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  millis | number | Number of milliseconds to sleep. |\n\n**Returns:**\n\nPromise&lt;true&gt;\n\n\n## Remarks\n\nRAM cost: 0 GB\n\n## Example 1\n\n\n```ts\n// NS1:\n// This will count from 1 to 10 in your terminal, with one number every 5 seconds\nfor (var i=0; i<10; i++) {\n  tprint(i + 1);\n  sleep(5000);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n// This will count from 1 to 10 in your terminal, with one number every 5 seconds\nfor (var i=0; i<10; i++) {\n  ns.tprint(i + 1);\n  await ns.sleep(5000);\n}\n```\n\n", "ns.ns.sleep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sleep](./bitburner.ns.sleep.md)\n\n## NS.sleep() method\n\nSuspends the script for n milliseconds.\n\n**Signature:**\n\n```typescript\nsleep(millis: number): Promise<true>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  millis | number | Number of milliseconds to sleep. |\n\n**Returns:**\n\nPromise&lt;true&gt;\n\n\n## Remarks\n\nRAM cost: 0 GB\n\n## Example 1\n\n\n```ts\n// NS1:\n// This will count from 1 to 10 in your terminal, with one number every 5 seconds\nfor (var i=0; i<10; i++) {\n  tprint(i + 1);\n  sleep(5000);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n// This will count from 1 to 10 in your terminal, with one number every 5 seconds\nfor (var i=0; i<10; i++) {\n  ns.tprint(i + 1);\n  await ns.sleep(5000);\n}\n```\n\n", "bitburner.bladeburner.joinbladeburnerdivision.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [joinBladeburnerDivision](./bitburner.bladeburner.joinbladeburnerdivision.md)\n\n## Bladeburner.joinBladeburnerDivision() method\n\nJoin the bladeburner division.\n\n**Signature:**\n\n```typescript\njoinBladeburnerDivision(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully join the Bladeburner division, or if you are already a member, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempts to join the Bladeburner division.\n\nReturns true if you successfully join the Bladeburner division, or if you are already a member.\n\nReturns false otherwise.\n\n", "ns.bladeburner.joinbladeburnerdivision.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [joinBladeburnerDivision](./bitburner.bladeburner.joinbladeburnerdivision.md)\n\n## Bladeburner.joinBladeburnerDivision() method\n\nJoin the bladeburner division.\n\n**Signature:**\n\n```typescript\njoinBladeburnerDivision(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you successfully join the Bladeburner division, or if you are already a member, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nAttempts to join the Bladeburner division.\n\nReturns true if you successfully join the Bladeburner division, or if you are already a member.\n\nReturns false otherwise.\n\n", "bitburner.nodestats.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [name](./bitburner.nodestats.name.md)\n\n## NodeStats.name property\n\nNode's name\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.nodestats.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [name](./bitburner.nodestats.name.md)\n\n## NodeStats.name property\n\nNode's name\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.stanek.removefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [removeFragment](./bitburner.stanek.removefragment.md)\n\n## Stanek.removeFragment() method\n\nRemove fragment at location.\n\n**Signature:**\n\n```typescript\nremoveFragment(rootX: number, rootY: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | X against which to align the top left of the fragment. |\n|  rootY | number | Y against which to align the top left of the fragment. |\n\n**Returns:**\n\nboolean\n\nThe fragment at \\[rootX, rootY\\], if any.\n\n## Remarks\n\nRAM cost: 0.15 GB\n\n", "ns.stanek.removefragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [removeFragment](./bitburner.stanek.removefragment.md)\n\n## Stanek.removeFragment() method\n\nRemove fragment at location.\n\n**Signature:**\n\n```typescript\nremoveFragment(rootX: number, rootY: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | X against which to align the top left of the fragment. |\n|  rootY | number | Y against which to align the top left of the fragment. |\n\n**Returns:**\n\nboolean\n\nThe fragment at \\[rootX, rootY\\], if any.\n\n## Remarks\n\nRAM cost: 0.15 GB\n\n", "bitburner.warehouseapi.setmaterialmarketta2.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setMaterialMarketTA2](./bitburner.warehouseapi.setmaterialmarketta2.md)\n\n## WarehouseAPI.setMaterialMarketTA2() method\n\nSet market TA 2 for a material.\n\n**Signature:**\n\n```typescript\nsetMaterialMarketTA2(divisionName: string, city: CityName | `${CityName}`, materialName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.setmaterialmarketta2.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setMaterialMarketTA2](./bitburner.warehouseapi.setmaterialmarketta2.md)\n\n## WarehouseAPI.setMaterialMarketTA2() method\n\nSet market TA 2 for a material.\n\n**Signature:**\n\n```typescript\nsetMaterialMarketTA2(divisionName: string, city: CityName | `${CityName}`, materialName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "bitburner.gangmemberinfo.agi_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_asc\\_points](./bitburner.gangmemberinfo.agi_asc_points.md)\n\n## GangMemberInfo.agi\\_asc\\_points property\n\nTotal earned agility experience\n\n**Signature:**\n\n```typescript\nagi_asc_points: number;\n```\n", "ns.gangmemberinfo.agi_asc_points.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_asc\\_points](./bitburner.gangmemberinfo.agi_asc_points.md)\n\n## GangMemberInfo.agi\\_asc\\_points property\n\nTotal earned agility experience\n\n**Signature:**\n\n```typescript\nagi_asc_points: number;\n```\n", "bitburner.ordertypes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OrderTypes](./bitburner.ordertypes.md)\n\n## OrderTypes enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum OrderTypes \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  LimitBuy | <code>&quot;Limit Buy Order&quot;</code> |  |\n|  LimitSell | <code>&quot;Limit Sell Order&quot;</code> |  |\n|  StopBuy | <code>&quot;Stop Buy Order&quot;</code> |  |\n|  StopSell | <code>&quot;Stop Sell Order&quot;</code> |  |\n\n", "ns.ordertypes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OrderTypes](./bitburner.ordertypes.md)\n\n## OrderTypes enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum OrderTypes \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  LimitBuy | <code>&quot;Limit Buy Order&quot;</code> |  |\n|  LimitSell | <code>&quot;Limit Sell Order&quot;</code> |  |\n|  StopBuy | <code>&quot;Stop Buy Order&quot;</code> |  |\n|  StopSell | <code>&quot;Stop Sell Order&quot;</code> |  |\n\n", "bitburner.corpconstants.officeinitialsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [officeInitialSize](./bitburner.corpconstants.officeinitialsize.md)\n\n## CorpConstants.officeInitialSize property\n\n**Signature:**\n\n```typescript\nofficeInitialSize: number;\n```\n", "ns.corpconstants.officeinitialsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [officeInitialSize](./bitburner.corpconstants.officeinitialsize.md)\n\n## CorpConstants.officeInitialSize property\n\n**Signature:**\n\n```typescript\nofficeInitialSize: number;\n```\n", "bitburner.corpmaterialconstantdata.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [name](./bitburner.corpmaterialconstantdata.name.md)\n\n## CorpMaterialConstantData.name property\n\nName of the material\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.corpmaterialconstantdata.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [name](./bitburner.corpmaterialconstantdata.name.md)\n\n## CorpMaterialConstantData.name property\n\nName of the material\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.person.exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [exp](./bitburner.person.exp.md)\n\n## Person.exp property\n\n**Signature:**\n\n```typescript\nexp: Skills;\n```\n", "ns.person.exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [exp](./bitburner.person.exp.md)\n\n## Person.exp property\n\n**Signature:**\n\n```typescript\nexp: Skills;\n```\n", "bitburner.hacknetnodesformulas.levelupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [levelUpgradeCost](./bitburner.hacknetnodesformulas.levelupgradecost.md)\n\n## HacknetNodesFormulas.levelUpgradeCost() method\n\nCalculate cost of upgrading hacknet node level.\n\n**Signature:**\n\n```typescript\nlevelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingLevel | number | starting level |\n|  extraLevels | number | _(Optional)_ amount of level to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetnodesformulas.levelupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [levelUpgradeCost](./bitburner.hacknetnodesformulas.levelupgradecost.md)\n\n## HacknetNodesFormulas.levelUpgradeCost() method\n\nCalculate cost of upgrading hacknet node level.\n\n**Signature:**\n\n```typescript\nlevelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingLevel | number | starting level |\n|  extraLevels | number | _(Optional)_ amount of level to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.bitnodemultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md)\n\n## BitNodeMultipliers interface\n\nAll multipliers affecting the difficulty of the current challenge.\n\n**Signature:**\n\n```typescript\ninterface BitNodeMultipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [AgilityLevelMultiplier](./bitburner.bitnodemultipliers.agilitylevelmultiplier.md) |  | number | Influences how quickly the player's agility level (not exp) scales |\n|  [AugmentationMoneyCost](./bitburner.bitnodemultipliers.augmentationmoneycost.md) |  | number | Influences the base cost to purchase an augmentation. |\n|  [AugmentationRepCost](./bitburner.bitnodemultipliers.augmentationrepcost.md) |  | number | Influences the base rep the player must have with a faction to purchase an augmentation. |\n|  [BladeburnerRank](./bitburner.bitnodemultipliers.bladeburnerrank.md) |  | number | Influences how quickly the player can gain rank within Bladeburner. |\n|  [BladeburnerSkillCost](./bitburner.bitnodemultipliers.bladeburnerskillcost.md) |  | number | Influences the cost of skill levels from Bladeburner. |\n|  [CharismaLevelMultiplier](./bitburner.bitnodemultipliers.charismalevelmultiplier.md) |  | number | Influences how quickly the player's charisma level (not exp) scales |\n|  [ClassGymExpGain](./bitburner.bitnodemultipliers.classgymexpgain.md) |  | number | Influences the experience gained for each ability when a player completes a class. |\n|  [CodingContractMoney](./bitburner.bitnodemultipliers.codingcontractmoney.md) |  | number | Influences the amount of money gained from completing Coding Contracts |\n|  [CompanyWorkExpGain](./bitburner.bitnodemultipliers.companyworkexpgain.md) |  | number | Influences the experience gained for each ability when the player completes working their job. |\n|  [CompanyWorkMoney](./bitburner.bitnodemultipliers.companyworkmoney.md) |  | number | Influences how much money the player earns when completing working their job. |\n|  [CorporationSoftcap](./bitburner.bitnodemultipliers.corporationsoftcap.md) |  | number | Influences the money gain from dividends of corporations created by the player. |\n|  [CorporationValuation](./bitburner.bitnodemultipliers.corporationvaluation.md) |  | number | Influences the valuation of corporations created by the player. |\n|  [CrimeExpGain](./bitburner.bitnodemultipliers.crimeexpgain.md) |  | number | Influences the base experience gained for each ability when the player commits a crime. |\n|  [CrimeMoney](./bitburner.bitnodemultipliers.crimemoney.md) |  | number | Influences the base money gained when the player commits a crime. |\n|  [DaedalusAugsRequirement](./bitburner.bitnodemultipliers.daedalusaugsrequirement.md) |  | number | Influences how many Augmentations you need in order to get invited to the Daedalus faction |\n|  [DefenseLevelMultiplier](./bitburner.bitnodemultipliers.defenselevelmultiplier.md) |  | number | Influences how quickly the player's defense level (not exp) scales |\n|  [DexterityLevelMultiplier](./bitburner.bitnodemultipliers.dexteritylevelmultiplier.md) |  | number | Influences how quickly the player's dexterity level (not exp) scales |\n|  [FactionPassiveRepGain](./bitburner.bitnodemultipliers.factionpassiverepgain.md) |  | number | Influences how much rep the player gains in each faction simply by being a member. |\n|  [FactionWorkExpGain](./bitburner.bitnodemultipliers.factionworkexpgain.md) |  | number | Influences the experience gained for each ability when the player completes work for a Faction. |\n|  [FactionWorkRepGain](./bitburner.bitnodemultipliers.factionworkrepgain.md) |  | number | Influences how much rep the player gains when performing work for a faction. |\n|  [FourSigmaMarketDataApiCost](./bitburner.bitnodemultipliers.foursigmamarketdataapicost.md) |  | number | Influences how much it costs to unlock the stock market's 4S Market Data API |\n|  [FourSigmaMarketDataCost](./bitburner.bitnodemultipliers.foursigmamarketdatacost.md) |  | number | Influences how much it costs to unlock the stock market's 4S Market Data (NOT API) |\n|  [GangSoftcap](./bitburner.bitnodemultipliers.gangsoftcap.md) |  | number | Influences the respect gain and money gain of your gang. |\n|  [HackExpGain](./bitburner.bitnodemultipliers.hackexpgain.md) |  | number | Influences the experienced gained when hacking a server. |\n|  [HackingLevelMultiplier](./bitburner.bitnodemultipliers.hackinglevelmultiplier.md) |  | number | Influences how quickly the player's hacking level (not experience) scales |\n|  [HacknetNodeMoney](./bitburner.bitnodemultipliers.hacknetnodemoney.md) |  | number | Influences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9) |\n|  [HomeComputerRamCost](./bitburner.bitnodemultipliers.homecomputerramcost.md) |  | number | Influences how much money it costs to upgrade your home computer's RAM |\n|  [InfiltrationMoney](./bitburner.bitnodemultipliers.infiltrationmoney.md) |  | number | Influences how much money is gained when the player infiltrates a company. |\n|  [InfiltrationRep](./bitburner.bitnodemultipliers.infiltrationrep.md) |  | number | Influences how much rep the player can gain from factions when selling stolen documents and secrets |\n|  [ManualHackMoney](./bitburner.bitnodemultipliers.manualhackmoney.md) |  | number | Influences how much money can be stolen from a server when the player performs a hack against it through the Terminal. |\n|  [PurchasedServerCost](./bitburner.bitnodemultipliers.purchasedservercost.md) |  | number | Influence how much it costs to purchase a server |\n|  [PurchasedServerLimit](./bitburner.bitnodemultipliers.purchasedserverlimit.md) |  | number | Influences the maximum number of purchased servers you can have |\n|  [PurchasedServerMaxRam](./bitburner.bitnodemultipliers.purchasedservermaxram.md) |  | number | Influences the maximum allowed RAM for a purchased server |\n|  [PurchasedServerSoftcap](./bitburner.bitnodemultipliers.purchasedserversoftcap.md) |  | number | Influences cost of any purchased server at or above 128GB |\n|  [RepToDonateToFaction](./bitburner.bitnodemultipliers.reptodonatetofaction.md) |  | number | Influences the minimum favor the player must have with a faction before they can donate to gain rep. |\n|  [ScriptHackMoney](./bitburner.bitnodemultipliers.scripthackmoney.md) |  | number | Influences how much the money on a server can be reduced when a script performs a hack against it. |\n|  [ScriptHackMoneyGain](./bitburner.bitnodemultipliers.scripthackmoneygain.md) |  | number | Influences how much of the money stolen by a scripted hack will be added to the player's money. |\n|  [ServerGrowthRate](./bitburner.bitnodemultipliers.servergrowthrate.md) |  | number | Influences the growth percentage per cycle against a server. |\n|  [ServerMaxMoney](./bitburner.bitnodemultipliers.servermaxmoney.md) |  | number | Influences the maximum money that a server can grow to. |\n|  [ServerStartingMoney](./bitburner.bitnodemultipliers.serverstartingmoney.md) |  | number | Influences the initial money that a server starts with. |\n|  [ServerStartingSecurity](./bitburner.bitnodemultipliers.serverstartingsecurity.md) |  | number | Influences the initial security level (hackDifficulty) of a server. |\n|  [ServerWeakenRate](./bitburner.bitnodemultipliers.serverweakenrate.md) |  | number | Influences the weaken amount per invocation against a server. |\n|  [StaneksGiftExtraSize](./bitburner.bitnodemultipliers.staneksgiftextrasize.md) |  | number | Influences the size of the gift |\n|  [StaneksGiftPowerMultiplier](./bitburner.bitnodemultipliers.staneksgiftpowermultiplier.md) |  | number | Influences the power of the gift |\n|  [StrengthLevelMultiplier](./bitburner.bitnodemultipliers.strengthlevelmultiplier.md) |  | number | Influences how quickly the player's strength level (not exp) scales |\n|  [WorldDaemonDifficulty](./bitburner.bitnodemultipliers.worlddaemondifficulty.md) |  | number | Influences the hacking skill required to backdoor the world daemon. |\n\n", "ns.bitnodemultipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md)\n\n## BitNodeMultipliers interface\n\nAll multipliers affecting the difficulty of the current challenge.\n\n**Signature:**\n\n```typescript\ninterface BitNodeMultipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [AgilityLevelMultiplier](./bitburner.bitnodemultipliers.agilitylevelmultiplier.md) |  | number | Influences how quickly the player's agility level (not exp) scales |\n|  [AugmentationMoneyCost](./bitburner.bitnodemultipliers.augmentationmoneycost.md) |  | number | Influences the base cost to purchase an augmentation. |\n|  [AugmentationRepCost](./bitburner.bitnodemultipliers.augmentationrepcost.md) |  | number | Influences the base rep the player must have with a faction to purchase an augmentation. |\n|  [BladeburnerRank](./bitburner.bitnodemultipliers.bladeburnerrank.md) |  | number | Influences how quickly the player can gain rank within Bladeburner. |\n|  [BladeburnerSkillCost](./bitburner.bitnodemultipliers.bladeburnerskillcost.md) |  | number | Influences the cost of skill levels from Bladeburner. |\n|  [CharismaLevelMultiplier](./bitburner.bitnodemultipliers.charismalevelmultiplier.md) |  | number | Influences how quickly the player's charisma level (not exp) scales |\n|  [ClassGymExpGain](./bitburner.bitnodemultipliers.classgymexpgain.md) |  | number | Influences the experience gained for each ability when a player completes a class. |\n|  [CodingContractMoney](./bitburner.bitnodemultipliers.codingcontractmoney.md) |  | number | Influences the amount of money gained from completing Coding Contracts |\n|  [CompanyWorkExpGain](./bitburner.bitnodemultipliers.companyworkexpgain.md) |  | number | Influences the experience gained for each ability when the player completes working their job. |\n|  [CompanyWorkMoney](./bitburner.bitnodemultipliers.companyworkmoney.md) |  | number | Influences how much money the player earns when completing working their job. |\n|  [CorporationSoftcap](./bitburner.bitnodemultipliers.corporationsoftcap.md) |  | number | Influences the money gain from dividends of corporations created by the player. |\n|  [CorporationValuation](./bitburner.bitnodemultipliers.corporationvaluation.md) |  | number | Influences the valuation of corporations created by the player. |\n|  [CrimeExpGain](./bitburner.bitnodemultipliers.crimeexpgain.md) |  | number | Influences the base experience gained for each ability when the player commits a crime. |\n|  [CrimeMoney](./bitburner.bitnodemultipliers.crimemoney.md) |  | number | Influences the base money gained when the player commits a crime. |\n|  [DaedalusAugsRequirement](./bitburner.bitnodemultipliers.daedalusaugsrequirement.md) |  | number | Influences how many Augmentations you need in order to get invited to the Daedalus faction |\n|  [DefenseLevelMultiplier](./bitburner.bitnodemultipliers.defenselevelmultiplier.md) |  | number | Influences how quickly the player's defense level (not exp) scales |\n|  [DexterityLevelMultiplier](./bitburner.bitnodemultipliers.dexteritylevelmultiplier.md) |  | number | Influences how quickly the player's dexterity level (not exp) scales |\n|  [FactionPassiveRepGain](./bitburner.bitnodemultipliers.factionpassiverepgain.md) |  | number | Influences how much rep the player gains in each faction simply by being a member. |\n|  [FactionWorkExpGain](./bitburner.bitnodemultipliers.factionworkexpgain.md) |  | number | Influences the experience gained for each ability when the player completes work for a Faction. |\n|  [FactionWorkRepGain](./bitburner.bitnodemultipliers.factionworkrepgain.md) |  | number | Influences how much rep the player gains when performing work for a faction. |\n|  [FourSigmaMarketDataApiCost](./bitburner.bitnodemultipliers.foursigmamarketdataapicost.md) |  | number | Influences how much it costs to unlock the stock market's 4S Market Data API |\n|  [FourSigmaMarketDataCost](./bitburner.bitnodemultipliers.foursigmamarketdatacost.md) |  | number | Influences how much it costs to unlock the stock market's 4S Market Data (NOT API) |\n|  [GangSoftcap](./bitburner.bitnodemultipliers.gangsoftcap.md) |  | number | Influences the respect gain and money gain of your gang. |\n|  [HackExpGain](./bitburner.bitnodemultipliers.hackexpgain.md) |  | number | Influences the experienced gained when hacking a server. |\n|  [HackingLevelMultiplier](./bitburner.bitnodemultipliers.hackinglevelmultiplier.md) |  | number | Influences how quickly the player's hacking level (not experience) scales |\n|  [HacknetNodeMoney](./bitburner.bitnodemultipliers.hacknetnodemoney.md) |  | number | Influences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9) |\n|  [HomeComputerRamCost](./bitburner.bitnodemultipliers.homecomputerramcost.md) |  | number | Influences how much money it costs to upgrade your home computer's RAM |\n|  [InfiltrationMoney](./bitburner.bitnodemultipliers.infiltrationmoney.md) |  | number | Influences how much money is gained when the player infiltrates a company. |\n|  [InfiltrationRep](./bitburner.bitnodemultipliers.infiltrationrep.md) |  | number | Influences how much rep the player can gain from factions when selling stolen documents and secrets |\n|  [ManualHackMoney](./bitburner.bitnodemultipliers.manualhackmoney.md) |  | number | Influences how much money can be stolen from a server when the player performs a hack against it through the Terminal. |\n|  [PurchasedServerCost](./bitburner.bitnodemultipliers.purchasedservercost.md) |  | number | Influence how much it costs to purchase a server |\n|  [PurchasedServerLimit](./bitburner.bitnodemultipliers.purchasedserverlimit.md) |  | number | Influences the maximum number of purchased servers you can have |\n|  [PurchasedServerMaxRam](./bitburner.bitnodemultipliers.purchasedservermaxram.md) |  | number | Influences the maximum allowed RAM for a purchased server |\n|  [PurchasedServerSoftcap](./bitburner.bitnodemultipliers.purchasedserversoftcap.md) |  | number | Influences cost of any purchased server at or above 128GB |\n|  [RepToDonateToFaction](./bitburner.bitnodemultipliers.reptodonatetofaction.md) |  | number | Influences the minimum favor the player must have with a faction before they can donate to gain rep. |\n|  [ScriptHackMoney](./bitburner.bitnodemultipliers.scripthackmoney.md) |  | number | Influences how much the money on a server can be reduced when a script performs a hack against it. |\n|  [ScriptHackMoneyGain](./bitburner.bitnodemultipliers.scripthackmoneygain.md) |  | number | Influences how much of the money stolen by a scripted hack will be added to the player's money. |\n|  [ServerGrowthRate](./bitburner.bitnodemultipliers.servergrowthrate.md) |  | number | Influences the growth percentage per cycle against a server. |\n|  [ServerMaxMoney](./bitburner.bitnodemultipliers.servermaxmoney.md) |  | number | Influences the maximum money that a server can grow to. |\n|  [ServerStartingMoney](./bitburner.bitnodemultipliers.serverstartingmoney.md) |  | number | Influences the initial money that a server starts with. |\n|  [ServerStartingSecurity](./bitburner.bitnodemultipliers.serverstartingsecurity.md) |  | number | Influences the initial security level (hackDifficulty) of a server. |\n|  [ServerWeakenRate](./bitburner.bitnodemultipliers.serverweakenrate.md) |  | number | Influences the weaken amount per invocation against a server. |\n|  [StaneksGiftExtraSize](./bitburner.bitnodemultipliers.staneksgiftextrasize.md) |  | number | Influences the size of the gift |\n|  [StaneksGiftPowerMultiplier](./bitburner.bitnodemultipliers.staneksgiftpowermultiplier.md) |  | number | Influences the power of the gift |\n|  [StrengthLevelMultiplier](./bitburner.bitnodemultipliers.strengthlevelmultiplier.md) |  | number | Influences how quickly the player's strength level (not exp) scales |\n|  [WorldDaemonDifficulty](./bitburner.bitnodemultipliers.worlddaemondifficulty.md) |  | number | Influences the hacking skill required to backdoor the world daemon. |\n\n", "bitburner.singularity.exportgame.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [exportGame](./bitburner.singularity.exportgame.md)\n\n## Singularity.exportGame() method\n\nBackup game save.\n\n**Signature:**\n\n```typescript\nexportGame(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function will automatically opens the backup save prompt and claim the free faction favour if available.\n\n", "ns.singularity.exportgame.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [exportGame](./bitburner.singularity.exportgame.md)\n\n## Singularity.exportGame() method\n\nBackup game save.\n\n**Signature:**\n\n```typescript\nexportGame(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function will automatically opens the backup save prompt and claim the free faction favour if available.\n\n", "bitburner.userinterface.getstyles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [getStyles](./bitburner.userinterface.getstyles.md)\n\n## UserInterface.getStyles() method\n\nGet the current styles\n\n**Signature:**\n\n```typescript\ngetStyles(): IStyleSettings;\n```\n**Returns:**\n\n[IStyleSettings](./bitburner.istylesettings.md)\n\nAn object containing the player's styles\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.userinterface.getstyles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [getStyles](./bitburner.userinterface.getstyles.md)\n\n## UserInterface.getStyles() method\n\nGet the current styles\n\n**Signature:**\n\n```typescript\ngetStyles(): IStyleSettings;\n```\n**Returns:**\n\n[IStyleSettings](./bitburner.istylesettings.md)\n\nAn object containing the player's styles\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.skills.agility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [agility](./bitburner.skills.agility.md)\n\n## Skills.agility property\n\n**Signature:**\n\n```typescript\nagility: number;\n```\n", "ns.skills.agility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [agility](./bitburner.skills.agility.md)\n\n## Skills.agility property\n\n**Signature:**\n\n```typescript\nagility: number;\n```\n", "bitburner.bladeburner.getactionestimatedsuccesschance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionEstimatedSuccessChance](./bitburner.bladeburner.getactionestimatedsuccesschance.md)\n\n## Bladeburner.getActionEstimatedSuccessChance() method\n\nGet estimate success chance of an action.\n\n**Signature:**\n\n```typescript\ngetActionEstimatedSuccessChance(type: string, name: string): [number, number];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\n\\[number, number\\]\n\nEstimated success chance for the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the estimated success chance for the specified action. This chance is returned as a decimal value, NOT a percentage (e.g. if you have an estimated success chance of 80%, then this function will return 0.80, NOT 80).\n\n", "ns.bladeburner.getactionestimatedsuccesschance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionEstimatedSuccessChance](./bitburner.bladeburner.getactionestimatedsuccesschance.md)\n\n## Bladeburner.getActionEstimatedSuccessChance() method\n\nGet estimate success chance of an action.\n\n**Signature:**\n\n```typescript\ngetActionEstimatedSuccessChance(type: string, name: string): [number, number];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\n\\[number, number\\]\n\nEstimated success chance for the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the estimated success chance for the specified action. This chance is returned as a decimal value, NOT a percentage (e.g. if you have an estimated success chance of 80%, then this function will return 0.80, NOT 80).\n\n", "bitburner.ns.getsharepower.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getSharePower](./bitburner.ns.getsharepower.md)\n\n## NS.getSharePower() method\n\nCalculate your share power. Based on all the active share calls.\n\n**Signature:**\n\n```typescript\ngetSharePower(): number;\n```\n**Returns:**\n\nnumber\n\n## Remarks\n\nRAM cost: 0.2 GB\n\n", "ns.ns.getsharepower.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getSharePower](./bitburner.ns.getsharepower.md)\n\n## NS.getSharePower() method\n\nCalculate your share power. Based on all the active share calls.\n\n**Signature:**\n\n```typescript\ngetSharePower(): number;\n```\n**Returns:**\n\nnumber\n\n## Remarks\n\nRAM cost: 0.2 GB\n\n", "bitburner.officeapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md)\n\n## OfficeAPI interface\n\nCorporation Office API\n\n**Signature:**\n\n```typescript\nexport interface OfficeAPI \n```\n\n## Remarks\n\nrequires the Office API upgrade from your corporation.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [buyCoffee(divisionName, city)](./bitburner.officeapi.buycoffee.md) | Buy coffee for your employees |\n|  [getHireAdVertCost(divisionName)](./bitburner.officeapi.gethireadvertcost.md) | Get the cost to hire AdVert. |\n|  [getHireAdVertCount(divisionName)](./bitburner.officeapi.gethireadvertcount.md) | Get the number of times you have hired AdVert. |\n|  [getOffice(divisionName, city)](./bitburner.officeapi.getoffice.md) | Get data about an office |\n|  [getOfficeSizeUpgradeCost(divisionName, city, asize)](./bitburner.officeapi.getofficesizeupgradecost.md) | Cost to Upgrade office size. |\n|  [getResearchCost(divisionName, researchName)](./bitburner.officeapi.getresearchcost.md) | Get the cost to unlock research |\n|  [hasResearched(divisionName, researchName)](./bitburner.officeapi.hasresearched.md) | Gets if you have unlocked a research |\n|  [hireAdVert(divisionName)](./bitburner.officeapi.hireadvert.md) | Hire AdVert. |\n|  [hireEmployee(divisionName, city, employeePosition)](./bitburner.officeapi.hireemployee.md) | Hire an employee. |\n|  [research(divisionName, researchName)](./bitburner.officeapi.research.md) | Purchase a research |\n|  [setAutoJobAssignment(divisionName, city, job, amount)](./bitburner.officeapi.setautojobassignment.md) | Set the auto job assignment for a job |\n|  [throwParty(divisionName, city, costPerEmployee)](./bitburner.officeapi.throwparty.md) | Throw a party for your employees |\n|  [upgradeOfficeSize(divisionName, city, size)](./bitburner.officeapi.upgradeofficesize.md) | Upgrade office size. |\n\n", "ns.officeapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md)\n\n## OfficeAPI interface\n\nCorporation Office API\n\n**Signature:**\n\n```typescript\nexport interface OfficeAPI \n```\n\n## Remarks\n\nrequires the Office API upgrade from your corporation.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [buyCoffee(divisionName, city)](./bitburner.officeapi.buycoffee.md) | Buy coffee for your employees |\n|  [getHireAdVertCost(divisionName)](./bitburner.officeapi.gethireadvertcost.md) | Get the cost to hire AdVert. |\n|  [getHireAdVertCount(divisionName)](./bitburner.officeapi.gethireadvertcount.md) | Get the number of times you have hired AdVert. |\n|  [getOffice(divisionName, city)](./bitburner.officeapi.getoffice.md) | Get data about an office |\n|  [getOfficeSizeUpgradeCost(divisionName, city, asize)](./bitburner.officeapi.getofficesizeupgradecost.md) | Cost to Upgrade office size. |\n|  [getResearchCost(divisionName, researchName)](./bitburner.officeapi.getresearchcost.md) | Get the cost to unlock research |\n|  [hasResearched(divisionName, researchName)](./bitburner.officeapi.hasresearched.md) | Gets if you have unlocked a research |\n|  [hireAdVert(divisionName)](./bitburner.officeapi.hireadvert.md) | Hire AdVert. |\n|  [hireEmployee(divisionName, city, employeePosition)](./bitburner.officeapi.hireemployee.md) | Hire an employee. |\n|  [research(divisionName, researchName)](./bitburner.officeapi.research.md) | Purchase a research |\n|  [setAutoJobAssignment(divisionName, city, job, amount)](./bitburner.officeapi.setautojobassignment.md) | Set the auto job assignment for a job |\n|  [throwParty(divisionName, city, costPerEmployee)](./bitburner.officeapi.throwparty.md) | Throw a party for your employees |\n|  [upgradeOfficeSize(divisionName, city, size)](./bitburner.officeapi.upgradeofficesize.md) | Upgrade office size. |\n\n", "bitburner.sleeve.settocommitcrime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToCommitCrime](./bitburner.sleeve.settocommitcrime.md)\n\n## Sleeve.setToCommitCrime() method\n\nSet a sleeve to commit crime.\n\n**Signature:**\n\n```typescript\nsetToCommitCrime(sleeveNumber: number, crimeType: CrimeType | `${CrimeType}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start committing crime. Sleeves are numbered starting from 0. |\n|  crimeType | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` |  |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully (false if an invalid action is specified).\n\n## Example\n\n\n```ts\n// Assigns the first sleeve to Homicide.\nns.sleeve.setToCommitCrime(0, \"Homicide\");\n\n// Assigns the second sleeve to Grand Theft Auto, using enum\nconst crimes = ns.enums.CrimeType;\nns.sleeve.setToCommitCrime(1, crimes.grandTheftAuto)\n```\n\n", "ns.sleeve.settocommitcrime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToCommitCrime](./bitburner.sleeve.settocommitcrime.md)\n\n## Sleeve.setToCommitCrime() method\n\nSet a sleeve to commit crime.\n\n**Signature:**\n\n```typescript\nsetToCommitCrime(sleeveNumber: number, crimeType: CrimeType | `${CrimeType}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start committing crime. Sleeves are numbered starting from 0. |\n|  crimeType | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` |  |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully (false if an invalid action is specified).\n\n## Example\n\n\n```ts\n// Assigns the first sleeve to Homicide.\nns.sleeve.setToCommitCrime(0, \"Homicide\");\n\n// Assigns the second sleeve to Grand Theft Auto, using enum\nconst crimes = ns.enums.CrimeType;\nns.sleeve.setToCommitCrime(1, crimes.grandTheftAuto)\n```\n\n", "bitburner.netscriptport.empty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [empty](./bitburner.netscriptport.empty.md)\n\n## NetscriptPort.empty() method\n\nCheck if the port is empty.\n\n**Signature:**\n\n```typescript\nempty(): boolean;\n```\n**Returns:**\n\nboolean\n\ntrue if the port is empty, otherwise false\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.netscriptport.empty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [empty](./bitburner.netscriptport.empty.md)\n\n## NetscriptPort.empty() method\n\nCheck if the port is empty.\n\n**Signature:**\n\n```typescript\nempty(): boolean;\n```\n**Returns:**\n\nboolean\n\ntrue if the port is empty, otherwise false\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.gymtype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GymType](./bitburner.gymtype.md)\n\n## GymType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum GymType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  agility | <code>&quot;agi&quot;</code> |  |\n|  defense | <code>&quot;def&quot;</code> |  |\n|  dexterity | <code>&quot;dex&quot;</code> |  |\n|  strength | <code>&quot;str&quot;</code> |  |\n\n", "ns.gymtype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GymType](./bitburner.gymtype.md)\n\n## GymType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum GymType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  agility | <code>&quot;agi&quot;</code> |  |\n|  defense | <code>&quot;def&quot;</code> |  |\n|  dexterity | <code>&quot;dex&quot;</code> |  |\n|  strength | <code>&quot;str&quot;</code> |  |\n\n", "bitburner.ns.getfavortodonate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getFavorToDonate](./bitburner.ns.getfavortodonate.md)\n\n## NS.getFavorToDonate() method\n\nReturns the amount of Faction favor required to be able to donate to a faction.\n\n**Signature:**\n\n```typescript\ngetFavorToDonate(): number;\n```\n**Returns:**\n\nnumber\n\nAmount of Faction favor required to be able to donate to a faction.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.getfavortodonate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getFavorToDonate](./bitburner.ns.getfavortodonate.md)\n\n## NS.getFavorToDonate() method\n\nReturns the amount of Faction favor required to be able to donate to a faction.\n\n**Signature:**\n\n```typescript\ngetFavorToDonate(): number;\n```\n**Returns:**\n\nnumber\n\nAmount of Faction favor required to be able to donate to a faction.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.multipliers.hacking_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_money](./bitburner.multipliers.hacking_money.md)\n\n## Multipliers.hacking\\_money property\n\nMultiplier to amount of money the player gains from hacking\n\n**Signature:**\n\n```typescript\nhacking_money: number;\n```\n", "ns.multipliers.hacking_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_money](./bitburner.multipliers.hacking_money.md)\n\n## Multipliers.hacking\\_money property\n\nMultiplier to amount of money the player gains from hacking\n\n**Signature:**\n\n```typescript\nhacking_money: number;\n```\n", "bitburner.server.requiredhackingskill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [requiredHackingSkill](./bitburner.server.requiredhackingskill.md)\n\n## Server.requiredHackingSkill property\n\nHacking level required to hack this server\n\n**Signature:**\n\n```typescript\nrequiredHackingSkill: number;\n```\n", "ns.server.requiredhackingskill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [requiredHackingSkill](./bitburner.server.requiredhackingskill.md)\n\n## Server.requiredHackingSkill property\n\nHacking level required to hack this server\n\n**Signature:**\n\n```typescript\nrequiredHackingSkill: number;\n```\n", "bitburner.hackingformulas.hackchance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackChance](./bitburner.hackingformulas.hackchance.md)\n\n## HackingFormulas.hackChance() method\n\nCalculate hack chance. (Ex: 0.25 would indicate a 25% chance of success.)\n\n**Signature:**\n\n```typescript\nhackChance(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack chance.\n\n", "ns.hackingformulas.hackchance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingFormulas](./bitburner.hackingformulas.md) &gt; [hackChance](./bitburner.hackingformulas.hackchance.md)\n\n## HackingFormulas.hackChance() method\n\nCalculate hack chance. (Ex: 0.25 would indicate a 25% chance of success.)\n\n**Signature:**\n\n```typescript\nhackChance(server: Server, player: Person): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  server | [Server](./bitburner.server.md) | Server info from [getServer](./bitburner.ns.getserver.md) |\n|  player | [Person](./bitburner.person.md) | Player info from [getPlayer](./bitburner.ns.getplayer.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated hack chance.\n\n", "bitburner.corporationinfo.shareprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [sharePrice](./bitburner.corporationinfo.shareprice.md)\n\n## CorporationInfo.sharePrice property\n\nPrice of the shares\n\n**Signature:**\n\n```typescript\nsharePrice: number;\n```\n", "ns.corporationinfo.shareprice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [sharePrice](./bitburner.corporationinfo.shareprice.md)\n\n## CorporationInfo.sharePrice property\n\nPrice of the shares\n\n**Signature:**\n\n```typescript\nsharePrice: number;\n```\n", "bitburner.ns.run.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [run](./bitburner.ns.run.md)\n\n## NS.run() method\n\nStart another script on the current server.\n\n**Signature:**\n\n```typescript\nrun(script: string, numThreads?: number, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to run. |\n|  numThreads | number | _(Optional)_ Integer number of threads for new script. Defaults to 1. |\n|  args | (string \\| number \\| boolean)\\[\\] | Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the second argument numThreads must be filled in with a value. |\n\n**Returns:**\n\nnumber\n\nReturns the PID of a successfully started script, and 0 otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nRun a script as a separate process. This function can only be used to run scripts located on the current server (the server running the script that calls this function). Requires a significant amount of RAM to run this command.\n\nIf the script was successfully started, then this functions returns the PID of that script. Otherwise, it returns 0.\n\nPID stands for Process ID. The PID is a unique identifier for each script. The PID will always be a positive integer.\n\nRunning this function with a numThreads argument of 0 or less will cause a runtime error.\n\n## Example\n\n\n```js\n//The simplest way to use the run command is to call it with just the script name. The following example will run \u2018foo.js\u2019 single-threaded with no arguments:\nns.run(\"foo.js\");\n\n//The following example will run \u2018foo.js\u2019 but with 5 threads instead of single-threaded:\nns.run(\"foo.js\", 5);\n\n//This next example will run \u2018foo.js\u2019 single-threaded, and will pass the string \u2018foodnstuff\u2019 into the script as an argument:\nns.run(\"foo.js\", 1, 'foodnstuff');\n```\n\n", "ns.ns.run.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [run](./bitburner.ns.run.md)\n\n## NS.run() method\n\nStart another script on the current server.\n\n**Signature:**\n\n```typescript\nrun(script: string, numThreads?: number, ...args: (string | number | boolean)[]): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to run. |\n|  numThreads | number | _(Optional)_ Integer number of threads for new script. Defaults to 1. |\n|  args | (string \\| number \\| boolean)\\[\\] | Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the second argument numThreads must be filled in with a value. |\n\n**Returns:**\n\nnumber\n\nReturns the PID of a successfully started script, and 0 otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nRun a script as a separate process. This function can only be used to run scripts located on the current server (the server running the script that calls this function). Requires a significant amount of RAM to run this command.\n\nIf the script was successfully started, then this functions returns the PID of that script. Otherwise, it returns 0.\n\nPID stands for Process ID. The PID is a unique identifier for each script. The PID will always be a positive integer.\n\nRunning this function with a numThreads argument of 0 or less will cause a runtime error.\n\n## Example\n\n\n```js\n//The simplest way to use the run command is to call it with just the script name. The following example will run \u2018foo.js\u2019 single-threaded with no arguments:\nns.run(\"foo.js\");\n\n//The following example will run \u2018foo.js\u2019 but with 5 threads instead of single-threaded:\nns.run(\"foo.js\", 5);\n\n//This next example will run \u2018foo.js\u2019 single-threaded, and will pass the string \u2018foodnstuff\u2019 into the script as an argument:\nns.run(\"foo.js\", 1, 'foodnstuff');\n```\n\n", "bitburner.corpmaterialconstantdata.maxvolatility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [maxVolatility](./bitburner.corpmaterialconstantdata.maxvolatility.md)\n\n## CorpMaterialConstantData.maxVolatility property\n\n**Signature:**\n\n```typescript\nmaxVolatility: number;\n```\n", "ns.corpmaterialconstantdata.maxvolatility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [maxVolatility](./bitburner.corpmaterialconstantdata.maxvolatility.md)\n\n## CorpMaterialConstantData.maxVolatility property\n\n**Signature:**\n\n```typescript\nmaxVolatility: number;\n```\n", "bitburner.ns.getservermoneyavailable.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMoneyAvailable](./bitburner.ns.getservermoneyavailable.md)\n\n## NS.getServerMoneyAvailable() method\n\nGet money available on a server.\n\n**Signature:**\n\n```typescript\ngetServerMoneyAvailable(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nAmount of money available on the server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of money available on a server. Running this function on the home computer will return the player\u2019s money.\n\n## Example 1\n\n\n```ts\n// NS1:\ngetServerMoneyAvailable(\"foodnstuff\");\ngetServerMoneyAvailable(\"home\"); //Returns player's money\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.getServerMoneyAvailable(\"foodnstuff\");\nns.getServerMoneyAvailable(\"home\"); // Returns player's money\n```\n\n", "ns.ns.getservermoneyavailable.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerMoneyAvailable](./bitburner.ns.getservermoneyavailable.md)\n\n## NS.getServerMoneyAvailable() method\n\nGet money available on a server.\n\n**Signature:**\n\n```typescript\ngetServerMoneyAvailable(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nAmount of money available on the server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the amount of money available on a server. Running this function on the home computer will return the player\u2019s money.\n\n## Example 1\n\n\n```ts\n// NS1:\ngetServerMoneyAvailable(\"foodnstuff\");\ngetServerMoneyAvailable(\"home\"); //Returns player's money\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.getServerMoneyAvailable(\"foodnstuff\");\nns.getServerMoneyAvailable(\"home\"); // Returns player's money\n```\n\n", "bitburner.ns.getservergrowth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerGrowth](./bitburner.ns.getservergrowth.md)\n\n## NS.getServerGrowth() method\n\nGet a server growth parameter.\n\n**Signature:**\n\n```typescript\ngetServerGrowth(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nParameter that affects the percentage by which the server\u2019s money is increased when using the grow function.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the server\u2019s intrinsic \u201cgrowth parameter\u201d. This growth parameter is a number typically between 0 and 100 that represents how quickly the server\u2019s money grows. This parameter affects the percentage by which the server\u2019s money is increased when using the grow function. A higher growth parameter will result in a higher percentage increase from grow.\n\n", "ns.ns.getservergrowth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerGrowth](./bitburner.ns.getservergrowth.md)\n\n## NS.getServerGrowth() method\n\nGet a server growth parameter.\n\n**Signature:**\n\n```typescript\ngetServerGrowth(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nParameter that affects the percentage by which the server\u2019s money is increased when using the grow function.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns the server\u2019s intrinsic \u201cgrowth parameter\u201d. This growth parameter is a number typically between 0 and 100 that represents how quickly the server\u2019s money grows. This parameter affects the percentage by which the server\u2019s money is increased when using the grow function. A higher growth parameter will result in a higher percentage increase from grow.\n\n", "bitburner.ns.hackanalyze.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyze](./bitburner.ns.hackanalyze.md)\n\n## NS.hackAnalyze() method\n\nGet the part of money stolen with a single thread.\n\n**Signature:**\n\n```typescript\nhackAnalyze(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe part of money you will steal from the target server with a single thread hack.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the part of the specified server\u2019s money you will steal with a single thread hack.\n\n## Example 1\n\n\n```ts\n// NS1:\n//For example, assume the following returns 0.01:\nvar hackAmount = hackAnalyze(\"foodnstuff\");\n//This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n//For example, assume the following returns 0.01:\nconst hackAmount = ns.hackAnalyze(\"foodnstuff\");\n//This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\n```\n\n", "ns.ns.hackanalyze.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyze](./bitburner.ns.hackanalyze.md)\n\n## NS.hackAnalyze() method\n\nGet the part of money stolen with a single thread.\n\n**Signature:**\n\n```typescript\nhackAnalyze(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nnumber\n\nThe part of money you will steal from the target server with a single thread hack.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns the part of the specified server\u2019s money you will steal with a single thread hack.\n\n## Example 1\n\n\n```ts\n// NS1:\n//For example, assume the following returns 0.01:\nvar hackAmount = hackAnalyze(\"foodnstuff\");\n//This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n//For example, assume the following returns 0.01:\nconst hackAmount = ns.hackAnalyze(\"foodnstuff\");\n//This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\n```\n\n", "bitburner.sleeve.settobladeburneraction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToBladeburnerAction](./bitburner.sleeve.settobladeburneraction.md)\n\n## Sleeve.setToBladeburnerAction() method\n\nSet a sleeve to perform bladeburner actions.\n\n**Signature:**\n\n```typescript\nsetToBladeburnerAction(sleeveNumber: number, action: string, contract?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to workout at the gym. |\n|  action | string | Name of the action to be performed. |\n|  contract | string | _(Optional)_ Name of the contract if applicable. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve started working out, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working out.\n\n", "ns.sleeve.settobladeburneraction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToBladeburnerAction](./bitburner.sleeve.settobladeburneraction.md)\n\n## Sleeve.setToBladeburnerAction() method\n\nSet a sleeve to perform bladeburner actions.\n\n**Signature:**\n\n```typescript\nsetToBladeburnerAction(sleeveNumber: number, action: string, contract?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to workout at the gym. |\n|  action | string | Name of the action to be performed. |\n|  contract | string | _(Optional)_ Name of the contract if applicable. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve started working out, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working out.\n\n", "bitburner.ganggeninfo.faction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [faction](./bitburner.ganggeninfo.faction.md)\n\n## GangGenInfo.faction property\n\nName of faction that the gang belongs to (\"Slum Snakes\", etc.)\n\n**Signature:**\n\n```typescript\nfaction: string;\n```\n", "ns.ganggeninfo.faction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [faction](./bitburner.ganggeninfo.faction.md)\n\n## GangGenInfo.faction property\n\nName of faction that the gang belongs to (\"Slum Snakes\", etc.)\n\n**Signature:**\n\n```typescript\nfaction: string;\n```\n", "bitburner.infiltration.getinfiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Infiltration](./bitburner.infiltration.md) &gt; [getInfiltration](./bitburner.infiltration.getinfiltration.md)\n\n## Infiltration.getInfiltration() method\n\nGet all infiltrations with difficulty, location and rewards.\n\n**Signature:**\n\n```typescript\ngetInfiltration(location: string): InfiltrationLocation;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  location | string |  |\n\n**Returns:**\n\n[InfiltrationLocation](./bitburner.infiltrationlocation.md)\n\nInfiltration data for given location.\n\n## Remarks\n\nRAM cost: 15 GB\n\n", "ns.infiltration.getinfiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Infiltration](./bitburner.infiltration.md) &gt; [getInfiltration](./bitburner.infiltration.getinfiltration.md)\n\n## Infiltration.getInfiltration() method\n\nGet all infiltrations with difficulty, location and rewards.\n\n**Signature:**\n\n```typescript\ngetInfiltration(location: string): InfiltrationLocation;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  location | string |  |\n\n**Returns:**\n\n[InfiltrationLocation](./bitburner.infiltrationlocation.md)\n\nInfiltration data for given location.\n\n## Remarks\n\nRAM cost: 15 GB\n\n", "bitburner.gameinfo.platform.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md) &gt; [platform](./bitburner.gameinfo.platform.md)\n\n## GameInfo.platform property\n\n**Signature:**\n\n```typescript\nplatform: string;\n```\n", "ns.gameinfo.platform.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GameInfo](./bitburner.gameinfo.md) &gt; [platform](./bitburner.gameinfo.platform.md)\n\n## GameInfo.platform property\n\n**Signature:**\n\n```typescript\nplatform: string;\n```\n", "bitburner.gangmemberascension.agi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [agi](./bitburner.gangmemberascension.agi.md)\n\n## GangMemberAscension.agi property\n\nAgility multiplier gained from ascending\n\n**Signature:**\n\n```typescript\nagi: number;\n```\n", "ns.gangmemberascension.agi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [agi](./bitburner.gangmemberascension.agi.md)\n\n## GangMemberAscension.agi property\n\nAgility multiplier gained from ascending\n\n**Signature:**\n\n```typescript\nagi: number;\n```\n", "bitburner.ns.brutessh.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [brutessh](./bitburner.ns.brutessh.md)\n\n## NS.brutessh() method\n\nRuns BruteSSH.exe on a server.\n\n**Signature:**\n\n```typescript\nbrutessh(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the BruteSSH.exe program on the target server. BruteSSH.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nbrutessh(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.brutessh(\"foodnstuff\");\n```\n\n", "ns.ns.brutessh.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [brutessh](./bitburner.ns.brutessh.md)\n\n## NS.brutessh() method\n\nRuns BruteSSH.exe on a server.\n\n**Signature:**\n\n```typescript\nbrutessh(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the BruteSSH.exe program on the target server. BruteSSH.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nbrutessh(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.brutessh(\"foodnstuff\");\n```\n\n", "bitburner.corporationinfo.dividendtax.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [dividendTax](./bitburner.corporationinfo.dividendtax.md)\n\n## CorporationInfo.dividendTax property\n\nTax applied on your earnings as a shareholder\n\n**Signature:**\n\n```typescript\ndividendTax: number;\n```\n", "ns.corporationinfo.dividendtax.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [dividendTax](./bitburner.corporationinfo.dividendtax.md)\n\n## CorporationInfo.dividendTax property\n\nTax applied on your earnings as a shareholder\n\n**Signature:**\n\n```typescript\ndividendTax: number;\n```\n", "bitburner.bladeburner.getactionmaxlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionMaxLevel](./bitburner.bladeburner.getactionmaxlevel.md)\n\n## Bladeburner.getActionMaxLevel() method\n\nGet the maximum level of an action.\n\n**Signature:**\n\n```typescript\ngetActionMaxLevel(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nMaximum level of the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the maximum level for this action.\n\nReturns -1 if an invalid action is specified.\n\n", "ns.bladeburner.getactionmaxlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionMaxLevel](./bitburner.bladeburner.getactionmaxlevel.md)\n\n## Bladeburner.getActionMaxLevel() method\n\nGet the maximum level of an action.\n\n**Signature:**\n\n```typescript\ngetActionMaxLevel(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nMaximum level of the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the maximum level for this action.\n\nReturns -1 if an invalid action is specified.\n\n", "bitburner.corpmaterialconstantdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md)\n\n## CorpMaterialConstantData interface\n\nCorporation material information\n\n**Signature:**\n\n```typescript\ninterface CorpMaterialConstantData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [baseCost](./bitburner.corpmaterialconstantdata.basecost.md) |  | number |  |\n|  [baseMarkup](./bitburner.corpmaterialconstantdata.basemarkup.md) |  | number |  |\n|  [competitionBase](./bitburner.corpmaterialconstantdata.competitionbase.md) |  | number |  |\n|  [competitionRange](./bitburner.corpmaterialconstantdata.competitionrange.md) |  | \\[min: number, max: number\\] |  |\n|  [demandBase](./bitburner.corpmaterialconstantdata.demandbase.md) |  | number |  |\n|  [demandRange](./bitburner.corpmaterialconstantdata.demandrange.md) |  | \\[min: number, max: number\\] | Min and max demand |\n|  [maxVolatility](./bitburner.corpmaterialconstantdata.maxvolatility.md) |  | number |  |\n|  [name](./bitburner.corpmaterialconstantdata.name.md) |  | string | Name of the material |\n|  [size](./bitburner.corpmaterialconstantdata.size.md) |  | number | Size of the material |\n\n", "ns.corpmaterialconstantdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md)\n\n## CorpMaterialConstantData interface\n\nCorporation material information\n\n**Signature:**\n\n```typescript\ninterface CorpMaterialConstantData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [baseCost](./bitburner.corpmaterialconstantdata.basecost.md) |  | number |  |\n|  [baseMarkup](./bitburner.corpmaterialconstantdata.basemarkup.md) |  | number |  |\n|  [competitionBase](./bitburner.corpmaterialconstantdata.competitionbase.md) |  | number |  |\n|  [competitionRange](./bitburner.corpmaterialconstantdata.competitionrange.md) |  | \\[min: number, max: number\\] |  |\n|  [demandBase](./bitburner.corpmaterialconstantdata.demandbase.md) |  | number |  |\n|  [demandRange](./bitburner.corpmaterialconstantdata.demandrange.md) |  | \\[min: number, max: number\\] | Min and max demand |\n|  [maxVolatility](./bitburner.corpmaterialconstantdata.maxvolatility.md) |  | number |  |\n|  [name](./bitburner.corpmaterialconstantdata.name.md) |  | string | Name of the material |\n|  [size](./bitburner.corpmaterialconstantdata.size.md) |  | number | Size of the material |\n\n", "bitburner.ilocation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ILocation](./bitburner.ilocation.md)\n\n## ILocation interface\n\n\n**Signature:**\n\n```typescript\ninterface ILocation \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [city](./bitburner.ilocation.city.md) |  | [CityName](./bitburner.cityname.md) |  |\n|  [name](./bitburner.ilocation.name.md) |  | [LocationName](./bitburner.locationname.md) |  |\n\n", "ns.ilocation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ILocation](./bitburner.ilocation.md)\n\n## ILocation interface\n\n\n**Signature:**\n\n```typescript\ninterface ILocation \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [city](./bitburner.ilocation.city.md) |  | [CityName](./bitburner.cityname.md) |  |\n|  [name](./bitburner.ilocation.name.md) |  | [LocationName](./bitburner.locationname.md) |  |\n\n", "bitburner.userinterfacetheme.int.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [int](./bitburner.userinterfacetheme.int.md)\n\n## UserInterfaceTheme.int property\n\n**Signature:**\n\n```typescript\nint: string;\n```\n", "ns.userinterfacetheme.int.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [int](./bitburner.userinterfacetheme.int.md)\n\n## UserInterfaceTheme.int property\n\n**Signature:**\n\n```typescript\nint: string;\n```\n", "bitburner.gang.gettasknames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getTaskNames](./bitburner.gang.gettasknames.md)\n\n## Gang.getTaskNames() method\n\nList member task names.\n\n**Signature:**\n\n```typescript\ngetTaskNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nAll valid tasks that Gang members can be assigned to.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the name of all valid tasks that Gang members can be assigned to.\n\n", "ns.gang.gettasknames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getTaskNames](./bitburner.gang.gettasknames.md)\n\n## Gang.getTaskNames() method\n\nList member task names.\n\n**Signature:**\n\n```typescript\ngetTaskNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nAll valid tasks that Gang members can be assigned to.\n\n## Remarks\n\nRAM cost: 1 GB\n\nGet the name of all valid tasks that Gang members can be assigned to.\n\n", "bitburner.player.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md)\n\n## Player interface\n\n\n**Signature:**\n\n```typescript\ninterface Player extends Person \n```\n**Extends:** [Person](./bitburner.person.md)\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [bitNodeN](./bitburner.player.bitnoden.md) |  | number |  |\n|  [entropy](./bitburner.player.entropy.md) |  | number |  |\n|  [factions](./bitburner.player.factions.md) |  | string\\[\\] |  |\n|  [jobs](./bitburner.player.jobs.md) |  | Record&lt;string, string&gt; |  |\n|  [location](./bitburner.player.location.md) |  | string |  |\n|  [money](./bitburner.player.money.md) |  | number |  |\n|  [numPeopleKilled](./bitburner.player.numpeoplekilled.md) |  | number |  |\n|  [playtimeSinceLastAug](./bitburner.player.playtimesincelastaug.md) |  | number |  |\n|  [playtimeSinceLastBitnode](./bitburner.player.playtimesincelastbitnode.md) |  | number |  |\n|  [totalPlaytime](./bitburner.player.totalplaytime.md) |  | number |  |\n\n", "ns.player.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md)\n\n## Player interface\n\n\n**Signature:**\n\n```typescript\ninterface Player extends Person \n```\n**Extends:** [Person](./bitburner.person.md)\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [bitNodeN](./bitburner.player.bitnoden.md) |  | number |  |\n|  [entropy](./bitburner.player.entropy.md) |  | number |  |\n|  [factions](./bitburner.player.factions.md) |  | string\\[\\] |  |\n|  [jobs](./bitburner.player.jobs.md) |  | Record&lt;string, string&gt; |  |\n|  [location](./bitburner.player.location.md) |  | string |  |\n|  [money](./bitburner.player.money.md) |  | number |  |\n|  [numPeopleKilled](./bitburner.player.numpeoplekilled.md) |  | number |  |\n|  [playtimeSinceLastAug](./bitburner.player.playtimesincelastaug.md) |  | number |  |\n|  [playtimeSinceLastBitnode](./bitburner.player.playtimesincelastbitnode.md) |  | number |  |\n|  [totalPlaytime](./bitburner.player.totalplaytime.md) |  | number |  |\n\n", "bitburner.hacknetserverconstants.maxcache.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxCache](./bitburner.hacknetserverconstants.maxcache.md)\n\n## HacknetServerConstants.MaxCache property\n\nMax cache size\n\n**Signature:**\n\n```typescript\nMaxCache: number;\n```\n", "ns.hacknetserverconstants.maxcache.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxCache](./bitburner.hacknetserverconstants.maxcache.md)\n\n## HacknetServerConstants.MaxCache property\n\nMax cache size\n\n**Signature:**\n\n```typescript\nMaxCache: number;\n```\n", "bitburner.augmentpair.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AugmentPair](./bitburner.augmentpair.md) &gt; [name](./bitburner.augmentpair.name.md)\n\n## AugmentPair.name property\n\naugmentation name\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.augmentpair.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AugmentPair](./bitburner.augmentpair.md) &gt; [name](./bitburner.augmentpair.name.md)\n\n## AugmentPair.name property\n\naugmentation name\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.tix.sellstock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [sellStock](./bitburner.tix.sellstock.md)\n\n## TIX.sellStock() method\n\nSell stocks.\n\n**Signature:**\n\n```typescript\nsellStock(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to sell. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was sold, otherwise 0 if the shares weren't sold.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to sell shares of a stock using a Market Order.\n\nIf the specified number of shares in the function exceeds the amount that the player actually owns, then this function will sell all owned shares. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nThe net profit made from selling stocks with this function is reflected in the script\u2019s statistics. This net profit is calculated as:\n\nshares \\* (sell\\_price - average\\_price\\_of\\_purchased\\_shares)\n\nIf the sale is successful, this function will return the stock price at which each share was sold. Otherwise, it will return 0.\n\n", "ns.tix.sellstock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [sellStock](./bitburner.tix.sellstock.md)\n\n## TIX.sellStock() method\n\nSell stocks.\n\n**Signature:**\n\n```typescript\nsellStock(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to sell. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was sold, otherwise 0 if the shares weren't sold.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to sell shares of a stock using a Market Order.\n\nIf the specified number of shares in the function exceeds the amount that the player actually owns, then this function will sell all owned shares. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nThe net profit made from selling stocks with this function is reflected in the script\u2019s statistics. This net profit is calculated as:\n\nshares \\* (sell\\_price - average\\_price\\_of\\_purchased\\_shares)\n\nIf the sale is successful, this function will return the stock price at which each share was sold. Otherwise, it will return 0.\n\n", "bitburner.ns.scriptrunning.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scriptRunning](./bitburner.ns.scriptrunning.md)\n\n## NS.scriptRunning() method\n\nCheck if any script with a filename is running.\n\n**Signature:**\n\n```typescript\nscriptRunning(script: string, host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to check. This is case-sensitive. |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified script is running, and false otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns a boolean indicating whether any instance of the specified script is running on the target server, regardless of its arguments.\n\nThis is different than the [isRunning](./bitburner.ns.isrunning.md) function because it does not try to identify a specific instance of a running script by its arguments.\n\n## Example\n\n\n```js\n//The function call will return true if there is any script named foo.js running on the foodnstuff server, and false otherwise:\nns.scriptRunning(\"foo.js\", \"foodnstuff\");\n\n//The function call will return true if there is any script named \u201cfoo.js\u201d running on the current server, and false otherwise:\nns.scriptRunning(\"foo.js\", ns.getHostname());\n```\n\n", "ns.ns.scriptrunning.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scriptRunning](./bitburner.ns.scriptrunning.md)\n\n## NS.scriptRunning() method\n\nCheck if any script with a filename is running.\n\n**Signature:**\n\n```typescript\nscriptRunning(script: string, host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to check. This is case-sensitive. |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified script is running, and false otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns a boolean indicating whether any instance of the specified script is running on the target server, regardless of its arguments.\n\nThis is different than the [isRunning](./bitburner.ns.isrunning.md) function because it does not try to identify a specific instance of a running script by its arguments.\n\n## Example\n\n\n```js\n//The function call will return true if there is any script named foo.js running on the foodnstuff server, and false otherwise:\nns.scriptRunning(\"foo.js\", \"foodnstuff\");\n\n//The function call will return true if there is any script named \u201cfoo.js\u201d running on the current server, and false otherwise:\nns.scriptRunning(\"foo.js\", ns.getHostname());\n```\n\n", "bitburner.ns.getrunningscript.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getRunningScript](./bitburner.ns.getrunningscript.md)\n\n## NS.getRunningScript() method\n\nGet general info about a running script.\n\n**Signature:**\n\n```typescript\ngetRunningScript(\n    filename?: FilenameOrPID,\n    hostname?: string,\n    ...args: (string | number | boolean)[]\n  ): RunningScript | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | [FilenameOrPID](./bitburner.filenameorpid.md) | _(Optional)_ Optional. Filename or PID of the script. |\n|  hostname | string | _(Optional)_ Optional. Name of host server the script is running on. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments to identify the script |\n\n**Returns:**\n\n[RunningScript](./bitburner.runningscript.md) \\| null\n\nThe info about the running script if found, and null otherwise.\n\n## Remarks\n\nRAM cost: 0.3 GB\n\nRunning with no args returns current script. If you use a PID as the first parameter, the hostname and args parameters are unnecessary.\n\n", "ns.ns.getrunningscript.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getRunningScript](./bitburner.ns.getrunningscript.md)\n\n## NS.getRunningScript() method\n\nGet general info about a running script.\n\n**Signature:**\n\n```typescript\ngetRunningScript(\n    filename?: FilenameOrPID,\n    hostname?: string,\n    ...args: (string | number | boolean)[]\n  ): RunningScript | null;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | [FilenameOrPID](./bitburner.filenameorpid.md) | _(Optional)_ Optional. Filename or PID of the script. |\n|  hostname | string | _(Optional)_ Optional. Name of host server the script is running on. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments to identify the script |\n\n**Returns:**\n\n[RunningScript](./bitburner.runningscript.md) \\| null\n\nThe info about the running script if found, and null otherwise.\n\n## Remarks\n\nRAM cost: 0.3 GB\n\nRunning with no args returns current script. If you use a PID as the first parameter, the hostname and args parameters are unnecessary.\n\n", "bitburner.corpindustrydata.realestatefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [realEstateFactor](./bitburner.corpindustrydata.realestatefactor.md)\n\n## CorpIndustryData.realEstateFactor property\n\nReal estate factor\n\n**Signature:**\n\n```typescript\nrealEstateFactor?: number;\n```\n", "ns.corpindustrydata.realestatefactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [realEstateFactor](./bitburner.corpindustrydata.realestatefactor.md)\n\n## CorpIndustryData.realEstateFactor property\n\nReal estate factor\n\n**Signature:**\n\n```typescript\nrealEstateFactor?: number;\n```\n", "bitburner.ns.read.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [read](./bitburner.ns.read.md)\n\n## NS.read() method\n\nRead content of a file.\n\n**Signature:**\n\n```typescript\nread(filename: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Name of the file to be read. |\n\n**Returns:**\n\nstring\n\nData in the specified text file.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is used to read data from a text file (.txt) or script (.js or .script).\n\nThis function will return the data in the specified file. If the file does not exist, an empty string will be returned.\n\n", "ns.ns.read.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [read](./bitburner.ns.read.md)\n\n## NS.read() method\n\nRead content of a file.\n\n**Signature:**\n\n```typescript\nread(filename: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Name of the file to be read. |\n\n**Returns:**\n\nstring\n\nData in the specified text file.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is used to read data from a text file (.txt) or script (.js or .script).\n\nThis function will return the data in the specified file. If the file does not exist, an empty string will be returned.\n\n", "bitburner.multipliers.company_rep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [company\\_rep](./bitburner.multipliers.company_rep.md)\n\n## Multipliers.company\\_rep property\n\nMultiplier to amount of reputation gained when working\n\n**Signature:**\n\n```typescript\ncompany_rep: number;\n```\n", "ns.multipliers.company_rep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [company\\_rep](./bitburner.multipliers.company_rep.md)\n\n## Multipliers.company\\_rep property\n\nMultiplier to amount of reputation gained when working\n\n**Signature:**\n\n```typescript\ncompany_rep: number;\n```\n", "bitburner.ganggeninfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md)\n\n## GangGenInfo interface\n\nGang general info.\n\n**Signature:**\n\n```typescript\ninterface GangGenInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [faction](./bitburner.ganggeninfo.faction.md) |  | string | Name of faction that the gang belongs to (\"Slum Snakes\", etc.) |\n|  [isHacking](./bitburner.ganggeninfo.ishacking.md) |  | boolean | Indicating whether or not it's a hacking gang |\n|  [moneyGainRate](./bitburner.ganggeninfo.moneygainrate.md) |  | number | Money earned per game cycle |\n|  [power](./bitburner.ganggeninfo.power.md) |  | number | Gang's power for territory warfare |\n|  [respect](./bitburner.ganggeninfo.respect.md) |  | number | Gang's respect |\n|  [respectGainRate](./bitburner.ganggeninfo.respectgainrate.md) |  | number | Respect earned per game cycle |\n|  [territory](./bitburner.ganggeninfo.territory.md) |  | number | Amount of territory held |\n|  [territoryClashChance](./bitburner.ganggeninfo.territoryclashchance.md) |  | number | Clash chance |\n|  [territoryWarfareEngaged](./bitburner.ganggeninfo.territorywarfareengaged.md) |  | boolean | Indicating if territory warfare is enabled |\n|  [wantedLevel](./bitburner.ganggeninfo.wantedlevel.md) |  | number | Gang's wanted level |\n|  [wantedLevelGainRate](./bitburner.ganggeninfo.wantedlevelgainrate.md) |  | number | Wanted level gained/lost per game cycle (negative for losses) |\n|  [wantedPenalty](./bitburner.ganggeninfo.wantedpenalty.md) |  | number | Number indicating the current wanted penalty |\n\n", "ns.ganggeninfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md)\n\n## GangGenInfo interface\n\nGang general info.\n\n**Signature:**\n\n```typescript\ninterface GangGenInfo \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [faction](./bitburner.ganggeninfo.faction.md) |  | string | Name of faction that the gang belongs to (\"Slum Snakes\", etc.) |\n|  [isHacking](./bitburner.ganggeninfo.ishacking.md) |  | boolean | Indicating whether or not it's a hacking gang |\n|  [moneyGainRate](./bitburner.ganggeninfo.moneygainrate.md) |  | number | Money earned per game cycle |\n|  [power](./bitburner.ganggeninfo.power.md) |  | number | Gang's power for territory warfare |\n|  [respect](./bitburner.ganggeninfo.respect.md) |  | number | Gang's respect |\n|  [respectGainRate](./bitburner.ganggeninfo.respectgainrate.md) |  | number | Respect earned per game cycle |\n|  [territory](./bitburner.ganggeninfo.territory.md) |  | number | Amount of territory held |\n|  [territoryClashChance](./bitburner.ganggeninfo.territoryclashchance.md) |  | number | Clash chance |\n|  [territoryWarfareEngaged](./bitburner.ganggeninfo.territorywarfareengaged.md) |  | boolean | Indicating if territory warfare is enabled |\n|  [wantedLevel](./bitburner.ganggeninfo.wantedlevel.md) |  | number | Gang's wanted level |\n|  [wantedLevelGainRate](./bitburner.ganggeninfo.wantedlevelgainrate.md) |  | number | Wanted level gained/lost per game cycle (negative for losses) |\n|  [wantedPenalty](./bitburner.ganggeninfo.wantedpenalty.md) |  | number | Number indicating the current wanted penalty |\n\n", "bitburner.workstats.dexexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [dexExp](./bitburner.workstats.dexexp.md)\n\n## WorkStats.dexExp property\n\n**Signature:**\n\n```typescript\ndexExp: number;\n```\n", "ns.workstats.dexexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [dexExp](./bitburner.workstats.dexexp.md)\n\n## WorkStats.dexExp property\n\n**Signature:**\n\n```typescript\ndexExp: number;\n```\n", "bitburner.bladeburner.getcity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCity](./bitburner.bladeburner.getcity.md)\n\n## Bladeburner.getCity() method\n\nGet current city.\n\n**Signature:**\n\n```typescript\ngetCity(): CityName;\n```\n**Returns:**\n\n[CityName](./bitburner.cityname.md)\n\nCity that the player is currently in (for Bladeburner).\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the city that the player is currently in (for Bladeburner).\n\n", "ns.bladeburner.getcity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getCity](./bitburner.bladeburner.getcity.md)\n\n## Bladeburner.getCity() method\n\nGet current city.\n\n**Signature:**\n\n```typescript\ngetCity(): CityName;\n```\n**Returns:**\n\n[CityName](./bitburner.cityname.md)\n\nCity that the player is currently in (for Bladeburner).\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the city that the player is currently in (for Bladeburner).\n\n", "bitburner.ns.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [gang](./bitburner.ns.gang.md)\n\n## NS.gang property\n\nNamespace for gang functions.\n\n**Signature:**\n\n```typescript\nreadonly gang: Gang;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [gang](./bitburner.ns.gang.md)\n\n## NS.gang property\n\nNamespace for gang functions.\n\n**Signature:**\n\n```typescript\nreadonly gang: Gang;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.positiontypes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [PositionTypes](./bitburner.positiontypes.md)\n\n## PositionTypes enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum PositionTypes \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  Long | <code>&quot;L&quot;</code> |  |\n|  Short | <code>&quot;S&quot;</code> |  |\n\n", "ns.positiontypes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [PositionTypes](./bitburner.positiontypes.md)\n\n## PositionTypes enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum PositionTypes \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  Long | <code>&quot;L&quot;</code> |  |\n|  Short | <code>&quot;S&quot;</code> |  |\n\n", "bitburner.singularity.getcompanyrep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCompanyRep](./bitburner.singularity.getcompanyrep.md)\n\n## Singularity.getCompanyRep() method\n\nGet company reputation.\n\n**Signature:**\n\n```typescript\ngetCompanyRep(companyName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of the company. |\n\n**Returns:**\n\nnumber\n\nAmount of reputation you have at the specified company.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function will return the amount of reputation you have at the specified company. If the company passed in as an argument is invalid, -1 will be returned.\n\n", "ns.singularity.getcompanyrep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCompanyRep](./bitburner.singularity.getcompanyrep.md)\n\n## Singularity.getCompanyRep() method\n\nGet company reputation.\n\n**Signature:**\n\n```typescript\ngetCompanyRep(companyName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of the company. |\n\n**Returns:**\n\nnumber\n\nAmount of reputation you have at the specified company.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function will return the amount of reputation you have at the specified company. If the company passed in as an argument is invalid, -1 will be returned.\n\n", "bitburner.sleeve.getsleeveaugmentationrepreq.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeveAugmentationRepReq](./bitburner.sleeve.getsleeveaugmentationrepreq.md)\n\n## Sleeve.getSleeveAugmentationRepReq() method\n\nGet reputation requirement of an augmentation.\n\n**Signature:**\n\n```typescript\ngetSleeveAugmentationRepReq(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nReputation requirement of the augmentation.\n\n## Remarks\n\nRAM cost: 4 GB\n\n", "ns.sleeve.getsleeveaugmentationrepreq.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getSleeveAugmentationRepReq](./bitburner.sleeve.getsleeveaugmentationrepreq.md)\n\n## Sleeve.getSleeveAugmentationRepReq() method\n\nGet reputation requirement of an augmentation.\n\n**Signature:**\n\n```typescript\ngetSleeveAugmentationRepReq(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nReputation requirement of the augmentation.\n\n## Remarks\n\nRAM cost: 4 GB\n\n", "bitburner.ns.getgrowtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getGrowTime](./bitburner.ns.getgrowtime.md)\n\n## NS.getGrowTime() method\n\nGet the execution time of a grow() call.\n\n**Signature:**\n\n```typescript\ngetGrowTime(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nReturns the amount of time in milliseconds it takes to execute the grow Netscript function.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nReturns the amount of time in milliseconds it takes to execute the grow Netscript function on the target server. The required time is increased by the security level of the target server and decreased by the player's hacking level.\n\n", "ns.ns.getgrowtime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getGrowTime](./bitburner.ns.getgrowtime.md)\n\n## NS.getGrowTime() method\n\nGet the execution time of a grow() call.\n\n**Signature:**\n\n```typescript\ngetGrowTime(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nReturns the amount of time in milliseconds it takes to execute the grow Netscript function.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nReturns the amount of time in milliseconds it takes to execute the grow Netscript function on the target server. The required time is increased by the security level of the target server and decreased by the player's hacking level.\n\n", "bitburner.singularity.getupgradehomeramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getUpgradeHomeRamCost](./bitburner.singularity.getupgradehomeramcost.md)\n\n## Singularity.getUpgradeHomeRamCost() method\n\nGet the price of upgrading home RAM.\n\n**Signature:**\n\n```typescript\ngetUpgradeHomeRamCost(): number;\n```\n**Returns:**\n\nnumber\n\nCost of upgrading the player\u2019s home computer RAM.\n\n## Remarks\n\nRAM cost: 1.5 GB \\* 16/4/1\n\nReturns the cost of upgrading the player\u2019s home computer RAM.\n\n", "ns.singularity.getupgradehomeramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getUpgradeHomeRamCost](./bitburner.singularity.getupgradehomeramcost.md)\n\n## Singularity.getUpgradeHomeRamCost() method\n\nGet the price of upgrading home RAM.\n\n**Signature:**\n\n```typescript\ngetUpgradeHomeRamCost(): number;\n```\n**Returns:**\n\nnumber\n\nCost of upgrading the player\u2019s home computer RAM.\n\n## Remarks\n\nRAM cost: 1.5 GB \\* 16/4/1\n\nReturns the cost of upgrading the player\u2019s home computer RAM.\n\n", "bitburner.workstats.intexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [intExp](./bitburner.workstats.intexp.md)\n\n## WorkStats.intExp property\n\n**Signature:**\n\n```typescript\nintExp: number;\n```\n", "ns.workstats.intexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [intExp](./bitburner.workstats.intexp.md)\n\n## WorkStats.intExp property\n\n**Signature:**\n\n```typescript\nintExp: number;\n```\n", "bitburner.infiltration.getpossiblelocations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Infiltration](./bitburner.infiltration.md) &gt; [getPossibleLocations](./bitburner.infiltration.getpossiblelocations.md)\n\n## Infiltration.getPossibleLocations() method\n\nGet all locations that can be infiltrated.\n\n**Signature:**\n\n```typescript\ngetPossibleLocations(): ILocation[];\n```\n**Returns:**\n\n[ILocation](./bitburner.ilocation.md)<!-- -->\\[\\]\n\nall locations that can be infiltrated.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "ns.infiltration.getpossiblelocations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Infiltration](./bitburner.infiltration.md) &gt; [getPossibleLocations](./bitburner.infiltration.getpossiblelocations.md)\n\n## Infiltration.getPossibleLocations() method\n\nGet all locations that can be infiltrated.\n\n**Signature:**\n\n```typescript\ngetPossibleLocations(): ILocation[];\n```\n**Returns:**\n\n[ILocation](./bitburner.ilocation.md)<!-- -->\\[\\]\n\nall locations that can be infiltrated.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "bitburner.sleeveperson.storedcycles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [storedCycles](./bitburner.sleeveperson.storedcycles.md)\n\n## SleevePerson.storedCycles property\n\nNumber of 200ms cycles which are stored as bonus time\n\n**Signature:**\n\n```typescript\nstoredCycles: number;\n```\n", "ns.sleeveperson.storedcycles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [storedCycles](./bitburner.sleeveperson.storedcycles.md)\n\n## SleevePerson.storedCycles property\n\nNumber of 200ms cycles which are stored as bonus time\n\n**Signature:**\n\n```typescript\nstoredCycles: number;\n```\n", "bitburner.sleevefactiontask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveFactionTask](./bitburner.sleevefactiontask.md)\n\n## SleeveFactionTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveFactionTask = {\n  type: \"FACTION\";\n  factionWorkType: FactionWorkType | `${FactionWorkType}`;\n  factionName: string;\n};\n```\n**References:** [FactionWorkType](./bitburner.factionworktype.md)\n\n", "ns.sleevefactiontask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveFactionTask](./bitburner.sleevefactiontask.md)\n\n## SleeveFactionTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveFactionTask = {\n  type: \"FACTION\";\n  factionWorkType: FactionWorkType | `${FactionWorkType}`;\n  factionName: string;\n};\n```\n**References:** [FactionWorkType](./bitburner.factionworktype.md)\n\n", "bitburner.export.loc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md) &gt; [loc](./bitburner.export.loc.md)\n\n## Export.loc property\n\nCity the material is being exported to\n\n**Signature:**\n\n```typescript\nloc: CityName;\n```\n", "ns.export.loc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Export](./bitburner.export.md) &gt; [loc](./bitburner.export.loc.md)\n\n## Export.loc property\n\nCity the material is being exported to\n\n**Signature:**\n\n```typescript\nloc: CityName;\n```\n", "bitburner.moneysource.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md)\n\n## MoneySource interface\n\n\n**Signature:**\n\n```typescript\ninterface MoneySource \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [augmentations](./bitburner.moneysource.augmentations.md) |  | number |  |\n|  [bladeburner](./bitburner.moneysource.bladeburner.md) |  | number |  |\n|  [casino](./bitburner.moneysource.casino.md) |  | number |  |\n|  [class](./bitburner.moneysource.class.md) |  | number |  |\n|  [codingcontract](./bitburner.moneysource.codingcontract.md) |  | number |  |\n|  [corporation](./bitburner.moneysource.corporation.md) |  | number |  |\n|  [crime](./bitburner.moneysource.crime.md) |  | number |  |\n|  [gang](./bitburner.moneysource.gang.md) |  | number |  |\n|  [hacking](./bitburner.moneysource.hacking.md) |  | number |  |\n|  [hacknet\\_expenses](./bitburner.moneysource.hacknet_expenses.md) |  | number |  |\n|  [hacknet](./bitburner.moneysource.hacknet.md) |  | number |  |\n|  [hospitalization](./bitburner.moneysource.hospitalization.md) |  | number |  |\n|  [infiltration](./bitburner.moneysource.infiltration.md) |  | number |  |\n|  [other](./bitburner.moneysource.other.md) |  | number |  |\n|  [servers](./bitburner.moneysource.servers.md) |  | number |  |\n|  [sleeves](./bitburner.moneysource.sleeves.md) |  | number |  |\n|  [stock](./bitburner.moneysource.stock.md) |  | number |  |\n|  [total](./bitburner.moneysource.total.md) |  | number |  |\n|  [work](./bitburner.moneysource.work.md) |  | number |  |\n\n", "ns.moneysource.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md)\n\n## MoneySource interface\n\n\n**Signature:**\n\n```typescript\ninterface MoneySource \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [augmentations](./bitburner.moneysource.augmentations.md) |  | number |  |\n|  [bladeburner](./bitburner.moneysource.bladeburner.md) |  | number |  |\n|  [casino](./bitburner.moneysource.casino.md) |  | number |  |\n|  [class](./bitburner.moneysource.class.md) |  | number |  |\n|  [codingcontract](./bitburner.moneysource.codingcontract.md) |  | number |  |\n|  [corporation](./bitburner.moneysource.corporation.md) |  | number |  |\n|  [crime](./bitburner.moneysource.crime.md) |  | number |  |\n|  [gang](./bitburner.moneysource.gang.md) |  | number |  |\n|  [hacking](./bitburner.moneysource.hacking.md) |  | number |  |\n|  [hacknet\\_expenses](./bitburner.moneysource.hacknet_expenses.md) |  | number |  |\n|  [hacknet](./bitburner.moneysource.hacknet.md) |  | number |  |\n|  [hospitalization](./bitburner.moneysource.hospitalization.md) |  | number |  |\n|  [infiltration](./bitburner.moneysource.infiltration.md) |  | number |  |\n|  [other](./bitburner.moneysource.other.md) |  | number |  |\n|  [servers](./bitburner.moneysource.servers.md) |  | number |  |\n|  [sleeves](./bitburner.moneysource.sleeves.md) |  | number |  |\n|  [stock](./bitburner.moneysource.stock.md) |  | number |  |\n|  [total](./bitburner.moneysource.total.md) |  | number |  |\n|  [work](./bitburner.moneysource.work.md) |  | number |  |\n\n", "bitburner.runningscript.offlineexpgained.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [offlineExpGained](./bitburner.runningscript.offlineexpgained.md)\n\n## RunningScript.offlineExpGained property\n\nTotal amount of hacking experience earned from this script when offline\n\n**Signature:**\n\n```typescript\nofflineExpGained: number;\n```\n", "ns.runningscript.offlineexpgained.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [offlineExpGained](./bitburner.runningscript.offlineexpgained.md)\n\n## RunningScript.offlineExpGained property\n\nTotal amount of hacking experience earned from this script when offline\n\n**Signature:**\n\n```typescript\nofflineExpGained: number;\n```\n", "bitburner.bitnodemultipliers.staneksgiftextrasize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [StaneksGiftExtraSize](./bitburner.bitnodemultipliers.staneksgiftextrasize.md)\n\n## BitNodeMultipliers.StaneksGiftExtraSize property\n\nInfluences the size of the gift\n\n**Signature:**\n\n```typescript\nStaneksGiftExtraSize: number;\n```\n", "ns.bitnodemultipliers.staneksgiftextrasize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [StaneksGiftExtraSize](./bitburner.bitnodemultipliers.staneksgiftextrasize.md)\n\n## BitNodeMultipliers.StaneksGiftExtraSize property\n\nInfluences the size of the gift\n\n**Signature:**\n\n```typescript\nStaneksGiftExtraSize: number;\n```\n", "bitburner.activefragment.highestcharge.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [highestCharge](./bitburner.activefragment.highestcharge.md)\n\n## ActiveFragment.highestCharge property\n\n**Signature:**\n\n```typescript\nhighestCharge: number;\n```\n", "ns.activefragment.highestcharge.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [highestCharge](./bitburner.activefragment.highestcharge.md)\n\n## ActiveFragment.highestCharge property\n\n**Signature:**\n\n```typescript\nhighestCharge: number;\n```\n", "bitburner.nodestats.cache.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [cache](./bitburner.nodestats.cache.md)\n\n## NodeStats.cache property\n\nCache level. Only applicable for Hacknet Servers\n\n**Signature:**\n\n```typescript\ncache?: number;\n```\n", "ns.nodestats.cache.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [cache](./bitburner.nodestats.cache.md)\n\n## NodeStats.cache property\n\nCache level. Only applicable for Hacknet Servers\n\n**Signature:**\n\n```typescript\ncache?: number;\n```\n", "bitburner.product.dmd.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [dmd](./bitburner.product.dmd.md)\n\n## Product.dmd property\n\nDemand for the product, only present if \"Market Research - Demand\" unlocked\n\n**Signature:**\n\n```typescript\ndmd: number | undefined;\n```\n", "ns.product.dmd.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [dmd](./bitburner.product.dmd.md)\n\n## Product.dmd property\n\nDemand for the product, only present if \"Market Research - Demand\" unlocked\n\n**Signature:**\n\n```typescript\ndmd: number | undefined;\n```\n", "bitburner.corpunlockname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpUnlockName](./bitburner.corpunlockname.md)\n\n## CorpUnlockName type\n\n\n**Signature:**\n\n```typescript\ntype CorpUnlockName =\n  | \"Export\"\n  | \"Smart Supply\"\n  | \"Market Research - Demand\"\n  | \"Market Data - Competition\"\n  | \"VeChain\"\n  | \"Shady Accounting\"\n  | \"Government Partnership\"\n  | \"Warehouse API\"\n  | \"Office API\";\n```\n", "ns.corpunlockname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpUnlockName](./bitburner.corpunlockname.md)\n\n## CorpUnlockName type\n\n\n**Signature:**\n\n```typescript\ntype CorpUnlockName =\n  | \"Export\"\n  | \"Smart Supply\"\n  | \"Market Research - Demand\"\n  | \"Market Data - Competition\"\n  | \"VeChain\"\n  | \"Shady Accounting\"\n  | \"Government Partnership\"\n  | \"Warehouse API\"\n  | \"Office API\";\n```\n", "bitburner.stanek.activefragments.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [activeFragments](./bitburner.stanek.activefragments.md)\n\n## Stanek.activeFragments() method\n\nList of fragments in Stanek's Gift.\n\n**Signature:**\n\n```typescript\nactiveFragments(): ActiveFragment[];\n```\n**Returns:**\n\n[ActiveFragment](./bitburner.activefragment.md)<!-- -->\\[\\]\n\nList of active fragments placed on Stanek's Gift.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "ns.stanek.activefragments.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [activeFragments](./bitburner.stanek.activefragments.md)\n\n## Stanek.activeFragments() method\n\nList of fragments in Stanek's Gift.\n\n**Signature:**\n\n```typescript\nactiveFragments(): ActiveFragment[];\n```\n**Returns:**\n\n[ActiveFragment](./bitburner.activefragment.md)<!-- -->\\[\\]\n\nList of active fragments placed on Stanek's Gift.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "bitburner.moneysource.infiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [infiltration](./bitburner.moneysource.infiltration.md)\n\n## MoneySource.infiltration property\n\n**Signature:**\n\n```typescript\ninfiltration: number;\n```\n", "ns.moneysource.infiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [infiltration](./bitburner.moneysource.infiltration.md)\n\n## MoneySource.infiltration property\n\n**Signature:**\n\n```typescript\ninfiltration: number;\n```\n", "bitburner.person.skills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [skills](./bitburner.person.skills.md)\n\n## Person.skills property\n\n**Signature:**\n\n```typescript\nskills: Skills;\n```\n", "ns.person.skills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [skills](./bitburner.person.skills.md)\n\n## Person.skills property\n\n**Signature:**\n\n```typescript\nskills: Skills;\n```\n", "bitburner.server.openportcount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [openPortCount](./bitburner.server.openportcount.md)\n\n## Server.openPortCount property\n\nHow many ports are currently opened on the server\n\n**Signature:**\n\n```typescript\nopenPortCount: number;\n```\n", "ns.server.openportcount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [openPortCount](./bitburner.server.openportcount.md)\n\n## Server.openPortCount property\n\nHow many ports are currently opened on the server\n\n**Signature:**\n\n```typescript\nopenPortCount: number;\n```\n", "bitburner.singularity.getcompanyfavor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCompanyFavor](./bitburner.singularity.getcompanyfavor.md)\n\n## Singularity.getCompanyFavor() method\n\nGet company favor.\n\n**Signature:**\n\n```typescript\ngetCompanyFavor(companyName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of the company. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you have at the specified company.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function will return the amount of favor you have at the specified company. If the company passed in as an argument is invalid, -1 will be returned.\n\n", "ns.singularity.getcompanyfavor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCompanyFavor](./bitburner.singularity.getcompanyfavor.md)\n\n## Singularity.getCompanyFavor() method\n\nGet company favor.\n\n**Signature:**\n\n```typescript\ngetCompanyFavor(companyName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of the company. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you have at the specified company.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function will return the amount of favor you have at the specified company. If the company passed in as an argument is invalid, -1 will be returned.\n\n", "bitburner.server.maxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [maxRam](./bitburner.server.maxram.md)\n\n## Server.maxRam property\n\nRAM (GB) available on this server\n\n**Signature:**\n\n```typescript\nmaxRam: number;\n```\n", "ns.server.maxram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [maxRam](./bitburner.server.maxram.md)\n\n## Server.maxRam property\n\nRAM (GB) available on this server\n\n**Signature:**\n\n```typescript\nmaxRam: number;\n```\n", "bitburner.industrydata.requiredmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [requiredMaterials](./bitburner.industrydata.requiredmaterials.md)\n\n## IndustryData.requiredMaterials property\n\nMaterials required for production and their amounts\n\n**Signature:**\n\n```typescript\nrequiredMaterials: Record<string, number>;\n```\n", "ns.industrydata.requiredmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [requiredMaterials](./bitburner.industrydata.requiredmaterials.md)\n\n## IndustryData.requiredMaterials property\n\nMaterials required for production and their amounts\n\n**Signature:**\n\n```typescript\nrequiredMaterials: Record<string, number>;\n```\n", "bitburner.person.city.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [city](./bitburner.person.city.md)\n\n## Person.city property\n\n**Signature:**\n\n```typescript\ncity: CityName;\n```\n", "ns.person.city.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md) &gt; [city](./bitburner.person.city.md)\n\n## Person.city property\n\n**Signature:**\n\n```typescript\ncity: CityName;\n```\n", "bitburner.multipliers.crime_success.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [crime\\_success](./bitburner.multipliers.crime_success.md)\n\n## Multipliers.crime\\_success property\n\nMultiplier to crime success rate\n\n**Signature:**\n\n```typescript\ncrime_success: number;\n```\n", "ns.multipliers.crime_success.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [crime\\_success](./bitburner.multipliers.crime_success.md)\n\n## Multipliers.crime\\_success property\n\nMultiplier to crime success rate\n\n**Signature:**\n\n```typescript\ncrime_success: number;\n```\n", "bitburner.hacknetnodeconstants.moneygainperlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MoneyGainPerLevel](./bitburner.hacknetnodeconstants.moneygainperlevel.md)\n\n## HacknetNodeConstants.MoneyGainPerLevel property\n\nAmount of money gained per level\n\n**Signature:**\n\n```typescript\nMoneyGainPerLevel: number;\n```\n", "ns.hacknetnodeconstants.moneygainperlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MoneyGainPerLevel](./bitburner.hacknetnodeconstants.moneygainperlevel.md)\n\n## HacknetNodeConstants.MoneyGainPerLevel property\n\nAmount of money gained per level\n\n**Signature:**\n\n```typescript\nMoneyGainPerLevel: number;\n```\n", "bitburner.gangformulas.wantedpenalty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [wantedPenalty](./bitburner.gangformulas.wantedpenalty.md)\n\n## GangFormulas.wantedPenalty() method\n\nCalculate the wanted penalty.\n\n**Signature:**\n\n```typescript\nwantedPenalty(gang: GangGenInfo): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated wanted penalty.\n\n", "ns.gangformulas.wantedpenalty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md) &gt; [wantedPenalty](./bitburner.gangformulas.wantedpenalty.md)\n\n## GangFormulas.wantedPenalty() method\n\nCalculate the wanted penalty.\n\n**Signature:**\n\n```typescript\nwantedPenalty(gang: GangGenInfo): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  gang | [GangGenInfo](./bitburner.ganggeninfo.md) | Gang info from [getGangInformation](./bitburner.gang.getganginformation.md) |\n\n**Returns:**\n\nnumber\n\nThe calculated wanted penalty.\n\n", "bitburner.corporationinfo.sharesalecooldown.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [shareSaleCooldown](./bitburner.corporationinfo.sharesalecooldown.md)\n\n## CorporationInfo.shareSaleCooldown property\n\nCooldown until shares can be sold again\n\n**Signature:**\n\n```typescript\nshareSaleCooldown: number;\n```\n", "ns.corporationinfo.sharesalecooldown.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [shareSaleCooldown](./bitburner.corporationinfo.sharesalecooldown.md)\n\n## CorporationInfo.shareSaleCooldown property\n\nCooldown until shares can be sold again\n\n**Signature:**\n\n```typescript\nshareSaleCooldown: number;\n```\n", "bitburner.corporation.getdivision.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getDivision](./bitburner.corporation.getdivision.md)\n\n## Corporation.getDivision() method\n\nGet division data\n\n**Signature:**\n\n```typescript\ngetDivision(divisionName: string): Division;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n\n**Returns:**\n\n[Division](./bitburner.division.md)\n\nDivision data\n\n", "ns.corporation.getdivision.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getDivision](./bitburner.corporation.getdivision.md)\n\n## Corporation.getDivision() method\n\nGet division data\n\n**Signature:**\n\n```typescript\ngetDivision(divisionName: string): Division;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n\n**Returns:**\n\n[Division](./bitburner.division.md)\n\nDivision data\n\n", "bitburner.singularity.installbackdoor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [installBackdoor](./bitburner.singularity.installbackdoor.md)\n\n## Singularity.installBackdoor() method\n\nRun the backdoor command in the terminal.\n\n**Signature:**\n\n```typescript\ninstallBackdoor(): Promise<void>;\n```\n**Returns:**\n\nPromise&lt;void&gt;\n\nPromise waiting for the installation to finish.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\n", "ns.singularity.installbackdoor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [installBackdoor](./bitburner.singularity.installbackdoor.md)\n\n## Singularity.installBackdoor() method\n\nRun the backdoor command in the terminal.\n\n**Signature:**\n\n```typescript\ninstallBackdoor(): Promise<void>;\n```\n**Returns:**\n\nPromise&lt;void&gt;\n\nPromise waiting for the installation to finish.\n\n## Remarks\n\nRAM cost: 2 GB \\* 16/4/1\n\n", "bitburner.hacknet.hashcapacity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [hashCapacity](./bitburner.hacknet.hashcapacity.md)\n\n## Hacknet.hashCapacity() method\n\nGet the maximum number of hashes you can store.\n\n**Signature:**\n\n```typescript\nhashCapacity(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of hashes you can store.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the number of hashes you can store.\n\n", "ns.hacknet.hashcapacity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [hashCapacity](./bitburner.hacknet.hashcapacity.md)\n\n## Hacknet.hashCapacity() method\n\nGet the maximum number of hashes you can store.\n\n**Signature:**\n\n```typescript\nhashCapacity(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of hashes you can store.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the number of hashes you can store.\n\n", "bitburner.equipmentstats.str.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [str](./bitburner.equipmentstats.str.md)\n\n## EquipmentStats.str property\n\nStrength multiplier\n\n**Signature:**\n\n```typescript\nstr?: number;\n```\n", "ns.equipmentstats.str.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [str](./bitburner.equipmentstats.str.md)\n\n## EquipmentStats.str property\n\nStrength multiplier\n\n**Signature:**\n\n```typescript\nstr?: number;\n```\n", "bitburner.player.totalplaytime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [totalPlaytime](./bitburner.player.totalplaytime.md)\n\n## Player.totalPlaytime property\n\n**Signature:**\n\n```typescript\ntotalPlaytime: number;\n```\n", "ns.player.totalplaytime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [totalPlaytime](./bitburner.player.totalplaytime.md)\n\n## Player.totalPlaytime property\n\n**Signature:**\n\n```typescript\ntotalPlaytime: number;\n```\n", "bitburner.bitnodemultipliers.augmentationmoneycost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [AugmentationMoneyCost](./bitburner.bitnodemultipliers.augmentationmoneycost.md)\n\n## BitNodeMultipliers.AugmentationMoneyCost property\n\nInfluences the base cost to purchase an augmentation.\n\n**Signature:**\n\n```typescript\nAugmentationMoneyCost: number;\n```\n", "ns.bitnodemultipliers.augmentationmoneycost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [AugmentationMoneyCost](./bitburner.bitnodemultipliers.augmentationmoneycost.md)\n\n## BitNodeMultipliers.AugmentationMoneyCost property\n\nInfluences the base cost to purchase an augmentation.\n\n**Signature:**\n\n```typescript\nAugmentationMoneyCost: number;\n```\n", "bitburner.corpupgradename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpUpgradeName](./bitburner.corpupgradename.md)\n\n## CorpUpgradeName type\n\n\n**Signature:**\n\n```typescript\ntype CorpUpgradeName =\n  | \"Smart Factories\"\n  | \"Smart Storage\"\n  | \"DreamSense\"\n  | \"Wilson Analytics\"\n  | \"Nuoptimal Nootropic Injector Implants\"\n  | \"Speech Processor Implants\"\n  | \"Neural Accelerators\"\n  | \"FocusWires\"\n  | \"ABC SalesBots\"\n  | \"Project Insight\";\n```\n", "ns.corpupgradename.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpUpgradeName](./bitburner.corpupgradename.md)\n\n## CorpUpgradeName type\n\n\n**Signature:**\n\n```typescript\ntype CorpUpgradeName =\n  | \"Smart Factories\"\n  | \"Smart Storage\"\n  | \"DreamSense\"\n  | \"Wilson Analytics\"\n  | \"Nuoptimal Nootropic Injector Implants\"\n  | \"Speech Processor Implants\"\n  | \"Neural Accelerators\"\n  | \"FocusWires\"\n  | \"ABC SalesBots\"\n  | \"Project Insight\";\n```\n", "bitburner.bitnodemultipliers.scripthackmoneygain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ScriptHackMoneyGain](./bitburner.bitnodemultipliers.scripthackmoneygain.md)\n\n## BitNodeMultipliers.ScriptHackMoneyGain property\n\nInfluences how much of the money stolen by a scripted hack will be added to the player's money.\n\n**Signature:**\n\n```typescript\nScriptHackMoneyGain: number;\n```\n", "ns.bitnodemultipliers.scripthackmoneygain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ScriptHackMoneyGain](./bitburner.bitnodemultipliers.scripthackmoneygain.md)\n\n## BitNodeMultipliers.ScriptHackMoneyGain property\n\nInfluences how much of the money stolen by a scripted hack will be added to the player's money.\n\n**Signature:**\n\n```typescript\nScriptHackMoneyGain: number;\n```\n", "bitburner.istylesettings.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IStyleSettings](./bitburner.istylesettings.md)\n\n## IStyleSettings interface\n\nInterface Styles\n\n**Signature:**\n\n```typescript\ninterface IStyleSettings \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [fontFamily](./bitburner.istylesettings.fontfamily.md) |  | string |  |\n|  [lineHeight](./bitburner.istylesettings.lineheight.md) |  | number |  |\n\n", "ns.istylesettings.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IStyleSettings](./bitburner.istylesettings.md)\n\n## IStyleSettings interface\n\nInterface Styles\n\n**Signature:**\n\n```typescript\ninterface IStyleSettings \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [fontFamily](./bitburner.istylesettings.fontfamily.md) |  | string |  |\n|  [lineHeight](./bitburner.istylesettings.lineheight.md) |  | number |  |\n\n", "bitburner.activefragment.x.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [x](./bitburner.activefragment.x.md)\n\n## ActiveFragment.x property\n\n**Signature:**\n\n```typescript\nx: number;\n```\n", "ns.activefragment.x.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [x](./bitburner.activefragment.x.md)\n\n## ActiveFragment.x property\n\n**Signature:**\n\n```typescript\nx: number;\n```\n", "bitburner.ns.getserverrequiredhackinglevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerRequiredHackingLevel](./bitburner.ns.getserverrequiredhackinglevel.md)\n\n## NS.getServerRequiredHackingLevel() method\n\nReturns the required hacking level of the target server.\n\n**Signature:**\n\n```typescript\ngetServerRequiredHackingLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nThe required hacking level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.getserverrequiredhackinglevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getServerRequiredHackingLevel](./bitburner.ns.getserverrequiredhackinglevel.md)\n\n## NS.getServerRequiredHackingLevel() method\n\nReturns the required hacking level of the target server.\n\n**Signature:**\n\n```typescript\ngetServerRequiredHackingLevel(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nThe required hacking level of the target server.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.sleeveclasstask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveClassTask](./bitburner.sleeveclasstask.md)\n\n## SleeveClassTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveClassTask = {\n  type: \"CLASS\";\n  classType: UniversityClassType | GymType | `${UniversityClassType}` | `${GymType}`;\n  location: LocationName | `${LocationName}`;\n};\n```\n**References:** [UniversityClassType](./bitburner.universityclasstype.md)<!-- -->, [GymType](./bitburner.gymtype.md)<!-- -->, [LocationName](./bitburner.locationname.md)\n\n", "ns.sleeveclasstask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveClassTask](./bitburner.sleeveclasstask.md)\n\n## SleeveClassTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveClassTask = {\n  type: \"CLASS\";\n  classType: UniversityClassType | GymType | `${UniversityClassType}` | `${GymType}`;\n  location: LocationName | `${LocationName}`;\n};\n```\n**References:** [UniversityClassType](./bitburner.universityclasstype.md)<!-- -->, [GymType](./bitburner.gymtype.md)<!-- -->, [LocationName](./bitburner.locationname.md)\n\n", "bitburner.server.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md)\n\n## Server interface\n\nA single server.\n\n**Signature:**\n\n```typescript\ninterface Server \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [backdoorInstalled](./bitburner.server.backdoorinstalled.md) |  | boolean | Flag indicating whether this server has a backdoor installed by a player |\n|  [baseDifficulty](./bitburner.server.basedifficulty.md) |  | number | Initial server security level (i.e. security level when the server was created) |\n|  [cpuCores](./bitburner.server.cpucores.md) |  | number | How many CPU cores this server has. Maximum of 8. Affects magnitude of grow and weaken. |\n|  [ftpPortOpen](./bitburner.server.ftpportopen.md) |  | boolean | Flag indicating whether the FTP port is open |\n|  [hackDifficulty](./bitburner.server.hackdifficulty.md) |  | number | Server Security Level |\n|  [hasAdminRights](./bitburner.server.hasadminrights.md) |  | boolean | Flag indicating whether player has admin/root access to this server |\n|  [hostname](./bitburner.server.hostname.md) |  | string | Hostname. Must be unique |\n|  [httpPortOpen](./bitburner.server.httpportopen.md) |  | boolean | Flag indicating whether HTTP Port is open |\n|  [ip](./bitburner.server.ip.md) |  | string | IP Address. Must be unique |\n|  [isConnectedTo](./bitburner.server.isconnectedto.md) |  | boolean | Flag indicating whether player is currently connected to this server |\n|  [maxRam](./bitburner.server.maxram.md) |  | number | RAM (GB) available on this server |\n|  [minDifficulty](./bitburner.server.mindifficulty.md) |  | number | Minimum server security level that this server can be weakened to |\n|  [moneyAvailable](./bitburner.server.moneyavailable.md) |  | number | How much money currently resides on the server and can be hacked |\n|  [moneyMax](./bitburner.server.moneymax.md) |  | number | Maximum amount of money that this server can hold |\n|  [numOpenPortsRequired](./bitburner.server.numopenportsrequired.md) |  | number | Number of open ports required in order to gain admin/root access |\n|  [openPortCount](./bitburner.server.openportcount.md) |  | number | How many ports are currently opened on the server |\n|  [organizationName](./bitburner.server.organizationname.md) |  | string | Name of company/faction/etc. that this server belongs to. Optional, not applicable to all Servers |\n|  [purchasedByPlayer](./bitburner.server.purchasedbyplayer.md) |  | boolean | Flag indicating whether this is a purchased server |\n|  [ramUsed](./bitburner.server.ramused.md) |  | number | RAM (GB) used. i.e. unavailable RAM |\n|  [requiredHackingSkill](./bitburner.server.requiredhackingskill.md) |  | number | Hacking level required to hack this server |\n|  [serverGrowth](./bitburner.server.servergrowth.md) |  | number | Parameter that affects how effectively this server's money can be increased using the grow() Netscript function |\n|  [smtpPortOpen](./bitburner.server.smtpportopen.md) |  | boolean | Flag indicating whether SMTP Port is open |\n|  [sqlPortOpen](./bitburner.server.sqlportopen.md) |  | boolean | Flag indicating whether SQL Port is open |\n|  [sshPortOpen](./bitburner.server.sshportopen.md) |  | boolean | Flag indicating whether the SSH Port is open |\n\n", "ns.server.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md)\n\n## Server interface\n\nA single server.\n\n**Signature:**\n\n```typescript\ninterface Server \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [backdoorInstalled](./bitburner.server.backdoorinstalled.md) |  | boolean | Flag indicating whether this server has a backdoor installed by a player |\n|  [baseDifficulty](./bitburner.server.basedifficulty.md) |  | number | Initial server security level (i.e. security level when the server was created) |\n|  [cpuCores](./bitburner.server.cpucores.md) |  | number | How many CPU cores this server has. Maximum of 8. Affects magnitude of grow and weaken. |\n|  [ftpPortOpen](./bitburner.server.ftpportopen.md) |  | boolean | Flag indicating whether the FTP port is open |\n|  [hackDifficulty](./bitburner.server.hackdifficulty.md) |  | number | Server Security Level |\n|  [hasAdminRights](./bitburner.server.hasadminrights.md) |  | boolean | Flag indicating whether player has admin/root access to this server |\n|  [hostname](./bitburner.server.hostname.md) |  | string | Hostname. Must be unique |\n|  [httpPortOpen](./bitburner.server.httpportopen.md) |  | boolean | Flag indicating whether HTTP Port is open |\n|  [ip](./bitburner.server.ip.md) |  | string | IP Address. Must be unique |\n|  [isConnectedTo](./bitburner.server.isconnectedto.md) |  | boolean | Flag indicating whether player is currently connected to this server |\n|  [maxRam](./bitburner.server.maxram.md) |  | number | RAM (GB) available on this server |\n|  [minDifficulty](./bitburner.server.mindifficulty.md) |  | number | Minimum server security level that this server can be weakened to |\n|  [moneyAvailable](./bitburner.server.moneyavailable.md) |  | number | How much money currently resides on the server and can be hacked |\n|  [moneyMax](./bitburner.server.moneymax.md) |  | number | Maximum amount of money that this server can hold |\n|  [numOpenPortsRequired](./bitburner.server.numopenportsrequired.md) |  | number | Number of open ports required in order to gain admin/root access |\n|  [openPortCount](./bitburner.server.openportcount.md) |  | number | How many ports are currently opened on the server |\n|  [organizationName](./bitburner.server.organizationname.md) |  | string | Name of company/faction/etc. that this server belongs to. Optional, not applicable to all Servers |\n|  [purchasedByPlayer](./bitburner.server.purchasedbyplayer.md) |  | boolean | Flag indicating whether this is a purchased server |\n|  [ramUsed](./bitburner.server.ramused.md) |  | number | RAM (GB) used. i.e. unavailable RAM |\n|  [requiredHackingSkill](./bitburner.server.requiredhackingskill.md) |  | number | Hacking level required to hack this server |\n|  [serverGrowth](./bitburner.server.servergrowth.md) |  | number | Parameter that affects how effectively this server's money can be increased using the grow() Netscript function |\n|  [smtpPortOpen](./bitburner.server.smtpportopen.md) |  | boolean | Flag indicating whether SMTP Port is open |\n|  [sqlPortOpen](./bitburner.server.sqlportopen.md) |  | boolean | Flag indicating whether SQL Port is open |\n|  [sshPortOpen](./bitburner.server.sshportopen.md) |  | boolean | Flag indicating whether the SSH Port is open |\n\n", "bitburner.singularity.getcurrentwork.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCurrentWork](./bitburner.singularity.getcurrentwork.md)\n\n## Singularity.getCurrentWork() method\n\nGet the current work the player is doing.\n\n**Signature:**\n\n```typescript\ngetCurrentWork(): any | null;\n```\n**Returns:**\n\nany \\| null\n\n- An object representing the current work. Fields depend on the kind of work.\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\n", "ns.singularity.getcurrentwork.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCurrentWork](./bitburner.singularity.getcurrentwork.md)\n\n## Singularity.getCurrentWork() method\n\nGet the current work the player is doing.\n\n**Signature:**\n\n```typescript\ngetCurrentWork(): any | null;\n```\n**Returns:**\n\nany \\| null\n\n- An object representing the current work. Fields depend on the kind of work.\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\n", "bitburner.hacknetnodesformulas.hacknetnodecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [hacknetNodeCost](./bitburner.hacknetnodesformulas.hacknetnodecost.md)\n\n## HacknetNodesFormulas.hacknetNodeCost() method\n\nCalculate the cost of a hacknet node.\n\n**Signature:**\n\n```typescript\nhacknetNodeCost(n: number, mult: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | number of the hacknet node |\n|  mult | number | player cost reduction (defaults to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetnodesformulas.hacknetnodecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [hacknetNodeCost](./bitburner.hacknetnodesformulas.hacknetnodecost.md)\n\n## HacknetNodesFormulas.hacknetNodeCost() method\n\nCalculate the cost of a hacknet node.\n\n**Signature:**\n\n```typescript\nhacknetNodeCost(n: number, mult: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | number of the hacknet node |\n|  mult | number | player cost reduction (defaults to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.singularity.getfactionfavor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getFactionFavor](./bitburner.singularity.getfactionfavor.md)\n\n## Singularity.getFactionFavor() method\n\nGet faction favor.\n\n**Signature:**\n\n```typescript\ngetFactionFavor(faction: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you have for the specified faction.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function returns the amount of favor you have for the specified faction.\n\n", "ns.singularity.getfactionfavor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getFactionFavor](./bitburner.singularity.getfactionfavor.md)\n\n## Singularity.getFactionFavor() method\n\nGet faction favor.\n\n**Signature:**\n\n```typescript\ngetFactionFavor(faction: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you have for the specified faction.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function returns the amount of favor you have for the specified faction.\n\n", "bitburner.crimestats.charisma_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [charisma\\_success\\_weight](./bitburner.crimestats.charisma_success_weight.md)\n\n## CrimeStats.charisma\\_success\\_weight property\n\ncharisma level impact on success change of the crime\n\n**Signature:**\n\n```typescript\ncharisma_success_weight: number;\n```\n", "ns.crimestats.charisma_success_weight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [charisma\\_success\\_weight](./bitburner.crimestats.charisma_success_weight.md)\n\n## CrimeStats.charisma\\_success\\_weight property\n\ncharisma level impact on success change of the crime\n\n**Signature:**\n\n```typescript\ncharisma_success_weight: number;\n```\n", "bitburner.nodestats.production.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [production](./bitburner.nodestats.production.md)\n\n## NodeStats.production property\n\nNode's production per second\n\n**Signature:**\n\n```typescript\nproduction: number;\n```\n", "ns.nodestats.production.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [production](./bitburner.nodestats.production.md)\n\n## NodeStats.production property\n\nNode's production per second\n\n**Signature:**\n\n```typescript\nproduction: number;\n```\n", "bitburner.runningscript.server.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [server](./bitburner.runningscript.server.md)\n\n## RunningScript.server property\n\nHostname of the server on which this script runs\n\n**Signature:**\n\n```typescript\nserver: string;\n```\n", "ns.runningscript.server.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [server](./bitburner.runningscript.server.md)\n\n## RunningScript.server property\n\nHostname of the server on which this script runs\n\n**Signature:**\n\n```typescript\nserver: string;\n```\n", "bitburner.singularity.getownedaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getOwnedAugmentations](./bitburner.singularity.getownedaugmentations.md)\n\n## Singularity.getOwnedAugmentations() method\n\nGet a list of owned augmentation.\n\n**Signature:**\n\n```typescript\ngetOwnedAugmentations(purchased?: boolean): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  purchased | boolean | _(Optional)_ Specifies whether the returned array should include Augmentations you have purchased but not yet installed. By default, this argument is false which means that the return value will NOT have the purchased Augmentations. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray containing the names (as strings) of all Augmentations you have.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns an array containing the names (as strings) of all Augmentations you have.\n\n", "ns.singularity.getownedaugmentations.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getOwnedAugmentations](./bitburner.singularity.getownedaugmentations.md)\n\n## Singularity.getOwnedAugmentations() method\n\nGet a list of owned augmentation.\n\n**Signature:**\n\n```typescript\ngetOwnedAugmentations(purchased?: boolean): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  purchased | boolean | _(Optional)_ Specifies whether the returned array should include Augmentations you have purchased but not yet installed. By default, this argument is false which means that the return value will NOT have the purchased Augmentations. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray containing the names (as strings) of all Augmentations you have.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns an array containing the names (as strings) of all Augmentations you have.\n\n", "bitburner.ns.gettimesincelastaug.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getTimeSinceLastAug](./bitburner.ns.gettimesincelastaug.md)\n\n## NS.getTimeSinceLastAug() method\n\nReturns the amount of time in milliseconds that have passed since you last installed Augmentations.\n\n**Signature:**\n\n```typescript\ngetTimeSinceLastAug(): number;\n```\n**Returns:**\n\nnumber\n\nTime in milliseconds that have passed since you last installed Augmentations.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.gettimesincelastaug.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getTimeSinceLastAug](./bitburner.ns.gettimesincelastaug.md)\n\n## NS.getTimeSinceLastAug() method\n\nReturns the amount of time in milliseconds that have passed since you last installed Augmentations.\n\n**Signature:**\n\n```typescript\ngetTimeSinceLastAug(): number;\n```\n**Returns:**\n\nnumber\n\nTime in milliseconds that have passed since you last installed Augmentations.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.corpmaterialconstantdata.competitionrange.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [competitionRange](./bitburner.corpmaterialconstantdata.competitionrange.md)\n\n## CorpMaterialConstantData.competitionRange property\n\n**Signature:**\n\n```typescript\ncompetitionRange: [min: number, max: number];\n```\n", "ns.corpmaterialconstantdata.competitionrange.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [competitionRange](./bitburner.corpmaterialconstantdata.competitionrange.md)\n\n## CorpMaterialConstantData.competitionRange property\n\n**Signature:**\n\n```typescript\ncompetitionRange: [min: number, max: number];\n```\n", "bitburner.gang.getotherganginformation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getOtherGangInformation](./bitburner.gang.getotherganginformation.md)\n\n## Gang.getOtherGangInformation() method\n\nGet information about the other gangs.\n\n**Signature:**\n\n```typescript\ngetOtherGangInformation(): GangOtherInfo;\n```\n**Returns:**\n\n[GangOtherInfo](./bitburner.gangotherinfo.md)\n\nObject containing territory and power information about all gangs.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet territory and power information about all gangs.\n\n", "ns.gang.getotherganginformation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getOtherGangInformation](./bitburner.gang.getotherganginformation.md)\n\n## Gang.getOtherGangInformation() method\n\nGet information about the other gangs.\n\n**Signature:**\n\n```typescript\ngetOtherGangInformation(): GangOtherInfo;\n```\n**Returns:**\n\n[GangOtherInfo](./bitburner.gangotherinfo.md)\n\nObject containing territory and power information about all gangs.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet territory and power information about all gangs.\n\n", "bitburner.material.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [name](./bitburner.material.name.md)\n\n## Material.name property\n\nName of the material\n\n**Signature:**\n\n```typescript\nname: CorpMaterialName;\n```\n", "ns.material.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [name](./bitburner.material.name.md)\n\n## Material.name property\n\nName of the material\n\n**Signature:**\n\n```typescript\nname: CorpMaterialName;\n```\n", "bitburner.codingcontract.getnumtriesremaining.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getNumTriesRemaining](./bitburner.codingcontract.getnumtriesremaining.md)\n\n## CodingContract.getNumTriesRemaining() method\n\nGet the number of attempts remaining.\n\n**Signature:**\n\n```typescript\ngetNumTriesRemaining(filename: string, host?: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nnumber\n\nHow many attempts are remaining for the contract.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the number of tries remaining on the contract before it self-destructs.\n\n", "ns.codingcontract.getnumtriesremaining.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getNumTriesRemaining](./bitburner.codingcontract.getnumtriesremaining.md)\n\n## CodingContract.getNumTriesRemaining() method\n\nGet the number of attempts remaining.\n\n**Signature:**\n\n```typescript\ngetNumTriesRemaining(filename: string, host?: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nnumber\n\nHow many attempts are remaining for the contract.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the number of tries remaining on the contract before it self-destructs.\n\n", "bitburner.gangmemberinfo.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha](./bitburner.gangmemberinfo.cha.md)\n\n## GangMemberInfo.cha property\n\nCharisma skill level\n\n**Signature:**\n\n```typescript\ncha: number;\n```\n", "ns.gangmemberinfo.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha](./bitburner.gangmemberinfo.cha.md)\n\n## GangMemberInfo.cha property\n\nCharisma skill level\n\n**Signature:**\n\n```typescript\ncha: number;\n```\n", "bitburner.grafting.graftaugmentation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [graftAugmentation](./bitburner.grafting.graftaugmentation.md)\n\n## Grafting.graftAugmentation() method\n\nBegins grafting the named aug. You must be in New Tokyo to use this.\n\n**Signature:**\n\n```typescript\ngraftAugmentation(augName: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | The name of the aug to begin grafting. Must be an exact match. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this Augmentation grafting. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if the aug successfully began grafting, false otherwise (e.g. not enough money, or invalid Augmentation name provided).\n\n## Exceptions\n\nWill error if called while you are not in New Tokyo.\n\n## Remarks\n\nRAM cost: 7.5 GB\n\n", "ns.grafting.graftaugmentation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [graftAugmentation](./bitburner.grafting.graftaugmentation.md)\n\n## Grafting.graftAugmentation() method\n\nBegins grafting the named aug. You must be in New Tokyo to use this.\n\n**Signature:**\n\n```typescript\ngraftAugmentation(augName: string, focus?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | The name of the aug to begin grafting. Must be an exact match. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this Augmentation grafting. Optional. Defaults to true. |\n\n**Returns:**\n\nboolean\n\nTrue if the aug successfully began grafting, false otherwise (e.g. not enough money, or invalid Augmentation name provided).\n\n## Exceptions\n\nWill error if called while you are not in New Tokyo.\n\n## Remarks\n\nRAM cost: 7.5 GB\n\n", "bitburner.office.maxene.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [maxEne](./bitburner.office.maxene.md)\n\n## Office.maxEne property\n\nMaximum amount of energy of the employees\n\n**Signature:**\n\n```typescript\nmaxEne: number;\n```\n", "ns.office.maxene.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [maxEne](./bitburner.office.maxene.md)\n\n## Office.maxEne property\n\nMaximum amount of energy of the employees\n\n**Signature:**\n\n```typescript\nmaxEne: number;\n```\n", "bitburner.moneysource.bladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [bladeburner](./bitburner.moneysource.bladeburner.md)\n\n## MoneySource.bladeburner property\n\n**Signature:**\n\n```typescript\nbladeburner: number;\n```\n", "ns.moneysource.bladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [bladeburner](./bitburner.moneysource.bladeburner.md)\n\n## MoneySource.bladeburner property\n\n**Signature:**\n\n```typescript\nbladeburner: number;\n```\n", "bitburner.division.popularity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [popularity](./bitburner.division.popularity.md)\n\n## Division.popularity property\n\nPopularity of the division\n\n**Signature:**\n\n```typescript\npopularity: number;\n```\n", "ns.division.popularity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [popularity](./bitburner.division.popularity.md)\n\n## Division.popularity property\n\nPopularity of the division\n\n**Signature:**\n\n```typescript\npopularity: number;\n```\n", "bitburner.userinterfacetheme.error.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [error](./bitburner.userinterfacetheme.error.md)\n\n## UserInterfaceTheme.error property\n\n**Signature:**\n\n```typescript\nerror: string;\n```\n", "ns.userinterfacetheme.error.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [error](./bitburner.userinterfacetheme.error.md)\n\n## UserInterfaceTheme.error property\n\n**Signature:**\n\n```typescript\nerror: string;\n```\n", "bitburner.singularity.destroyw0r1dd43m0n.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [destroyW0r1dD43m0n](./bitburner.singularity.destroyw0r1dd43m0n.md)\n\n## Singularity.destroyW0r1dD43m0n() method\n\nDestroy the w0r1d\\_d43m0n and move on to the next BN.\n\n**Signature:**\n\n```typescript\ndestroyW0r1dD43m0n(nextBN: number, callbackScript?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  nextBN | number | BN number to jump to |\n|  callbackScript | string | _(Optional)_ Name of the script to launch in the next BN. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 32 GB \\* 16/4/1\n\nYou must have the special augment installed and the required hacking level OR Completed the final black op.\n\n", "ns.singularity.destroyw0r1dd43m0n.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [destroyW0r1dD43m0n](./bitburner.singularity.destroyw0r1dd43m0n.md)\n\n## Singularity.destroyW0r1dD43m0n() method\n\nDestroy the w0r1d\\_d43m0n and move on to the next BN.\n\n**Signature:**\n\n```typescript\ndestroyW0r1dD43m0n(nextBN: number, callbackScript?: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  nextBN | number | BN number to jump to |\n|  callbackScript | string | _(Optional)_ Name of the script to launch in the next BN. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 32 GB \\* 16/4/1\n\nYou must have the special augment installed and the required hacking level OR Completed the final black op.\n\n", "bitburner.bladeburner.getoperationnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getOperationNames](./bitburner.bladeburner.getoperationnames.md)\n\n## Bladeburner.getOperationNames() method\n\nList all operations.\n\n**Signature:**\n\n```typescript\ngetOperationNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all Bladeburner operations.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all Bladeburner operations.\n\n", "ns.bladeburner.getoperationnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getOperationNames](./bitburner.bladeburner.getoperationnames.md)\n\n## Bladeburner.getOperationNames() method\n\nList all operations.\n\n**Signature:**\n\n```typescript\ngetOperationNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all Bladeburner operations.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all Bladeburner operations.\n\n", "bitburner.singularity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md)\n\n## Singularity interface\n\nSingularity API\n\n**Signature:**\n\n```typescript\nexport interface Singularity \n```\n\n## Remarks\n\nThis API requires Source-File 4 to use. The RAM cost of all these functions is multiplied by 16/4/1 based on Source-File 4 levels.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [applyToCompany(companyName, field)](./bitburner.singularity.applytocompany.md) | Apply for a job at a company. |\n|  [b1tflum3(nextBN, callbackScript)](./bitburner.singularity.b1tflum3.md) | b1t\\_flum3 into a different BN. |\n|  [checkFactionInvitations()](./bitburner.singularity.checkfactioninvitations.md) | List all current faction invitations. |\n|  [commitCrime(crime, focus)](./bitburner.singularity.commitcrime.md) | Commit a crime. |\n|  [connect(hostname)](./bitburner.singularity.connect.md) | Connect to a server. |\n|  [createProgram(program, focus)](./bitburner.singularity.createprogram.md) | Create a program. |\n|  [destroyW0r1dD43m0n(nextBN, callbackScript)](./bitburner.singularity.destroyw0r1dd43m0n.md) | Destroy the w0r1d\\_d43m0n and move on to the next BN. |\n|  [donateToFaction(faction, amount)](./bitburner.singularity.donatetofaction.md) | Donate to a faction. |\n|  [exportGame()](./bitburner.singularity.exportgame.md) | Backup game save. |\n|  [exportGameBonus()](./bitburner.singularity.exportgamebonus.md) | Returns Backup save bonus availability. |\n|  [getAugmentationBasePrice(augName)](./bitburner.singularity.getaugmentationbaseprice.md) | Get base price of an augmentation. |\n|  [getAugmentationPrereq(augName)](./bitburner.singularity.getaugmentationprereq.md) | Get the pre-requisite of an augmentation. |\n|  [getAugmentationPrice(augName)](./bitburner.singularity.getaugmentationprice.md) | Get price of an augmentation. |\n|  [getAugmentationRepReq(augName)](./bitburner.singularity.getaugmentationrepreq.md) | Get reputation requirement of an augmentation. |\n|  [getAugmentationsFromFaction(faction)](./bitburner.singularity.getaugmentationsfromfaction.md) | Get a list of augmentation available from a faction. |\n|  [getAugmentationStats(name)](./bitburner.singularity.getaugmentationstats.md) | Get the stats of an augmentation. |\n|  [getCompanyFavor(companyName)](./bitburner.singularity.getcompanyfavor.md) | Get company favor. |\n|  [getCompanyFavorGain(companyName)](./bitburner.singularity.getcompanyfavorgain.md) | Get company favor gain. |\n|  [getCompanyRep(companyName)](./bitburner.singularity.getcompanyrep.md) | Get company reputation. |\n|  [getCrimeChance(crime)](./bitburner.singularity.getcrimechance.md) | Get chance to successfully commit a crime. |\n|  [getCrimeStats(crime)](./bitburner.singularity.getcrimestats.md) | Get stats related to a crime. |\n|  [getCurrentServer()](./bitburner.singularity.getcurrentserver.md) | Get the current server. |\n|  [getCurrentWork()](./bitburner.singularity.getcurrentwork.md) | Get the current work the player is doing. |\n|  [getDarkwebProgramCost(programName)](./bitburner.singularity.getdarkwebprogramcost.md) | Check the price of an exploit on the dark web |\n|  [getDarkwebPrograms()](./bitburner.singularity.getdarkwebprograms.md) | Get a list of programs offered on the dark web. |\n|  [getFactionFavor(faction)](./bitburner.singularity.getfactionfavor.md) | Get faction favor. |\n|  [getFactionFavorGain(faction)](./bitburner.singularity.getfactionfavorgain.md) | Get faction favor gain. |\n|  [getFactionRep(faction)](./bitburner.singularity.getfactionrep.md) | Get faction reputation. |\n|  [getOwnedAugmentations(purchased)](./bitburner.singularity.getownedaugmentations.md) | Get a list of owned augmentation. |\n|  [getOwnedSourceFiles()](./bitburner.singularity.getownedsourcefiles.md) | Get a list of acquired Source-Files. |\n|  [getUpgradeHomeCoresCost()](./bitburner.singularity.getupgradehomecorescost.md) | Get the price of upgrading home cores. |\n|  [getUpgradeHomeRamCost()](./bitburner.singularity.getupgradehomeramcost.md) | Get the price of upgrading home RAM. |\n|  [goToLocation(locationName)](./bitburner.singularity.gotolocation.md) | Go to a location. |\n|  [gymWorkout(gymName, stat, focus)](./bitburner.singularity.gymworkout.md) | Workout at the gym. |\n|  [hospitalize()](./bitburner.singularity.hospitalize.md) | Hospitalize the player. |\n|  [installAugmentations(cbScript)](./bitburner.singularity.installaugmentations.md) | Install your purchased augmentations. |\n|  [installBackdoor()](./bitburner.singularity.installbackdoor.md) | Run the backdoor command in the terminal. |\n|  [isBusy()](./bitburner.singularity.isbusy.md) | Check if the player is busy. |\n|  [isFocused()](./bitburner.singularity.isfocused.md) | Check if the player is focused. |\n|  [joinFaction(faction)](./bitburner.singularity.joinfaction.md) | Join a faction. |\n|  [manualHack()](./bitburner.singularity.manualhack.md) | Run the hack command in the terminal. |\n|  [purchaseAugmentation(faction, augmentation)](./bitburner.singularity.purchaseaugmentation.md) | Purchase an augmentation |\n|  [purchaseProgram(programName)](./bitburner.singularity.purchaseprogram.md) | Purchase a program from the dark web. |\n|  [purchaseTor()](./bitburner.singularity.purchasetor.md) | Purchase the TOR router. |\n|  [quitJob(companyName)](./bitburner.singularity.quitjob.md) | Quit jobs by company. |\n|  [setFocus(focus)](./bitburner.singularity.setfocus.md) | Set the players focus. |\n|  [softReset(cbScript)](./bitburner.singularity.softreset.md) | Soft reset the game. |\n|  [stopAction()](./bitburner.singularity.stopaction.md) | Stop the current action. |\n|  [travelToCity(city)](./bitburner.singularity.traveltocity.md) | Travel to another city. |\n|  [universityCourse(universityName, courseName, focus)](./bitburner.singularity.universitycourse.md) | Take university class. |\n|  [upgradeHomeCores()](./bitburner.singularity.upgradehomecores.md) | Upgrade home computer cores. |\n|  [upgradeHomeRam()](./bitburner.singularity.upgradehomeram.md) | Upgrade home computer RAM. |\n|  [workForCompany(companyName, focus)](./bitburner.singularity.workforcompany.md) | Work for a company. |\n|  [workForFaction(faction, workType, focus)](./bitburner.singularity.workforfaction.md) | Work for a faction. |\n\n", "ns.singularity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md)\n\n## Singularity interface\n\nSingularity API\n\n**Signature:**\n\n```typescript\nexport interface Singularity \n```\n\n## Remarks\n\nThis API requires Source-File 4 to use. The RAM cost of all these functions is multiplied by 16/4/1 based on Source-File 4 levels.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [applyToCompany(companyName, field)](./bitburner.singularity.applytocompany.md) | Apply for a job at a company. |\n|  [b1tflum3(nextBN, callbackScript)](./bitburner.singularity.b1tflum3.md) | b1t\\_flum3 into a different BN. |\n|  [checkFactionInvitations()](./bitburner.singularity.checkfactioninvitations.md) | List all current faction invitations. |\n|  [commitCrime(crime, focus)](./bitburner.singularity.commitcrime.md) | Commit a crime. |\n|  [connect(hostname)](./bitburner.singularity.connect.md) | Connect to a server. |\n|  [createProgram(program, focus)](./bitburner.singularity.createprogram.md) | Create a program. |\n|  [destroyW0r1dD43m0n(nextBN, callbackScript)](./bitburner.singularity.destroyw0r1dd43m0n.md) | Destroy the w0r1d\\_d43m0n and move on to the next BN. |\n|  [donateToFaction(faction, amount)](./bitburner.singularity.donatetofaction.md) | Donate to a faction. |\n|  [exportGame()](./bitburner.singularity.exportgame.md) | Backup game save. |\n|  [exportGameBonus()](./bitburner.singularity.exportgamebonus.md) | Returns Backup save bonus availability. |\n|  [getAugmentationBasePrice(augName)](./bitburner.singularity.getaugmentationbaseprice.md) | Get base price of an augmentation. |\n|  [getAugmentationPrereq(augName)](./bitburner.singularity.getaugmentationprereq.md) | Get the pre-requisite of an augmentation. |\n|  [getAugmentationPrice(augName)](./bitburner.singularity.getaugmentationprice.md) | Get price of an augmentation. |\n|  [getAugmentationRepReq(augName)](./bitburner.singularity.getaugmentationrepreq.md) | Get reputation requirement of an augmentation. |\n|  [getAugmentationsFromFaction(faction)](./bitburner.singularity.getaugmentationsfromfaction.md) | Get a list of augmentation available from a faction. |\n|  [getAugmentationStats(name)](./bitburner.singularity.getaugmentationstats.md) | Get the stats of an augmentation. |\n|  [getCompanyFavor(companyName)](./bitburner.singularity.getcompanyfavor.md) | Get company favor. |\n|  [getCompanyFavorGain(companyName)](./bitburner.singularity.getcompanyfavorgain.md) | Get company favor gain. |\n|  [getCompanyRep(companyName)](./bitburner.singularity.getcompanyrep.md) | Get company reputation. |\n|  [getCrimeChance(crime)](./bitburner.singularity.getcrimechance.md) | Get chance to successfully commit a crime. |\n|  [getCrimeStats(crime)](./bitburner.singularity.getcrimestats.md) | Get stats related to a crime. |\n|  [getCurrentServer()](./bitburner.singularity.getcurrentserver.md) | Get the current server. |\n|  [getCurrentWork()](./bitburner.singularity.getcurrentwork.md) | Get the current work the player is doing. |\n|  [getDarkwebProgramCost(programName)](./bitburner.singularity.getdarkwebprogramcost.md) | Check the price of an exploit on the dark web |\n|  [getDarkwebPrograms()](./bitburner.singularity.getdarkwebprograms.md) | Get a list of programs offered on the dark web. |\n|  [getFactionFavor(faction)](./bitburner.singularity.getfactionfavor.md) | Get faction favor. |\n|  [getFactionFavorGain(faction)](./bitburner.singularity.getfactionfavorgain.md) | Get faction favor gain. |\n|  [getFactionRep(faction)](./bitburner.singularity.getfactionrep.md) | Get faction reputation. |\n|  [getOwnedAugmentations(purchased)](./bitburner.singularity.getownedaugmentations.md) | Get a list of owned augmentation. |\n|  [getOwnedSourceFiles()](./bitburner.singularity.getownedsourcefiles.md) | Get a list of acquired Source-Files. |\n|  [getUpgradeHomeCoresCost()](./bitburner.singularity.getupgradehomecorescost.md) | Get the price of upgrading home cores. |\n|  [getUpgradeHomeRamCost()](./bitburner.singularity.getupgradehomeramcost.md) | Get the price of upgrading home RAM. |\n|  [goToLocation(locationName)](./bitburner.singularity.gotolocation.md) | Go to a location. |\n|  [gymWorkout(gymName, stat, focus)](./bitburner.singularity.gymworkout.md) | Workout at the gym. |\n|  [hospitalize()](./bitburner.singularity.hospitalize.md) | Hospitalize the player. |\n|  [installAugmentations(cbScript)](./bitburner.singularity.installaugmentations.md) | Install your purchased augmentations. |\n|  [installBackdoor()](./bitburner.singularity.installbackdoor.md) | Run the backdoor command in the terminal. |\n|  [isBusy()](./bitburner.singularity.isbusy.md) | Check if the player is busy. |\n|  [isFocused()](./bitburner.singularity.isfocused.md) | Check if the player is focused. |\n|  [joinFaction(faction)](./bitburner.singularity.joinfaction.md) | Join a faction. |\n|  [manualHack()](./bitburner.singularity.manualhack.md) | Run the hack command in the terminal. |\n|  [purchaseAugmentation(faction, augmentation)](./bitburner.singularity.purchaseaugmentation.md) | Purchase an augmentation |\n|  [purchaseProgram(programName)](./bitburner.singularity.purchaseprogram.md) | Purchase a program from the dark web. |\n|  [purchaseTor()](./bitburner.singularity.purchasetor.md) | Purchase the TOR router. |\n|  [quitJob(companyName)](./bitburner.singularity.quitjob.md) | Quit jobs by company. |\n|  [setFocus(focus)](./bitburner.singularity.setfocus.md) | Set the players focus. |\n|  [softReset(cbScript)](./bitburner.singularity.softreset.md) | Soft reset the game. |\n|  [stopAction()](./bitburner.singularity.stopaction.md) | Stop the current action. |\n|  [travelToCity(city)](./bitburner.singularity.traveltocity.md) | Travel to another city. |\n|  [universityCourse(universityName, courseName, focus)](./bitburner.singularity.universitycourse.md) | Take university class. |\n|  [upgradeHomeCores()](./bitburner.singularity.upgradehomecores.md) | Upgrade home computer cores. |\n|  [upgradeHomeRam()](./bitburner.singularity.upgradehomeram.md) | Upgrade home computer RAM. |\n|  [workForCompany(companyName, focus)](./bitburner.singularity.workforcompany.md) | Work for a company. |\n|  [workForFaction(faction, workType, focus)](./bitburner.singularity.workforfaction.md) | Work for a faction. |\n\n", "bitburner.gang.getequipmentstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentStats](./bitburner.gang.getequipmentstats.md)\n\n## Gang.getEquipmentStats() method\n\nGet stats of an equipment.\n\n**Signature:**\n\n```typescript\ngetEquipmentStats(equipName: string): EquipmentStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  equipName | string | Name of equipment. |\n\n**Returns:**\n\n[EquipmentStats](./bitburner.equipmentstats.md)\n\nA dictionary containing the stats of the equipment.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the specified equipment stats.\n\n", "ns.gang.getequipmentstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentStats](./bitburner.gang.getequipmentstats.md)\n\n## Gang.getEquipmentStats() method\n\nGet stats of an equipment.\n\n**Signature:**\n\n```typescript\ngetEquipmentStats(equipName: string): EquipmentStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  equipName | string | Name of equipment. |\n\n**Returns:**\n\n[EquipmentStats](./bitburner.equipmentstats.md)\n\nA dictionary containing the stats of the equipment.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the specified equipment stats.\n\n", "bitburner.moneysource.hacknet_expenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hacknet\\_expenses](./bitburner.moneysource.hacknet_expenses.md)\n\n## MoneySource.hacknet\\_expenses property\n\n**Signature:**\n\n```typescript\nhacknet_expenses: number;\n```\n", "ns.moneysource.hacknet_expenses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hacknet\\_expenses](./bitburner.moneysource.hacknet_expenses.md)\n\n## MoneySource.hacknet\\_expenses property\n\n**Signature:**\n\n```typescript\nhacknet_expenses: number;\n```\n", "bitburner.warehouse.sizeused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [sizeUsed](./bitburner.warehouse.sizeused.md)\n\n## Warehouse.sizeUsed property\n\nUsed space in the warehouse\n\n**Signature:**\n\n```typescript\nsizeUsed: number;\n```\n", "ns.warehouse.sizeused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [sizeUsed](./bitburner.warehouse.sizeused.md)\n\n## Warehouse.sizeUsed property\n\nUsed space in the warehouse\n\n**Signature:**\n\n```typescript\nsizeUsed: number;\n```\n", "bitburner.hacknetnodesformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md)\n\n## HacknetNodesFormulas interface\n\nHacknet Node formulas\n\n**Signature:**\n\n```typescript\ninterface HacknetNodesFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [constants()](./bitburner.hacknetnodesformulas.constants.md) | All constants used by the game. |\n|  [coreUpgradeCost(startingCore, extraCores, costMult)](./bitburner.hacknetnodesformulas.coreupgradecost.md) | Calculate cost of upgrading hacknet node cores. |\n|  [hacknetNodeCost(n, mult)](./bitburner.hacknetnodesformulas.hacknetnodecost.md) | Calculate the cost of a hacknet node. |\n|  [levelUpgradeCost(startingLevel, extraLevels, costMult)](./bitburner.hacknetnodesformulas.levelupgradecost.md) | Calculate cost of upgrading hacknet node level. |\n|  [moneyGainRate(level, ram, cores, mult)](./bitburner.hacknetnodesformulas.moneygainrate.md) | Calculate money gain rate. |\n|  [ramUpgradeCost(startingRam, extraLevels, costMult)](./bitburner.hacknetnodesformulas.ramupgradecost.md) | Calculate cost of upgrading hacknet node ram. |\n\n", "ns.hacknetnodesformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md)\n\n## HacknetNodesFormulas interface\n\nHacknet Node formulas\n\n**Signature:**\n\n```typescript\ninterface HacknetNodesFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [constants()](./bitburner.hacknetnodesformulas.constants.md) | All constants used by the game. |\n|  [coreUpgradeCost(startingCore, extraCores, costMult)](./bitburner.hacknetnodesformulas.coreupgradecost.md) | Calculate cost of upgrading hacknet node cores. |\n|  [hacknetNodeCost(n, mult)](./bitburner.hacknetnodesformulas.hacknetnodecost.md) | Calculate the cost of a hacknet node. |\n|  [levelUpgradeCost(startingLevel, extraLevels, costMult)](./bitburner.hacknetnodesformulas.levelupgradecost.md) | Calculate cost of upgrading hacknet node level. |\n|  [moneyGainRate(level, ram, cores, mult)](./bitburner.hacknetnodesformulas.moneygainrate.md) | Calculate money gain rate. |\n|  [ramUpgradeCost(startingRam, extraLevels, costMult)](./bitburner.hacknetnodesformulas.ramupgradecost.md) | Calculate cost of upgrading hacknet node ram. |\n\n", "bitburner.bitnodemultipliers.serverstartingmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerStartingMoney](./bitburner.bitnodemultipliers.serverstartingmoney.md)\n\n## BitNodeMultipliers.ServerStartingMoney property\n\nInfluences the initial money that a server starts with.\n\n**Signature:**\n\n```typescript\nServerStartingMoney: number;\n```\n", "ns.bitnodemultipliers.serverstartingmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ServerStartingMoney](./bitburner.bitnodemultipliers.serverstartingmoney.md)\n\n## BitNodeMultipliers.ServerStartingMoney property\n\nInfluences the initial money that a server starts with.\n\n**Signature:**\n\n```typescript\nServerStartingMoney: number;\n```\n", "bitburner.moneysources.sinceinstall.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySources](./bitburner.moneysources.md) &gt; [sinceInstall](./bitburner.moneysources.sinceinstall.md)\n\n## MoneySources.sinceInstall property\n\n**Signature:**\n\n```typescript\nsinceInstall: MoneySource;\n```\n", "ns.moneysources.sinceinstall.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySources](./bitburner.moneysources.md) &gt; [sinceInstall](./bitburner.moneysources.sinceinstall.md)\n\n## MoneySources.sinceInstall property\n\n**Signature:**\n\n```typescript\nsinceInstall: MoneySource;\n```\n", "bitburner.bitnodemultipliers.companyworkmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CompanyWorkMoney](./bitburner.bitnodemultipliers.companyworkmoney.md)\n\n## BitNodeMultipliers.CompanyWorkMoney property\n\nInfluences how much money the player earns when completing working their job.\n\n**Signature:**\n\n```typescript\nCompanyWorkMoney: number;\n```\n", "ns.bitnodemultipliers.companyworkmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CompanyWorkMoney](./bitburner.bitnodemultipliers.companyworkmoney.md)\n\n## BitNodeMultipliers.CompanyWorkMoney property\n\nInfluences how much money the player earns when completing working their job.\n\n**Signature:**\n\n```typescript\nCompanyWorkMoney: number;\n```\n", "bitburner.stanek.getfragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [getFragment](./bitburner.stanek.getfragment.md)\n\n## Stanek.getFragment() method\n\nGet placed fragment at location.\n\n**Signature:**\n\n```typescript\ngetFragment(rootX: number, rootY: number): ActiveFragment | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | X against which to align the top left of the fragment. |\n|  rootY | number | Y against which to align the top left of the fragment. |\n\n**Returns:**\n\n[ActiveFragment](./bitburner.activefragment.md) \\| undefined\n\nThe fragment at \\[rootX, rootY\\], if any.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "ns.stanek.getfragment.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [getFragment](./bitburner.stanek.getfragment.md)\n\n## Stanek.getFragment() method\n\nGet placed fragment at location.\n\n**Signature:**\n\n```typescript\ngetFragment(rootX: number, rootY: number): ActiveFragment | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  rootX | number | X against which to align the top left of the fragment. |\n|  rootY | number | Y against which to align the top left of the fragment. |\n\n**Returns:**\n\n[ActiveFragment](./bitburner.activefragment.md) \\| undefined\n\nThe fragment at \\[rootX, rootY\\], if any.\n\n## Remarks\n\nRAM cost: 5 GB\n\n", "bitburner.corporation.expandcity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [expandCity](./bitburner.corporation.expandcity.md)\n\n## Corporation.expandCity() method\n\nExpand to a new city\n\n**Signature:**\n\n```typescript\nexpandCity(divisionName: string, city: CityName | `${CityName}`): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\nvoid\n\n", "ns.corporation.expandcity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [expandCity](./bitburner.corporation.expandcity.md)\n\n## Corporation.expandCity() method\n\nExpand to a new city\n\n**Signature:**\n\n```typescript\nexpandCity(divisionName: string, city: CityName | `${CityName}`): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\nvoid\n\n", "bitburner.ns.atexit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [atExit](./bitburner.ns.atexit.md)\n\n## NS.atExit() method\n\nAdd callback function when the script dies\n\n**Signature:**\n\n```typescript\natExit(f: () => void): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  f | () =&gt; void |  |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nNS2 exclusive\n\nAdd callback to be executed when the script dies.\n\n", "ns.ns.atexit.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [atExit](./bitburner.ns.atexit.md)\n\n## NS.atExit() method\n\nAdd callback function when the script dies\n\n**Signature:**\n\n```typescript\natExit(f: () => void): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  f | () =&gt; void |  |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nNS2 exclusive\n\nAdd callback to be executed when the script dies.\n\n", "bitburner.multipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md)\n\n## Multipliers interface\n\n\n**Signature:**\n\n```typescript\ninterface Multipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agility\\_exp](./bitburner.multipliers.agility_exp.md) |  | number | Multiplier to agility experience gain rate |\n|  [agility](./bitburner.multipliers.agility.md) |  | number | Multiplier to agility skill |\n|  [bladeburner\\_analysis](./bitburner.multipliers.bladeburner_analysis.md) |  | number | Multiplier to effectiveness in Bladeburner Field Analysis |\n|  [bladeburner\\_max\\_stamina](./bitburner.multipliers.bladeburner_max_stamina.md) |  | number | Multiplier to Bladeburner max stamina |\n|  [bladeburner\\_stamina\\_gain](./bitburner.multipliers.bladeburner_stamina_gain.md) |  | number | Multiplier to Bladeburner stamina gain rate |\n|  [bladeburner\\_success\\_chance](./bitburner.multipliers.bladeburner_success_chance.md) |  | number | Multiplier to success chance in Bladeburner contracts/operations |\n|  [charisma\\_exp](./bitburner.multipliers.charisma_exp.md) |  | number | Multiplier to charisma experience gain rate |\n|  [charisma](./bitburner.multipliers.charisma.md) |  | number | Multiplier to charisma skill |\n|  [company\\_rep](./bitburner.multipliers.company_rep.md) |  | number | Multiplier to amount of reputation gained when working |\n|  [crime\\_money](./bitburner.multipliers.crime_money.md) |  | number | Multiplier to amount of money gained from crimes |\n|  [crime\\_success](./bitburner.multipliers.crime_success.md) |  | number | Multiplier to crime success rate |\n|  [defense\\_exp](./bitburner.multipliers.defense_exp.md) |  | number | Multiplier to defense experience gain rate |\n|  [defense](./bitburner.multipliers.defense.md) |  | number | Multiplier to defense skill |\n|  [dexterity\\_exp](./bitburner.multipliers.dexterity_exp.md) |  | number | Multiplier to dexterity experience gain rate |\n|  [dexterity](./bitburner.multipliers.dexterity.md) |  | number | Multiplier to dexterity skill |\n|  [faction\\_rep](./bitburner.multipliers.faction_rep.md) |  | number | Multiplier to amount of reputation gained when working |\n|  [hacking\\_chance](./bitburner.multipliers.hacking_chance.md) |  | number | Multiplier to chance of successfully performing a hack |\n|  [hacking\\_exp](./bitburner.multipliers.hacking_exp.md) |  | number | Multiplier to hacking experience gain rate |\n|  [hacking\\_grow](./bitburner.multipliers.hacking_grow.md) |  | number | Multiplier to amount of money injected into servers using grow |\n|  [hacking\\_money](./bitburner.multipliers.hacking_money.md) |  | number | Multiplier to amount of money the player gains from hacking |\n|  [hacking\\_speed](./bitburner.multipliers.hacking_speed.md) |  | number | Multiplier to hacking speed |\n|  [hacking](./bitburner.multipliers.hacking.md) |  | number | Multiplier to hacking skill |\n|  [hacknet\\_node\\_core\\_cost](./bitburner.multipliers.hacknet_node_core_cost.md) |  | number | Multiplier to cost of core for a Hacknet Node |\n|  [hacknet\\_node\\_level\\_cost](./bitburner.multipliers.hacknet_node_level_cost.md) |  | number | Multiplier to cost of leveling up a Hacknet Node |\n|  [hacknet\\_node\\_money](./bitburner.multipliers.hacknet_node_money.md) |  | number | Multiplier to amount of money produced by Hacknet Nodes |\n|  [hacknet\\_node\\_purchase\\_cost](./bitburner.multipliers.hacknet_node_purchase_cost.md) |  | number | Multiplier to cost of purchasing a Hacknet Node |\n|  [hacknet\\_node\\_ram\\_cost](./bitburner.multipliers.hacknet_node_ram_cost.md) |  | number | Multiplier to cost of ram for a Hacknet Node |\n|  [strength\\_exp](./bitburner.multipliers.strength_exp.md) |  | number | Multiplier to strength experience gain rate |\n|  [strength](./bitburner.multipliers.strength.md) |  | number | Multiplier to strength skill |\n|  [work\\_money](./bitburner.multipliers.work_money.md) |  | number | Multiplier to amount of money gained from working |\n\n", "ns.multipliers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md)\n\n## Multipliers interface\n\n\n**Signature:**\n\n```typescript\ninterface Multipliers \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agility\\_exp](./bitburner.multipliers.agility_exp.md) |  | number | Multiplier to agility experience gain rate |\n|  [agility](./bitburner.multipliers.agility.md) |  | number | Multiplier to agility skill |\n|  [bladeburner\\_analysis](./bitburner.multipliers.bladeburner_analysis.md) |  | number | Multiplier to effectiveness in Bladeburner Field Analysis |\n|  [bladeburner\\_max\\_stamina](./bitburner.multipliers.bladeburner_max_stamina.md) |  | number | Multiplier to Bladeburner max stamina |\n|  [bladeburner\\_stamina\\_gain](./bitburner.multipliers.bladeburner_stamina_gain.md) |  | number | Multiplier to Bladeburner stamina gain rate |\n|  [bladeburner\\_success\\_chance](./bitburner.multipliers.bladeburner_success_chance.md) |  | number | Multiplier to success chance in Bladeburner contracts/operations |\n|  [charisma\\_exp](./bitburner.multipliers.charisma_exp.md) |  | number | Multiplier to charisma experience gain rate |\n|  [charisma](./bitburner.multipliers.charisma.md) |  | number | Multiplier to charisma skill |\n|  [company\\_rep](./bitburner.multipliers.company_rep.md) |  | number | Multiplier to amount of reputation gained when working |\n|  [crime\\_money](./bitburner.multipliers.crime_money.md) |  | number | Multiplier to amount of money gained from crimes |\n|  [crime\\_success](./bitburner.multipliers.crime_success.md) |  | number | Multiplier to crime success rate |\n|  [defense\\_exp](./bitburner.multipliers.defense_exp.md) |  | number | Multiplier to defense experience gain rate |\n|  [defense](./bitburner.multipliers.defense.md) |  | number | Multiplier to defense skill |\n|  [dexterity\\_exp](./bitburner.multipliers.dexterity_exp.md) |  | number | Multiplier to dexterity experience gain rate |\n|  [dexterity](./bitburner.multipliers.dexterity.md) |  | number | Multiplier to dexterity skill |\n|  [faction\\_rep](./bitburner.multipliers.faction_rep.md) |  | number | Multiplier to amount of reputation gained when working |\n|  [hacking\\_chance](./bitburner.multipliers.hacking_chance.md) |  | number | Multiplier to chance of successfully performing a hack |\n|  [hacking\\_exp](./bitburner.multipliers.hacking_exp.md) |  | number | Multiplier to hacking experience gain rate |\n|  [hacking\\_grow](./bitburner.multipliers.hacking_grow.md) |  | number | Multiplier to amount of money injected into servers using grow |\n|  [hacking\\_money](./bitburner.multipliers.hacking_money.md) |  | number | Multiplier to amount of money the player gains from hacking |\n|  [hacking\\_speed](./bitburner.multipliers.hacking_speed.md) |  | number | Multiplier to hacking speed |\n|  [hacking](./bitburner.multipliers.hacking.md) |  | number | Multiplier to hacking skill |\n|  [hacknet\\_node\\_core\\_cost](./bitburner.multipliers.hacknet_node_core_cost.md) |  | number | Multiplier to cost of core for a Hacknet Node |\n|  [hacknet\\_node\\_level\\_cost](./bitburner.multipliers.hacknet_node_level_cost.md) |  | number | Multiplier to cost of leveling up a Hacknet Node |\n|  [hacknet\\_node\\_money](./bitburner.multipliers.hacknet_node_money.md) |  | number | Multiplier to amount of money produced by Hacknet Nodes |\n|  [hacknet\\_node\\_purchase\\_cost](./bitburner.multipliers.hacknet_node_purchase_cost.md) |  | number | Multiplier to cost of purchasing a Hacknet Node |\n|  [hacknet\\_node\\_ram\\_cost](./bitburner.multipliers.hacknet_node_ram_cost.md) |  | number | Multiplier to cost of ram for a Hacknet Node |\n|  [strength\\_exp](./bitburner.multipliers.strength_exp.md) |  | number | Multiplier to strength experience gain rate |\n|  [strength](./bitburner.multipliers.strength.md) |  | number | Multiplier to strength skill |\n|  [work\\_money](./bitburner.multipliers.work_money.md) |  | number | Multiplier to amount of money gained from working |\n\n", "bitburner.multipliers.hacking_grow.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_grow](./bitburner.multipliers.hacking_grow.md)\n\n## Multipliers.hacking\\_grow property\n\nMultiplier to amount of money injected into servers using grow\n\n**Signature:**\n\n```typescript\nhacking_grow: number;\n```\n", "ns.multipliers.hacking_grow.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_grow](./bitburner.multipliers.hacking_grow.md)\n\n## Multipliers.hacking\\_grow property\n\nMultiplier to amount of money injected into servers using grow\n\n**Signature:**\n\n```typescript\nhacking_grow: number;\n```\n", "bitburner.hacknetnodesformulas.coreupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [coreUpgradeCost](./bitburner.hacknetnodesformulas.coreupgradecost.md)\n\n## HacknetNodesFormulas.coreUpgradeCost() method\n\nCalculate cost of upgrading hacknet node cores.\n\n**Signature:**\n\n```typescript\ncoreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingCore | number | starting cores |\n|  extraCores | number | _(Optional)_ amount of cores to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetnodesformulas.coreupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [coreUpgradeCost](./bitburner.hacknetnodesformulas.coreupgradecost.md)\n\n## HacknetNodesFormulas.coreUpgradeCost() method\n\nCalculate cost of upgrading hacknet node cores.\n\n**Signature:**\n\n```typescript\ncoreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingCore | number | starting cores |\n|  extraCores | number | _(Optional)_ amount of cores to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.gangtaskstats.agiweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [agiWeight](./bitburner.gangtaskstats.agiweight.md)\n\n## GangTaskStats.agiWeight property\n\nAgility skill impact on task scaling\n\n**Signature:**\n\n```typescript\nagiWeight: number;\n```\n", "ns.gangtaskstats.agiweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [agiWeight](./bitburner.gangtaskstats.agiweight.md)\n\n## GangTaskStats.agiWeight property\n\nAgility skill impact on task scaling\n\n**Signature:**\n\n```typescript\nagiWeight: number;\n```\n", "bitburner.corpproductdata.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [name](./bitburner.corpproductdata.name.md)\n\n## CorpProductData.name property\n\nName of the product\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.corpproductdata.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [name](./bitburner.corpproductdata.name.md)\n\n## CorpProductData.name property\n\nName of the product\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.nodestats.ram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [ram](./bitburner.nodestats.ram.md)\n\n## NodeStats.ram property\n\nNode's RAM (GB)\n\n**Signature:**\n\n```typescript\nram: number;\n```\n", "ns.nodestats.ram.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md) &gt; [ram](./bitburner.nodestats.ram.md)\n\n## NodeStats.ram property\n\nNode's RAM (GB)\n\n**Signature:**\n\n```typescript\nram: number;\n```\n", "bitburner.infiltrationlocation.reward.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md) &gt; [reward](./bitburner.infiltrationlocation.reward.md)\n\n## InfiltrationLocation.reward property\n\n**Signature:**\n\n```typescript\nreward: InfiltrationReward;\n```\n", "ns.infiltrationlocation.reward.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationLocation](./bitburner.infiltrationlocation.md) &gt; [reward](./bitburner.infiltrationlocation.reward.md)\n\n## InfiltrationLocation.reward property\n\n**Signature:**\n\n```typescript\nreward: InfiltrationReward;\n```\n", "bitburner.gangmemberascension.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md)\n\n## GangMemberAscension interface\n\n\n**Signature:**\n\n```typescript\ninterface GangMemberAscension \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agi](./bitburner.gangmemberascension.agi.md) |  | number | Agility multiplier gained from ascending |\n|  [cha](./bitburner.gangmemberascension.cha.md) |  | number | Charisma multiplier gained from ascending |\n|  [def](./bitburner.gangmemberascension.def.md) |  | number | Defense multiplier gained from ascending |\n|  [dex](./bitburner.gangmemberascension.dex.md) |  | number | Dexterity multiplier gained from ascending |\n|  [hack](./bitburner.gangmemberascension.hack.md) |  | number | Hacking multiplier gained from ascending |\n|  [respect](./bitburner.gangmemberascension.respect.md) |  | number | Amount of respect lost from ascending |\n|  [str](./bitburner.gangmemberascension.str.md) |  | number | Strength multiplier gained from ascending |\n\n", "ns.gangmemberascension.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md)\n\n## GangMemberAscension interface\n\n\n**Signature:**\n\n```typescript\ninterface GangMemberAscension \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agi](./bitburner.gangmemberascension.agi.md) |  | number | Agility multiplier gained from ascending |\n|  [cha](./bitburner.gangmemberascension.cha.md) |  | number | Charisma multiplier gained from ascending |\n|  [def](./bitburner.gangmemberascension.def.md) |  | number | Defense multiplier gained from ascending |\n|  [dex](./bitburner.gangmemberascension.dex.md) |  | number | Dexterity multiplier gained from ascending |\n|  [hack](./bitburner.gangmemberascension.hack.md) |  | number | Hacking multiplier gained from ascending |\n|  [respect](./bitburner.gangmemberascension.respect.md) |  | number | Amount of respect lost from ascending |\n|  [str](./bitburner.gangmemberascension.str.md) |  | number | Strength multiplier gained from ascending |\n\n", "bitburner.server.isconnectedto.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [isConnectedTo](./bitburner.server.isconnectedto.md)\n\n## Server.isConnectedTo property\n\nFlag indicating whether player is currently connected to this server\n\n**Signature:**\n\n```typescript\nisConnectedTo: boolean;\n```\n", "ns.server.isconnectedto.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [isConnectedTo](./bitburner.server.isconnectedto.md)\n\n## Server.isConnectedTo property\n\nFlag indicating whether player is currently connected to this server\n\n**Signature:**\n\n```typescript\nisConnectedTo: boolean;\n```\n", "bitburner.product.properties.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [properties](./bitburner.product.properties.md)\n\n## Product.properties property\n\nProduct Properties. The data is {<!-- -->qlt, per, dur, rel, aes, fea<!-- -->}\n\n**Signature:**\n\n```typescript\nproperties: { [key: string]: number };\n```\n", "ns.product.properties.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [properties](./bitburner.product.properties.md)\n\n## Product.properties property\n\nProduct Properties. The data is {<!-- -->qlt, per, dur, rel, aes, fea<!-- -->}\n\n**Signature:**\n\n```typescript\nproperties: { [key: string]: number };\n```\n", "bitburner.gangtaskstats.defweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [defWeight](./bitburner.gangtaskstats.defweight.md)\n\n## GangTaskStats.defWeight property\n\nDefense skill impact on task scaling\n\n**Signature:**\n\n```typescript\ndefWeight: number;\n```\n", "ns.gangtaskstats.defweight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [defWeight](./bitburner.gangtaskstats.defweight.md)\n\n## GangTaskStats.defWeight property\n\nDefense skill impact on task scaling\n\n**Signature:**\n\n```typescript\ndefWeight: number;\n```\n", "bitburner.reputationformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md)\n\n## ReputationFormulas interface\n\nReputation formulas\n\n**Signature:**\n\n```typescript\ninterface ReputationFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [calculateFavorToRep(favor)](./bitburner.reputationformulas.calculatefavortorep.md) | Calculate the total required amount of faction reputation to reach a target favor. |\n|  [calculateRepToFavor(rep)](./bitburner.reputationformulas.calculatereptofavor.md) | Calculate the resulting faction favor of a total amount of reputation. (Faction favor is gained whenever you install an Augmentation.) |\n|  [repFromDonation(amount, player)](./bitburner.reputationformulas.repfromdonation.md) | Calculate how much rep would be gained. |\n\n", "ns.reputationformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ReputationFormulas](./bitburner.reputationformulas.md)\n\n## ReputationFormulas interface\n\nReputation formulas\n\n**Signature:**\n\n```typescript\ninterface ReputationFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [calculateFavorToRep(favor)](./bitburner.reputationformulas.calculatefavortorep.md) | Calculate the total required amount of faction reputation to reach a target favor. |\n|  [calculateRepToFavor(rep)](./bitburner.reputationformulas.calculatereptofavor.md) | Calculate the resulting faction favor of a total amount of reputation. (Faction favor is gained whenever you install an Augmentation.) |\n|  [repFromDonation(amount, player)](./bitburner.reputationformulas.repfromdonation.md) | Calculate how much rep would be gained. |\n\n", "bitburner.gangmemberinfo.hack_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_exp](./bitburner.gangmemberinfo.hack_exp.md)\n\n## GangMemberInfo.hack\\_exp property\n\nCurrent hack experience\n\n**Signature:**\n\n```typescript\nhack_exp: number;\n```\n", "ns.gangmemberinfo.hack_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_exp](./bitburner.gangmemberinfo.hack_exp.md)\n\n## GangMemberInfo.hack\\_exp property\n\nCurrent hack experience\n\n**Signature:**\n\n```typescript\nhack_exp: number;\n```\n", "bitburner.warehouse.level.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [level](./bitburner.warehouse.level.md)\n\n## Warehouse.level property\n\nAmount of size upgrade bought\n\n**Signature:**\n\n```typescript\nlevel: number;\n```\n", "ns.warehouse.level.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [level](./bitburner.warehouse.level.md)\n\n## Warehouse.level property\n\nAmount of size upgrade bought\n\n**Signature:**\n\n```typescript\nlevel: number;\n```\n", "bitburner.stockorderobject.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md)\n\n## StockOrderObject interface\n\nValue in map of [StockOrder](./bitburner.stockorder.md)\n\n**Signature:**\n\n```typescript\ninterface StockOrderObject \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [position](./bitburner.stockorderobject.position.md) |  | [PositionTypes](./bitburner.positiontypes.md) | Order position |\n|  [price](./bitburner.stockorderobject.price.md) |  | number | Price per share |\n|  [shares](./bitburner.stockorderobject.shares.md) |  | number | Number of shares |\n|  [type](./bitburner.stockorderobject.type.md) |  | [OrderTypes](./bitburner.ordertypes.md) | Order type |\n\n", "ns.stockorderobject.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md)\n\n## StockOrderObject interface\n\nValue in map of [StockOrder](./bitburner.stockorder.md)\n\n**Signature:**\n\n```typescript\ninterface StockOrderObject \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [position](./bitburner.stockorderobject.position.md) |  | [PositionTypes](./bitburner.positiontypes.md) | Order position |\n|  [price](./bitburner.stockorderobject.price.md) |  | number | Price per share |\n|  [shares](./bitburner.stockorderobject.shares.md) |  | number | Number of shares |\n|  [type](./bitburner.stockorderobject.type.md) |  | [OrderTypes](./bitburner.ordertypes.md) | Order type |\n\n", "bitburner.istylesettings.lineheight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IStyleSettings](./bitburner.istylesettings.md) &gt; [lineHeight](./bitburner.istylesettings.lineheight.md)\n\n## IStyleSettings.lineHeight property\n\n**Signature:**\n\n```typescript\nlineHeight: number;\n```\n", "ns.istylesettings.lineheight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IStyleSettings](./bitburner.istylesettings.md) &gt; [lineHeight](./bitburner.istylesettings.lineheight.md)\n\n## IStyleSettings.lineHeight property\n\n**Signature:**\n\n```typescript\nlineHeight: number;\n```\n", "bitburner.officeapi.upgradeofficesize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [upgradeOfficeSize](./bitburner.officeapi.upgradeofficesize.md)\n\n## OfficeAPI.upgradeOfficeSize() method\n\nUpgrade office size.\n\n**Signature:**\n\n```typescript\nupgradeOfficeSize(divisionName: string, city: CityName | `${CityName}`, size: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  size | number | Amount of positions to open |\n\n**Returns:**\n\nvoid\n\n", "ns.officeapi.upgradeofficesize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [upgradeOfficeSize](./bitburner.officeapi.upgradeofficesize.md)\n\n## OfficeAPI.upgradeOfficeSize() method\n\nUpgrade office size.\n\n**Signature:**\n\n```typescript\nupgradeOfficeSize(divisionName: string, city: CityName | `${CityName}`, size: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  size | number | Amount of positions to open |\n\n**Returns:**\n\nvoid\n\n", "bitburner.userinterface.setstyles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [setStyles](./bitburner.userinterface.setstyles.md)\n\n## UserInterface.setStyles() method\n\nSets the current styles\n\n**Signature:**\n\n```typescript\nsetStyles(newStyles: IStyleSettings): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  newStyles | [IStyleSettings](./bitburner.istylesettings.md) |  |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n## Example\n\nUsage example (NS2)\n\n```ts\nconst styles = ns.ui.getStyles();\nstyles.fontFamily = 'Comic Sans Ms';\nns.ui.setStyles(styles);\n```\n\n", "ns.userinterface.setstyles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [setStyles](./bitburner.userinterface.setstyles.md)\n\n## UserInterface.setStyles() method\n\nSets the current styles\n\n**Signature:**\n\n```typescript\nsetStyles(newStyles: IStyleSettings): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  newStyles | [IStyleSettings](./bitburner.istylesettings.md) |  |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n## Example\n\nUsage example (NS2)\n\n```ts\nconst styles = ns.ui.getStyles();\nstyles.fontFamily = 'Comic Sans Ms';\nns.ui.setStyles(styles);\n```\n\n", "bitburner.bitnodemultipliers.crimemoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CrimeMoney](./bitburner.bitnodemultipliers.crimemoney.md)\n\n## BitNodeMultipliers.CrimeMoney property\n\nInfluences the base money gained when the player commits a crime.\n\n**Signature:**\n\n```typescript\nCrimeMoney: number;\n```\n", "ns.bitnodemultipliers.crimemoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CrimeMoney](./bitburner.bitnodemultipliers.crimemoney.md)\n\n## BitNodeMultipliers.CrimeMoney property\n\nInfluences the base money gained when the player commits a crime.\n\n**Signature:**\n\n```typescript\nCrimeMoney: number;\n```\n", "bitburner.server.backdoorinstalled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [backdoorInstalled](./bitburner.server.backdoorinstalled.md)\n\n## Server.backdoorInstalled property\n\nFlag indicating whether this server has a backdoor installed by a player\n\n**Signature:**\n\n```typescript\nbackdoorInstalled: boolean;\n```\n", "ns.server.backdoorinstalled.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [backdoorInstalled](./bitburner.server.backdoorinstalled.md)\n\n## Server.backdoorInstalled property\n\nFlag indicating whether this server has a backdoor installed by a player\n\n**Signature:**\n\n```typescript\nbackdoorInstalled: boolean;\n```\n", "bitburner.gangmemberinfo.cha_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_mult](./bitburner.gangmemberinfo.cha_mult.md)\n\n## GangMemberInfo.cha\\_mult property\n\nCharisma multiplier from equipment\n\n**Signature:**\n\n```typescript\ncha_mult: number;\n```\n", "ns.gangmemberinfo.cha_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_mult](./bitburner.gangmemberinfo.cha_mult.md)\n\n## GangMemberInfo.cha\\_mult property\n\nCharisma multiplier from equipment\n\n**Signature:**\n\n```typescript\ncha_mult: number;\n```\n", "bitburner.ns.clear.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [clear](./bitburner.ns.clear.md)\n\n## NS.clear() method\n\nClear data from a file.\n\n**Signature:**\n\n```typescript\nclear(handle: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  handle | string | Text file to clear. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nDelete all data from that text file.\n\n", "ns.ns.clear.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [clear](./bitburner.ns.clear.md)\n\n## NS.clear() method\n\nClear data from a file.\n\n**Signature:**\n\n```typescript\nclear(handle: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  handle | string | Text file to clear. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nDelete all data from that text file.\n\n", "bitburner.ns.isrunning.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [isRunning](./bitburner.ns.isrunning.md)\n\n## NS.isRunning() method\n\nCheck if a script is running.\n\n**Signature:**\n\n```typescript\nisRunning(script: FilenameOrPID, host?: string, ...args: (string | number | boolean)[]): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | [FilenameOrPID](./bitburner.filenameorpid.md) | Filename or PID of script to check. This is case-sensitive. |\n|  host | string | _(Optional)_ Hostname of target server. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments to specify/identify which scripts to search for. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified script is running on the target server, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns a boolean indicating whether the specified script is running on the target server. If you use a PID instead of a filename, the hostname and args parameters are unnecessary. Remember that a script is uniquely identified by both its name and its arguments.\n\n## Example\n\n\n```js\n//The function call will return true if there is a script named foo.js with no arguments running on the foodnstuff server, and false otherwise:\nns.isRunning(\"foo.js\", \"foodnstuff\");\n\n//The function call will return true if there is a script named foo.js with no arguments running on the current server, and false otherwise:\nns.isRunning(\"foo.js\", ns.getHostname());\n\n//The function call will return true if there is a script named foo.js running with the arguments 1, 5, and \u201ctest\u201d (in that order) on the joesguns server, and false otherwise:\nns.isRunning(\"foo.js\", \"joesguns\", 1, 5, \"test\");\n```\n\n", "ns.ns.isrunning.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [isRunning](./bitburner.ns.isrunning.md)\n\n## NS.isRunning() method\n\nCheck if a script is running.\n\n**Signature:**\n\n```typescript\nisRunning(script: FilenameOrPID, host?: string, ...args: (string | number | boolean)[]): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | [FilenameOrPID](./bitburner.filenameorpid.md) | Filename or PID of script to check. This is case-sensitive. |\n|  host | string | _(Optional)_ Hostname of target server. |\n|  args | (string \\| number \\| boolean)\\[\\] | Arguments to specify/identify which scripts to search for. |\n\n**Returns:**\n\nboolean\n\nTrue if the specified script is running on the target server, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nReturns a boolean indicating whether the specified script is running on the target server. If you use a PID instead of a filename, the hostname and args parameters are unnecessary. Remember that a script is uniquely identified by both its name and its arguments.\n\n## Example\n\n\n```js\n//The function call will return true if there is a script named foo.js with no arguments running on the foodnstuff server, and false otherwise:\nns.isRunning(\"foo.js\", \"foodnstuff\");\n\n//The function call will return true if there is a script named foo.js with no arguments running on the current server, and false otherwise:\nns.isRunning(\"foo.js\", ns.getHostname());\n\n//The function call will return true if there is a script named foo.js running with the arguments 1, 5, and \u201ctest\u201d (in that order) on the joesguns server, and false otherwise:\nns.isRunning(\"foo.js\", \"joesguns\", 1, 5, \"test\");\n```\n\n", "bitburner.stanek.acceptgift.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [acceptGift](./bitburner.stanek.acceptgift.md)\n\n## Stanek.acceptGift() method\n\nAccept Stanek's Gift by joining the Church of the Machine God\n\n**Signature:**\n\n```typescript\nacceptGift(): boolean;\n```\n**Returns:**\n\nboolean\n\ntrue if the player is a member of the church and has the gift installed, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "ns.stanek.acceptgift.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [acceptGift](./bitburner.stanek.acceptgift.md)\n\n## Stanek.acceptGift() method\n\nAccept Stanek's Gift by joining the Church of the Machine God\n\n**Signature:**\n\n```typescript\nacceptGift(): boolean;\n```\n**Returns:**\n\nboolean\n\ntrue if the player is a member of the church and has the gift installed, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB\n\n", "bitburner.officeapi.hireadvert.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [hireAdVert](./bitburner.officeapi.hireadvert.md)\n\n## OfficeAPI.hireAdVert() method\n\nHire AdVert.\n\n**Signature:**\n\n```typescript\nhireAdVert(divisionName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n\n**Returns:**\n\nvoid\n\n", "ns.officeapi.hireadvert.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [hireAdVert](./bitburner.officeapi.hireadvert.md)\n\n## OfficeAPI.hireAdVert() method\n\nHire AdVert.\n\n**Signature:**\n\n```typescript\nhireAdVert(divisionName: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n\n**Returns:**\n\nvoid\n\n", "bitburner.singularity.getfactionrep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getFactionRep](./bitburner.singularity.getfactionrep.md)\n\n## Singularity.getFactionRep() method\n\nGet faction reputation.\n\n**Signature:**\n\n```typescript\ngetFactionRep(faction: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to work for. |\n\n**Returns:**\n\nnumber\n\nAmount of reputation you have for the specified faction.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function returns the amount of reputation you have for the specified faction.\n\n", "ns.singularity.getfactionrep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getFactionRep](./bitburner.singularity.getfactionrep.md)\n\n## Singularity.getFactionRep() method\n\nGet faction reputation.\n\n**Signature:**\n\n```typescript\ngetFactionRep(faction: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction to work for. |\n\n**Returns:**\n\nnumber\n\nAmount of reputation you have for the specified faction.\n\n## Remarks\n\nRAM cost: 1 GB \\* 16/4/1\n\nThis function returns the amount of reputation you have for the specified faction.\n\n", "bitburner.division.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md)\n\n## Division interface\n\nCorporation division\n\n**Signature:**\n\n```typescript\ninterface Division \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [awareness](./bitburner.division.awareness.md) |  | number | Awareness of the division |\n|  [cities](./bitburner.division.cities.md) |  | [CityName](./bitburner.cityname.md)<!-- -->\\[\\] | Cities in which this division has expanded |\n|  [lastCycleExpenses](./bitburner.division.lastcycleexpenses.md) |  | number | Expenses last cycle |\n|  [lastCycleRevenue](./bitburner.division.lastcyclerevenue.md) |  | number | Revenue last cycle |\n|  [makesProducts](./bitburner.division.makesproducts.md) |  | boolean | Whether the industry this division is in is capable of making products |\n|  [name](./bitburner.division.name.md) |  | string | Name of the division |\n|  [popularity](./bitburner.division.popularity.md) |  | number | Popularity of the division |\n|  [prodMult](./bitburner.division.prodmult.md) |  | number | Production multiplier |\n|  [products](./bitburner.division.products.md) |  | string\\[\\] | Products developed by this division |\n|  [research](./bitburner.division.research.md) |  | number | Amount of research in that division |\n|  [thisCycleExpenses](./bitburner.division.thiscycleexpenses.md) |  | number | Expenses this cycle |\n|  [thisCycleRevenue](./bitburner.division.thiscyclerevenue.md) |  | number | Revenue this cycle |\n|  [type](./bitburner.division.type.md) |  | [CorpIndustryName](./bitburner.corpindustryname.md) | Type of division, like Agriculture |\n|  [upgrades](./bitburner.division.upgrades.md) |  | number\\[\\] | All research bought |\n\n", "ns.division.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md)\n\n## Division interface\n\nCorporation division\n\n**Signature:**\n\n```typescript\ninterface Division \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [awareness](./bitburner.division.awareness.md) |  | number | Awareness of the division |\n|  [cities](./bitburner.division.cities.md) |  | [CityName](./bitburner.cityname.md)<!-- -->\\[\\] | Cities in which this division has expanded |\n|  [lastCycleExpenses](./bitburner.division.lastcycleexpenses.md) |  | number | Expenses last cycle |\n|  [lastCycleRevenue](./bitburner.division.lastcyclerevenue.md) |  | number | Revenue last cycle |\n|  [makesProducts](./bitburner.division.makesproducts.md) |  | boolean | Whether the industry this division is in is capable of making products |\n|  [name](./bitburner.division.name.md) |  | string | Name of the division |\n|  [popularity](./bitburner.division.popularity.md) |  | number | Popularity of the division |\n|  [prodMult](./bitburner.division.prodmult.md) |  | number | Production multiplier |\n|  [products](./bitburner.division.products.md) |  | string\\[\\] | Products developed by this division |\n|  [research](./bitburner.division.research.md) |  | number | Amount of research in that division |\n|  [thisCycleExpenses](./bitburner.division.thiscycleexpenses.md) |  | number | Expenses this cycle |\n|  [thisCycleRevenue](./bitburner.division.thiscyclerevenue.md) |  | number | Revenue this cycle |\n|  [type](./bitburner.division.type.md) |  | [CorpIndustryName](./bitburner.corpindustryname.md) | Type of division, like Agriculture |\n|  [upgrades](./bitburner.division.upgrades.md) |  | number\\[\\] | All research bought |\n\n", "bitburner.bitnodemultipliers.infiltrationmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [InfiltrationMoney](./bitburner.bitnodemultipliers.infiltrationmoney.md)\n\n## BitNodeMultipliers.InfiltrationMoney property\n\nInfluences how much money is gained when the player infiltrates a company.\n\n**Signature:**\n\n```typescript\nInfiltrationMoney: number;\n```\n", "ns.bitnodemultipliers.infiltrationmoney.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [InfiltrationMoney](./bitburner.bitnodemultipliers.infiltrationmoney.md)\n\n## BitNodeMultipliers.InfiltrationMoney property\n\nInfluences how much money is gained when the player infiltrates a company.\n\n**Signature:**\n\n```typescript\nInfiltrationMoney: number;\n```\n", "bitburner.bitnodemultipliers.classgymexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ClassGymExpGain](./bitburner.bitnodemultipliers.classgymexpgain.md)\n\n## BitNodeMultipliers.ClassGymExpGain property\n\nInfluences the experience gained for each ability when a player completes a class.\n\n**Signature:**\n\n```typescript\nClassGymExpGain: number;\n```\n", "ns.bitnodemultipliers.classgymexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [ClassGymExpGain](./bitburner.bitnodemultipliers.classgymexpgain.md)\n\n## BitNodeMultipliers.ClassGymExpGain property\n\nInfluences the experience gained for each ability when a player completes a class.\n\n**Signature:**\n\n```typescript\nClassGymExpGain: number;\n```\n", "bitburner.corpproductdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md)\n\n## CorpProductData interface\n\nProduct rating information\n\n**Signature:**\n\n```typescript\ninterface CorpProductData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [desc](./bitburner.corpproductdata.desc.md) |  | string | Description of product creation |\n|  [name](./bitburner.corpproductdata.name.md) |  | string | Name of the product |\n|  [ratingWeights](./bitburner.corpproductdata.ratingweights.md) |  | { aesthetics?: number; durability?: number; features?: number; quality?: number; performance?: number; reliability?: number; } | Weighting factors for product |\n|  [verb](./bitburner.corpproductdata.verb.md) |  | string | Verb used to describe creation of the product |\n\n", "ns.corpproductdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md)\n\n## CorpProductData interface\n\nProduct rating information\n\n**Signature:**\n\n```typescript\ninterface CorpProductData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [desc](./bitburner.corpproductdata.desc.md) |  | string | Description of product creation |\n|  [name](./bitburner.corpproductdata.name.md) |  | string | Name of the product |\n|  [ratingWeights](./bitburner.corpproductdata.ratingweights.md) |  | { aesthetics?: number; durability?: number; features?: number; quality?: number; performance?: number; reliability?: number; } | Weighting factors for product |\n|  [verb](./bitburner.corpproductdata.verb.md) |  | string | Verb used to describe creation of the product |\n\n", "bitburner.tix.has4sdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [has4SData](./bitburner.tix.has4sdata.md)\n\n## TIX.has4SData() method\n\nReturns true if the player has access to the 4S Data\n\n**Signature:**\n\n```typescript\nhas4SData(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.tix.has4sdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [has4SData](./bitburner.tix.has4sdata.md)\n\n## TIX.has4SData() method\n\nReturns true if the player has access to the 4S Data\n\n**Signature:**\n\n```typescript\nhas4SData(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.gangformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md)\n\n## GangFormulas interface\n\nGang formulas\n\n**Signature:**\n\n```typescript\ninterface GangFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [ascensionMultiplier(points)](./bitburner.gangformulas.ascensionmultiplier.md) | Calculate ascension mult. |\n|  [ascensionPointsGain(exp)](./bitburner.gangformulas.ascensionpointsgain.md) | Calculate ascension point gain. |\n|  [moneyGain(gang, member, task)](./bitburner.gangformulas.moneygain.md) | Calculate money gain per tick. |\n|  [respectGain(gang, member, task)](./bitburner.gangformulas.respectgain.md) | Calculate respect gain per tick. |\n|  [wantedLevelGain(gang, member, task)](./bitburner.gangformulas.wantedlevelgain.md) | Calculate wanted gain per tick. |\n|  [wantedPenalty(gang)](./bitburner.gangformulas.wantedpenalty.md) | Calculate the wanted penalty. |\n\n", "ns.gangformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangFormulas](./bitburner.gangformulas.md)\n\n## GangFormulas interface\n\nGang formulas\n\n**Signature:**\n\n```typescript\ninterface GangFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [ascensionMultiplier(points)](./bitburner.gangformulas.ascensionmultiplier.md) | Calculate ascension mult. |\n|  [ascensionPointsGain(exp)](./bitburner.gangformulas.ascensionpointsgain.md) | Calculate ascension point gain. |\n|  [moneyGain(gang, member, task)](./bitburner.gangformulas.moneygain.md) | Calculate money gain per tick. |\n|  [respectGain(gang, member, task)](./bitburner.gangformulas.respectgain.md) | Calculate respect gain per tick. |\n|  [wantedLevelGain(gang, member, task)](./bitburner.gangformulas.wantedlevelgain.md) | Calculate wanted gain per tick. |\n|  [wantedPenalty(gang)](./bitburner.gangformulas.wantedpenalty.md) | Calculate the wanted penalty. |\n\n", "bitburner.runningscript.threads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [threads](./bitburner.runningscript.threads.md)\n\n## RunningScript.threads property\n\nNumber of threads that this script runs with\n\n**Signature:**\n\n```typescript\nthreads: number;\n```\n", "ns.runningscript.threads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [threads](./bitburner.runningscript.threads.md)\n\n## RunningScript.threads property\n\nNumber of threads that this script runs with\n\n**Signature:**\n\n```typescript\nthreads: number;\n```\n", "bitburner.hacknetserversformulas.hashupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [hashUpgradeCost](./bitburner.hacknetserversformulas.hashupgradecost.md)\n\n## HacknetServersFormulas.hashUpgradeCost() method\n\nCalculate hash cost of an upgrade.\n\n**Signature:**\n\n```typescript\nhashUpgradeCost(upgName: number, level: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | number | name of the upgrade |\n|  level | number | level of the upgrade |\n\n**Returns:**\n\nnumber\n\nThe calculated hash cost.\n\n", "ns.hacknetserversformulas.hashupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [hashUpgradeCost](./bitburner.hacknetserversformulas.hashupgradecost.md)\n\n## HacknetServersFormulas.hashUpgradeCost() method\n\nCalculate hash cost of an upgrade.\n\n**Signature:**\n\n```typescript\nhashUpgradeCost(upgName: number, level: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | number | name of the upgrade |\n|  level | number | level of the upgrade |\n\n**Returns:**\n\nnumber\n\nThe calculated hash cost.\n\n", "bitburner.userinterfacetheme.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [money](./bitburner.userinterfacetheme.money.md)\n\n## UserInterfaceTheme.money property\n\n**Signature:**\n\n```typescript\nmoney: string;\n```\n", "ns.userinterfacetheme.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [money](./bitburner.userinterfacetheme.money.md)\n\n## UserInterfaceTheme.money property\n\n**Signature:**\n\n```typescript\nmoney: string;\n```\n", "bitburner.workformulas.factiongains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [factionGains](./bitburner.workformulas.factiongains.md)\n\n## WorkFormulas.factionGains() method\n\n**Signature:**\n\n```typescript\nfactionGains(person: Person, workType: FactionWorkType | `${FactionWorkType}`, favor: number): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  workType | [FactionWorkType](./bitburner.factionworktype.md) \\| \\`${[FactionWorkType](./bitburner.factionworktype.md)<!-- -->}\\` |  |\n|  favor | number |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by performing the specified faction work.\n\n", "ns.workformulas.factiongains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [factionGains](./bitburner.workformulas.factiongains.md)\n\n## WorkFormulas.factionGains() method\n\n**Signature:**\n\n```typescript\nfactionGains(person: Person, workType: FactionWorkType | `${FactionWorkType}`, favor: number): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  workType | [FactionWorkType](./bitburner.factionworktype.md) \\| \\`${[FactionWorkType](./bitburner.factionworktype.md)<!-- -->}\\` |  |\n|  favor | number |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by performing the specified faction work.\n\n", "bitburner.hacknet.gethashupgrades.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getHashUpgrades](./bitburner.hacknet.gethashupgrades.md)\n\n## Hacknet.getHashUpgrades() method\n\nGet the list of hash upgrades\n\n**Signature:**\n\n```typescript\ngetHashUpgrades(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nAn array containing the available upgrades\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the list of all available hash upgrades that can be used in the spendHashes function.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar upgrades = hacknet.getHashUpgrades(); // [\"Sell for Money\",\"Sell for Corporation Funds\",...]\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst upgrades = ns.hacknet.getHashUpgrades(); // [\"Sell for Money\",\"Sell for Corporation Funds\",...]\n```\n\n", "ns.hacknet.gethashupgrades.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getHashUpgrades](./bitburner.hacknet.gethashupgrades.md)\n\n## Hacknet.getHashUpgrades() method\n\nGet the list of hash upgrades\n\n**Signature:**\n\n```typescript\ngetHashUpgrades(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nAn array containing the available upgrades\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\nReturns the list of all available hash upgrades that can be used in the spendHashes function.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar upgrades = hacknet.getHashUpgrades(); // [\"Sell for Money\",\"Sell for Corporation Funds\",...]\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst upgrades = ns.hacknet.getHashUpgrades(); // [\"Sell for Money\",\"Sell for Corporation Funds\",...]\n```\n\n", "bitburner.corpmaterialconstantdata.demandbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [demandBase](./bitburner.corpmaterialconstantdata.demandbase.md)\n\n## CorpMaterialConstantData.demandBase property\n\n**Signature:**\n\n```typescript\ndemandBase: number;\n```\n", "ns.corpmaterialconstantdata.demandbase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [demandBase](./bitburner.corpmaterialconstantdata.demandbase.md)\n\n## CorpMaterialConstantData.demandBase property\n\n**Signature:**\n\n```typescript\ndemandBase: number;\n```\n", "bitburner.userinterfacetheme.secondarydark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [secondarydark](./bitburner.userinterfacetheme.secondarydark.md)\n\n## UserInterfaceTheme.secondarydark property\n\n**Signature:**\n\n```typescript\nsecondarydark: string;\n```\n", "ns.userinterfacetheme.secondarydark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [secondarydark](./bitburner.userinterfacetheme.secondarydark.md)\n\n## UserInterfaceTheme.secondarydark property\n\n**Signature:**\n\n```typescript\nsecondarydark: string;\n```\n", "bitburner.equipmentstats.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [cha](./bitburner.equipmentstats.cha.md)\n\n## EquipmentStats.cha property\n\nCharisma multiplier\n\n**Signature:**\n\n```typescript\ncha?: number;\n```\n", "ns.equipmentstats.cha.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [cha](./bitburner.equipmentstats.cha.md)\n\n## EquipmentStats.cha property\n\nCharisma multiplier\n\n**Signature:**\n\n```typescript\ncha?: number;\n```\n", "bitburner.equipmentstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md)\n\n## EquipmentStats interface\n\nObject representing data representing a gang member equipment.\n\n**Signature:**\n\n```typescript\ninterface EquipmentStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agi?](./bitburner.equipmentstats.agi.md) |  | number | _(Optional)_ Agility multiplier |\n|  [cha?](./bitburner.equipmentstats.cha.md) |  | number | _(Optional)_ Charisma multiplier |\n|  [def?](./bitburner.equipmentstats.def.md) |  | number | _(Optional)_ Defense multiplier |\n|  [dex?](./bitburner.equipmentstats.dex.md) |  | number | _(Optional)_ Dexterity multiplier |\n|  [hack?](./bitburner.equipmentstats.hack.md) |  | number | _(Optional)_ Hacking multiplier |\n|  [str?](./bitburner.equipmentstats.str.md) |  | number | _(Optional)_ Strength multiplier |\n\n", "ns.equipmentstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md)\n\n## EquipmentStats interface\n\nObject representing data representing a gang member equipment.\n\n**Signature:**\n\n```typescript\ninterface EquipmentStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agi?](./bitburner.equipmentstats.agi.md) |  | number | _(Optional)_ Agility multiplier |\n|  [cha?](./bitburner.equipmentstats.cha.md) |  | number | _(Optional)_ Charisma multiplier |\n|  [def?](./bitburner.equipmentstats.def.md) |  | number | _(Optional)_ Defense multiplier |\n|  [dex?](./bitburner.equipmentstats.dex.md) |  | number | _(Optional)_ Dexterity multiplier |\n|  [hack?](./bitburner.equipmentstats.hack.md) |  | number | _(Optional)_ Hacking multiplier |\n|  [str?](./bitburner.equipmentstats.str.md) |  | number | _(Optional)_ Strength multiplier |\n\n", "bitburner.cityname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CityName](./bitburner.cityname.md)\n\n## CityName enum\n\nNames of all cities\n\n**Signature:**\n\n```typescript\ndeclare enum CityName \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  Aevum | <code>&quot;Aevum&quot;</code> |  |\n|  Chongqing | <code>&quot;Chongqing&quot;</code> |  |\n|  Ishima | <code>&quot;Ishima&quot;</code> |  |\n|  NewTokyo | <code>&quot;New Tokyo&quot;</code> |  |\n|  Sector12 | <code>&quot;Sector-12&quot;</code> |  |\n|  Volhaven | <code>&quot;Volhaven&quot;</code> |  |\n\n", "ns.cityname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CityName](./bitburner.cityname.md)\n\n## CityName enum\n\nNames of all cities\n\n**Signature:**\n\n```typescript\ndeclare enum CityName \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  Aevum | <code>&quot;Aevum&quot;</code> |  |\n|  Chongqing | <code>&quot;Chongqing&quot;</code> |  |\n|  Ishima | <code>&quot;Ishima&quot;</code> |  |\n|  NewTokyo | <code>&quot;New Tokyo&quot;</code> |  |\n|  Sector12 | <code>&quot;Sector-12&quot;</code> |  |\n|  Volhaven | <code>&quot;Volhaven&quot;</code> |  |\n\n", "bitburner.bladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md)\n\n## Bladeburner interface\n\nBladeburner API\n\n**Signature:**\n\n```typescript\nexport interface Bladeburner \n```\n\n## Remarks\n\nYou have to be employed in the Bladeburner division and be in BitNode-7 or have Source-File 7 in order to use this API.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getActionAutolevel(type, name)](./bitburner.bladeburner.getactionautolevel.md) | Get whether an action is set to autolevel. |\n|  [getActionCountRemaining(type, name)](./bitburner.bladeburner.getactioncountremaining.md) | Get action count remaining. |\n|  [getActionCurrentLevel(type, name)](./bitburner.bladeburner.getactioncurrentlevel.md) | Get the current level of an action. |\n|  [getActionCurrentTime()](./bitburner.bladeburner.getactioncurrenttime.md) | Get the time elapsed on current action. |\n|  [getActionEstimatedSuccessChance(type, name)](./bitburner.bladeburner.getactionestimatedsuccesschance.md) | Get estimate success chance of an action. |\n|  [getActionMaxLevel(type, name)](./bitburner.bladeburner.getactionmaxlevel.md) | Get the maximum level of an action. |\n|  [getActionRepGain(type, name, level)](./bitburner.bladeburner.getactionrepgain.md) | Get the reputation gain of an action. |\n|  [getActionSuccesses(type, name)](./bitburner.bladeburner.getactionsuccesses.md) | Get action successes. |\n|  [getActionTime(type, name)](./bitburner.bladeburner.getactiontime.md) | Get the time to complete an action. |\n|  [getBlackOpNames()](./bitburner.bladeburner.getblackopnames.md) | List all black ops. |\n|  [getBlackOpRank(name)](./bitburner.bladeburner.getblackoprank.md) | Get black op required rank. |\n|  [getBonusTime()](./bitburner.bladeburner.getbonustime.md) | Get bladeburner bonus time. |\n|  [getCity()](./bitburner.bladeburner.getcity.md) | Get current city. |\n|  [getCityChaos(city)](./bitburner.bladeburner.getcitychaos.md) | Get chaos of a city. |\n|  [getCityCommunities(city)](./bitburner.bladeburner.getcitycommunities.md) | Get number of communities in a city. |\n|  [getCityEstimatedPopulation(city)](./bitburner.bladeburner.getcityestimatedpopulation.md) | Get estimated population in city. |\n|  [getContractNames()](./bitburner.bladeburner.getcontractnames.md) | List all contracts. |\n|  [getCurrentAction()](./bitburner.bladeburner.getcurrentaction.md) | Get current action. |\n|  [getGeneralActionNames()](./bitburner.bladeburner.getgeneralactionnames.md) | List all general actions. |\n|  [getOperationNames()](./bitburner.bladeburner.getoperationnames.md) | List all operations. |\n|  [getRank()](./bitburner.bladeburner.getrank.md) | Get player bladeburner rank. |\n|  [getSkillLevel(name)](./bitburner.bladeburner.getskilllevel.md) | Get skill level. |\n|  [getSkillNames()](./bitburner.bladeburner.getskillnames.md) | List all skills. |\n|  [getSkillPoints()](./bitburner.bladeburner.getskillpoints.md) | Get bladeburner skill points. |\n|  [getSkillUpgradeCost(name, count)](./bitburner.bladeburner.getskillupgradecost.md) | Get cost to upgrade skill. |\n|  [getStamina()](./bitburner.bladeburner.getstamina.md) | Get bladeburner stamina. |\n|  [getTeamSize(type, name)](./bitburner.bladeburner.getteamsize.md) | Get team size. |\n|  [inBladeburner()](./bitburner.bladeburner.inbladeburner.md) | Returns whether player is a member of bladeburner division. Does not require API access. |\n|  [joinBladeburnerDivision()](./bitburner.bladeburner.joinbladeburnerdivision.md) | Join the bladeburner division. |\n|  [joinBladeburnerFaction()](./bitburner.bladeburner.joinbladeburnerfaction.md) | Join the bladeburner faction. |\n|  [setActionAutolevel(type, name, autoLevel)](./bitburner.bladeburner.setactionautolevel.md) | Set an action autolevel. |\n|  [setActionLevel(type, name, level)](./bitburner.bladeburner.setactionlevel.md) | Set the level of an action. |\n|  [setTeamSize(type, name, size)](./bitburner.bladeburner.setteamsize.md) | Set team size. |\n|  [startAction(type, name)](./bitburner.bladeburner.startaction.md) | Start an action. |\n|  [stopBladeburnerAction()](./bitburner.bladeburner.stopbladeburneraction.md) | Stop current action. |\n|  [switchCity(city)](./bitburner.bladeburner.switchcity.md) | Travel to another city in bladeburner. |\n|  [upgradeSkill(name, count)](./bitburner.bladeburner.upgradeskill.md) | Upgrade skill. |\n\n", "ns.bladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md)\n\n## Bladeburner interface\n\nBladeburner API\n\n**Signature:**\n\n```typescript\nexport interface Bladeburner \n```\n\n## Remarks\n\nYou have to be employed in the Bladeburner division and be in BitNode-7 or have Source-File 7 in order to use this API.\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getActionAutolevel(type, name)](./bitburner.bladeburner.getactionautolevel.md) | Get whether an action is set to autolevel. |\n|  [getActionCountRemaining(type, name)](./bitburner.bladeburner.getactioncountremaining.md) | Get action count remaining. |\n|  [getActionCurrentLevel(type, name)](./bitburner.bladeburner.getactioncurrentlevel.md) | Get the current level of an action. |\n|  [getActionCurrentTime()](./bitburner.bladeburner.getactioncurrenttime.md) | Get the time elapsed on current action. |\n|  [getActionEstimatedSuccessChance(type, name)](./bitburner.bladeburner.getactionestimatedsuccesschance.md) | Get estimate success chance of an action. |\n|  [getActionMaxLevel(type, name)](./bitburner.bladeburner.getactionmaxlevel.md) | Get the maximum level of an action. |\n|  [getActionRepGain(type, name, level)](./bitburner.bladeburner.getactionrepgain.md) | Get the reputation gain of an action. |\n|  [getActionSuccesses(type, name)](./bitburner.bladeburner.getactionsuccesses.md) | Get action successes. |\n|  [getActionTime(type, name)](./bitburner.bladeburner.getactiontime.md) | Get the time to complete an action. |\n|  [getBlackOpNames()](./bitburner.bladeburner.getblackopnames.md) | List all black ops. |\n|  [getBlackOpRank(name)](./bitburner.bladeburner.getblackoprank.md) | Get black op required rank. |\n|  [getBonusTime()](./bitburner.bladeburner.getbonustime.md) | Get bladeburner bonus time. |\n|  [getCity()](./bitburner.bladeburner.getcity.md) | Get current city. |\n|  [getCityChaos(city)](./bitburner.bladeburner.getcitychaos.md) | Get chaos of a city. |\n|  [getCityCommunities(city)](./bitburner.bladeburner.getcitycommunities.md) | Get number of communities in a city. |\n|  [getCityEstimatedPopulation(city)](./bitburner.bladeburner.getcityestimatedpopulation.md) | Get estimated population in city. |\n|  [getContractNames()](./bitburner.bladeburner.getcontractnames.md) | List all contracts. |\n|  [getCurrentAction()](./bitburner.bladeburner.getcurrentaction.md) | Get current action. |\n|  [getGeneralActionNames()](./bitburner.bladeburner.getgeneralactionnames.md) | List all general actions. |\n|  [getOperationNames()](./bitburner.bladeburner.getoperationnames.md) | List all operations. |\n|  [getRank()](./bitburner.bladeburner.getrank.md) | Get player bladeburner rank. |\n|  [getSkillLevel(name)](./bitburner.bladeburner.getskilllevel.md) | Get skill level. |\n|  [getSkillNames()](./bitburner.bladeburner.getskillnames.md) | List all skills. |\n|  [getSkillPoints()](./bitburner.bladeburner.getskillpoints.md) | Get bladeburner skill points. |\n|  [getSkillUpgradeCost(name, count)](./bitburner.bladeburner.getskillupgradecost.md) | Get cost to upgrade skill. |\n|  [getStamina()](./bitburner.bladeburner.getstamina.md) | Get bladeburner stamina. |\n|  [getTeamSize(type, name)](./bitburner.bladeburner.getteamsize.md) | Get team size. |\n|  [inBladeburner()](./bitburner.bladeburner.inbladeburner.md) | Returns whether player is a member of bladeburner division. Does not require API access. |\n|  [joinBladeburnerDivision()](./bitburner.bladeburner.joinbladeburnerdivision.md) | Join the bladeburner division. |\n|  [joinBladeburnerFaction()](./bitburner.bladeburner.joinbladeburnerfaction.md) | Join the bladeburner faction. |\n|  [setActionAutolevel(type, name, autoLevel)](./bitburner.bladeburner.setactionautolevel.md) | Set an action autolevel. |\n|  [setActionLevel(type, name, level)](./bitburner.bladeburner.setactionlevel.md) | Set the level of an action. |\n|  [setTeamSize(type, name, size)](./bitburner.bladeburner.setteamsize.md) | Set team size. |\n|  [startAction(type, name)](./bitburner.bladeburner.startaction.md) | Start an action. |\n|  [stopBladeburnerAction()](./bitburner.bladeburner.stopbladeburneraction.md) | Stop current action. |\n|  [switchCity(city)](./bitburner.bladeburner.switchcity.md) | Travel to another city in bladeburner. |\n|  [upgradeSkill(name, count)](./bitburner.bladeburner.upgradeskill.md) | Upgrade skill. |\n\n", "bitburner.crimetype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeType](./bitburner.crimetype.md)\n\n## CrimeType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum CrimeType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  assassination | <code>&quot;Assassination&quot;</code> |  |\n|  bondForgery | <code>&quot;Bond Forgery&quot;</code> |  |\n|  dealDrugs | <code>&quot;Deal Drugs&quot;</code> |  |\n|  grandTheftAuto | <code>&quot;Grand Theft Auto&quot;</code> |  |\n|  heist | <code>&quot;Heist&quot;</code> |  |\n|  homicide | <code>&quot;Homicide&quot;</code> |  |\n|  kidnap | <code>&quot;Kidnap&quot;</code> |  |\n|  larceny | <code>&quot;Larceny&quot;</code> |  |\n|  mug | <code>&quot;Mug&quot;</code> |  |\n|  robStore | <code>&quot;Rob Store&quot;</code> |  |\n|  shoplift | <code>&quot;Shoplift&quot;</code> |  |\n|  traffickArms | <code>&quot;Traffick Arms&quot;</code> |  |\n\n", "ns.crimetype.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeType](./bitburner.crimetype.md)\n\n## CrimeType enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum CrimeType \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  assassination | <code>&quot;Assassination&quot;</code> |  |\n|  bondForgery | <code>&quot;Bond Forgery&quot;</code> |  |\n|  dealDrugs | <code>&quot;Deal Drugs&quot;</code> |  |\n|  grandTheftAuto | <code>&quot;Grand Theft Auto&quot;</code> |  |\n|  heist | <code>&quot;Heist&quot;</code> |  |\n|  homicide | <code>&quot;Homicide&quot;</code> |  |\n|  kidnap | <code>&quot;Kidnap&quot;</code> |  |\n|  larceny | <code>&quot;Larceny&quot;</code> |  |\n|  mug | <code>&quot;Mug&quot;</code> |  |\n|  robStore | <code>&quot;Rob Store&quot;</code> |  |\n|  shoplift | <code>&quot;Shoplift&quot;</code> |  |\n|  traffickArms | <code>&quot;Traffick Arms&quot;</code> |  |\n\n", "bitburner.hacknetnodeconstants.upgradelevelmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [UpgradeLevelMult](./bitburner.hacknetnodeconstants.upgradelevelmult.md)\n\n## HacknetNodeConstants.UpgradeLevelMult property\n\nMultiplier to increase node level\n\n**Signature:**\n\n```typescript\nUpgradeLevelMult: number;\n```\n", "ns.hacknetnodeconstants.upgradelevelmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [UpgradeLevelMult](./bitburner.hacknetnodeconstants.upgradelevelmult.md)\n\n## HacknetNodeConstants.UpgradeLevelMult property\n\nMultiplier to increase node level\n\n**Signature:**\n\n```typescript\nUpgradeLevelMult: number;\n```\n", "bitburner.tix.haswseaccount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [hasWSEAccount](./bitburner.tix.haswseaccount.md)\n\n## TIX.hasWSEAccount() method\n\nReturns true if the player has access to a WSE Account\n\n**Signature:**\n\n```typescript\nhasWSEAccount(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.tix.haswseaccount.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [hasWSEAccount](./bitburner.tix.haswseaccount.md)\n\n## TIX.hasWSEAccount() method\n\nReturns true if the player has access to a WSE Account\n\n**Signature:**\n\n```typescript\nhasWSEAccount(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.formulas.skills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [skills](./bitburner.formulas.skills.md)\n\n## Formulas.skills property\n\nSkills formulas\n\n**Signature:**\n\n```typescript\nskills: SkillsFormulas;\n```\n", "ns.formulas.skills.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [skills](./bitburner.formulas.skills.md)\n\n## Formulas.skills property\n\nSkills formulas\n\n**Signature:**\n\n```typescript\nskills: SkillsFormulas;\n```\n", "bitburner.tix.getorders.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getOrders](./bitburner.tix.getorders.md)\n\n## TIX.getOrders() method\n\nReturns your order book for the stock market.\n\n**Signature:**\n\n```typescript\ngetOrders(): StockOrder;\n```\n**Returns:**\n\n[StockOrder](./bitburner.stockorder.md)\n\nObject containing information for all the Limit and Stop Orders you have in the stock market.\n\n## Remarks\n\nRAM cost: 2.5 GB This is an object containing information for all the Limit and Stop Orders you have in the stock market. For each symbol you have a position in, the returned object will have a key with that symbol's name. The object's properties are each an array of [StockOrderObject](./bitburner.stockorderobject.md) The object has the following structure:\n\n```ts\n{\n string1: [ // Array of orders for this stock\n     {\n         shares: Order quantity\n         price: Order price\n         type: Order type\n         position: Either \"L\" or \"S\" for Long or Short position\n     },\n     {\n         ...\n     },\n     ...\n ],\n string2: [ // Array of orders for this stock\n     ...\n ],\n ...\n}\n```\nThe \u201cOrder type\u201d property can have one of the following four values: \"Limit Buy Order\", \"Limit Sell Order\", \"Stop Buy Order\", \"Stop Sell Order\". Note that the order book will only contain information for stocks that you actually have orders in.\n\n## Example\n\n\n```ts\n\"If you do not have orders in Nova Medical (NVMD), then the returned object will not have a \u201cNVMD\u201d property.\"\n{\n ECP: [\n     {\n         shares: 5,\n         price: 100,000\n         type: \"Stop Buy Order\",\n         position: \"S\",\n     },\n     {\n         shares: 25,\n         price: 125,000\n         type: \"Limit Sell Order\",\n         position: \"L\",\n     },\n ],\n SYSC: [\n     {\n         shares: 100,\n         price: 10,000\n         type: \"Limit Buy Order\",\n         position: \"L\",\n     },\n ],\n}\n```\n\n", "ns.tix.getorders.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getOrders](./bitburner.tix.getorders.md)\n\n## TIX.getOrders() method\n\nReturns your order book for the stock market.\n\n**Signature:**\n\n```typescript\ngetOrders(): StockOrder;\n```\n**Returns:**\n\n[StockOrder](./bitburner.stockorder.md)\n\nObject containing information for all the Limit and Stop Orders you have in the stock market.\n\n## Remarks\n\nRAM cost: 2.5 GB This is an object containing information for all the Limit and Stop Orders you have in the stock market. For each symbol you have a position in, the returned object will have a key with that symbol's name. The object's properties are each an array of [StockOrderObject](./bitburner.stockorderobject.md) The object has the following structure:\n\n```ts\n{\n string1: [ // Array of orders for this stock\n     {\n         shares: Order quantity\n         price: Order price\n         type: Order type\n         position: Either \"L\" or \"S\" for Long or Short position\n     },\n     {\n         ...\n     },\n     ...\n ],\n string2: [ // Array of orders for this stock\n     ...\n ],\n ...\n}\n```\nThe \u201cOrder type\u201d property can have one of the following four values: \"Limit Buy Order\", \"Limit Sell Order\", \"Stop Buy Order\", \"Stop Sell Order\". Note that the order book will only contain information for stocks that you actually have orders in.\n\n## Example\n\n\n```ts\n\"If you do not have orders in Nova Medical (NVMD), then the returned object will not have a \u201cNVMD\u201d property.\"\n{\n ECP: [\n     {\n         shares: 5,\n         price: 100,000\n         type: \"Stop Buy Order\",\n         position: \"S\",\n     },\n     {\n         shares: 25,\n         price: 125,000\n         type: \"Limit Sell Order\",\n         position: \"L\",\n     },\n ],\n SYSC: [\n     {\n         shares: 100,\n         price: 10,000\n         type: \"Limit Buy Order\",\n         position: \"L\",\n     },\n ],\n}\n```\n\n", "bitburner.multipliers.defense_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [defense\\_exp](./bitburner.multipliers.defense_exp.md)\n\n## Multipliers.defense\\_exp property\n\nMultiplier to defense experience gain rate\n\n**Signature:**\n\n```typescript\ndefense_exp: number;\n```\n", "ns.multipliers.defense_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [defense\\_exp](./bitburner.multipliers.defense_exp.md)\n\n## Multipliers.defense\\_exp property\n\nMultiplier to defense experience gain rate\n\n**Signature:**\n\n```typescript\ndefense_exp: number;\n```\n", "bitburner.ganggeninfo.territory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [territory](./bitburner.ganggeninfo.territory.md)\n\n## GangGenInfo.territory property\n\nAmount of territory held\n\n**Signature:**\n\n```typescript\nterritory: number;\n```\n", "ns.ganggeninfo.territory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [territory](./bitburner.ganggeninfo.territory.md)\n\n## GangGenInfo.territory property\n\nAmount of territory held\n\n**Signature:**\n\n```typescript\nterritory: number;\n```\n", "bitburner.activefragment.rotation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [rotation](./bitburner.activefragment.rotation.md)\n\n## ActiveFragment.rotation property\n\n**Signature:**\n\n```typescript\nrotation: number;\n```\n", "ns.activefragment.rotation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ActiveFragment](./bitburner.activefragment.md) &gt; [rotation](./bitburner.activefragment.rotation.md)\n\n## ActiveFragment.rotation property\n\n**Signature:**\n\n```typescript\nrotation: number;\n```\n", "bitburner.industrydata.makesmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [makesMaterials](./bitburner.industrydata.makesmaterials.md)\n\n## IndustryData.makesMaterials property\n\nWhether the division makes materials\n\n**Signature:**\n\n```typescript\nmakesMaterials: boolean;\n```\n", "ns.industrydata.makesmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md) &gt; [makesMaterials](./bitburner.industrydata.makesmaterials.md)\n\n## IndustryData.makesMaterials property\n\nWhether the division makes materials\n\n**Signature:**\n\n```typescript\nmakesMaterials: boolean;\n```\n", "bitburner.corpconstants.bribeamountperreputation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [bribeAmountPerReputation](./bitburner.corpconstants.bribeamountperreputation.md)\n\n## CorpConstants.bribeAmountPerReputation property\n\n**Signature:**\n\n```typescript\nbribeAmountPerReputation: number;\n```\n", "ns.corpconstants.bribeamountperreputation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [bribeAmountPerReputation](./bitburner.corpconstants.bribeamountperreputation.md)\n\n## CorpConstants.bribeAmountPerReputation property\n\n**Signature:**\n\n```typescript\nbribeAmountPerReputation: number;\n```\n", "bitburner.hp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HP](./bitburner.hp.md)\n\n## HP interface\n\n\n**Signature:**\n\n```typescript\ninterface HP \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [current](./bitburner.hp.current.md) |  | number |  |\n|  [max](./bitburner.hp.max.md) |  | number |  |\n\n", "ns.hp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HP](./bitburner.hp.md)\n\n## HP interface\n\n\n**Signature:**\n\n```typescript\ninterface HP \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [current](./bitburner.hp.current.md) |  | number |  |\n|  [max](./bitburner.hp.max.md) |  | number |  |\n\n", "bitburner.netscriptport.clear.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [clear](./bitburner.netscriptport.clear.md)\n\n## NetscriptPort.clear() method\n\nEmpties all data from the port.\n\n**Signature:**\n\n```typescript\nclear(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.netscriptport.clear.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [clear](./bitburner.netscriptport.clear.md)\n\n## NetscriptPort.clear() method\n\nEmpties all data from the port.\n\n**Signature:**\n\n```typescript\nclear(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bitnodemultipliers.reptodonatetofaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [RepToDonateToFaction](./bitburner.bitnodemultipliers.reptodonatetofaction.md)\n\n## BitNodeMultipliers.RepToDonateToFaction property\n\nInfluences the minimum favor the player must have with a faction before they can donate to gain rep.\n\n**Signature:**\n\n```typescript\nRepToDonateToFaction: number;\n```\n", "ns.bitnodemultipliers.reptodonatetofaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [RepToDonateToFaction](./bitburner.bitnodemultipliers.reptodonatetofaction.md)\n\n## BitNodeMultipliers.RepToDonateToFaction property\n\nInfluences the minimum favor the player must have with a faction before they can donate to gain rep.\n\n**Signature:**\n\n```typescript\nRepToDonateToFaction: number;\n```\n", "bitburner.runningscript.onlineexpgained.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [onlineExpGained](./bitburner.runningscript.onlineexpgained.md)\n\n## RunningScript.onlineExpGained property\n\nTotal amount of hacking experience earned from this script when online\n\n**Signature:**\n\n```typescript\nonlineExpGained: number;\n```\n", "ns.runningscript.onlineexpgained.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [onlineExpGained](./bitburner.runningscript.onlineexpgained.md)\n\n## RunningScript.onlineExpGained property\n\nTotal amount of hacking experience earned from this script when online\n\n**Signature:**\n\n```typescript\nonlineExpGained: number;\n```\n", "bitburner.server.mindifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [minDifficulty](./bitburner.server.mindifficulty.md)\n\n## Server.minDifficulty property\n\nMinimum server security level that this server can be weakened to\n\n**Signature:**\n\n```typescript\nminDifficulty: number;\n```\n", "ns.server.mindifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [minDifficulty](./bitburner.server.mindifficulty.md)\n\n## Server.minDifficulty property\n\nMinimum server security level that this server can be weakened to\n\n**Signature:**\n\n```typescript\nminDifficulty: number;\n```\n", "bitburner.hacknetserversformulas.hacknetservercost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [hacknetServerCost](./bitburner.hacknetserversformulas.hacknetservercost.md)\n\n## HacknetServersFormulas.hacknetServerCost() method\n\nCalculate the cost of a hacknet server.\n\n**Signature:**\n\n```typescript\nhacknetServerCost(n: number, mult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | number of the hacknet server |\n|  mult | number | _(Optional)_ player cost reduction (defaults to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetserversformulas.hacknetservercost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServersFormulas](./bitburner.hacknetserversformulas.md) &gt; [hacknetServerCost](./bitburner.hacknetserversformulas.hacknetservercost.md)\n\n## HacknetServersFormulas.hacknetServerCost() method\n\nCalculate the cost of a hacknet server.\n\n**Signature:**\n\n```typescript\nhacknetServerCost(n: number, mult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  n | number | number of the hacknet server |\n|  mult | number | _(Optional)_ player cost reduction (defaults to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.processinfo.threads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [threads](./bitburner.processinfo.threads.md)\n\n## ProcessInfo.threads property\n\nNumber of threads script is running with\n\n**Signature:**\n\n```typescript\nthreads: number;\n```\n", "ns.processinfo.threads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [ProcessInfo](./bitburner.processinfo.md) &gt; [threads](./bitburner.processinfo.threads.md)\n\n## ProcessInfo.threads property\n\nNumber of threads script is running with\n\n**Signature:**\n\n```typescript\nthreads: number;\n```\n", "bitburner.gangmemberascension.respect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [respect](./bitburner.gangmemberascension.respect.md)\n\n## GangMemberAscension.respect property\n\nAmount of respect lost from ascending\n\n**Signature:**\n\n```typescript\nrespect: number;\n```\n", "ns.gangmemberascension.respect.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [respect](./bitburner.gangmemberascension.respect.md)\n\n## GangMemberAscension.respect property\n\nAmount of respect lost from ascending\n\n**Signature:**\n\n```typescript\nrespect: number;\n```\n", "bitburner.multipliers.hacknet_node_level_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_level\\_cost](./bitburner.multipliers.hacknet_node_level_cost.md)\n\n## Multipliers.hacknet\\_node\\_level\\_cost property\n\nMultiplier to cost of leveling up a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_level_cost: number;\n```\n", "ns.multipliers.hacknet_node_level_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_level\\_cost](./bitburner.multipliers.hacknet_node_level_cost.md)\n\n## Multipliers.hacknet\\_node\\_level\\_cost property\n\nMultiplier to cost of leveling up a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_level_cost: number;\n```\n", "bitburner.sleeveinfiltratetask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveInfiltrateTask](./bitburner.sleeveinfiltratetask.md)\n\n## SleeveInfiltrateTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveInfiltrateTask = { type: \"INFILTRATE\"; cyclesWorked: number };\n```\n", "ns.sleeveinfiltratetask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveInfiltrateTask](./bitburner.sleeveinfiltratetask.md)\n\n## SleeveInfiltrateTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveInfiltrateTask = { type: \"INFILTRATE\"; cyclesWorked: number };\n```\n", "bitburner.gangmemberascension.def.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [def](./bitburner.gangmemberascension.def.md)\n\n## GangMemberAscension.def property\n\nDefense multiplier gained from ascending\n\n**Signature:**\n\n```typescript\ndef: number;\n```\n", "ns.gangmemberascension.def.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberAscension](./bitburner.gangmemberascension.md) &gt; [def](./bitburner.gangmemberascension.def.md)\n\n## GangMemberAscension.def property\n\nDefense multiplier gained from ascending\n\n**Signature:**\n\n```typescript\ndef: number;\n```\n", "bitburner.ns.killall.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [killall](./bitburner.ns.killall.md)\n\n## NS.killall() method\n\nTerminate all scripts on a server.\n\n**Signature:**\n\n```typescript\nkillall(host?: string, safetyguard?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ IP or hostname of the server on which to kill all scripts. |\n|  safetyguard | boolean | _(Optional)_ Skips the script that calls this function |\n\n**Returns:**\n\nboolean\n\nTrue if any scripts were killed, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nKills all running scripts on the specified server. This function returns true if any scripts were killed, and false otherwise. In other words, it will return true if there are any scripts running on the target server. If no host is defined, it will kill all scripts, where the script is running.\n\n", "ns.ns.killall.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [killall](./bitburner.ns.killall.md)\n\n## NS.killall() method\n\nTerminate all scripts on a server.\n\n**Signature:**\n\n```typescript\nkillall(host?: string, safetyguard?: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ IP or hostname of the server on which to kill all scripts. |\n|  safetyguard | boolean | _(Optional)_ Skips the script that calls this function |\n\n**Returns:**\n\nboolean\n\nTrue if any scripts were killed, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB\n\nKills all running scripts on the specified server. This function returns true if any scripts were killed, and false otherwise. In other words, it will return true if there are any scripts running on the target server. If no host is defined, it will kill all scripts, where the script is running.\n\n", "bitburner.multipliers.hacknet_node_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_money](./bitburner.multipliers.hacknet_node_money.md)\n\n## Multipliers.hacknet\\_node\\_money property\n\nMultiplier to amount of money produced by Hacknet Nodes\n\n**Signature:**\n\n```typescript\nhacknet_node_money: number;\n```\n", "ns.multipliers.hacknet_node_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_money](./bitburner.multipliers.hacknet_node_money.md)\n\n## Multipliers.hacknet\\_node\\_money property\n\nMultiplier to amount of money produced by Hacknet Nodes\n\n**Signature:**\n\n```typescript\nhacknet_node_money: number;\n```\n", "bitburner.office.avgmor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [avgMor](./bitburner.office.avgmor.md)\n\n## Office.avgMor property\n\nAverage morale of the employees\n\n**Signature:**\n\n```typescript\navgMor: number;\n```\n", "ns.office.avgmor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [avgMor](./bitburner.office.avgmor.md)\n\n## Office.avgMor property\n\nAverage morale of the employees\n\n**Signature:**\n\n```typescript\navgMor: number;\n```\n", "bitburner.player.entropy.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [entropy](./bitburner.player.entropy.md)\n\n## Player.entropy property\n\n**Signature:**\n\n```typescript\nentropy: number;\n```\n", "ns.player.entropy.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [entropy](./bitburner.player.entropy.md)\n\n## Player.entropy property\n\n**Signature:**\n\n```typescript\nentropy: number;\n```\n", "bitburner.server.organizationname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [organizationName](./bitburner.server.organizationname.md)\n\n## Server.organizationName property\n\nName of company/faction/etc. that this server belongs to. Optional, not applicable to all Servers\n\n**Signature:**\n\n```typescript\norganizationName: string;\n```\n", "ns.server.organizationname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [organizationName](./bitburner.server.organizationname.md)\n\n## Server.organizationName property\n\nName of company/faction/etc. that this server belongs to. Optional, not applicable to all Servers\n\n**Signature:**\n\n```typescript\norganizationName: string;\n```\n", "bitburner.skillsformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SkillsFormulas](./bitburner.skillsformulas.md)\n\n## SkillsFormulas interface\n\nSkills formulas\n\n**Signature:**\n\n```typescript\ninterface SkillsFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [calculateExp(skill, skillMult)](./bitburner.skillsformulas.calculateexp.md) | Calculate exp for skill level. |\n|  [calculateSkill(exp, skillMult)](./bitburner.skillsformulas.calculateskill.md) | Calculate skill level. |\n\n", "ns.skillsformulas.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SkillsFormulas](./bitburner.skillsformulas.md)\n\n## SkillsFormulas interface\n\nSkills formulas\n\n**Signature:**\n\n```typescript\ninterface SkillsFormulas \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [calculateExp(skill, skillMult)](./bitburner.skillsformulas.calculateexp.md) | Calculate exp for skill level. |\n|  [calculateSkill(exp, skillMult)](./bitburner.skillsformulas.calculateskill.md) | Calculate skill level. |\n\n", "bitburner.gang.getequipmentcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentCost](./bitburner.gang.getequipmentcost.md)\n\n## Gang.getEquipmentCost() method\n\nGet cost of equipment.\n\n**Signature:**\n\n```typescript\ngetEquipmentCost(equipName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  equipName | string | Name of equipment. |\n\n**Returns:**\n\nnumber\n\nCost to purchase the specified Equipment/Augmentation (number). Infinity for invalid arguments\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the amount of money it takes to purchase a piece of Equipment or an Augmentation. If an invalid Equipment/Augmentation is specified, this function will return Infinity.\n\n", "ns.gang.getequipmentcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getEquipmentCost](./bitburner.gang.getequipmentcost.md)\n\n## Gang.getEquipmentCost() method\n\nGet cost of equipment.\n\n**Signature:**\n\n```typescript\ngetEquipmentCost(equipName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  equipName | string | Name of equipment. |\n\n**Returns:**\n\nnumber\n\nCost to purchase the specified Equipment/Augmentation (number). Infinity for invalid arguments\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet the amount of money it takes to purchase a piece of Equipment or an Augmentation. If an invalid Equipment/Augmentation is specified, this function will return Infinity.\n\n", "bitburner.hacknetserverconstants.rambasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [RamBaseCost](./bitburner.hacknetserverconstants.rambasecost.md)\n\n## HacknetServerConstants.RamBaseCost property\n\nBase cost to increase RAM\n\n**Signature:**\n\n```typescript\nRamBaseCost: number;\n```\n", "ns.hacknetserverconstants.rambasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [RamBaseCost](./bitburner.hacknetserverconstants.rambasecost.md)\n\n## HacknetServerConstants.RamBaseCost property\n\nBase cost to increase RAM\n\n**Signature:**\n\n```typescript\nRamBaseCost: number;\n```\n", "bitburner.warehouseapi.setsmartsupply.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setSmartSupply](./bitburner.warehouseapi.setsmartsupply.md)\n\n## WarehouseAPI.setSmartSupply() method\n\nSet smart supply\n\n**Signature:**\n\n```typescript\nsetSmartSupply(divisionName: string, city: CityName | `${CityName}`, enabled: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  enabled | boolean | smart supply enabled |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.setsmartsupply.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setSmartSupply](./bitburner.warehouseapi.setsmartsupply.md)\n\n## WarehouseAPI.setSmartSupply() method\n\nSet smart supply\n\n**Signature:**\n\n```typescript\nsetSmartSupply(divisionName: string, city: CityName | `${CityName}`, enabled: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  enabled | boolean | smart supply enabled |\n\n**Returns:**\n\nvoid\n\n", "bitburner.singularity.isbusy.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [isBusy](./bitburner.singularity.isbusy.md)\n\n## Singularity.isBusy() method\n\nCheck if the player is busy.\n\n**Signature:**\n\n```typescript\nisBusy(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player is currently performing an \u2018action\u2019, false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\nReturns a boolean indicating whether or not the player is currently performing an \u2018action\u2019. These actions include working for a company/faction, studying at a university, working out at a gym, creating a program, committing a crime, or carrying out a Hacking Mission.\n\n", "ns.singularity.isbusy.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [isBusy](./bitburner.singularity.isbusy.md)\n\n## Singularity.isBusy() method\n\nCheck if the player is busy.\n\n**Signature:**\n\n```typescript\nisBusy(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if the player is currently performing an \u2018action\u2019, false otherwise.\n\n## Remarks\n\nRAM cost: 0.5 GB \\* 16/4/1\n\nReturns a boolean indicating whether or not the player is currently performing an \u2018action\u2019. These actions include working for a company/faction, studying at a university, working out at a gym, creating a program, committing a crime, or carrying out a Hacking Mission.\n\n", "bitburner.tix.getforecast.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getForecast](./bitburner.tix.getforecast.md)\n\n## TIX.getForecast() method\n\nReturns the probability that the specified stock\u2019s price will increase (as opposed to decrease) during the next tick.\n\n**Signature:**\n\n```typescript\ngetForecast(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nProbability that the specified stock\u2019s price will increase (as opposed to decrease) during the next tick.\n\n## Remarks\n\nRAM cost: 2.5 GB The probability is returned as a decimal value, NOT a percentage (e.g. if a stock has a 60% chance of increasing, then this function will return 0.6, NOT 60).\n\nIn other words, if this function returned 0.30 for a stock, then this means that the stock\u2019s price has a 30% chance of increasing and a 70% chance of decreasing during the next tick.\n\nIn order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\n\n", "ns.tix.getforecast.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getForecast](./bitburner.tix.getforecast.md)\n\n## TIX.getForecast() method\n\nReturns the probability that the specified stock\u2019s price will increase (as opposed to decrease) during the next tick.\n\n**Signature:**\n\n```typescript\ngetForecast(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nProbability that the specified stock\u2019s price will increase (as opposed to decrease) during the next tick.\n\n## Remarks\n\nRAM cost: 2.5 GB The probability is returned as a decimal value, NOT a percentage (e.g. if a stock has a 60% chance of increasing, then this function will return 0.6, NOT 60).\n\nIn other words, if this function returned 0.30 for a stock, then this means that the stock\u2019s price has a 30% chance of increasing and a 70% chance of decreasing during the next tick.\n\nIn order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\n\n", "bitburner.corpindustrydata.requiredmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [requiredMaterials](./bitburner.corpindustrydata.requiredmaterials.md)\n\n## CorpIndustryData.requiredMaterials property\n\n**Signature:**\n\n```typescript\nrequiredMaterials: Partial<Record<CorpMaterialName, number>>;\n```\n", "ns.corpindustrydata.requiredmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [requiredMaterials](./bitburner.corpindustrydata.requiredmaterials.md)\n\n## CorpIndustryData.requiredMaterials property\n\n**Signature:**\n\n```typescript\nrequiredMaterials: Partial<Record<CorpMaterialName, number>>;\n```\n", "bitburner.hacknetserverconstants.cachebasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [CacheBaseCost](./bitburner.hacknetserverconstants.cachebasecost.md)\n\n## HacknetServerConstants.CacheBaseCost property\n\nBase cost to upgrade cache\n\n**Signature:**\n\n```typescript\nCacheBaseCost: number;\n```\n", "ns.hacknetserverconstants.cachebasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [CacheBaseCost](./bitburner.hacknetserverconstants.cachebasecost.md)\n\n## HacknetServerConstants.CacheBaseCost property\n\nBase cost to upgrade cache\n\n**Signature:**\n\n```typescript\nCacheBaseCost: number;\n```\n", "bitburner.gang.setterritorywarfare.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [setTerritoryWarfare](./bitburner.gang.setterritorywarfare.md)\n\n## Gang.setTerritoryWarfare() method\n\nEnable/Disable territory warfare.\n\n**Signature:**\n\n```typescript\nsetTerritoryWarfare(engage: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  engage | boolean | Whether or not to engage in territory warfare. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nSet whether or not the gang should engage in territory warfare\n\n", "ns.gang.setterritorywarfare.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [setTerritoryWarfare](./bitburner.gang.setterritorywarfare.md)\n\n## Gang.setTerritoryWarfare() method\n\nEnable/Disable territory warfare.\n\n**Signature:**\n\n```typescript\nsetTerritoryWarfare(engage: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  engage | boolean | Whether or not to engage in territory warfare. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 2 GB\n\nSet whether or not the gang should engage in territory warfare\n\n", "bitburner.gang.getganginformation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getGangInformation](./bitburner.gang.getganginformation.md)\n\n## Gang.getGangInformation() method\n\nGet information about your gang.\n\n**Signature:**\n\n```typescript\ngetGangInformation(): GangGenInfo;\n```\n**Returns:**\n\n[GangGenInfo](./bitburner.ganggeninfo.md)\n\nObject containing general information about the gang.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet general information about the gang.\n\n", "ns.gang.getganginformation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getGangInformation](./bitburner.gang.getganginformation.md)\n\n## Gang.getGangInformation() method\n\nGet information about your gang.\n\n**Signature:**\n\n```typescript\ngetGangInformation(): GangGenInfo;\n```\n**Returns:**\n\n[GangGenInfo](./bitburner.ganggeninfo.md)\n\nObject containing general information about the gang.\n\n## Remarks\n\nRAM cost: 2 GB\n\nGet general information about the gang.\n\n", "bitburner.sleeve.settofactionwork.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToFactionWork](./bitburner.sleeve.settofactionwork.md)\n\n## Sleeve.setToFactionWork() method\n\nSet a sleeve to work for a faction.\n\n**Signature:**\n\n```typescript\nsetToFactionWork(\n    sleeveNumber: number,\n    factionName: string,\n    factionWorkType: FactionWorkType | `${FactionWorkType}`,\n  ): boolean | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to work for the faction. |\n|  factionName | string | Name of the faction to work for. |\n|  factionWorkType | [FactionWorkType](./bitburner.factionworktype.md) \\| \\`${[FactionWorkType](./bitburner.factionworktype.md)<!-- -->}\\` | Name of the action to perform for this faction. |\n\n**Returns:**\n\nboolean \\| undefined\n\nTrue if the sleeve started working on this faction, false otherwise, can also throw on errors\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working or this faction.\n\n", "ns.sleeve.settofactionwork.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToFactionWork](./bitburner.sleeve.settofactionwork.md)\n\n## Sleeve.setToFactionWork() method\n\nSet a sleeve to work for a faction.\n\n**Signature:**\n\n```typescript\nsetToFactionWork(\n    sleeveNumber: number,\n    factionName: string,\n    factionWorkType: FactionWorkType | `${FactionWorkType}`,\n  ): boolean | undefined;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to work for the faction. |\n|  factionName | string | Name of the faction to work for. |\n|  factionWorkType | [FactionWorkType](./bitburner.factionworktype.md) \\| \\`${[FactionWorkType](./bitburner.factionworktype.md)<!-- -->}\\` | Name of the action to perform for this faction. |\n\n**Returns:**\n\nboolean \\| undefined\n\nTrue if the sleeve started working on this faction, false otherwise, can also throw on errors\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working or this faction.\n\n", "bitburner.userinterface.clearterminal.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [clearTerminal](./bitburner.userinterface.clearterminal.md)\n\n## UserInterface.clearTerminal() method\n\nClear the Terminal window, as if the player ran `clear` in the terminal\n\n**Signature:**\n\n```typescript\nclearTerminal(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.2 GB\n\n", "ns.userinterface.clearterminal.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [clearTerminal](./bitburner.userinterface.clearterminal.md)\n\n## UserInterface.clearTerminal() method\n\nClear the Terminal window, as if the player ran `clear` in the terminal\n\n**Signature:**\n\n```typescript\nclearTerminal(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.2 GB\n\n", "bitburner.bladeburner.switchcity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [switchCity](./bitburner.bladeburner.switchcity.md)\n\n## Bladeburner.switchCity() method\n\nTravel to another city in bladeburner.\n\n**Signature:**\n\n```typescript\nswitchCity(city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nboolean\n\ntrue if successful, and false otherwise\n\n## Remarks\n\nRAM cost: 4 GB Attempts to switch to the specified city (for Bladeburner only).\n\nReturns true if successful, and false otherwise\n\n", "ns.bladeburner.switchcity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [switchCity](./bitburner.bladeburner.switchcity.md)\n\n## Bladeburner.switchCity() method\n\nTravel to another city in bladeburner.\n\n**Signature:**\n\n```typescript\nswitchCity(city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of city. Case-sensitive |\n\n**Returns:**\n\nboolean\n\ntrue if successful, and false otherwise\n\n## Remarks\n\nRAM cost: 4 GB Attempts to switch to the specified city (for Bladeburner only).\n\nReturns true if successful, and false otherwise\n\n", "bitburner.warehouseapi.setproductmarketta1.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setProductMarketTA1](./bitburner.warehouseapi.setproductmarketta1.md)\n\n## WarehouseAPI.setProductMarketTA1() method\n\nSet market TA 1 for a product.\n\n**Signature:**\n\n```typescript\nsetProductMarketTA1(divisionName: string, productName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.setproductmarketta1.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setProductMarketTA1](./bitburner.warehouseapi.setproductmarketta1.md)\n\n## WarehouseAPI.setProductMarketTA1() method\n\nSet market TA 1 for a product.\n\n**Signature:**\n\n```typescript\nsetProductMarketTA1(divisionName: string, productName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  productName | string | Name of the product |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "bitburner.industrydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md)\n\n## IndustryData interface\n\nCorporation industry information\n\n**Signature:**\n\n```typescript\ninterface IndustryData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cost](./bitburner.industrydata.cost.md) |  | number | Cost to expand to the division |\n|  [makesMaterials](./bitburner.industrydata.makesmaterials.md) |  | boolean | Whether the division makes materials |\n|  [makesProducts](./bitburner.industrydata.makesproducts.md) |  | boolean | Whether the division makes products |\n|  [producedMaterials?](./bitburner.industrydata.producedmaterials.md) |  | string\\[\\] | _(Optional)_ Materials produced |\n|  [productType?](./bitburner.industrydata.producttype.md) |  | string | _(Optional)_ Product type |\n|  [requiredMaterials](./bitburner.industrydata.requiredmaterials.md) |  | Record&lt;string, number&gt; | Materials required for production and their amounts |\n|  [type](./bitburner.industrydata.type.md) |  | [CorpIndustryName](./bitburner.corpindustryname.md) | Industry type |\n\n", "ns.industrydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [IndustryData](./bitburner.industrydata.md)\n\n## IndustryData interface\n\nCorporation industry information\n\n**Signature:**\n\n```typescript\ninterface IndustryData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cost](./bitburner.industrydata.cost.md) |  | number | Cost to expand to the division |\n|  [makesMaterials](./bitburner.industrydata.makesmaterials.md) |  | boolean | Whether the division makes materials |\n|  [makesProducts](./bitburner.industrydata.makesproducts.md) |  | boolean | Whether the division makes products |\n|  [producedMaterials?](./bitburner.industrydata.producedmaterials.md) |  | string\\[\\] | _(Optional)_ Materials produced |\n|  [productType?](./bitburner.industrydata.producttype.md) |  | string | _(Optional)_ Product type |\n|  [requiredMaterials](./bitburner.industrydata.requiredmaterials.md) |  | Record&lt;string, number&gt; | Materials required for production and their amounts |\n|  [type](./bitburner.industrydata.type.md) |  | [CorpIndustryName](./bitburner.corpindustryname.md) | Industry type |\n\n", "bitburner.hacknetnodeconstants.rambasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [RamBaseCost](./bitburner.hacknetnodeconstants.rambasecost.md)\n\n## HacknetNodeConstants.RamBaseCost property\n\nBase cost to increase RAM\n\n**Signature:**\n\n```typescript\nRamBaseCost: number;\n```\n", "ns.hacknetnodeconstants.rambasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [RamBaseCost](./bitburner.hacknetnodeconstants.rambasecost.md)\n\n## HacknetNodeConstants.RamBaseCost property\n\nBase cost to increase RAM\n\n**Signature:**\n\n```typescript\nRamBaseCost: number;\n```\n", "bitburner.ns.getweakentime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getWeakenTime](./bitburner.ns.getweakentime.md)\n\n## NS.getWeakenTime() method\n\nGet the execution time of a weaken() call.\n\n**Signature:**\n\n```typescript\ngetWeakenTime(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nReturns the amount of time in milliseconds it takes to execute the [weaken](./bitburner.ns.weaken.md) Netscript function.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nReturns the amount of time in milliseconds it takes to execute the [weaken](./bitburner.ns.weaken.md) Netscript function on the target server. The required time is increased by the security level of the target server and decreased by the player's hacking level.\n\n", "ns.ns.getweakentime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getWeakenTime](./bitburner.ns.getweakentime.md)\n\n## NS.getWeakenTime() method\n\nGet the execution time of a weaken() call.\n\n**Signature:**\n\n```typescript\ngetWeakenTime(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nReturns the amount of time in milliseconds it takes to execute the [weaken](./bitburner.ns.weaken.md) Netscript function.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nReturns the amount of time in milliseconds it takes to execute the [weaken](./bitburner.ns.weaken.md) Netscript function on the target server. The required time is increased by the security level of the target server and decreased by the player's hacking level.\n\n", "bitburner.ns.printf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [printf](./bitburner.ns.printf.md)\n\n## NS.printf() method\n\nPrints a formatted string to the script\u2019s logs.\n\n**Signature:**\n\n```typescript\nprintf(format: string, ...args: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | Format of the message. |\n|  args | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n- See [print](./bitburner.ns.print.md) for how to add color to your printed strings.\n\n- For more detail, see: https://github.com/alexei/sprintf.js\n\n## Example 1\n\n\n```ts\n// NS1\nvar name = \"Bit\";\nvar age = 4;\nprintf(\"My name is %s.\", name);\nprintf(\"I'm %d seconds old.\", age);\nprintf(\"My age in binary is %b.\", age);\nprintf(\"My age in scientific notation is %e.\", age);\nprintf(\"In %d seconds, I'll be %s.\", 6, \"Byte\");\nprintf(\"Am I a nibble? %t\", (4 == age));\ntail();\n```\n\n## Example 2\n\n\n```ts\n// NS2\nconst name = \"Bit\";\nconst age = 4;\nns.printf(\"My name is %s.\", name);\nns.printf(\"I'm %d seconds old.\", age);\nns.printf(\"My age in binary is %b.\", age);\nns.printf(\"My age in scientific notation is %e.\", age);\nns.printf(\"In %d seconds, I'll be %s.\", 6, \"Byte\");\nns.printf(\"Am I a nibble? %t\", (4 == age));\nns.tail();\n```\n\n", "ns.ns.printf.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [printf](./bitburner.ns.printf.md)\n\n## NS.printf() method\n\nPrints a formatted string to the script\u2019s logs.\n\n**Signature:**\n\n```typescript\nprintf(format: string, ...args: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  format | string | Format of the message. |\n|  args | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n- See [print](./bitburner.ns.print.md) for how to add color to your printed strings.\n\n- For more detail, see: https://github.com/alexei/sprintf.js\n\n## Example 1\n\n\n```ts\n// NS1\nvar name = \"Bit\";\nvar age = 4;\nprintf(\"My name is %s.\", name);\nprintf(\"I'm %d seconds old.\", age);\nprintf(\"My age in binary is %b.\", age);\nprintf(\"My age in scientific notation is %e.\", age);\nprintf(\"In %d seconds, I'll be %s.\", 6, \"Byte\");\nprintf(\"Am I a nibble? %t\", (4 == age));\ntail();\n```\n\n## Example 2\n\n\n```ts\n// NS2\nconst name = \"Bit\";\nconst age = 4;\nns.printf(\"My name is %s.\", name);\nns.printf(\"I'm %d seconds old.\", age);\nns.printf(\"My age in binary is %b.\", age);\nns.printf(\"My age in scientific notation is %e.\", age);\nns.printf(\"In %d seconds, I'll be %s.\", 6, \"Byte\");\nns.printf(\"Am I a nibble? %t\", (4 == age));\nns.tail();\n```\n\n", "bitburner.corporation.getupgradelevelcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getUpgradeLevelCost](./bitburner.corporation.getupgradelevelcost.md)\n\n## Corporation.getUpgradeLevelCost() method\n\nGets the cost to unlock the next level of a levelable upgrade\n\n**Signature:**\n\n```typescript\ngetUpgradeLevelCost(upgradeName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nnumber\n\ncost of the upgrade\n\n", "ns.corporation.getupgradelevelcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getUpgradeLevelCost](./bitburner.corporation.getupgradelevelcost.md)\n\n## Corporation.getUpgradeLevelCost() method\n\nGets the cost to unlock the next level of a levelable upgrade\n\n**Signature:**\n\n```typescript\ngetUpgradeLevelCost(upgradeName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nnumber\n\ncost of the upgrade\n\n", "bitburner.hacknetmultipliers.ramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [ramCost](./bitburner.hacknetmultipliers.ramcost.md)\n\n## HacknetMultipliers.ramCost property\n\nPlayer's hacknet ram cost multiplier\n\n**Signature:**\n\n```typescript\nramCost: number;\n```\n", "ns.hacknetmultipliers.ramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetMultipliers](./bitburner.hacknetmultipliers.md) &gt; [ramCost](./bitburner.hacknetmultipliers.ramcost.md)\n\n## HacknetMultipliers.ramCost property\n\nPlayer's hacknet ram cost multiplier\n\n**Signature:**\n\n```typescript\nramCost: number;\n```\n", "bitburner.person.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md)\n\n## Person interface\n\n\n**Signature:**\n\n```typescript\ninterface Person \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [city](./bitburner.person.city.md) |  | [CityName](./bitburner.cityname.md) |  |\n|  [exp](./bitburner.person.exp.md) |  | [Skills](./bitburner.skills.md) |  |\n|  [hp](./bitburner.person.hp.md) |  | [HP](./bitburner.hp.md) |  |\n|  [mults](./bitburner.person.mults.md) |  | [Multipliers](./bitburner.multipliers.md) |  |\n|  [skills](./bitburner.person.skills.md) |  | [Skills](./bitburner.skills.md) |  |\n\n", "ns.person.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Person](./bitburner.person.md)\n\n## Person interface\n\n\n**Signature:**\n\n```typescript\ninterface Person \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [city](./bitburner.person.city.md) |  | [CityName](./bitburner.cityname.md) |  |\n|  [exp](./bitburner.person.exp.md) |  | [Skills](./bitburner.skills.md) |  |\n|  [hp](./bitburner.person.hp.md) |  | [HP](./bitburner.hp.md) |  |\n|  [mults](./bitburner.person.mults.md) |  | [Multipliers](./bitburner.multipliers.md) |  |\n|  [skills](./bitburner.person.skills.md) |  | [Skills](./bitburner.skills.md) |  |\n\n", "bitburner.sleeveperson.memory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [memory](./bitburner.sleeveperson.memory.md)\n\n## SleevePerson.memory property\n\nNumber 1-100 initial Value of sync on BN start\n\n**Signature:**\n\n```typescript\nmemory: number;\n```\n", "ns.sleeveperson.memory.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [memory](./bitburner.sleeveperson.memory.md)\n\n## SleevePerson.memory property\n\nNumber 1-100 initial Value of sync on BN start\n\n**Signature:**\n\n```typescript\nmemory: number;\n```\n", "bitburner.bladeburner.getskillpoints.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillPoints](./bitburner.bladeburner.getskillpoints.md)\n\n## Bladeburner.getSkillPoints() method\n\nGet bladeburner skill points.\n\n**Signature:**\n\n```typescript\ngetSkillPoints(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of Bladeburner skill points you have.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of Bladeburner skill points you have.\n\n", "ns.bladeburner.getskillpoints.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillPoints](./bitburner.bladeburner.getskillpoints.md)\n\n## Bladeburner.getSkillPoints() method\n\nGet bladeburner skill points.\n\n**Signature:**\n\n```typescript\ngetSkillPoints(): number;\n```\n**Returns:**\n\nnumber\n\nNumber of Bladeburner skill points you have.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of Bladeburner skill points you have.\n\n", "bitburner.bladeburner.getactionsuccesses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionSuccesses](./bitburner.bladeburner.getactionsuccesses.md)\n\n## Bladeburner.getActionSuccesses() method\n\nGet action successes.\n\n**Signature:**\n\n```typescript\ngetActionSuccesses(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\na number with how many successes you have with action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a number with how many successes you have with action.\n\n", "ns.bladeburner.getactionsuccesses.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getActionSuccesses](./bitburner.bladeburner.getactionsuccesses.md)\n\n## Bladeburner.getActionSuccesses() method\n\nGet action successes.\n\n**Signature:**\n\n```typescript\ngetActionSuccesses(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\na number with how many successes you have with action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a number with how many successes you have with action.\n\n", "bitburner.ns.movetail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [moveTail](./bitburner.ns.movetail.md)\n\n## NS.moveTail() method\n\nMove a tail window.\n\n**Signature:**\n\n```typescript\nmoveTail(x: number, y: number, pid?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  x | number | x coordinate. |\n|  y | number | y coordinate. |\n|  pid | number | _(Optional)_ Optional. PID of the script having its tail moved. If omitted, the current script is used. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nMoves a tail window. Coordinates are in screenspace pixels (top left is 0,0).\n\n", "ns.ns.movetail.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [moveTail](./bitburner.ns.movetail.md)\n\n## NS.moveTail() method\n\nMove a tail window.\n\n**Signature:**\n\n```typescript\nmoveTail(x: number, y: number, pid?: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  x | number | x coordinate. |\n|  y | number | y coordinate. |\n|  pid | number | _(Optional)_ Optional. PID of the script having its tail moved. If omitted, the current script is used. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nMoves a tail window. Coordinates are in screenspace pixels (top left is 0,0).\n\n", "bitburner.bladeburnercuraction.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BladeburnerCurAction](./bitburner.bladeburnercuraction.md) &gt; [name](./bitburner.bladeburnercuraction.name.md)\n\n## BladeburnerCurAction.name property\n\nName of Action\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.bladeburnercuraction.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BladeburnerCurAction](./bitburner.bladeburnercuraction.md) &gt; [name](./bitburner.bladeburnercuraction.name.md)\n\n## BladeburnerCurAction.name property\n\nName of Action\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.grafting.getaugmentationgrafttime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [getAugmentationGraftTime](./bitburner.grafting.getaugmentationgrafttime.md)\n\n## Grafting.getAugmentationGraftTime() method\n\nRetrieves the time required to graft an aug.\n\n**Signature:**\n\n```typescript\ngetAugmentationGraftTime(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of the aug to check the grafting time of. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nThe time required, in millis, to graft the named augmentation.\n\n## Exceptions\n\nWill error if an invalid Augmentation name is provided.\n\n## Remarks\n\nRAM cost: 3.75 GB\n\n", "ns.grafting.getaugmentationgrafttime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Grafting](./bitburner.grafting.md) &gt; [getAugmentationGraftTime](./bitburner.grafting.getaugmentationgrafttime.md)\n\n## Grafting.getAugmentationGraftTime() method\n\nRetrieves the time required to graft an aug.\n\n**Signature:**\n\n```typescript\ngetAugmentationGraftTime(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of the aug to check the grafting time of. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nThe time required, in millis, to graft the named augmentation.\n\n## Exceptions\n\nWill error if an invalid Augmentation name is provided.\n\n## Remarks\n\nRAM cost: 3.75 GB\n\n", "bitburner.multipliers.hacknet_node_core_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_core\\_cost](./bitburner.multipliers.hacknet_node_core_cost.md)\n\n## Multipliers.hacknet\\_node\\_core\\_cost property\n\nMultiplier to cost of core for a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_core_cost: number;\n```\n", "ns.multipliers.hacknet_node_core_cost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacknet\\_node\\_core\\_cost](./bitburner.multipliers.hacknet_node_core_cost.md)\n\n## Multipliers.hacknet\\_node\\_core\\_cost property\n\nMultiplier to cost of core for a Hacknet Node\n\n**Signature:**\n\n```typescript\nhacknet_node_core_cost: number;\n```\n", "bitburner.ns.singularity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [singularity](./bitburner.ns.singularity.md)\n\n## NS.singularity property\n\nNamespace for singularity functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly singularity: Singularity;\n```\n", "ns.ns.singularity.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [singularity](./bitburner.ns.singularity.md)\n\n## NS.singularity property\n\nNamespace for singularity functions. RAM cost: 0 GB\n\n**Signature:**\n\n```typescript\nreadonly singularity: Singularity;\n```\n", "bitburner.infiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Infiltration](./bitburner.infiltration.md)\n\n## Infiltration interface\n\nInfiltration API.\n\n**Signature:**\n\n```typescript\ninterface Infiltration \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getInfiltration(location)](./bitburner.infiltration.getinfiltration.md) | Get all infiltrations with difficulty, location and rewards. |\n|  [getPossibleLocations()](./bitburner.infiltration.getpossiblelocations.md) | Get all locations that can be infiltrated. |\n\n", "ns.infiltration.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Infiltration](./bitburner.infiltration.md)\n\n## Infiltration interface\n\nInfiltration API.\n\n**Signature:**\n\n```typescript\ninterface Infiltration \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [getInfiltration(location)](./bitburner.infiltration.getinfiltration.md) | Get all infiltrations with difficulty, location and rewards. |\n|  [getPossibleLocations()](./bitburner.infiltration.getpossiblelocations.md) | Get all locations that can be infiltrated. |\n\n", "bitburner.crimestats.dexterity_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [dexterity\\_exp](./bitburner.crimestats.dexterity_exp.md)\n\n## CrimeStats.dexterity\\_exp property\n\ndexterity exp gained from crime\n\n**Signature:**\n\n```typescript\ndexterity_exp: number;\n```\n", "ns.crimestats.dexterity_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [dexterity\\_exp](./bitburner.crimestats.dexterity_exp.md)\n\n## CrimeStats.dexterity\\_exp property\n\ndexterity exp gained from crime\n\n**Signature:**\n\n```typescript\ndexterity_exp: number;\n```\n", "bitburner.ns.relaysmtp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [relaysmtp](./bitburner.ns.relaysmtp.md)\n\n## NS.relaysmtp() method\n\nRuns relaySMTP.exe on a server.\n\n**Signature:**\n\n```typescript\nrelaysmtp(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the relaySMTP.exe program on the target server. relaySMTP.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nrelaysmtp(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.relaysmtp(\"foodnstuff\");\n```\n\n", "ns.ns.relaysmtp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [relaysmtp](./bitburner.ns.relaysmtp.md)\n\n## NS.relaysmtp() method\n\nRuns relaySMTP.exe on a server.\n\n**Signature:**\n\n```typescript\nrelaysmtp(host: string): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nRuns the relaySMTP.exe program on the target server. relaySMTP.exe must exist on your home computer.\n\n## Example 1\n\n\n```ts\n// NS1:\nrelaysmtp(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nns.relaysmtp(\"foodnstuff\");\n```\n\n", "bitburner.bladeburner.getteamsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getTeamSize](./bitburner.bladeburner.getteamsize.md)\n\n## Bladeburner.getTeamSize() method\n\nGet team size.\n\n**Signature:**\n\n```typescript\ngetTeamSize(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nNumber of Bladeburner team members that were assigned to the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of Bladeburner team members you have assigned to the specified action.\n\nSetting a team is only applicable for Operations and BlackOps. This function will return 0 for other action types.\n\n", "ns.bladeburner.getteamsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getTeamSize](./bitburner.bladeburner.getteamsize.md)\n\n## Bladeburner.getTeamSize() method\n\nGet team size.\n\n**Signature:**\n\n```typescript\ngetTeamSize(type: string, name: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  type | string | Type of action. |\n|  name | string | Name of action. Must be an exact match. |\n\n**Returns:**\n\nnumber\n\nNumber of Bladeburner team members that were assigned to the specified action.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the number of Bladeburner team members you have assigned to the specified action.\n\nSetting a team is only applicable for Operations and BlackOps. This function will return 0 for other action types.\n\n", "bitburner.gangtaskstats.iscombat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [isCombat](./bitburner.gangtaskstats.iscombat.md)\n\n## GangTaskStats.isCombat property\n\nIs a task of a combat gang\n\n**Signature:**\n\n```typescript\nisCombat: boolean;\n```\n", "ns.gangtaskstats.iscombat.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [isCombat](./bitburner.gangtaskstats.iscombat.md)\n\n## GangTaskStats.isCombat property\n\nIs a task of a combat gang\n\n**Signature:**\n\n```typescript\nisCombat: boolean;\n```\n", "bitburner.gangmemberinfo.agi_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_mult](./bitburner.gangmemberinfo.agi_mult.md)\n\n## GangMemberInfo.agi\\_mult property\n\nAgility multiplier from equipment\n\n**Signature:**\n\n```typescript\nagi_mult: number;\n```\n", "ns.gangmemberinfo.agi_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_mult](./bitburner.gangmemberinfo.agi_mult.md)\n\n## GangMemberInfo.agi\\_mult property\n\nAgility multiplier from equipment\n\n**Signature:**\n\n```typescript\nagi_mult: number;\n```\n", "bitburner.ns.scriptkill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scriptKill](./bitburner.ns.scriptkill.md)\n\n## NS.scriptKill() method\n\nKill all scripts with a filename.\n\n**Signature:**\n\n```typescript\nscriptKill(script: string, host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to kill. This is case-sensitive. |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nboolean\n\nTrue if one or more scripts were successfully killed, and false if none were.\n\n## Remarks\n\nRAM cost: 1 GB\n\nKills all scripts with the specified filename on the target server specified by hostname, regardless of arguments.\n\n", "ns.ns.scriptkill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scriptKill](./bitburner.ns.scriptkill.md)\n\n## NS.scriptKill() method\n\nKill all scripts with a filename.\n\n**Signature:**\n\n```typescript\nscriptKill(script: string, host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  script | string | Filename of script to kill. This is case-sensitive. |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nboolean\n\nTrue if one or more scripts were successfully killed, and false if none were.\n\n## Remarks\n\nRAM cost: 1 GB\n\nKills all scripts with the specified filename on the target server specified by hostname, regardless of arguments.\n\n", "bitburner.moneysource.work.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [work](./bitburner.moneysource.work.md)\n\n## MoneySource.work property\n\n**Signature:**\n\n```typescript\nwork: number;\n```\n", "ns.moneysource.work.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [work](./bitburner.moneysource.work.md)\n\n## MoneySource.work property\n\n**Signature:**\n\n```typescript\nwork: number;\n```\n", "bitburner.hacknet.getstudymult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getStudyMult](./bitburner.hacknet.getstudymult.md)\n\n## Hacknet.getStudyMult() method\n\nGet the multiplier to study.\n\n**Signature:**\n\n```typescript\ngetStudyMult(): number;\n```\n**Returns:**\n\nnumber\n\nMultiplier.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\n", "ns.hacknet.getstudymult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getStudyMult](./bitburner.hacknet.getstudymult.md)\n\n## Hacknet.getStudyMult() method\n\nGet the multiplier to study.\n\n**Signature:**\n\n```typescript\ngetStudyMult(): number;\n```\n**Returns:**\n\nnumber\n\nMultiplier.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\n", "bitburner.server.hackdifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [hackDifficulty](./bitburner.server.hackdifficulty.md)\n\n## Server.hackDifficulty property\n\nServer Security Level\n\n**Signature:**\n\n```typescript\nhackDifficulty: number;\n```\n", "ns.server.hackdifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [hackDifficulty](./bitburner.server.hackdifficulty.md)\n\n## Server.hackDifficulty property\n\nServer Security Level\n\n**Signature:**\n\n```typescript\nhackDifficulty: number;\n```\n", "bitburner.player.bitnoden.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [bitNodeN](./bitburner.player.bitnoden.md)\n\n## Player.bitNodeN property\n\n**Signature:**\n\n```typescript\nbitNodeN: number;\n```\n", "ns.player.bitnoden.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Player](./bitburner.player.md) &gt; [bitNodeN](./bitburner.player.bitnoden.md)\n\n## Player.bitNodeN property\n\n**Signature:**\n\n```typescript\nbitNodeN: number;\n```\n", "bitburner.basichgwoptions.stock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BasicHGWOptions](./bitburner.basichgwoptions.md) &gt; [stock](./bitburner.basichgwoptions.stock.md)\n\n## BasicHGWOptions.stock property\n\nSet to true this action will affect the stock market.\n\n**Signature:**\n\n```typescript\nstock?: boolean;\n```\n", "ns.basichgwoptions.stock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BasicHGWOptions](./bitburner.basichgwoptions.md) &gt; [stock](./bitburner.basichgwoptions.stock.md)\n\n## BasicHGWOptions.stock property\n\nSet to true this action will affect the stock market.\n\n**Signature:**\n\n```typescript\nstock?: boolean;\n```\n", "bitburner.ns.print.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [print](./bitburner.ns.print.md)\n\n## NS.print() method\n\nPrints one or more values or variables to the script\u2019s logs.\n\n**Signature:**\n\n```typescript\nprint(...args: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  args | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nIf the argument is a string, you can color code your message by prefixing your string with one of these strings:\n\n- `\"ERROR\"`<!-- -->: The whole string will be printed in red. Use this prefix to indicate that an error has occurred.\n\n- `\"SUCCESS\"`<!-- -->: The whole string will be printed in green, similar to the default theme of the Terminal. Use this prefix to indicate that something is correct.\n\n- `\"WARN\"`<!-- -->: The whole string will be printed in yellow. Use this prefix to indicate that you or a user of your script should be careful of something.\n\n- `\"INFO\"`<!-- -->: The whole string will be printed in purplish blue. Use this prefix to remind yourself or a user of your script of something. Think of this prefix as indicating an FYI (for your information).\n\nFor custom coloring, use ANSI escape sequences. The examples below use the Unicode escape code `\\u001b`<!-- -->. The color coding also works if `\\u001b` is replaced with the hexadecimal escape code `\\x1b`<!-- -->. The Bash escape code `\\e` is not supported. The octal escape code `\\033` is not allowed because the game runs JavaScript in strict mode.\n\n## Example 1\n\n\n```ts\n// NS1\n// Default color coding.\nprint(\"ERROR means something's wrong.\");\nprint(\"SUCCESS means everything's OK.\");\nprint(\"WARN Tread with caution!\");\nprint(\"WARNING, warning, danger, danger!\");\nprint(\"WARNing! Here be dragons.\");\nprint(\"INFO for your I's only (FYI).\");\nprint(\"INFOrmation overload!\");\n// Custom color coding.\nvar cyan = \"\\u001b[36m\";\nvar green = \"\\u001b[32m\";\nvar red = \"\\u001b[31m\";\nvar reset = \"\\u001b[0m\";\nprint(red + \"Ugh! What a mess.\" + reset);\nprint(green + \"Well done!\" + reset);\nprint(cyan + \"ERROR Should this be in red?\" + reset);\ntail();\n```\n\n## Example 2\n\n\n```ts\n// NS2\n// Default color coding.\nns.print(\"ERROR means something's wrong.\");\nns.print(\"SUCCESS means everything's OK.\");\nns.print(\"WARN Tread with caution!\");\nns.print(\"WARNING, warning, danger, danger!\");\nns.print(\"WARNing! Here be dragons.\");\nns.print(\"INFO for your I's only (FYI).\");\nns.print(\"INFOrmation overload!\");\n// Custom color coding.\nconst cyan = \"\\u001b[36m\";\nconst green = \"\\u001b[32m\";\nconst red = \"\\u001b[31m\";\nconst reset = \"\\u001b[0m\";\nns.print(`${red}Ugh! What a mess.${reset}`);\nns.print(`${green}Well done!${reset}`);\nns.print(`${cyan}ERROR Should this be in red?${reset}`);\nns.tail();\n```\n\n", "ns.ns.print.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [print](./bitburner.ns.print.md)\n\n## NS.print() method\n\nPrints one or more values or variables to the script\u2019s logs.\n\n**Signature:**\n\n```typescript\nprint(...args: any[]): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  args | any\\[\\] | Value(s) to be printed. |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\nIf the argument is a string, you can color code your message by prefixing your string with one of these strings:\n\n- `\"ERROR\"`<!-- -->: The whole string will be printed in red. Use this prefix to indicate that an error has occurred.\n\n- `\"SUCCESS\"`<!-- -->: The whole string will be printed in green, similar to the default theme of the Terminal. Use this prefix to indicate that something is correct.\n\n- `\"WARN\"`<!-- -->: The whole string will be printed in yellow. Use this prefix to indicate that you or a user of your script should be careful of something.\n\n- `\"INFO\"`<!-- -->: The whole string will be printed in purplish blue. Use this prefix to remind yourself or a user of your script of something. Think of this prefix as indicating an FYI (for your information).\n\nFor custom coloring, use ANSI escape sequences. The examples below use the Unicode escape code `\\u001b`<!-- -->. The color coding also works if `\\u001b` is replaced with the hexadecimal escape code `\\x1b`<!-- -->. The Bash escape code `\\e` is not supported. The octal escape code `\\033` is not allowed because the game runs JavaScript in strict mode.\n\n## Example 1\n\n\n```ts\n// NS1\n// Default color coding.\nprint(\"ERROR means something's wrong.\");\nprint(\"SUCCESS means everything's OK.\");\nprint(\"WARN Tread with caution!\");\nprint(\"WARNING, warning, danger, danger!\");\nprint(\"WARNing! Here be dragons.\");\nprint(\"INFO for your I's only (FYI).\");\nprint(\"INFOrmation overload!\");\n// Custom color coding.\nvar cyan = \"\\u001b[36m\";\nvar green = \"\\u001b[32m\";\nvar red = \"\\u001b[31m\";\nvar reset = \"\\u001b[0m\";\nprint(red + \"Ugh! What a mess.\" + reset);\nprint(green + \"Well done!\" + reset);\nprint(cyan + \"ERROR Should this be in red?\" + reset);\ntail();\n```\n\n## Example 2\n\n\n```ts\n// NS2\n// Default color coding.\nns.print(\"ERROR means something's wrong.\");\nns.print(\"SUCCESS means everything's OK.\");\nns.print(\"WARN Tread with caution!\");\nns.print(\"WARNING, warning, danger, danger!\");\nns.print(\"WARNing! Here be dragons.\");\nns.print(\"INFO for your I's only (FYI).\");\nns.print(\"INFOrmation overload!\");\n// Custom color coding.\nconst cyan = \"\\u001b[36m\";\nconst green = \"\\u001b[32m\";\nconst red = \"\\u001b[31m\";\nconst reset = \"\\u001b[0m\";\nns.print(`${red}Ugh! What a mess.${reset}`);\nns.print(`${green}Well done!${reset}`);\nns.print(`${cyan}ERROR Should this be in red?${reset}`);\nns.tail();\n```\n\n", "bitburner.corpproductdata.verb.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [verb](./bitburner.corpproductdata.verb.md)\n\n## CorpProductData.verb property\n\nVerb used to describe creation of the product\n\n**Signature:**\n\n```typescript\nverb: string;\n```\n", "ns.corpproductdata.verb.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpProductData](./bitburner.corpproductdata.md) &gt; [verb](./bitburner.corpproductdata.verb.md)\n\n## CorpProductData.verb property\n\nVerb used to describe creation of the product\n\n**Signature:**\n\n```typescript\nverb: string;\n```\n", "bitburner.officeapi.buycoffee.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [buyCoffee](./bitburner.officeapi.buycoffee.md)\n\n## OfficeAPI.buyCoffee() method\n\nBuy coffee for your employees\n\n**Signature:**\n\n```typescript\nbuyCoffee(divisionName: string, city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\nboolean\n\ntrue if buying coffee was successful, false otherwise\n\n", "ns.officeapi.buycoffee.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [buyCoffee](./bitburner.officeapi.buycoffee.md)\n\n## OfficeAPI.buyCoffee() method\n\nBuy coffee for your employees\n\n**Signature:**\n\n```typescript\nbuyCoffee(divisionName: string, city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\nboolean\n\ntrue if buying coffee was successful, false otherwise\n\n", "bitburner.hacknetnodesformulas.constants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [constants](./bitburner.hacknetnodesformulas.constants.md)\n\n## HacknetNodesFormulas.constants() method\n\nAll constants used by the game.\n\n**Signature:**\n\n```typescript\nconstants(): HacknetNodeConstants;\n```\n**Returns:**\n\n[HacknetNodeConstants](./bitburner.hacknetnodeconstants.md)\n\nAn object with all hacknet node constants used by the game.\n\n", "ns.hacknetnodesformulas.constants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [constants](./bitburner.hacknetnodesformulas.constants.md)\n\n## HacknetNodesFormulas.constants() method\n\nAll constants used by the game.\n\n**Signature:**\n\n```typescript\nconstants(): HacknetNodeConstants;\n```\n**Returns:**\n\n[HacknetNodeConstants](./bitburner.hacknetnodeconstants.md)\n\nAn object with all hacknet node constants used by the game.\n\n", "bitburner.ns.growthanalyze.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [growthAnalyze](./bitburner.ns.growthanalyze.md)\n\n## NS.growthAnalyze() method\n\nCalculate the number of grow threads needed to grow a server by a certain multiplier.\n\n**Signature:**\n\n```typescript\ngrowthAnalyze(host: string, growthAmount: number, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n|  growthAmount | number | Multiplicative factor by which the server is grown. Decimal form. |\n|  cores | number | _(Optional)_ |\n\n**Returns:**\n\nnumber\n\nThe amount of grow calls needed to grow the specified server by the specified amount.\n\n## Remarks\n\nRAM cost: 1 GB\n\nThis function returns the number of \u201cgrowths\u201d needed in order to increase the amount of money available on the specified server by the specified amount. The specified amount is multiplicative and is in decimal form, not percentage.\n\nDue to limitations of mathematics, this function won't be the true value, but an approximation.\n\nWarning: The value returned by this function isn\u2019t necessarily a whole number.\n\n## Example 1\n\n\n```ts\n// NS1:\n//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\nvar growTimes = growthAnalyze(\"foodnstuff\", 2);\n//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\nconst growTimes = ns.growthAnalyze(\"foodnstuff\", 2);\n//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\n```\n\n", "ns.ns.growthanalyze.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [growthAnalyze](./bitburner.ns.growthanalyze.md)\n\n## NS.growthAnalyze() method\n\nCalculate the number of grow threads needed to grow a server by a certain multiplier.\n\n**Signature:**\n\n```typescript\ngrowthAnalyze(host: string, growthAmount: number, cores?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n|  growthAmount | number | Multiplicative factor by which the server is grown. Decimal form. |\n|  cores | number | _(Optional)_ |\n\n**Returns:**\n\nnumber\n\nThe amount of grow calls needed to grow the specified server by the specified amount.\n\n## Remarks\n\nRAM cost: 1 GB\n\nThis function returns the number of \u201cgrowths\u201d needed in order to increase the amount of money available on the specified server by the specified amount. The specified amount is multiplicative and is in decimal form, not percentage.\n\nDue to limitations of mathematics, this function won't be the true value, but an approximation.\n\nWarning: The value returned by this function isn\u2019t necessarily a whole number.\n\n## Example 1\n\n\n```ts\n// NS1:\n//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\nvar growTimes = growthAnalyze(\"foodnstuff\", 2);\n//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\n```\n\n## Example 2\n\n\n```ts\n// NS2:\n//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\nconst growTimes = ns.growthAnalyze(\"foodnstuff\", 2);\n//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\n```\n\n", "bitburner.server.ramused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [ramUsed](./bitburner.server.ramused.md)\n\n## Server.ramUsed property\n\nRAM (GB) used. i.e. unavailable RAM\n\n**Signature:**\n\n```typescript\nramUsed: number;\n```\n", "ns.server.ramused.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [ramUsed](./bitburner.server.ramused.md)\n\n## Server.ramUsed property\n\nRAM (GB) used. i.e. unavailable RAM\n\n**Signature:**\n\n```typescript\nramUsed: number;\n```\n", "bitburner.singularity.getaugmentationrepreq.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationRepReq](./bitburner.singularity.getaugmentationrepreq.md)\n\n## Singularity.getAugmentationRepReq() method\n\nGet reputation requirement of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationRepReq(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nReputation requirement of the augmentation.\n\n## Remarks\n\nRAM cost: 2.5 GB \\* 16/4/1\n\n", "ns.singularity.getaugmentationrepreq.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationRepReq](./bitburner.singularity.getaugmentationrepreq.md)\n\n## Singularity.getAugmentationRepReq() method\n\nGet reputation requirement of an augmentation.\n\n**Signature:**\n\n```typescript\ngetAugmentationRepReq(augName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  augName | string | Name of Augmentation. |\n\n**Returns:**\n\nnumber\n\nReputation requirement of the augmentation.\n\n## Remarks\n\nRAM cost: 2.5 GB \\* 16/4/1\n\n", "bitburner.ns.gettotalscriptexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getTotalScriptExpGain](./bitburner.ns.gettotalscriptexpgain.md)\n\n## NS.getTotalScriptExpGain() method\n\nGet the exp gain of all scripts.\n\n**Signature:**\n\n```typescript\ngetTotalScriptExpGain(): number;\n```\n**Returns:**\n\nnumber\n\nTotal experience gain rate of all of your active scripts.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.gettotalscriptexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getTotalScriptExpGain](./bitburner.ns.gettotalscriptexpgain.md)\n\n## NS.getTotalScriptExpGain() method\n\nGet the exp gain of all scripts.\n\n**Signature:**\n\n```typescript\ngetTotalScriptExpGain(): number;\n```\n**Returns:**\n\nnumber\n\nTotal experience gain rate of all of your active scripts.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.gangtaskstats.desc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [desc](./bitburner.gangtaskstats.desc.md)\n\n## GangTaskStats.desc property\n\nTask Description\n\n**Signature:**\n\n```typescript\ndesc: string;\n```\n", "ns.gangtaskstats.desc.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [desc](./bitburner.gangtaskstats.desc.md)\n\n## GangTaskStats.desc property\n\nTask Description\n\n**Signature:**\n\n```typescript\ndesc: string;\n```\n", "bitburner.gang.recruitmember.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [recruitMember](./bitburner.gang.recruitmember.md)\n\n## Gang.recruitMember() method\n\nRecruit a new gang member.\n\n**Signature:**\n\n```typescript\nrecruitMember(name: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of member to recruit. |\n\n**Returns:**\n\nboolean\n\nTrue if the member was successfully recruited, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB\n\nAttempt to recruit a new gang member.\n\nPossible reasons for failure: \\* Cannot currently recruit a new member \\* There already exists a member with the specified name\n\n", "ns.gang.recruitmember.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [recruitMember](./bitburner.gang.recruitmember.md)\n\n## Gang.recruitMember() method\n\nRecruit a new gang member.\n\n**Signature:**\n\n```typescript\nrecruitMember(name: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  name | string | Name of member to recruit. |\n\n**Returns:**\n\nboolean\n\nTrue if the member was successfully recruited, false otherwise.\n\n## Remarks\n\nRAM cost: 2 GB\n\nAttempt to recruit a new gang member.\n\nPossible reasons for failure: \\* Cannot currently recruit a new member \\* There already exists a member with the specified name\n\n", "bitburner.hacknet.getlevelupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getLevelUpgradeCost](./bitburner.hacknet.getlevelupgradecost.md)\n\n## Hacknet.getLevelUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node levels.\n\n**Signature:**\n\n```typescript\ngetLevelUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of levels to upgrade. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of upgrading the specified Hacknet Node by n levels.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node is already at max level, then Infinity is returned.\n\n", "ns.hacknet.getlevelupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getLevelUpgradeCost](./bitburner.hacknet.getlevelupgradecost.md)\n\n## Hacknet.getLevelUpgradeCost() method\n\nCalculate the cost of upgrading hacknet node levels.\n\n**Signature:**\n\n```typescript\ngetLevelUpgradeCost(index: number, n: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  index | number | Index/Identifier of Hacknet Node. |\n|  n | number | Number of levels to upgrade. Must be positive. Rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nCost of upgrading the specified Hacknet Node.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of upgrading the specified Hacknet Node by n levels.\n\nIf an invalid value for n is provided, then this function returns 0. If the specified Hacknet Node is already at max level, then Infinity is returned.\n\n", "bitburner.nodestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md)\n\n## NodeStats interface\n\nObject representing all the values related to a hacknet node.\n\n**Signature:**\n\n```typescript\ninterface NodeStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cache?](./bitburner.nodestats.cache.md) |  | number | _(Optional)_ Cache level. Only applicable for Hacknet Servers |\n|  [cores](./bitburner.nodestats.cores.md) |  | number | Node's number of cores |\n|  [hashCapacity?](./bitburner.nodestats.hashcapacity.md) |  | number | _(Optional)_ Hash Capacity provided by this Node. Only applicable for Hacknet Servers |\n|  [level](./bitburner.nodestats.level.md) |  | number | Node's level |\n|  [name](./bitburner.nodestats.name.md) |  | string | Node's name |\n|  [production](./bitburner.nodestats.production.md) |  | number | Node's production per second |\n|  [ram](./bitburner.nodestats.ram.md) |  | number | Node's RAM (GB) |\n|  [ramUsed?](./bitburner.nodestats.ramused.md) |  | number | _(Optional)_ Node's used RAM (GB) |\n|  [timeOnline](./bitburner.nodestats.timeonline.md) |  | number | Number of seconds since Node has been purchased |\n|  [totalProduction](./bitburner.nodestats.totalproduction.md) |  | number | Total number of money Node has produced |\n\n", "ns.nodestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NodeStats](./bitburner.nodestats.md)\n\n## NodeStats interface\n\nObject representing all the values related to a hacknet node.\n\n**Signature:**\n\n```typescript\ninterface NodeStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [cache?](./bitburner.nodestats.cache.md) |  | number | _(Optional)_ Cache level. Only applicable for Hacknet Servers |\n|  [cores](./bitburner.nodestats.cores.md) |  | number | Node's number of cores |\n|  [hashCapacity?](./bitburner.nodestats.hashcapacity.md) |  | number | _(Optional)_ Hash Capacity provided by this Node. Only applicable for Hacknet Servers |\n|  [level](./bitburner.nodestats.level.md) |  | number | Node's level |\n|  [name](./bitburner.nodestats.name.md) |  | string | Node's name |\n|  [production](./bitburner.nodestats.production.md) |  | number | Node's production per second |\n|  [ram](./bitburner.nodestats.ram.md) |  | number | Node's RAM (GB) |\n|  [ramUsed?](./bitburner.nodestats.ramused.md) |  | number | _(Optional)_ Node's used RAM (GB) |\n|  [timeOnline](./bitburner.nodestats.timeonline.md) |  | number | Number of seconds since Node has been purchased |\n|  [totalProduction](./bitburner.nodestats.totalproduction.md) |  | number | Total number of money Node has produced |\n\n", "bitburner.sourcefilelvl.lvl.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SourceFileLvl](./bitburner.sourcefilelvl.md) &gt; [lvl](./bitburner.sourcefilelvl.lvl.md)\n\n## SourceFileLvl.lvl property\n\nThe level of the source file\n\n**Signature:**\n\n```typescript\nlvl: number;\n```\n", "ns.sourcefilelvl.lvl.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SourceFileLvl](./bitburner.sourcefilelvl.md) &gt; [lvl](./bitburner.sourcefilelvl.lvl.md)\n\n## SourceFileLvl.lvl property\n\nThe level of the source file\n\n**Signature:**\n\n```typescript\nlvl: number;\n```\n", "bitburner.tix.buystock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [buyStock](./bitburner.tix.buystock.md)\n\n## TIX.buyStock() method\n\nBuy stocks.\n\n**Signature:**\n\n```typescript\nbuyStock(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to purchased. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to purchase shares of a stock using a Market Order.\n\nIf the player does not have enough money to purchase the specified number of shares, then no shares will be purchased. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nIf this function successfully purchases the shares, it will return the stock price at which each share was purchased. Otherwise, it will return 0.\n\n", "ns.tix.buystock.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [buyStock](./bitburner.tix.buystock.md)\n\n## TIX.buyStock() method\n\nBuy stocks.\n\n**Signature:**\n\n```typescript\nbuyStock(sym: string, shares: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n|  shares | number | Number of shares to purchased. Must be positive. Will be rounded to nearest integer. |\n\n**Returns:**\n\nnumber\n\nThe stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\n\n## Remarks\n\nRAM cost: 2.5 GB Attempts to purchase shares of a stock using a Market Order.\n\nIf the player does not have enough money to purchase the specified number of shares, then no shares will be purchased. Remember that every transaction on the stock exchange costs a certain commission fee.\n\nIf this function successfully purchases the shares, it will return the stock price at which each share was purchased. Otherwise, it will return 0.\n\n", "bitburner.singularity.getcompanyfavorgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCompanyFavorGain](./bitburner.singularity.getcompanyfavorgain.md)\n\n## Singularity.getCompanyFavorGain() method\n\nGet company favor gain.\n\n**Signature:**\n\n```typescript\ngetCompanyFavorGain(companyName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of the company. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you gain at the specified company when you reset by installing Augmentations.\n\n## Remarks\n\nRAM cost: 0.75 GB \\* 16/4/1\n\nThis function will return the amount of favor you will gain for the specified company when you reset by installing Augmentations.\n\n", "ns.singularity.getcompanyfavorgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCompanyFavorGain](./bitburner.singularity.getcompanyfavorgain.md)\n\n## Singularity.getCompanyFavorGain() method\n\nGet company favor gain.\n\n**Signature:**\n\n```typescript\ngetCompanyFavorGain(companyName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  companyName | string | Name of the company. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you gain at the specified company when you reset by installing Augmentations.\n\n## Remarks\n\nRAM cost: 0.75 GB \\* 16/4/1\n\nThis function will return the amount of favor you will gain for the specified company when you reset by installing Augmentations.\n\n", "bitburner.bladeburner.getrank.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getRank](./bitburner.bladeburner.getrank.md)\n\n## Bladeburner.getRank() method\n\nGet player bladeburner rank.\n\n**Signature:**\n\n```typescript\ngetRank(): number;\n```\n**Returns:**\n\nnumber\n\nPlayer\u2019s Bladeburner Rank.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the player\u2019s Bladeburner Rank.\n\n", "ns.bladeburner.getrank.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getRank](./bitburner.bladeburner.getrank.md)\n\n## Bladeburner.getRank() method\n\nGet player bladeburner rank.\n\n**Signature:**\n\n```typescript\ngetRank(): number;\n```\n**Returns:**\n\nnumber\n\nPlayer\u2019s Bladeburner Rank.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturns the player\u2019s Bladeburner Rank.\n\n", "bitburner.hacknet.gettrainingmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getTrainingMult](./bitburner.hacknet.gettrainingmult.md)\n\n## Hacknet.getTrainingMult() method\n\nGet the multiplier to training.\n\n**Signature:**\n\n```typescript\ngetTrainingMult(): number;\n```\n**Returns:**\n\nnumber\n\nMultiplier.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\n", "ns.hacknet.gettrainingmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getTrainingMult](./bitburner.hacknet.gettrainingmult.md)\n\n## Hacknet.getTrainingMult() method\n\nGet the multiplier to training.\n\n**Signature:**\n\n```typescript\ngetTrainingMult(): number;\n```\n**Returns:**\n\nnumber\n\nMultiplier.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\n", "bitburner.gangtaskstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md)\n\n## GangTaskStats interface\n\nObject representing data representing a gang member task.\n\n**Signature:**\n\n```typescript\ninterface GangTaskStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agiWeight](./bitburner.gangtaskstats.agiweight.md) |  | number | Agility skill impact on task scaling |\n|  [baseMoney](./bitburner.gangtaskstats.basemoney.md) |  | number | Base money earned |\n|  [baseRespect](./bitburner.gangtaskstats.baserespect.md) |  | number | Base respect earned |\n|  [baseWanted](./bitburner.gangtaskstats.basewanted.md) |  | number | Base wanted earned |\n|  [chaWeight](./bitburner.gangtaskstats.chaweight.md) |  | number | Charisma skill impact on task scaling |\n|  [defWeight](./bitburner.gangtaskstats.defweight.md) |  | number | Defense skill impact on task scaling |\n|  [desc](./bitburner.gangtaskstats.desc.md) |  | string | Task Description |\n|  [dexWeight](./bitburner.gangtaskstats.dexweight.md) |  | number | Dexterity skill impact on task scaling |\n|  [difficulty](./bitburner.gangtaskstats.difficulty.md) |  | number | Number representing the difficulty of the task |\n|  [hackWeight](./bitburner.gangtaskstats.hackweight.md) |  | number | Hacking skill impact on task scaling |\n|  [isCombat](./bitburner.gangtaskstats.iscombat.md) |  | boolean | Is a task of a combat gang |\n|  [isHacking](./bitburner.gangtaskstats.ishacking.md) |  | boolean | Is a task of a hacking gang |\n|  [name](./bitburner.gangtaskstats.name.md) |  | string | Task name |\n|  [strWeight](./bitburner.gangtaskstats.strweight.md) |  | number | Strength skill impact on task scaling |\n|  [territory](./bitburner.gangtaskstats.territory.md) |  | [GangTerritory](./bitburner.gangterritory.md) | Territory impact on task scaling |\n\n", "ns.gangtaskstats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md)\n\n## GangTaskStats interface\n\nObject representing data representing a gang member task.\n\n**Signature:**\n\n```typescript\ninterface GangTaskStats \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [agiWeight](./bitburner.gangtaskstats.agiweight.md) |  | number | Agility skill impact on task scaling |\n|  [baseMoney](./bitburner.gangtaskstats.basemoney.md) |  | number | Base money earned |\n|  [baseRespect](./bitburner.gangtaskstats.baserespect.md) |  | number | Base respect earned |\n|  [baseWanted](./bitburner.gangtaskstats.basewanted.md) |  | number | Base wanted earned |\n|  [chaWeight](./bitburner.gangtaskstats.chaweight.md) |  | number | Charisma skill impact on task scaling |\n|  [defWeight](./bitburner.gangtaskstats.defweight.md) |  | number | Defense skill impact on task scaling |\n|  [desc](./bitburner.gangtaskstats.desc.md) |  | string | Task Description |\n|  [dexWeight](./bitburner.gangtaskstats.dexweight.md) |  | number | Dexterity skill impact on task scaling |\n|  [difficulty](./bitburner.gangtaskstats.difficulty.md) |  | number | Number representing the difficulty of the task |\n|  [hackWeight](./bitburner.gangtaskstats.hackweight.md) |  | number | Hacking skill impact on task scaling |\n|  [isCombat](./bitburner.gangtaskstats.iscombat.md) |  | boolean | Is a task of a combat gang |\n|  [isHacking](./bitburner.gangtaskstats.ishacking.md) |  | boolean | Is a task of a hacking gang |\n|  [name](./bitburner.gangtaskstats.name.md) |  | string | Task name |\n|  [strWeight](./bitburner.gangtaskstats.strweight.md) |  | number | Strength skill impact on task scaling |\n|  [territory](./bitburner.gangtaskstats.territory.md) |  | [GangTerritory](./bitburner.gangterritory.md) | Territory impact on task scaling |\n\n", "bitburner.workformulas.gymgains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [gymGains](./bitburner.workformulas.gymgains.md)\n\n## WorkFormulas.gymGains() method\n\n**Signature:**\n\n```typescript\ngymGains(person: Person, gymType: GymType | `${GymType}`, locationName: string): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  gymType | [GymType](./bitburner.gymtype.md) \\| \\`${[GymType](./bitburner.gymtype.md)<!-- -->}\\` |  |\n|  locationName | string |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by taking the specified gym class.\n\n", "ns.workformulas.gymgains.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkFormulas](./bitburner.workformulas.md) &gt; [gymGains](./bitburner.workformulas.gymgains.md)\n\n## WorkFormulas.gymGains() method\n\n**Signature:**\n\n```typescript\ngymGains(person: Person, gymType: GymType | `${GymType}`, locationName: string): WorkStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  person | [Person](./bitburner.person.md) |  |\n|  gymType | [GymType](./bitburner.gymtype.md) \\| \\`${[GymType](./bitburner.gymtype.md)<!-- -->}\\` |  |\n|  locationName | string |  |\n\n**Returns:**\n\n[WorkStats](./bitburner.workstats.md)\n\nThe WorkStats applied every game cycle (200ms) by taking the specified gym class.\n\n", "bitburner.moneysource.hacknet.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hacknet](./bitburner.moneysource.hacknet.md)\n\n## MoneySource.hacknet property\n\n**Signature:**\n\n```typescript\nhacknet: number;\n```\n", "ns.moneysource.hacknet.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [hacknet](./bitburner.moneysource.hacknet.md)\n\n## MoneySource.hacknet property\n\n**Signature:**\n\n```typescript\nhacknet: number;\n```\n", "bitburner.formulas.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [gang](./bitburner.formulas.gang.md)\n\n## Formulas.gang property\n\nGang formulas\n\n**Signature:**\n\n```typescript\ngang: GangFormulas;\n```\n", "ns.formulas.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [gang](./bitburner.formulas.gang.md)\n\n## Formulas.gang property\n\nGang formulas\n\n**Signature:**\n\n```typescript\ngang: GangFormulas;\n```\n", "bitburner.warehouseapi.bulkpurchase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [bulkPurchase](./bitburner.warehouseapi.bulkpurchase.md)\n\n## WarehouseAPI.bulkPurchase() method\n\nSet material to bulk buy\n\n**Signature:**\n\n```typescript\nbulkPurchase(divisionName: string, city: CityName | `${CityName}`, materialName: string, amt: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to buy |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.bulkpurchase.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [bulkPurchase](./bitburner.warehouseapi.bulkpurchase.md)\n\n## WarehouseAPI.bulkPurchase() method\n\nSet material to bulk buy\n\n**Signature:**\n\n```typescript\nbulkPurchase(divisionName: string, city: CityName | `${CityName}`, materialName: string, amt: number): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  amt | number | Amount of material to buy |\n\n**Returns:**\n\nvoid\n\n", "bitburner.division.prodmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [prodMult](./bitburner.division.prodmult.md)\n\n## Division.prodMult property\n\nProduction multiplier\n\n**Signature:**\n\n```typescript\nprodMult: number;\n```\n", "ns.division.prodmult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [prodMult](./bitburner.division.prodmult.md)\n\n## Division.prodMult property\n\nProduction multiplier\n\n**Signature:**\n\n```typescript\nprodMult: number;\n```\n", "bitburner.formulas.hacknetnodes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [hacknetNodes](./bitburner.formulas.hacknetnodes.md)\n\n## Formulas.hacknetNodes property\n\nHacknet Nodes formulas\n\n**Signature:**\n\n```typescript\nhacknetNodes: HacknetNodesFormulas;\n```\n", "ns.formulas.hacknetnodes.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Formulas](./bitburner.formulas.md) &gt; [hacknetNodes](./bitburner.formulas.hacknetnodes.md)\n\n## Formulas.hacknetNodes property\n\nHacknet Nodes formulas\n\n**Signature:**\n\n```typescript\nhacknetNodes: HacknetNodesFormulas;\n```\n", "bitburner.singularity.commitcrime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [commitCrime](./bitburner.singularity.commitcrime.md)\n\n## Singularity.commitCrime() method\n\nCommit a crime.\n\n**Signature:**\n\n```typescript\ncommitCrime(crime: CrimeType | `${CrimeType}`, focus?: boolean): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  crime | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` | Name of crime to attempt. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this crime. Optional. Defaults to true. |\n\n**Returns:**\n\nnumber\n\nThe number of milliseconds it takes to attempt the specified crime.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function is used to automatically attempt to commit crimes. If you are already in the middle of some \u2018working\u2019 action (such as working for a company or training at a gym), then running this function will automatically cancel that action and give you your earnings.\n\nThis function returns the number of milliseconds it takes to attempt the specified crime (e.g It takes 60 seconds to attempt the \u2018Rob Store\u2019 crime, so running `commitCrime('Rob Store')` will return 60,000).\n\n", "ns.singularity.commitcrime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [commitCrime](./bitburner.singularity.commitcrime.md)\n\n## Singularity.commitCrime() method\n\nCommit a crime.\n\n**Signature:**\n\n```typescript\ncommitCrime(crime: CrimeType | `${CrimeType}`, focus?: boolean): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  crime | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` | Name of crime to attempt. |\n|  focus | boolean | _(Optional)_ Acquire player focus on this crime. Optional. Defaults to true. |\n\n**Returns:**\n\nnumber\n\nThe number of milliseconds it takes to attempt the specified crime.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function is used to automatically attempt to commit crimes. If you are already in the middle of some \u2018working\u2019 action (such as working for a company or training at a gym), then running this function will automatically cancel that action and give you your earnings.\n\nThis function returns the number of milliseconds it takes to attempt the specified crime (e.g It takes 60 seconds to attempt the \u2018Rob Store\u2019 crime, so running `commitCrime('Rob Store')` will return 60,000).\n\n", "bitburner.gangterritory.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md) &gt; [money](./bitburner.gangterritory.money.md)\n\n## GangTerritory.money property\n\nMoney gain impact on task scaling\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "ns.gangterritory.money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTerritory](./bitburner.gangterritory.md) &gt; [money](./bitburner.gangterritory.money.md)\n\n## GangTerritory.money property\n\nMoney gain impact on task scaling\n\n**Signature:**\n\n```typescript\nmoney: number;\n```\n", "bitburner.ns.purchaseserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [purchaseServer](./bitburner.ns.purchaseserver.md)\n\n## NS.purchaseServer() method\n\nPurchase a server.\n\n**Signature:**\n\n```typescript\npurchaseServer(hostname: string, ram: number): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Hostname of the purchased server. |\n|  ram | number | Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nstring\n\nThe hostname of the newly purchased server.\n\n## Remarks\n\n2.25 GB\n\nPurchase a server with the specified hostname and amount of RAM.\n\nThe hostname argument can be any data type, but it will be converted to a string and have whitespace removed. Anything that resolves to an empty string will cause the function to fail. If there is already a server with the specified hostname, then the function will automatically append a number at the end of the hostname argument value until it finds a unique hostname. For example, if the script calls `purchaseServer(\u201cfoo\u201d, 4)` but a server named \u201cfoo\u201d already exists, then it will automatically change the hostname to `foo-0`<!-- -->. If there is already a server with the hostname `foo-0`<!-- -->, then it will change the hostname to `foo-1`<!-- -->, and so on.\n\nNote that there is a maximum limit to the amount of servers you can purchase.\n\nReturns the hostname of the newly purchased server as a string. If the function fails to purchase a server, then it will return an empty string. The function will fail if the arguments passed in are invalid, if the player does not have enough money to purchase the specified server, or if the player has exceeded the maximum amount of servers.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar ram = 64;\nvar prefix = \"pserv-\";\nfor (i = 0; i < 5; ++i) {\n   purchaseServer(prefix + i, ram);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst ram = 64;\nconst prefix = \"pserv-\";\nfor (i = 0; i < 5; ++i) {\n   ns.purchaseServer(prefix + i, ram);\n}\n```\n\n", "ns.ns.purchaseserver.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [purchaseServer](./bitburner.ns.purchaseserver.md)\n\n## NS.purchaseServer() method\n\nPurchase a server.\n\n**Signature:**\n\n```typescript\npurchaseServer(hostname: string, ram: number): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Hostname of the purchased server. |\n|  ram | number | Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nstring\n\nThe hostname of the newly purchased server.\n\n## Remarks\n\n2.25 GB\n\nPurchase a server with the specified hostname and amount of RAM.\n\nThe hostname argument can be any data type, but it will be converted to a string and have whitespace removed. Anything that resolves to an empty string will cause the function to fail. If there is already a server with the specified hostname, then the function will automatically append a number at the end of the hostname argument value until it finds a unique hostname. For example, if the script calls `purchaseServer(\u201cfoo\u201d, 4)` but a server named \u201cfoo\u201d already exists, then it will automatically change the hostname to `foo-0`<!-- -->. If there is already a server with the hostname `foo-0`<!-- -->, then it will change the hostname to `foo-1`<!-- -->, and so on.\n\nNote that there is a maximum limit to the amount of servers you can purchase.\n\nReturns the hostname of the newly purchased server as a string. If the function fails to purchase a server, then it will return an empty string. The function will fail if the arguments passed in are invalid, if the player does not have enough money to purchase the specified server, or if the player has exceeded the maximum amount of servers.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar ram = 64;\nvar prefix = \"pserv-\";\nfor (i = 0; i < 5; ++i) {\n   purchaseServer(prefix + i, ram);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst ram = 64;\nconst prefix = \"pserv-\";\nfor (i = 0; i < 5; ++i) {\n   ns.purchaseServer(prefix + i, ram);\n}\n```\n\n", "bitburner.server.smtpportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [smtpPortOpen](./bitburner.server.smtpportopen.md)\n\n## Server.smtpPortOpen property\n\nFlag indicating whether SMTP Port is open\n\n**Signature:**\n\n```typescript\nsmtpPortOpen: boolean;\n```\n", "ns.server.smtpportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [smtpPortOpen](./bitburner.server.smtpportopen.md)\n\n## Server.smtpPortOpen property\n\nFlag indicating whether SMTP Port is open\n\n**Signature:**\n\n```typescript\nsmtpPortOpen: boolean;\n```\n", "bitburner.ns.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hack](./bitburner.ns.hack.md)\n\n## NS.hack() method\n\nSteal a server's money.\n\n**Signature:**\n\n```typescript\nhack(host: string, opts?: BasicHGWOptions): Promise<number>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to hack. |\n|  opts | [BasicHGWOptions](./bitburner.basichgwoptions.md) | _(Optional)_ Optional parameters for configuring function behavior. |\n\n**Returns:**\n\nPromise&lt;number&gt;\n\nThe amount of money stolen if the hack is successful, and zero otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nFunction that is used to try and hack servers to steal money and gain hacking experience. The runtime for this command depends on your hacking level and the target server\u2019s security level when this function is called. In order to hack a server you must first gain root access to that server and also have the required hacking level.\n\nA script can hack a server from anywhere. It does not need to be running on the same server to hack that server. For example, you can create a script that hacks the `foodnstuff` server and run that script on any server in the game.\n\nA successful `hack()` on a server will raise that server\u2019s security level by 0.002.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar earnedMoney = hack(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nlet earnedMoney = await ns.hack(\"foodnstuff\");\n```\n\n", "ns.ns.hack.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hack](./bitburner.ns.hack.md)\n\n## NS.hack() method\n\nSteal a server's money.\n\n**Signature:**\n\n```typescript\nhack(host: string, opts?: BasicHGWOptions): Promise<number>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to hack. |\n|  opts | [BasicHGWOptions](./bitburner.basichgwoptions.md) | _(Optional)_ Optional parameters for configuring function behavior. |\n\n**Returns:**\n\nPromise&lt;number&gt;\n\nThe amount of money stolen if the hack is successful, and zero otherwise.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\nFunction that is used to try and hack servers to steal money and gain hacking experience. The runtime for this command depends on your hacking level and the target server\u2019s security level when this function is called. In order to hack a server you must first gain root access to that server and also have the required hacking level.\n\nA script can hack a server from anywhere. It does not need to be running on the same server to hack that server. For example, you can create a script that hacks the `foodnstuff` server and run that script on any server in the game.\n\nA successful `hack()` on a server will raise that server\u2019s security level by 0.002.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar earnedMoney = hack(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nlet earnedMoney = await ns.hack(\"foodnstuff\");\n```\n\n", "bitburner.ns.hackanalyzethreads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyzeThreads](./bitburner.ns.hackanalyzethreads.md)\n\n## NS.hackAnalyzeThreads() method\n\nPredict the effect of hack.\n\n**Signature:**\n\n```typescript\nhackAnalyzeThreads(host: string, hackAmount: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to analyze. |\n|  hackAmount | number | Amount of money you want to hack from the server. |\n\n**Returns:**\n\nnumber\n\nThe number of threads needed to hack the server for hackAmount money.\n\n## Remarks\n\nRAM cost: 1 GB\n\nThis function returns the number of script threads you need when running the hack command to steal the specified amount of money from the target server. If hackAmount is less than zero or greater than the amount of money available on the server, then this function returns -1.\n\nWarning: The value returned by this function isn\u2019t necessarily a whole number.\n\n## Example\n\n\n```ts\n//For example, let\u2019s say the foodnstuff server has $10m and you run:\nhackAnalyzeThreads(\"foodnstuff\", 1e6);\n//If this function returns 50, this means that if your next hack call is run on a script with 50 threads, it will steal $1m from the foodnstuff server.\n```\n\n", "ns.ns.hackanalyzethreads.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hackAnalyzeThreads](./bitburner.ns.hackanalyzethreads.md)\n\n## NS.hackAnalyzeThreads() method\n\nPredict the effect of hack.\n\n**Signature:**\n\n```typescript\nhackAnalyzeThreads(host: string, hackAmount: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to analyze. |\n|  hackAmount | number | Amount of money you want to hack from the server. |\n\n**Returns:**\n\nnumber\n\nThe number of threads needed to hack the server for hackAmount money.\n\n## Remarks\n\nRAM cost: 1 GB\n\nThis function returns the number of script threads you need when running the hack command to steal the specified amount of money from the target server. If hackAmount is less than zero or greater than the amount of money available on the server, then this function returns -1.\n\nWarning: The value returned by this function isn\u2019t necessarily a whole number.\n\n## Example\n\n\n```ts\n//For example, let\u2019s say the foodnstuff server has $10m and you run:\nhackAnalyzeThreads(\"foodnstuff\", 1e6);\n//If this function returns 50, this means that if your next hack call is run on a script with 50 threads, it will steal $1m from the foodnstuff server.\n```\n\n", "bitburner.gang.ingang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [inGang](./bitburner.gang.ingang.md)\n\n## Gang.inGang() method\n\nCheck if you're in a gang.\n\n**Signature:**\n\n```typescript\ninGang(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you're in a gang, false otherwise.\n\n## Remarks\n\nRAM cost: 1GB\n\n", "ns.gang.ingang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [inGang](./bitburner.gang.ingang.md)\n\n## Gang.inGang() method\n\nCheck if you're in a gang.\n\n**Signature:**\n\n```typescript\ninGang(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if you're in a gang, false otherwise.\n\n## Remarks\n\nRAM cost: 1GB\n\n", "bitburner.bitnodemultipliers.infiltrationrep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [InfiltrationRep](./bitburner.bitnodemultipliers.infiltrationrep.md)\n\n## BitNodeMultipliers.InfiltrationRep property\n\nInfluences how much rep the player can gain from factions when selling stolen documents and secrets\n\n**Signature:**\n\n```typescript\nInfiltrationRep: number;\n```\n", "ns.bitnodemultipliers.infiltrationrep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [InfiltrationRep](./bitburner.bitnodemultipliers.infiltrationrep.md)\n\n## BitNodeMultipliers.InfiltrationRep property\n\nInfluences how much rep the player can gain from factions when selling stolen documents and secrets\n\n**Signature:**\n\n```typescript\nInfiltrationRep: number;\n```\n", "bitburner.bitnodemultipliers.crimeexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CrimeExpGain](./bitburner.bitnodemultipliers.crimeexpgain.md)\n\n## BitNodeMultipliers.CrimeExpGain property\n\nInfluences the base experience gained for each ability when the player commits a crime.\n\n**Signature:**\n\n```typescript\nCrimeExpGain: number;\n```\n", "ns.bitnodemultipliers.crimeexpgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [CrimeExpGain](./bitburner.bitnodemultipliers.crimeexpgain.md)\n\n## BitNodeMultipliers.CrimeExpGain property\n\nInfluences the base experience gained for each ability when the player commits a crime.\n\n**Signature:**\n\n```typescript\nCrimeExpGain: number;\n```\n", "bitburner.corpindustrydata.robotfactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [robotFactor](./bitburner.corpindustrydata.robotfactor.md)\n\n## CorpIndustryData.robotFactor property\n\nRobots factor\n\n**Signature:**\n\n```typescript\nrobotFactor?: number;\n```\n", "ns.corpindustrydata.robotfactor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [robotFactor](./bitburner.corpindustrydata.robotfactor.md)\n\n## CorpIndustryData.robotFactor property\n\nRobots factor\n\n**Signature:**\n\n```typescript\nrobotFactor?: number;\n```\n", "bitburner.sleevecompanytask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveCompanyTask](./bitburner.sleevecompanytask.md)\n\n## SleeveCompanyTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveCompanyTask = { type: \"COMPANY\"; companyName: string };\n```\n", "ns.sleevecompanytask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveCompanyTask](./bitburner.sleevecompanytask.md)\n\n## SleeveCompanyTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveCompanyTask = { type: \"COMPANY\"; companyName: string };\n```\n", "bitburner.multipliers.agility_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [agility\\_exp](./bitburner.multipliers.agility_exp.md)\n\n## Multipliers.agility\\_exp property\n\nMultiplier to agility experience gain rate\n\n**Signature:**\n\n```typescript\nagility_exp: number;\n```\n", "ns.multipliers.agility_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [agility\\_exp](./bitburner.multipliers.agility_exp.md)\n\n## Multipliers.agility\\_exp property\n\nMultiplier to agility experience gain rate\n\n**Signature:**\n\n```typescript\nagility_exp: number;\n```\n", "bitburner.crimestats.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [type](./bitburner.crimestats.type.md)\n\n## CrimeStats.type property\n\nDescription of the crime activity\n\n**Signature:**\n\n```typescript\ntype: string;\n```\n", "ns.crimestats.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [type](./bitburner.crimestats.type.md)\n\n## CrimeStats.type property\n\nDescription of the crime activity\n\n**Signature:**\n\n```typescript\ntype: string;\n```\n", "bitburner.ns.ps.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ps](./bitburner.ns.ps.md)\n\n## NS.ps() method\n\nList running scripts on a server.\n\n**Signature:**\n\n```typescript\nps(host?: string): ProcessInfo[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ Host address of the target server. If not specified, it will be the current server\u2019s IP by default. |\n\n**Returns:**\n\n[ProcessInfo](./bitburner.processinfo.md)<!-- -->\\[\\]\n\nArray with general information about all scripts running on the specified target server.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nReturns an array with general information about all scripts running on the specified target server.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar scripts = ps(\"home\");\nfor (var i = 0; i < scripts.length; ++i) {\n    tprint(scripts[i].filename + ' ' + scripts[i].threads);\n    tprint(scripts[i].args);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst ps = ns.ps(\"home\");\nfor (let script of ps) {\n    ns.tprint(`${script.filename} ${script.threads}`);\n    ns.tprint(script.args);\n}\n```\n\n", "ns.ns.ps.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [ps](./bitburner.ns.ps.md)\n\n## NS.ps() method\n\nList running scripts on a server.\n\n**Signature:**\n\n```typescript\nps(host?: string): ProcessInfo[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ Host address of the target server. If not specified, it will be the current server\u2019s IP by default. |\n\n**Returns:**\n\n[ProcessInfo](./bitburner.processinfo.md)<!-- -->\\[\\]\n\nArray with general information about all scripts running on the specified target server.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nReturns an array with general information about all scripts running on the specified target server.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar scripts = ps(\"home\");\nfor (var i = 0; i < scripts.length; ++i) {\n    tprint(scripts[i].filename + ' ' + scripts[i].threads);\n    tprint(scripts[i].args);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nconst ps = ns.ps(\"home\");\nfor (let script of ps) {\n    ns.tprint(`${script.filename} ${script.threads}`);\n    ns.tprint(script.args);\n}\n```\n\n", "bitburner.bitnodemultipliers.staneksgiftpowermultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [StaneksGiftPowerMultiplier](./bitburner.bitnodemultipliers.staneksgiftpowermultiplier.md)\n\n## BitNodeMultipliers.StaneksGiftPowerMultiplier property\n\nInfluences the power of the gift\n\n**Signature:**\n\n```typescript\nStaneksGiftPowerMultiplier: number;\n```\n", "ns.bitnodemultipliers.staneksgiftpowermultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [StaneksGiftPowerMultiplier](./bitburner.bitnodemultipliers.staneksgiftpowermultiplier.md)\n\n## BitNodeMultipliers.StaneksGiftPowerMultiplier property\n\nInfluences the power of the gift\n\n**Signature:**\n\n```typescript\nStaneksGiftPowerMultiplier: number;\n```\n", "bitburner.gangmemberinfo.cha_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_exp](./bitburner.gangmemberinfo.cha_exp.md)\n\n## GangMemberInfo.cha\\_exp property\n\nCurrent charisma experience\n\n**Signature:**\n\n```typescript\ncha_exp: number;\n```\n", "ns.gangmemberinfo.cha_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [cha\\_exp](./bitburner.gangmemberinfo.cha_exp.md)\n\n## GangMemberInfo.cha\\_exp property\n\nCurrent charisma experience\n\n**Signature:**\n\n```typescript\ncha_exp: number;\n```\n", "bitburner.crimestats.strength_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [strength\\_exp](./bitburner.crimestats.strength_exp.md)\n\n## CrimeStats.strength\\_exp property\n\nstrength exp gained from crime\n\n**Signature:**\n\n```typescript\nstrength_exp: number;\n```\n", "ns.crimestats.strength_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [strength\\_exp](./bitburner.crimestats.strength_exp.md)\n\n## CrimeStats.strength\\_exp property\n\nstrength exp gained from crime\n\n**Signature:**\n\n```typescript\nstrength_exp: number;\n```\n", "bitburner.skills.intelligence.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [intelligence](./bitburner.skills.intelligence.md)\n\n## Skills.intelligence property\n\n**Signature:**\n\n```typescript\nintelligence: number;\n```\n", "ns.skills.intelligence.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Skills](./bitburner.skills.md) &gt; [intelligence](./bitburner.skills.intelligence.md)\n\n## Skills.intelligence property\n\n**Signature:**\n\n```typescript\nintelligence: number;\n```\n", "bitburner.userinterface.settheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [setTheme](./bitburner.userinterface.settheme.md)\n\n## UserInterface.setTheme() method\n\nSets the current theme\n\n**Signature:**\n\n```typescript\nsetTheme(newTheme: UserInterfaceTheme): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  newTheme | [UserInterfaceTheme](./bitburner.userinterfacetheme.md) |  |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n## Example\n\nUsage example (NS2)\n\n```ts\nconst theme = ns.ui.getTheme();\ntheme.primary = '#ff5500';\nns.ui.setTheme(theme);\n```\n\n", "ns.userinterface.settheme.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [setTheme](./bitburner.userinterface.settheme.md)\n\n## UserInterface.setTheme() method\n\nSets the current theme\n\n**Signature:**\n\n```typescript\nsetTheme(newTheme: UserInterfaceTheme): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  newTheme | [UserInterfaceTheme](./bitburner.userinterfacetheme.md) |  |\n\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n## Example\n\nUsage example (NS2)\n\n```ts\nconst theme = ns.ui.getTheme();\ntheme.primary = '#ff5500';\nns.ui.setTheme(theme);\n```\n\n", "bitburner.sleeve.getnumsleeves.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getNumSleeves](./bitburner.sleeve.getnumsleeves.md)\n\n## Sleeve.getNumSleeves() method\n\nGet the number of sleeves you own.\n\n**Signature:**\n\n```typescript\ngetNumSleeves(): number;\n```\n**Returns:**\n\nnumber\n\nnumber of duplicate sleeves the player has.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn the number of duplicate sleeves the player has.\n\n", "ns.sleeve.getnumsleeves.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [getNumSleeves](./bitburner.sleeve.getnumsleeves.md)\n\n## Sleeve.getNumSleeves() method\n\nGet the number of sleeves you own.\n\n**Signature:**\n\n```typescript\ngetNumSleeves(): number;\n```\n**Returns:**\n\nnumber\n\nnumber of duplicate sleeves the player has.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn the number of duplicate sleeves the player has.\n\n", "bitburner.bitnodemultipliers.bladeburnerskillcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [BladeburnerSkillCost](./bitburner.bitnodemultipliers.bladeburnerskillcost.md)\n\n## BitNodeMultipliers.BladeburnerSkillCost property\n\nInfluences the cost of skill levels from Bladeburner.\n\n**Signature:**\n\n```typescript\nBladeburnerSkillCost: number;\n```\n", "ns.bitnodemultipliers.bladeburnerskillcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [BladeburnerSkillCost](./bitburner.bitnodemultipliers.bladeburnerskillcost.md)\n\n## BitNodeMultipliers.BladeburnerSkillCost property\n\nInfluences the cost of skill levels from Bladeburner.\n\n**Signature:**\n\n```typescript\nBladeburnerSkillCost: number;\n```\n", "bitburner.corpconstants.warehouseinitialsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [warehouseInitialSize](./bitburner.corpconstants.warehouseinitialsize.md)\n\n## CorpConstants.warehouseInitialSize property\n\n**Signature:**\n\n```typescript\nwarehouseInitialSize: number;\n```\n", "ns.corpconstants.warehouseinitialsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [warehouseInitialSize](./bitburner.corpconstants.warehouseinitialsize.md)\n\n## CorpConstants.warehouseInitialSize property\n\n**Signature:**\n\n```typescript\nwarehouseInitialSize: number;\n```\n", "bitburner.ns.asleep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [asleep](./bitburner.ns.asleep.md)\n\n## NS.asleep() method\n\nSuspends the script for n milliseconds. Doesn't block with concurrent calls. You should prefer 'sleep' over 'asleep' except when doing very complex UI work.\n\n**Signature:**\n\n```typescript\nasleep(millis: number): Promise<true>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  millis | number | Number of milliseconds to sleep. |\n\n**Returns:**\n\nPromise&lt;true&gt;\n\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.asleep.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [asleep](./bitburner.ns.asleep.md)\n\n## NS.asleep() method\n\nSuspends the script for n milliseconds. Doesn't block with concurrent calls. You should prefer 'sleep' over 'asleep' except when doing very complex UI work.\n\n**Signature:**\n\n```typescript\nasleep(millis: number): Promise<true>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  millis | number | Number of milliseconds to sleep. |\n\n**Returns:**\n\nPromise&lt;true&gt;\n\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bladeburner.getcontractnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getContractNames](./bitburner.bladeburner.getcontractnames.md)\n\n## Bladeburner.getContractNames() method\n\nList all contracts.\n\n**Signature:**\n\n```typescript\ngetContractNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all Bladeburner contracts.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all Bladeburner contracts.\n\n", "ns.bladeburner.getcontractnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getContractNames](./bitburner.bladeburner.getcontractnames.md)\n\n## Bladeburner.getContractNames() method\n\nList all contracts.\n\n**Signature:**\n\n```typescript\ngetContractNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all Bladeburner contracts.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all Bladeburner contracts.\n\n", "bitburner.netscriptport.trywrite.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [tryWrite](./bitburner.netscriptport.trywrite.md)\n\n## NetscriptPort.tryWrite() method\n\nAttempt to write data to the port.\n\n**Signature:**\n\n```typescript\ntryWrite(value: string | number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  value | string \\| number |  |\n\n**Returns:**\n\nboolean\n\nTrue if the data was added to the port, false if the port was full\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.netscriptport.trywrite.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NetscriptPort](./bitburner.netscriptport.md) &gt; [tryWrite](./bitburner.netscriptport.trywrite.md)\n\n## NetscriptPort.tryWrite() method\n\nAttempt to write data to the port.\n\n**Signature:**\n\n```typescript\ntryWrite(value: string | number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  value | string \\| number |  |\n\n**Returns:**\n\nboolean\n\nTrue if the data was added to the port, false if the port was full\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bitnodemultipliers.worlddaemondifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [WorldDaemonDifficulty](./bitburner.bitnodemultipliers.worlddaemondifficulty.md)\n\n## BitNodeMultipliers.WorldDaemonDifficulty property\n\nInfluences the hacking skill required to backdoor the world daemon.\n\n**Signature:**\n\n```typescript\nWorldDaemonDifficulty: number;\n```\n", "ns.bitnodemultipliers.worlddaemondifficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [WorldDaemonDifficulty](./bitburner.bitnodemultipliers.worlddaemondifficulty.md)\n\n## BitNodeMultipliers.WorldDaemonDifficulty property\n\nInfluences the hacking skill required to backdoor the world daemon.\n\n**Signature:**\n\n```typescript\nWorldDaemonDifficulty: number;\n```\n", "bitburner.userinterfacetheme.primarylight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [primarylight](./bitburner.userinterfacetheme.primarylight.md)\n\n## UserInterfaceTheme.primarylight property\n\n**Signature:**\n\n```typescript\nprimarylight: string;\n```\n", "ns.userinterfacetheme.primarylight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [primarylight](./bitburner.userinterfacetheme.primarylight.md)\n\n## UserInterfaceTheme.primarylight property\n\n**Signature:**\n\n```typescript\nprimarylight: string;\n```\n", "bitburner.hacknetnodeconstants.corebasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [CoreBaseCost](./bitburner.hacknetnodeconstants.corebasecost.md)\n\n## HacknetNodeConstants.CoreBaseCost property\n\nBase cost to increase cores\n\n**Signature:**\n\n```typescript\nCoreBaseCost: number;\n```\n", "ns.hacknetnodeconstants.corebasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [CoreBaseCost](./bitburner.hacknetnodeconstants.corebasecost.md)\n\n## HacknetNodeConstants.CoreBaseCost property\n\nBase cost to increase cores\n\n**Signature:**\n\n```typescript\nCoreBaseCost: number;\n```\n", "bitburner.recentscript.timeofdeath.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RecentScript](./bitburner.recentscript.md) &gt; [timeOfDeath](./bitburner.recentscript.timeofdeath.md)\n\n## RecentScript.timeOfDeath property\n\nTimestamp of when the script was killed\n\n**Signature:**\n\n```typescript\ntimeOfDeath: Date;\n```\n", "ns.recentscript.timeofdeath.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RecentScript](./bitburner.recentscript.md) &gt; [timeOfDeath](./bitburner.recentscript.timeofdeath.md)\n\n## RecentScript.timeOfDeath property\n\nTimestamp of when the script was killed\n\n**Signature:**\n\n```typescript\ntimeOfDeath: Date;\n```\n", "bitburner.workstats.defexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [defExp](./bitburner.workstats.defexp.md)\n\n## WorkStats.defExp property\n\n**Signature:**\n\n```typescript\ndefExp: number;\n```\n", "ns.workstats.defexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [defExp](./bitburner.workstats.defexp.md)\n\n## WorkStats.defExp property\n\n**Signature:**\n\n```typescript\ndefExp: number;\n```\n", "bitburner.gangmemberinfo.dex_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_mult](./bitburner.gangmemberinfo.dex_mult.md)\n\n## GangMemberInfo.dex\\_mult property\n\nDexterity multiplier from equipment\n\n**Signature:**\n\n```typescript\ndex_mult: number;\n```\n", "ns.gangmemberinfo.dex_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [dex\\_mult](./bitburner.gangmemberinfo.dex_mult.md)\n\n## GangMemberInfo.dex\\_mult property\n\nDexterity multiplier from equipment\n\n**Signature:**\n\n```typescript\ndex_mult: number;\n```\n", "bitburner.bladeburner.getskillnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillNames](./bitburner.bladeburner.getskillnames.md)\n\n## Bladeburner.getSkillNames() method\n\nList all skills.\n\n**Signature:**\n\n```typescript\ngetSkillNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all general Bladeburner skills.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all general Bladeburner skills.\n\n", "ns.bladeburner.getskillnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [getSkillNames](./bitburner.bladeburner.getskillnames.md)\n\n## Bladeburner.getSkillNames() method\n\nList all skills.\n\n**Signature:**\n\n```typescript\ngetSkillNames(): string[];\n```\n**Returns:**\n\nstring\\[\\]\n\nArray of strings containing the names of all general Bladeburner skills.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\nReturns an array of strings containing the names of all general Bladeburner skills.\n\n", "bitburner.hacknetnodesformulas.ramupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [ramUpgradeCost](./bitburner.hacknetnodesformulas.ramupgradecost.md)\n\n## HacknetNodesFormulas.ramUpgradeCost() method\n\nCalculate cost of upgrading hacknet node ram.\n\n**Signature:**\n\n```typescript\nramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingRam | number | starting ram |\n|  extraLevels | number | _(Optional)_ amount of level of ram to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "ns.hacknetnodesformulas.ramupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodesFormulas](./bitburner.hacknetnodesformulas.md) &gt; [ramUpgradeCost](./bitburner.hacknetnodesformulas.ramupgradecost.md)\n\n## HacknetNodesFormulas.ramUpgradeCost() method\n\nCalculate cost of upgrading hacknet node ram.\n\n**Signature:**\n\n```typescript\nramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  startingRam | number | starting ram |\n|  extraLevels | number | _(Optional)_ amount of level of ram to purchase (defaults to 1) |\n|  costMult | number | _(Optional)_ player cost reduction (default to 1) |\n\n**Returns:**\n\nnumber\n\nThe calculated cost.\n\n", "bitburner.hacknetnodeconstants.maxcores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MaxCores](./bitburner.hacknetnodeconstants.maxcores.md)\n\n## HacknetNodeConstants.MaxCores property\n\nMax number of cores\n\n**Signature:**\n\n```typescript\nMaxCores: number;\n```\n", "ns.hacknetnodeconstants.maxcores.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [MaxCores](./bitburner.hacknetnodeconstants.maxcores.md)\n\n## HacknetNodeConstants.MaxCores property\n\nMax number of cores\n\n**Signature:**\n\n```typescript\nMaxCores: number;\n```\n", "bitburner.hacknetnodeconstants.basecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [BaseCost](./bitburner.hacknetnodeconstants.basecost.md)\n\n## HacknetNodeConstants.BaseCost property\n\nBase cost for a new node\n\n**Signature:**\n\n```typescript\nBaseCost: number;\n```\n", "ns.hacknetnodeconstants.basecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md) &gt; [BaseCost](./bitburner.hacknetnodeconstants.basecost.md)\n\n## HacknetNodeConstants.BaseCost property\n\nBase cost for a new node\n\n**Signature:**\n\n```typescript\nBaseCost: number;\n```\n", "bitburner.gangmemberinfo.moneygain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [moneyGain](./bitburner.gangmemberinfo.moneygain.md)\n\n## GangMemberInfo.moneyGain property\n\n**Signature:**\n\n```typescript\nmoneyGain: number;\n```\n", "ns.gangmemberinfo.moneygain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [moneyGain](./bitburner.gangmemberinfo.moneygain.md)\n\n## GangMemberInfo.moneyGain property\n\n**Signature:**\n\n```typescript\nmoneyGain: number;\n```\n", "bitburner.sleeve.settoshockrecovery.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToShockRecovery](./bitburner.sleeve.settoshockrecovery.md)\n\n## Sleeve.setToShockRecovery() method\n\nSet a sleeve to shock recovery.\n\n**Signature:**\n\n```typescript\nsetToShockRecovery(sleeveNumber: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start recovery. |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully.\n\n", "ns.sleeve.settoshockrecovery.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToShockRecovery](./bitburner.sleeve.settoshockrecovery.md)\n\n## Sleeve.setToShockRecovery() method\n\nSet a sleeve to shock recovery.\n\n**Signature:**\n\n```typescript\nsetToShockRecovery(sleeveNumber: number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start recovery. |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully.\n\n", "bitburner.ganggeninfo.territorywarfareengaged.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [territoryWarfareEngaged](./bitburner.ganggeninfo.territorywarfareengaged.md)\n\n## GangGenInfo.territoryWarfareEngaged property\n\nIndicating if territory warfare is enabled\n\n**Signature:**\n\n```typescript\nterritoryWarfareEngaged: boolean;\n```\n", "ns.ganggeninfo.territorywarfareengaged.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [territoryWarfareEngaged](./bitburner.ganggeninfo.territorywarfareengaged.md)\n\n## GangGenInfo.territoryWarfareEngaged property\n\nIndicating if territory warfare is enabled\n\n**Signature:**\n\n```typescript\nterritoryWarfareEngaged: boolean;\n```\n", "bitburner.stanek.giftheight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [giftHeight](./bitburner.stanek.giftheight.md)\n\n## Stanek.giftHeight() method\n\nStanek's Gift height.\n\n**Signature:**\n\n```typescript\ngiftHeight(): number;\n```\n**Returns:**\n\nnumber\n\nThe height of the gift.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\n", "ns.stanek.giftheight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [giftHeight](./bitburner.stanek.giftheight.md)\n\n## Stanek.giftHeight() method\n\nStanek's Gift height.\n\n**Signature:**\n\n```typescript\ngiftHeight(): number;\n```\n**Returns:**\n\nnumber\n\nThe height of the gift.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\n", "bitburner.moneysource.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [gang](./bitburner.moneysource.gang.md)\n\n## MoneySource.gang property\n\n**Signature:**\n\n```typescript\ngang: number;\n```\n", "ns.moneysource.gang.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [gang](./bitburner.moneysource.gang.md)\n\n## MoneySource.gang property\n\n**Signature:**\n\n```typescript\ngang: number;\n```\n", "bitburner.singularity.getcrimechance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCrimeChance](./bitburner.singularity.getcrimechance.md)\n\n## Singularity.getCrimeChance() method\n\nGet chance to successfully commit a crime.\n\n**Signature:**\n\n```typescript\ngetCrimeChance(crime: CrimeType | `${CrimeType}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  crime | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` | Name of crime. |\n\n**Returns:**\n\nnumber\n\nChance of success at committing the specified crime.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns your chance of success at committing the specified crime.\n\n", "ns.singularity.getcrimechance.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCrimeChance](./bitburner.singularity.getcrimechance.md)\n\n## Singularity.getCrimeChance() method\n\nGet chance to successfully commit a crime.\n\n**Signature:**\n\n```typescript\ngetCrimeChance(crime: CrimeType | `${CrimeType}`): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  crime | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` | Name of crime. |\n\n**Returns:**\n\nnumber\n\nChance of success at committing the specified crime.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nThis function returns your chance of success at committing the specified crime.\n\n", "bitburner.moneysource.casino.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [casino](./bitburner.moneysource.casino.md)\n\n## MoneySource.casino property\n\n**Signature:**\n\n```typescript\ncasino: number;\n```\n", "ns.moneysource.casino.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [casino](./bitburner.moneysource.casino.md)\n\n## MoneySource.casino property\n\n**Signature:**\n\n```typescript\ncasino: number;\n```\n", "bitburner.userinterface.getgameinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [getGameInfo](./bitburner.userinterface.getgameinfo.md)\n\n## UserInterface.getGameInfo() method\n\nGets the current game information (version, commit, ...)\n\n**Signature:**\n\n```typescript\ngetGameInfo(): GameInfo;\n```\n**Returns:**\n\n[GameInfo](./bitburner.gameinfo.md)\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.userinterface.getgameinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [getGameInfo](./bitburner.userinterface.getgameinfo.md)\n\n## UserInterface.getGameInfo() method\n\nGets the current game information (version, commit, ...)\n\n**Signature:**\n\n```typescript\ngetGameInfo(): GameInfo;\n```\n**Returns:**\n\n[GameInfo](./bitburner.gameinfo.md)\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.sleeve.settouniversitycourse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToUniversityCourse](./bitburner.sleeve.settouniversitycourse.md)\n\n## Sleeve.setToUniversityCourse() method\n\nSet a sleeve to take a class at a university.\n\n**Signature:**\n\n```typescript\nsetToUniversityCourse(sleeveNumber: number, university: string, className: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start taking class. |\n|  university | string | Name of the university to attend. |\n|  className | string | Name of the class to follow. |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully.\n\n", "ns.sleeve.settouniversitycourse.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToUniversityCourse](./bitburner.sleeve.settouniversitycourse.md)\n\n## Sleeve.setToUniversityCourse() method\n\nSet a sleeve to take a class at a university.\n\n**Signature:**\n\n```typescript\nsetToUniversityCourse(sleeveNumber: number, university: string, className: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to start taking class. |\n|  university | string | Name of the university to attend. |\n|  className | string | Name of the class to follow. |\n\n**Returns:**\n\nboolean\n\nTrue if this action was set successfully, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not this action was set successfully.\n\n", "bitburner.corpindustrydata.producedmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [producedMaterials](./bitburner.corpindustrydata.producedmaterials.md)\n\n## CorpIndustryData.producedMaterials property\n\n**Signature:**\n\n```typescript\nproducedMaterials?: CorpMaterialName[];\n```\n", "ns.corpindustrydata.producedmaterials.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpIndustryData](./bitburner.corpindustrydata.md) &gt; [producedMaterials](./bitburner.corpindustrydata.producedmaterials.md)\n\n## CorpIndustryData.producedMaterials property\n\n**Signature:**\n\n```typescript\nproducedMaterials?: CorpMaterialName[];\n```\n", "bitburner.ganggeninfo.ishacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [isHacking](./bitburner.ganggeninfo.ishacking.md)\n\n## GangGenInfo.isHacking property\n\nIndicating whether or not it's a hacking gang\n\n**Signature:**\n\n```typescript\nisHacking: boolean;\n```\n", "ns.ganggeninfo.ishacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [isHacking](./bitburner.ganggeninfo.ishacking.md)\n\n## GangGenInfo.isHacking property\n\nIndicating whether or not it's a hacking gang\n\n**Signature:**\n\n```typescript\nisHacking: boolean;\n```\n", "bitburner.division.thiscyclerevenue.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [thisCycleRevenue](./bitburner.division.thiscyclerevenue.md)\n\n## Division.thisCycleRevenue property\n\nRevenue this cycle\n\n**Signature:**\n\n```typescript\nthisCycleRevenue: number;\n```\n", "ns.division.thiscyclerevenue.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Division](./bitburner.division.md) &gt; [thisCycleRevenue](./bitburner.division.thiscyclerevenue.md)\n\n## Division.thisCycleRevenue property\n\nRevenue this cycle\n\n**Signature:**\n\n```typescript\nthisCycleRevenue: number;\n```\n", "bitburner.userinterfacetheme.successdark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [successdark](./bitburner.userinterfacetheme.successdark.md)\n\n## UserInterfaceTheme.successdark property\n\n**Signature:**\n\n```typescript\nsuccessdark: string;\n```\n", "ns.userinterfacetheme.successdark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [successdark](./bitburner.userinterfacetheme.successdark.md)\n\n## UserInterfaceTheme.successdark property\n\n**Signature:**\n\n```typescript\nsuccessdark: string;\n```\n", "bitburner.tix.getvolatility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getVolatility](./bitburner.tix.getvolatility.md)\n\n## TIX.getVolatility() method\n\nReturns the volatility of the specified stock.\n\n**Signature:**\n\n```typescript\ngetVolatility(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nVolatility of the specified stock.\n\n## Remarks\n\nRAM cost: 2.5 GB Volatility represents the maximum percentage by which a stock\u2019s price can change every tick. The volatility is returned as a decimal value, NOT a percentage (e.g. if a stock has a volatility of 3%, then this function will return 0.03, NOT 3).\n\nIn order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\n\n", "ns.tix.getvolatility.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [getVolatility](./bitburner.tix.getvolatility.md)\n\n## TIX.getVolatility() method\n\nReturns the volatility of the specified stock.\n\n**Signature:**\n\n```typescript\ngetVolatility(sym: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sym | string | Stock symbol. |\n\n**Returns:**\n\nnumber\n\nVolatility of the specified stock.\n\n## Remarks\n\nRAM cost: 2.5 GB Volatility represents the maximum percentage by which a stock\u2019s price can change every tick. The volatility is returned as a decimal value, NOT a percentage (e.g. if a stock has a volatility of 3%, then this function will return 0.03, NOT 3).\n\nIn order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\n\n", "bitburner.ns.getpurchasedserverupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerUpgradeCost](./bitburner.ns.getpurchasedserverupgradecost.md)\n\n## NS.getPurchasedServerUpgradeCost() method\n\nGet cost of upgrading a purchased server to the given ram.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerUpgradeCost(hostname: string, ram: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Hostname of the server to upgrade. |\n|  ram | number | Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nnumber\n\nThe price to upgrade.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "ns.ns.getpurchasedserverupgradecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPurchasedServerUpgradeCost](./bitburner.ns.getpurchasedserverupgradecost.md)\n\n## NS.getPurchasedServerUpgradeCost() method\n\nGet cost of upgrading a purchased server to the given ram.\n\n**Signature:**\n\n```typescript\ngetPurchasedServerUpgradeCost(hostname: string, ram: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  hostname | string | Hostname of the server to upgrade. |\n|  ram | number | Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20). |\n\n**Returns:**\n\nnumber\n\nThe price to upgrade.\n\n## Remarks\n\nRAM cost: 0.1 GB\n\n", "bitburner.ns.corporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [corporation](./bitburner.ns.corporation.md)\n\n## NS.corporation property\n\nNamespace for corporation functions. RAM cost: 1022.4 GB\n\n**Signature:**\n\n```typescript\nreadonly corporation: Corporation;\n```\n", "ns.ns.corporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [corporation](./bitburner.ns.corporation.md)\n\n## NS.corporation property\n\nNamespace for corporation functions. RAM cost: 1022.4 GB\n\n**Signature:**\n\n```typescript\nreadonly corporation: Corporation;\n```\n", "bitburner.workstats.chaexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [chaExp](./bitburner.workstats.chaexp.md)\n\n## WorkStats.chaExp property\n\n**Signature:**\n\n```typescript\nchaExp: number;\n```\n", "ns.workstats.chaexp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WorkStats](./bitburner.workstats.md) &gt; [chaExp](./bitburner.workstats.chaexp.md)\n\n## WorkStats.chaExp property\n\n**Signature:**\n\n```typescript\nchaExp: number;\n```\n", "bitburner.stanek.fragmentdefinitions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [fragmentDefinitions](./bitburner.stanek.fragmentdefinitions.md)\n\n## Stanek.fragmentDefinitions() method\n\nList possible fragments.\n\n**Signature:**\n\n```typescript\nfragmentDefinitions(): Fragment[];\n```\n**Returns:**\n\n[Fragment](./bitburner.fragment.md)<!-- -->\\[\\]\n\nList of possible fragments.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.stanek.fragmentdefinitions.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [fragmentDefinitions](./bitburner.stanek.fragmentdefinitions.md)\n\n## Stanek.fragmentDefinitions() method\n\nList possible fragments.\n\n**Signature:**\n\n```typescript\nfragmentDefinitions(): Fragment[];\n```\n**Returns:**\n\n[Fragment](./bitburner.fragment.md)<!-- -->\\[\\]\n\nList of possible fragments.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.bitnodemultipliers.agilitylevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [AgilityLevelMultiplier](./bitburner.bitnodemultipliers.agilitylevelmultiplier.md)\n\n## BitNodeMultipliers.AgilityLevelMultiplier property\n\nInfluences how quickly the player's agility level (not exp) scales\n\n**Signature:**\n\n```typescript\nAgilityLevelMultiplier: number;\n```\n", "ns.bitnodemultipliers.agilitylevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [AgilityLevelMultiplier](./bitburner.bitnodemultipliers.agilitylevelmultiplier.md)\n\n## BitNodeMultipliers.AgilityLevelMultiplier property\n\nInfluences how quickly the player's agility level (not exp) scales\n\n**Signature:**\n\n```typescript\nAgilityLevelMultiplier: number;\n```\n", "bitburner.gangmemberinfo.str_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_exp](./bitburner.gangmemberinfo.str_exp.md)\n\n## GangMemberInfo.str\\_exp property\n\nCurrent strength experience\n\n**Signature:**\n\n```typescript\nstr_exp: number;\n```\n", "ns.gangmemberinfo.str_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [str\\_exp](./bitburner.gangmemberinfo.str_exp.md)\n\n## GangMemberInfo.str\\_exp property\n\nCurrent strength experience\n\n**Signature:**\n\n```typescript\nstr_exp: number;\n```\n", "bitburner.server.httpportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [httpPortOpen](./bitburner.server.httpportopen.md)\n\n## Server.httpPortOpen property\n\nFlag indicating whether HTTP Port is open\n\n**Signature:**\n\n```typescript\nhttpPortOpen: boolean;\n```\n", "ns.server.httpportopen.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Server](./bitburner.server.md) &gt; [httpPortOpen](./bitburner.server.httpportopen.md)\n\n## Server.httpPortOpen property\n\nFlag indicating whether HTTP Port is open\n\n**Signature:**\n\n```typescript\nhttpPortOpen: boolean;\n```\n", "bitburner.corporationinfo.totalshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [totalShares](./bitburner.corporationinfo.totalshares.md)\n\n## CorporationInfo.totalShares property\n\nTotal number of shares issues by this corporation\n\n**Signature:**\n\n```typescript\ntotalShares: number;\n```\n", "ns.corporationinfo.totalshares.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [totalShares](./bitburner.corporationinfo.totalshares.md)\n\n## CorporationInfo.totalShares property\n\nTotal number of shares issues by this corporation\n\n**Signature:**\n\n```typescript\ntotalShares: number;\n```\n", "bitburner.corpmaterialconstantdata.demandrange.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [demandRange](./bitburner.corpmaterialconstantdata.demandrange.md)\n\n## CorpMaterialConstantData.demandRange property\n\nMin and max demand\n\n**Signature:**\n\n```typescript\ndemandRange: [min: number, max: number];\n```\n", "ns.corpmaterialconstantdata.demandrange.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialConstantData](./bitburner.corpmaterialconstantdata.md) &gt; [demandRange](./bitburner.corpmaterialconstantdata.demandrange.md)\n\n## CorpMaterialConstantData.demandRange property\n\nMin and max demand\n\n**Signature:**\n\n```typescript\ndemandRange: [min: number, max: number];\n```\n", "bitburner.officeapi.hasresearched.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [hasResearched](./bitburner.officeapi.hasresearched.md)\n\n## OfficeAPI.hasResearched() method\n\nGets if you have unlocked a research\n\n**Signature:**\n\n```typescript\nhasResearched(divisionName: string, researchName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  researchName | string | Name of the research |\n\n**Returns:**\n\nboolean\n\ntrue is unlocked, false if not\n\n", "ns.officeapi.hasresearched.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [hasResearched](./bitburner.officeapi.hasresearched.md)\n\n## OfficeAPI.hasResearched() method\n\nGets if you have unlocked a research\n\n**Signature:**\n\n```typescript\nhasResearched(divisionName: string, researchName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  researchName | string | Name of the research |\n\n**Returns:**\n\nboolean\n\ntrue is unlocked, false if not\n\n", "bitburner.multipliers.work_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [work\\_money](./bitburner.multipliers.work_money.md)\n\n## Multipliers.work\\_money property\n\nMultiplier to amount of money gained from working\n\n**Signature:**\n\n```typescript\nwork_money: number;\n```\n", "ns.multipliers.work_money.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [work\\_money](./bitburner.multipliers.work_money.md)\n\n## Multipliers.work\\_money property\n\nMultiplier to amount of money gained from working\n\n**Signature:**\n\n```typescript\nwork_money: number;\n```\n", "bitburner.ns.scan.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scan](./bitburner.ns.scan.md)\n\n## NS.scan() method\n\nGet the list of servers connected to a server.\n\n**Signature:**\n\n```typescript\nscan(host?: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ Optional. Hostname of the server to scan, default to current server. |\n\n**Returns:**\n\nstring\\[\\]\n\nReturns an array of hostnames.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nReturns an array containing the hostnames of all servers that are one node way from the specified target server. The hostnames in the returned array are strings.\n\n## Example 1\n\n\n```ts\n// NS1\n// All servers that are one hop from the current server.\ntprint(\"Neighbors of current server.\");\nvar neighbor = scan();\nfor (var i = 0; i < neighbor.length; i++) {\n    tprint(neighbor[i]);\n}\n// All neighbors of n00dles.\nvar target = \"n00dles\";\nneighbor = scan(target);\ntprintf(\"Neighbors of %s.\", target);\nfor (var i = 0; i < neighbor.length; i++) {\n    tprint(neighbor[i]);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2\n// All servers that are one hop from the current server.\nns.tprint(\"Neighbors of current server.\");\nlet neighbor = ns.scan();\nfor (let i = 0; i < neighbor.length; i++) {\n    ns.tprint(neighbor[i]);\n}\n// All neighbors of n00dles.\nconst target = \"n00dles\";\nneighbor = ns.scan(target);\nns.tprintf(\"Neighbors of %s.\", target);\nfor (let i = 0; i < neighbor.length; i++) {\n    ns.tprint(neighbor[i]);\n}\n```\n\n", "ns.ns.scan.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scan](./bitburner.ns.scan.md)\n\n## NS.scan() method\n\nGet the list of servers connected to a server.\n\n**Signature:**\n\n```typescript\nscan(host?: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | _(Optional)_ Optional. Hostname of the server to scan, default to current server. |\n\n**Returns:**\n\nstring\\[\\]\n\nReturns an array of hostnames.\n\n## Remarks\n\nRAM cost: 0.2 GB\n\nReturns an array containing the hostnames of all servers that are one node way from the specified target server. The hostnames in the returned array are strings.\n\n## Example 1\n\n\n```ts\n// NS1\n// All servers that are one hop from the current server.\ntprint(\"Neighbors of current server.\");\nvar neighbor = scan();\nfor (var i = 0; i < neighbor.length; i++) {\n    tprint(neighbor[i]);\n}\n// All neighbors of n00dles.\nvar target = \"n00dles\";\nneighbor = scan(target);\ntprintf(\"Neighbors of %s.\", target);\nfor (var i = 0; i < neighbor.length; i++) {\n    tprint(neighbor[i]);\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2\n// All servers that are one hop from the current server.\nns.tprint(\"Neighbors of current server.\");\nlet neighbor = ns.scan();\nfor (let i = 0; i < neighbor.length; i++) {\n    ns.tprint(neighbor[i]);\n}\n// All neighbors of n00dles.\nconst target = \"n00dles\";\nneighbor = ns.scan(target);\nns.tprintf(\"Neighbors of %s.\", target);\nfor (let i = 0; i < neighbor.length; i++) {\n    ns.tprint(neighbor[i]);\n}\n```\n\n", "bitburner.ns.scp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scp](./bitburner.ns.scp.md)\n\n## NS.scp() method\n\nCopy file between servers.\n\n**Signature:**\n\n```typescript\nscp(files: string | string[], destination: string, source?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  files | string \\| string\\[\\] | Filename or an array of filenames of script/literature files to copy. Note that if a file is located in a subdirectory, the filename must include the leading <code>/</code>. |\n|  destination | string | Hostname of the destination server, which is the server to which the file will be copied. |\n|  source | string | _(Optional)_ Hostname of the source server, which is the server from which the file will be copied. This argument is optional and if it\u2019s omitted the source will be the current server. |\n\n**Returns:**\n\nboolean\n\nTrue if the file is successfully copied over and false otherwise. If the files argument is an array then this function will return false if any of the operations failed.\n\n## Remarks\n\nRAM cost: 0.6 GB\n\nCopies a script or literature (.lit) file(s) to another server. The files argument can be either a string specifying a single file to copy, or an array of strings specifying multiple files to copy.\n\n## Example 1\n\n\n```js\n//Copies foo.lit from the helios server to the home computer:\nns.scp(\"foo.lit\", \"home\", \"helios\" );\n\n//Tries to copy three files from rothman-uni to home computer:\nfiles = [\"foo1.lit\", \"foo2.txt\", \"foo3.js\"];\nns.scp(files, \"home\", \"rothman-uni\");\n```\n\n## Example 2\n\n\n```js\nconst server = ns.args[0];\nconst files = [\"hack.js\", \"weaken.js\", \"grow.js\"];\nns.scp(files, server, \"home\");\n```\n\n", "ns.ns.scp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [scp](./bitburner.ns.scp.md)\n\n## NS.scp() method\n\nCopy file between servers.\n\n**Signature:**\n\n```typescript\nscp(files: string | string[], destination: string, source?: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  files | string \\| string\\[\\] | Filename or an array of filenames of script/literature files to copy. Note that if a file is located in a subdirectory, the filename must include the leading <code>/</code>. |\n|  destination | string | Hostname of the destination server, which is the server to which the file will be copied. |\n|  source | string | _(Optional)_ Hostname of the source server, which is the server from which the file will be copied. This argument is optional and if it\u2019s omitted the source will be the current server. |\n\n**Returns:**\n\nboolean\n\nTrue if the file is successfully copied over and false otherwise. If the files argument is an array then this function will return false if any of the operations failed.\n\n## Remarks\n\nRAM cost: 0.6 GB\n\nCopies a script or literature (.lit) file(s) to another server. The files argument can be either a string specifying a single file to copy, or an array of strings specifying multiple files to copy.\n\n## Example 1\n\n\n```js\n//Copies foo.lit from the helios server to the home computer:\nns.scp(\"foo.lit\", \"home\", \"helios\" );\n\n//Tries to copy three files from rothman-uni to home computer:\nfiles = [\"foo1.lit\", \"foo2.txt\", \"foo3.js\"];\nns.scp(files, \"home\", \"rothman-uni\");\n```\n\n## Example 2\n\n\n```js\nconst server = ns.args[0];\nconst files = [\"hack.js\", \"weaken.js\", \"grow.js\"];\nns.scp(files, server, \"home\");\n```\n\n", "bitburner.hackingmultipliers.growth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [growth](./bitburner.hackingmultipliers.growth.md)\n\n## HackingMultipliers.growth property\n\nPlayer's hacking growth multiplier\n\n**Signature:**\n\n```typescript\ngrowth: number;\n```\n", "ns.hackingmultipliers.growth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HackingMultipliers](./bitburner.hackingmultipliers.md) &gt; [growth](./bitburner.hackingmultipliers.growth.md)\n\n## HackingMultipliers.growth property\n\nPlayer's hacking growth multiplier\n\n**Signature:**\n\n```typescript\ngrowth: number;\n```\n", "bitburner.singularity.gotolocation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [goToLocation](./bitburner.singularity.gotolocation.md)\n\n## Singularity.goToLocation() method\n\nGo to a location.\n\n**Signature:**\n\n```typescript\ngoToLocation(locationName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  locationName | string | Name of the location. |\n\n**Returns:**\n\nboolean\n\nTrue if the player was moved there, false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nMove the player to a specific location.\n\n", "ns.singularity.gotolocation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [goToLocation](./bitburner.singularity.gotolocation.md)\n\n## Singularity.goToLocation() method\n\nGo to a location.\n\n**Signature:**\n\n```typescript\ngoToLocation(locationName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  locationName | string | Name of the location. |\n\n**Returns:**\n\nboolean\n\nTrue if the player was moved there, false otherwise.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nMove the player to a specific location.\n\n", "bitburner.ns.trywriteport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tryWritePort](./bitburner.ns.trywriteport.md)\n\n## NS.tryWritePort() method\n\nAttempt to write to a port.\n\n**Signature:**\n\n```typescript\ntryWritePort(port: number, data: string | number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number | Port or text file that will be written to. |\n|  data | string \\| number | Data to write. |\n\n**Returns:**\n\nboolean\n\nTrue if the data is successfully written to the port, and false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nAttempts to write data to the specified Netscript port. If the port is full, the data will not be written. Otherwise, the data will be written normally.\n\n", "ns.ns.trywriteport.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [tryWritePort](./bitburner.ns.trywriteport.md)\n\n## NS.tryWritePort() method\n\nAttempt to write to a port.\n\n**Signature:**\n\n```typescript\ntryWritePort(port: number, data: string | number): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number | Port or text file that will be written to. |\n|  data | string \\| number | Data to write. |\n\n**Returns:**\n\nboolean\n\nTrue if the data is successfully written to the port, and false otherwise.\n\n## Remarks\n\nRAM cost: 0 GB\n\nAttempts to write data to the specified Netscript port. If the port is full, the data will not be written. Otherwise, the data will be written normally.\n\n", "bitburner.crimestats.agility_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [agility\\_exp](./bitburner.crimestats.agility_exp.md)\n\n## CrimeStats.agility\\_exp property\n\nagility exp gained from crime\n\n**Signature:**\n\n```typescript\nagility_exp: number;\n```\n", "ns.crimestats.agility_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [agility\\_exp](./bitburner.crimestats.agility_exp.md)\n\n## CrimeStats.agility\\_exp property\n\nagility exp gained from crime\n\n**Signature:**\n\n```typescript\nagility_exp: number;\n```\n", "bitburner.singularity.getaugmentationsfromfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationsFromFaction](./bitburner.singularity.getaugmentationsfromfaction.md)\n\n## Singularity.getAugmentationsFromFaction() method\n\nGet a list of augmentation available from a faction.\n\n**Signature:**\n\n```typescript\ngetAugmentationsFromFaction(faction: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray containing the names of all Augmentations.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nReturns an array containing the names (as strings) of all Augmentations that are available from the specified faction.\n\n", "ns.singularity.getaugmentationsfromfaction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getAugmentationsFromFaction](./bitburner.singularity.getaugmentationsfromfaction.md)\n\n## Singularity.getAugmentationsFromFaction() method\n\nGet a list of augmentation available from a faction.\n\n**Signature:**\n\n```typescript\ngetAugmentationsFromFaction(faction: string): string[];\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction. |\n\n**Returns:**\n\nstring\\[\\]\n\nArray containing the names of all Augmentations.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nReturns an array containing the names (as strings) of all Augmentations that are available from the specified faction.\n\n", "bitburner.gangmemberinfo.wantedlevelgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [wantedLevelGain](./bitburner.gangmemberinfo.wantedlevelgain.md)\n\n## GangMemberInfo.wantedLevelGain property\n\n**Signature:**\n\n```typescript\nwantedLevelGain: number;\n```\n", "ns.gangmemberinfo.wantedlevelgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [wantedLevelGain](./bitburner.gangmemberinfo.wantedlevelgain.md)\n\n## GangMemberInfo.wantedLevelGain property\n\n**Signature:**\n\n```typescript\nwantedLevelGain: number;\n```\n", "bitburner.corporationinfo.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [name](./bitburner.corporationinfo.name.md)\n\n## CorporationInfo.name property\n\nName of the corporation\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "ns.corporationinfo.name.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [name](./bitburner.corporationinfo.name.md)\n\n## CorporationInfo.name property\n\nName of the corporation\n\n**Signature:**\n\n```typescript\nname: string;\n```\n", "bitburner.multipliers.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking](./bitburner.multipliers.hacking.md)\n\n## Multipliers.hacking property\n\nMultiplier to hacking skill\n\n**Signature:**\n\n```typescript\nhacking: number;\n```\n", "ns.multipliers.hacking.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking](./bitburner.multipliers.hacking.md)\n\n## Multipliers.hacking property\n\nMultiplier to hacking skill\n\n**Signature:**\n\n```typescript\nhacking: number;\n```\n", "bitburner.corpconstants.minemployeedecay.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [minEmployeeDecay](./bitburner.corpconstants.minemployeedecay.md)\n\n## CorpConstants.minEmployeeDecay property\n\nThe minimum decay value for happiness/morale/energy\n\n**Signature:**\n\n```typescript\nminEmployeeDecay: number;\n```\n", "ns.corpconstants.minemployeedecay.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [minEmployeeDecay](./bitburner.corpconstants.minemployeedecay.md)\n\n## CorpConstants.minEmployeeDecay property\n\nThe minimum decay value for happiness/morale/energy\n\n**Signature:**\n\n```typescript\nminEmployeeDecay: number;\n```\n", "bitburner.hacknetserverconstants.maxlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxLevel](./bitburner.hacknetserverconstants.maxlevel.md)\n\n## HacknetServerConstants.MaxLevel property\n\nMax level for a server\n\n**Signature:**\n\n```typescript\nMaxLevel: number;\n```\n", "ns.hacknetserverconstants.maxlevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxLevel](./bitburner.hacknetserverconstants.maxlevel.md)\n\n## HacknetServerConstants.MaxLevel property\n\nMax level for a server\n\n**Signature:**\n\n```typescript\nMaxLevel: number;\n```\n", "bitburner.gangmemberinfo.hack_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_asc\\_mult](./bitburner.gangmemberinfo.hack_asc_mult.md)\n\n## GangMemberInfo.hack\\_asc\\_mult property\n\nHack multiplier from ascensions\n\n**Signature:**\n\n```typescript\nhack_asc_mult: number;\n```\n", "ns.gangmemberinfo.hack_asc_mult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [hack\\_asc\\_mult](./bitburner.gangmemberinfo.hack_asc_mult.md)\n\n## GangMemberInfo.hack\\_asc\\_mult property\n\nHack multiplier from ascensions\n\n**Signature:**\n\n```typescript\nhack_asc_mult: number;\n```\n", "bitburner.userinterface.resetstyles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [resetStyles](./bitburner.userinterface.resetstyles.md)\n\n## UserInterface.resetStyles() method\n\nResets the player's styles to the default values\n\n**Signature:**\n\n```typescript\nresetStyles(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.userinterface.resetstyles.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [resetStyles](./bitburner.userinterface.resetstyles.md)\n\n## UserInterface.resetStyles() method\n\nResets the player's styles to the default values\n\n**Signature:**\n\n```typescript\nresetStyles(): void;\n```\n**Returns:**\n\nvoid\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.codingcontract.getdescription.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getDescription](./bitburner.codingcontract.getdescription.md)\n\n## CodingContract.getDescription() method\n\nGet the description.\n\n**Signature:**\n\n```typescript\ngetDescription(filename: string, host?: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nstring\n\nContract\u2019s text description.\n\n## Remarks\n\nRAM cost: 5 GB\n\nGet the full text description for the problem posed by the Coding Contract.\n\n", "ns.codingcontract.getdescription.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CodingContract](./bitburner.codingcontract.md) &gt; [getDescription](./bitburner.codingcontract.getdescription.md)\n\n## CodingContract.getDescription() method\n\nGet the description.\n\n**Signature:**\n\n```typescript\ngetDescription(filename: string, host?: string): string;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  filename | string | Filename of the contract. |\n|  host | string | _(Optional)_ Hostname of the server containing the contract. Optional. Defaults to current server if not provided. |\n\n**Returns:**\n\nstring\n\nContract\u2019s text description.\n\n## Remarks\n\nRAM cost: 5 GB\n\nGet the full text description for the problem posed by the Coding Contract.\n\n", "bitburner.bitnodemultipliers.dexteritylevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [DexterityLevelMultiplier](./bitburner.bitnodemultipliers.dexteritylevelmultiplier.md)\n\n## BitNodeMultipliers.DexterityLevelMultiplier property\n\nInfluences how quickly the player's dexterity level (not exp) scales\n\n**Signature:**\n\n```typescript\nDexterityLevelMultiplier: number;\n```\n", "ns.bitnodemultipliers.dexteritylevelmultiplier.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [DexterityLevelMultiplier](./bitburner.bitnodemultipliers.dexteritylevelmultiplier.md)\n\n## BitNodeMultipliers.DexterityLevelMultiplier property\n\nInfluences how quickly the player's dexterity level (not exp) scales\n\n**Signature:**\n\n```typescript\nDexterityLevelMultiplier: number;\n```\n", "bitburner.sleeveperson.sync.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [sync](./bitburner.sleeveperson.sync.md)\n\n## SleevePerson.sync property\n\nNumber 1-100 Experience earned by this sleeve and shared with the player is multiplied with sync% after shock%\n\n**Signature:**\n\n```typescript\nsync: number;\n```\n", "ns.sleeveperson.sync.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleevePerson](./bitburner.sleeveperson.md) &gt; [sync](./bitburner.sleeveperson.sync.md)\n\n## SleevePerson.sync property\n\nNumber 1-100 Experience earned by this sleeve and shared with the player is multiplied with sync% after shock%\n\n**Signature:**\n\n```typescript\nsync: number;\n```\n", "bitburner.corpmaterialname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialName](./bitburner.corpmaterialname.md)\n\n## CorpMaterialName type\n\n\n**Signature:**\n\n```typescript\ntype CorpMaterialName =\n  | \"Water\"\n  | \"Energy\"\n  | \"Food\"\n  | \"Plants\"\n  | \"Metal\"\n  | \"Hardware\"\n  | \"Chemicals\"\n  | \"Drugs\"\n  | \"Robots\"\n  | \"AI Cores\"\n  | \"Real Estate\";\n```\n", "ns.corpmaterialname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpMaterialName](./bitburner.corpmaterialname.md)\n\n## CorpMaterialName type\n\n\n**Signature:**\n\n```typescript\ntype CorpMaterialName =\n  | \"Water\"\n  | \"Energy\"\n  | \"Food\"\n  | \"Plants\"\n  | \"Metal\"\n  | \"Hardware\"\n  | \"Chemicals\"\n  | \"Drugs\"\n  | \"Robots\"\n  | \"AI Cores\"\n  | \"Real Estate\";\n```\n", "bitburner.skillsformulas.calculateskill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SkillsFormulas](./bitburner.skillsformulas.md) &gt; [calculateSkill](./bitburner.skillsformulas.calculateskill.md)\n\n## SkillsFormulas.calculateSkill() method\n\nCalculate skill level.\n\n**Signature:**\n\n```typescript\ncalculateSkill(exp: number, skillMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  exp | number | experience for that skill |\n|  skillMult | number | _(Optional)_ Multiplier for that skill, defaults to 1. |\n\n**Returns:**\n\nnumber\n\nThe calculated skill level.\n\n", "ns.skillsformulas.calculateskill.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SkillsFormulas](./bitburner.skillsformulas.md) &gt; [calculateSkill](./bitburner.skillsformulas.calculateskill.md)\n\n## SkillsFormulas.calculateSkill() method\n\nCalculate skill level.\n\n**Signature:**\n\n```typescript\ncalculateSkill(exp: number, skillMult?: number): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  exp | number | experience for that skill |\n|  skillMult | number | _(Optional)_ Multiplier for that skill, defaults to 1. |\n\n**Returns:**\n\nnumber\n\nThe calculated skill level.\n\n", "bitburner.warehouseapi.limitmaterialproduction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [limitMaterialProduction](./bitburner.warehouseapi.limitmaterialproduction.md)\n\n## WarehouseAPI.limitMaterialProduction() method\n\nLimit Material Production.\n\n**Signature:**\n\n```typescript\nlimitMaterialProduction(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    materialName: string,\n    qty: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city. |\n|  materialName | string | Name of the material. |\n|  qty | number | Amount to limit to. Pass a negative value to remove the limit instead. |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.limitmaterialproduction.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [limitMaterialProduction](./bitburner.warehouseapi.limitmaterialproduction.md)\n\n## WarehouseAPI.limitMaterialProduction() method\n\nLimit Material Production.\n\n**Signature:**\n\n```typescript\nlimitMaterialProduction(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    materialName: string,\n    qty: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division. |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city. |\n|  materialName | string | Name of the material. |\n|  qty | number | Amount to limit to. Pass a negative value to remove the limit instead. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.userinterfacetheme.warningdark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [warningdark](./bitburner.userinterfacetheme.warningdark.md)\n\n## UserInterfaceTheme.warningdark property\n\n**Signature:**\n\n```typescript\nwarningdark: string;\n```\n", "ns.userinterfacetheme.warningdark.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [warningdark](./bitburner.userinterfacetheme.warningdark.md)\n\n## UserInterfaceTheme.warningdark property\n\n**Signature:**\n\n```typescript\nwarningdark: string;\n```\n", "bitburner.userinterfacetheme.warninglight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [warninglight](./bitburner.userinterfacetheme.warninglight.md)\n\n## UserInterfaceTheme.warninglight property\n\n**Signature:**\n\n```typescript\nwarninglight: string;\n```\n", "ns.userinterfacetheme.warninglight.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [warninglight](./bitburner.userinterfacetheme.warninglight.md)\n\n## UserInterfaceTheme.warninglight property\n\n**Signature:**\n\n```typescript\nwarninglight: string;\n```\n", "bitburner.office.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md)\n\n## Office interface\n\nOffice for a division in a city.\n\n**Signature:**\n\n```typescript\nexport interface Office \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [avgEne](./bitburner.office.avgene.md) |  | number | Average energy of the employees |\n|  [avgHap](./bitburner.office.avghap.md) |  | number | Average happiness of the employees |\n|  [avgMor](./bitburner.office.avgmor.md) |  | number | Average morale of the employees |\n|  [employeeJobs](./bitburner.office.employeejobs.md) |  | Record&lt;[CorpEmployeePosition](./bitburner.corpemployeeposition.md)<!-- -->, number&gt; | Positions of the employees |\n|  [employeeProd](./bitburner.office.employeeprod.md) |  | Record&lt;[CorpEmployeePosition](./bitburner.corpemployeeposition.md)<!-- -->, number&gt; | Production of the employees |\n|  [employees](./bitburner.office.employees.md) |  | number | Amount of employees |\n|  [loc](./bitburner.office.loc.md) |  | [CityName](./bitburner.cityname.md) | City of the office |\n|  [maxEne](./bitburner.office.maxene.md) |  | number | Maximum amount of energy of the employees |\n|  [maxHap](./bitburner.office.maxhap.md) |  | number | Maximum happiness of the employees |\n|  [maxMor](./bitburner.office.maxmor.md) |  | number | Maximum morale of the employees |\n|  [size](./bitburner.office.size.md) |  | number | Maximum number of employee |\n\n", "ns.office.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md)\n\n## Office interface\n\nOffice for a division in a city.\n\n**Signature:**\n\n```typescript\nexport interface Office \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [avgEne](./bitburner.office.avgene.md) |  | number | Average energy of the employees |\n|  [avgHap](./bitburner.office.avghap.md) |  | number | Average happiness of the employees |\n|  [avgMor](./bitburner.office.avgmor.md) |  | number | Average morale of the employees |\n|  [employeeJobs](./bitburner.office.employeejobs.md) |  | Record&lt;[CorpEmployeePosition](./bitburner.corpemployeeposition.md)<!-- -->, number&gt; | Positions of the employees |\n|  [employeeProd](./bitburner.office.employeeprod.md) |  | Record&lt;[CorpEmployeePosition](./bitburner.corpemployeeposition.md)<!-- -->, number&gt; | Production of the employees |\n|  [employees](./bitburner.office.employees.md) |  | number | Amount of employees |\n|  [loc](./bitburner.office.loc.md) |  | [CityName](./bitburner.cityname.md) | City of the office |\n|  [maxEne](./bitburner.office.maxene.md) |  | number | Maximum amount of energy of the employees |\n|  [maxHap](./bitburner.office.maxhap.md) |  | number | Maximum happiness of the employees |\n|  [maxMor](./bitburner.office.maxmor.md) |  | number | Maximum morale of the employees |\n|  [size](./bitburner.office.size.md) |  | number | Maximum number of employee |\n\n", "bitburner.autocompletedata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md)\n\n## AutocompleteData interface\n\nUsed for autocompletion\n\n**Signature:**\n\n```typescript\ninterface AutocompleteData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [scripts](./bitburner.autocompletedata.scripts.md) |  | string\\[\\] |  |\n|  [servers](./bitburner.autocompletedata.servers.md) |  | string\\[\\] |  |\n|  [txts](./bitburner.autocompletedata.txts.md) |  | string\\[\\] |  |\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [flags(schema)](./bitburner.autocompletedata.flags.md) |  |\n\n", "ns.autocompletedata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md)\n\n## AutocompleteData interface\n\nUsed for autocompletion\n\n**Signature:**\n\n```typescript\ninterface AutocompleteData \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [scripts](./bitburner.autocompletedata.scripts.md) |  | string\\[\\] |  |\n|  [servers](./bitburner.autocompletedata.servers.md) |  | string\\[\\] |  |\n|  [txts](./bitburner.autocompletedata.txts.md) |  | string\\[\\] |  |\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [flags(schema)](./bitburner.autocompletedata.flags.md) |  |\n\n", "bitburner.multipliers.strength.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [strength](./bitburner.multipliers.strength.md)\n\n## Multipliers.strength property\n\nMultiplier to strength skill\n\n**Signature:**\n\n```typescript\nstrength: number;\n```\n", "ns.multipliers.strength.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [strength](./bitburner.multipliers.strength.md)\n\n## Multipliers.strength property\n\nMultiplier to strength skill\n\n**Signature:**\n\n```typescript\nstrength: number;\n```\n", "bitburner.hacknetnodeconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md)\n\n## HacknetNodeConstants interface\n\nHacknet node related constants\n\n**Signature:**\n\n```typescript\ninterface HacknetNodeConstants \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [BaseCost](./bitburner.hacknetnodeconstants.basecost.md) |  | number | Base cost for a new node |\n|  [CoreBaseCost](./bitburner.hacknetnodeconstants.corebasecost.md) |  | number | Base cost to increase cores |\n|  [LevelBaseCost](./bitburner.hacknetnodeconstants.levelbasecost.md) |  | number | Base cost per level |\n|  [MaxCores](./bitburner.hacknetnodeconstants.maxcores.md) |  | number | Max number of cores |\n|  [MaxLevel](./bitburner.hacknetnodeconstants.maxlevel.md) |  | number | Max node level |\n|  [MaxRam](./bitburner.hacknetnodeconstants.maxram.md) |  | number | Max amount of RAM in GB |\n|  [MoneyGainPerLevel](./bitburner.hacknetnodeconstants.moneygainperlevel.md) |  | number | Amount of money gained per level |\n|  [PurchaseNextMult](./bitburner.hacknetnodeconstants.purchasenextmult.md) |  | number | Multiplier to purchase new node |\n|  [RamBaseCost](./bitburner.hacknetnodeconstants.rambasecost.md) |  | number | Base cost to increase RAM |\n|  [UpgradeCoreMult](./bitburner.hacknetnodeconstants.upgradecoremult.md) |  | number | Multiplier to increase cores |\n|  [UpgradeLevelMult](./bitburner.hacknetnodeconstants.upgradelevelmult.md) |  | number | Multiplier to increase node level |\n|  [UpgradeRamMult](./bitburner.hacknetnodeconstants.upgraderammult.md) |  | number | Multiplier to increase RAM |\n\n", "ns.hacknetnodeconstants.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetNodeConstants](./bitburner.hacknetnodeconstants.md)\n\n## HacknetNodeConstants interface\n\nHacknet node related constants\n\n**Signature:**\n\n```typescript\ninterface HacknetNodeConstants \n```\n\n## Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [BaseCost](./bitburner.hacknetnodeconstants.basecost.md) |  | number | Base cost for a new node |\n|  [CoreBaseCost](./bitburner.hacknetnodeconstants.corebasecost.md) |  | number | Base cost to increase cores |\n|  [LevelBaseCost](./bitburner.hacknetnodeconstants.levelbasecost.md) |  | number | Base cost per level |\n|  [MaxCores](./bitburner.hacknetnodeconstants.maxcores.md) |  | number | Max number of cores |\n|  [MaxLevel](./bitburner.hacknetnodeconstants.maxlevel.md) |  | number | Max node level |\n|  [MaxRam](./bitburner.hacknetnodeconstants.maxram.md) |  | number | Max amount of RAM in GB |\n|  [MoneyGainPerLevel](./bitburner.hacknetnodeconstants.moneygainperlevel.md) |  | number | Amount of money gained per level |\n|  [PurchaseNextMult](./bitburner.hacknetnodeconstants.purchasenextmult.md) |  | number | Multiplier to purchase new node |\n|  [RamBaseCost](./bitburner.hacknetnodeconstants.rambasecost.md) |  | number | Base cost to increase RAM |\n|  [UpgradeCoreMult](./bitburner.hacknetnodeconstants.upgradecoremult.md) |  | number | Multiplier to increase cores |\n|  [UpgradeLevelMult](./bitburner.hacknetnodeconstants.upgradelevelmult.md) |  | number | Multiplier to increase node level |\n|  [UpgradeRamMult](./bitburner.hacknetnodeconstants.upgraderammult.md) |  | number | Multiplier to increase RAM |\n\n", "bitburner.userinterface.windowsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [windowSize](./bitburner.userinterface.windowsize.md)\n\n## UserInterface.windowSize() method\n\nGet the current window size\n\n**Signature:**\n\n```typescript\nwindowSize(): [number, number];\n```\n**Returns:**\n\n\\[number, number\\]\n\nAn array of 2 value containing the window width and height.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.userinterface.windowsize.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterface](./bitburner.userinterface.md) &gt; [windowSize](./bitburner.userinterface.windowsize.md)\n\n## UserInterface.windowSize() method\n\nGet the current window size\n\n**Signature:**\n\n```typescript\nwindowSize(): [number, number];\n```\n**Returns:**\n\n\\[number, number\\]\n\nAn array of 2 value containing the window width and height.\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.corporationinfo.funds.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [funds](./bitburner.corporationinfo.funds.md)\n\n## CorporationInfo.funds property\n\nFunds available\n\n**Signature:**\n\n```typescript\nfunds: number;\n```\n", "ns.corporationinfo.funds.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorporationInfo](./bitburner.corporationinfo.md) &gt; [funds](./bitburner.corporationinfo.funds.md)\n\n## CorporationInfo.funds property\n\nFunds available\n\n**Signature:**\n\n```typescript\nfunds: number;\n```\n", "bitburner.ns.enums.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [enums](./bitburner.ns.enums.md)\n\n## NS.enums property\n\n**Signature:**\n\n```typescript\nenums: NSEnums;\n```\n", "ns.ns.enums.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [enums](./bitburner.ns.enums.md)\n\n## NS.enums property\n\n**Signature:**\n\n```typescript\nenums: NSEnums;\n```\n", "bitburner.infiltrationreward.sellcash.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md) &gt; [sellCash](./bitburner.infiltrationreward.sellcash.md)\n\n## InfiltrationReward.sellCash property\n\n**Signature:**\n\n```typescript\nsellCash: number;\n```\n", "ns.infiltrationreward.sellcash.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [InfiltrationReward](./bitburner.infiltrationreward.md) &gt; [sellCash](./bitburner.infiltrationreward.sellcash.md)\n\n## InfiltrationReward.sellCash property\n\n**Signature:**\n\n```typescript\nsellCash: number;\n```\n", "bitburner.corporation.getcorporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getCorporation](./bitburner.corporation.getcorporation.md)\n\n## Corporation.getCorporation() method\n\nGet corporation data\n\n**Signature:**\n\n```typescript\ngetCorporation(): CorporationInfo;\n```\n**Returns:**\n\n[CorporationInfo](./bitburner.corporationinfo.md)\n\nCorporation data\n\n", "ns.corporation.getcorporation.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getCorporation](./bitburner.corporation.getcorporation.md)\n\n## Corporation.getCorporation() method\n\nGet corporation data\n\n**Signature:**\n\n```typescript\ngetCorporation(): CorporationInfo;\n```\n**Returns:**\n\n[CorporationInfo](./bitburner.corporationinfo.md)\n\nCorporation data\n\n", "bitburner.autocompletedata.txts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [txts](./bitburner.autocompletedata.txts.md)\n\n## AutocompleteData.txts property\n\n**Signature:**\n\n```typescript\ntxts: string[];\n```\n", "ns.autocompletedata.txts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [txts](./bitburner.autocompletedata.txts.md)\n\n## AutocompleteData.txts property\n\n**Signature:**\n\n```typescript\ntxts: string[];\n```\n", "bitburner.hacknetserverconstants.upgraderammult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeRamMult](./bitburner.hacknetserverconstants.upgraderammult.md)\n\n## HacknetServerConstants.UpgradeRamMult property\n\nMultiplier to increase RAM\n\n**Signature:**\n\n```typescript\nUpgradeRamMult: number;\n```\n", "ns.hacknetserverconstants.upgraderammult.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [UpgradeRamMult](./bitburner.hacknetserverconstants.upgraderammult.md)\n\n## HacknetServerConstants.UpgradeRamMult property\n\nMultiplier to increase RAM\n\n**Signature:**\n\n```typescript\nUpgradeRamMult: number;\n```\n", "bitburner.sleevecrimetask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveCrimeTask](./bitburner.sleevecrimetask.md)\n\n## SleeveCrimeTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveCrimeTask = { type: \"CRIME\"; crimeType: CrimeType | `${CrimeType}`; cyclesWorked: number };\n```\n**References:** [CrimeType](./bitburner.crimetype.md)\n\n", "ns.sleevecrimetask.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [SleeveCrimeTask](./bitburner.sleevecrimetask.md)\n\n## SleeveCrimeTask type\n\n\n**Signature:**\n\n```typescript\ntype SleeveCrimeTask = { type: \"CRIME\"; crimeType: CrimeType | `${CrimeType}`; cyclesWorked: number };\n```\n**References:** [CrimeType](./bitburner.crimetype.md)\n\n", "bitburner.gangotherinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfo](./bitburner.gangotherinfo.md)\n\n## GangOtherInfo interface\n\n\n**Signature:**\n\n```typescript\ninterface GangOtherInfo \n```\n", "ns.gangotherinfo.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfo](./bitburner.gangotherinfo.md)\n\n## GangOtherInfo interface\n\n\n**Signature:**\n\n```typescript\ninterface GangOtherInfo \n```\n", "bitburner.sleeve.settocompanywork.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToCompanyWork](./bitburner.sleeve.settocompanywork.md)\n\n## Sleeve.setToCompanyWork() method\n\nSet a sleeve to work for a company.\n\n**Signature:**\n\n```typescript\nsetToCompanyWork(sleeveNumber: number, companyName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to work for the company. |\n|  companyName | string | Name of the company to work for. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve started working on this company, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working or this company.\n\n", "ns.sleeve.settocompanywork.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [setToCompanyWork](./bitburner.sleeve.settocompanywork.md)\n\n## Sleeve.setToCompanyWork() method\n\nSet a sleeve to work for a company.\n\n**Signature:**\n\n```typescript\nsetToCompanyWork(sleeveNumber: number, companyName: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to work for the company. |\n|  companyName | string | Name of the company to work for. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve started working on this company, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve started working or this company.\n\n", "bitburner.singularity.getcrimestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCrimeStats](./bitburner.singularity.getcrimestats.md)\n\n## Singularity.getCrimeStats() method\n\nGet stats related to a crime.\n\n**Signature:**\n\n```typescript\ngetCrimeStats(crime: CrimeType | `${CrimeType}`): CrimeStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  crime | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` | Name of crime. |\n\n**Returns:**\n\n[CrimeStats](./bitburner.crimestats.md)\n\nThe stats of the crime.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nReturns the stats of the crime.\n\n", "ns.singularity.getcrimestats.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getCrimeStats](./bitburner.singularity.getcrimestats.md)\n\n## Singularity.getCrimeStats() method\n\nGet stats related to a crime.\n\n**Signature:**\n\n```typescript\ngetCrimeStats(crime: CrimeType | `${CrimeType}`): CrimeStats;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  crime | [CrimeType](./bitburner.crimetype.md) \\| \\`${[CrimeType](./bitburner.crimetype.md)<!-- -->}\\` | Name of crime. |\n\n**Returns:**\n\n[CrimeStats](./bitburner.crimestats.md)\n\nThe stats of the crime.\n\n## Remarks\n\nRAM cost: 5 GB \\* 16/4/1\n\nReturns the stats of the crime.\n\n", "bitburner.hacknet.gethashupgradelevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getHashUpgradeLevel](./bitburner.hacknet.gethashupgradelevel.md)\n\n## Hacknet.getHashUpgradeLevel() method\n\nGet the level of a hash upgrade.\n\n**Signature:**\n\n```typescript\ngetHashUpgradeLevel(upgName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | string |  |\n\n**Returns:**\n\nnumber\n\nLevel of the upgrade.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\n", "ns.hacknet.gethashupgradelevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getHashUpgradeLevel](./bitburner.hacknet.gethashupgradelevel.md)\n\n## Hacknet.getHashUpgradeLevel() method\n\nGet the level of a hash upgrade.\n\n**Signature:**\n\n```typescript\ngetHashUpgradeLevel(upgName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgName | string |  |\n\n**Returns:**\n\nnumber\n\nLevel of the upgrade.\n\n## Remarks\n\nRAM cost: 0 GB\n\nThis function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\n\n", "bitburner.hacknet.getpurchasenodecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getPurchaseNodeCost](./bitburner.hacknet.getpurchasenodecost.md)\n\n## Hacknet.getPurchaseNodeCost() method\n\nGet the price of the next hacknet node.\n\n**Signature:**\n\n```typescript\ngetPurchaseNodeCost(): number;\n```\n**Returns:**\n\nnumber\n\nCost of purchasing a new Hacknet Node.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of purchasing a new Hacknet Node.\n\n", "ns.hacknet.getpurchasenodecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Hacknet](./bitburner.hacknet.md) &gt; [getPurchaseNodeCost](./bitburner.hacknet.getpurchasenodecost.md)\n\n## Hacknet.getPurchaseNodeCost() method\n\nGet the price of the next hacknet node.\n\n**Signature:**\n\n```typescript\ngetPurchaseNodeCost(): number;\n```\n**Returns:**\n\nnumber\n\nCost of purchasing a new Hacknet Node.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the cost of purchasing a new Hacknet Node.\n\n", "bitburner.crimestats.charisma_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [charisma\\_exp](./bitburner.crimestats.charisma_exp.md)\n\n## CrimeStats.charisma\\_exp property\n\ncharisma exp gained from crime\n\n**Signature:**\n\n```typescript\ncharisma_exp: number;\n```\n", "ns.crimestats.charisma_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CrimeStats](./bitburner.crimestats.md) &gt; [charisma\\_exp](./bitburner.crimestats.charisma_exp.md)\n\n## CrimeStats.charisma\\_exp property\n\ncharisma exp gained from crime\n\n**Signature:**\n\n```typescript\ncharisma_exp: number;\n```\n", "bitburner.corpconstants.secondspermarketcycle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [secondsPerMarketCycle](./bitburner.corpconstants.secondspermarketcycle.md)\n\n## CorpConstants.secondsPerMarketCycle property\n\n**Signature:**\n\n```typescript\nsecondsPerMarketCycle: number;\n```\n", "ns.corpconstants.secondspermarketcycle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [secondsPerMarketCycle](./bitburner.corpconstants.secondspermarketcycle.md)\n\n## CorpConstants.secondsPerMarketCycle property\n\n**Signature:**\n\n```typescript\nsecondsPerMarketCycle: number;\n```\n", "bitburner.bladeburnercuraction.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BladeburnerCurAction](./bitburner.bladeburnercuraction.md) &gt; [type](./bitburner.bladeburnercuraction.type.md)\n\n## BladeburnerCurAction.type property\n\nType of Action\n\n**Signature:**\n\n```typescript\ntype: string;\n```\n", "ns.bladeburnercuraction.type.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BladeburnerCurAction](./bitburner.bladeburnercuraction.md) &gt; [type](./bitburner.bladeburnercuraction.type.md)\n\n## BladeburnerCurAction.type property\n\nType of Action\n\n**Signature:**\n\n```typescript\ntype: string;\n```\n", "bitburner.autocompletedata.scripts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [scripts](./bitburner.autocompletedata.scripts.md)\n\n## AutocompleteData.scripts property\n\n**Signature:**\n\n```typescript\nscripts: string[];\n```\n", "ns.autocompletedata.scripts.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [AutocompleteData](./bitburner.autocompletedata.md) &gt; [scripts](./bitburner.autocompletedata.scripts.md)\n\n## AutocompleteData.scripts property\n\n**Signature:**\n\n```typescript\nscripts: string[];\n```\n", "bitburner.tix.has4sdatatixapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [has4SDataTIXAPI](./bitburner.tix.has4sdatatixapi.md)\n\n## TIX.has4SDataTIXAPI() method\n\nReturns true if the player has access to the 4SData TIX API\n\n**Signature:**\n\n```typescript\nhas4SDataTIXAPI(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.tix.has4sdatatixapi.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [TIX](./bitburner.tix.md) &gt; [has4SDataTIXAPI](./bitburner.tix.has4sdatatixapi.md)\n\n## TIX.has4SDataTIXAPI() method\n\nReturns true if the player has access to the 4SData TIX API\n\n**Signature:**\n\n```typescript\nhas4SDataTIXAPI(): boolean;\n```\n**Returns:**\n\nboolean\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.bladeburner.inbladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [inBladeburner](./bitburner.bladeburner.inbladeburner.md)\n\n## Bladeburner.inBladeburner() method\n\nReturns whether player is a member of bladeburner division. Does not require API access.\n\n**Signature:**\n\n```typescript\ninBladeburner(): boolean;\n```\n**Returns:**\n\nboolean\n\nwhether player is a member of bladeburner division.\n\n## Remarks\n\nRAM cost: 1 GB\n\n", "ns.bladeburner.inbladeburner.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Bladeburner](./bitburner.bladeburner.md) &gt; [inBladeburner](./bitburner.bladeburner.inbladeburner.md)\n\n## Bladeburner.inBladeburner() method\n\nReturns whether player is a member of bladeburner division. Does not require API access.\n\n**Signature:**\n\n```typescript\ninBladeburner(): boolean;\n```\n**Returns:**\n\nboolean\n\nwhether player is a member of bladeburner division.\n\n## Remarks\n\nRAM cost: 1 GB\n\n", "bitburner.corporation.getindustrydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getIndustryData](./bitburner.corporation.getindustrydata.md)\n\n## Corporation.getIndustryData() method\n\nGet constant industry definition data for a specific industry\n\n**Signature:**\n\n```typescript\ngetIndustryData(industryName: CorpIndustryName): CorpIndustryData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  industryName | [CorpIndustryName](./bitburner.corpindustryname.md) |  |\n\n**Returns:**\n\n[CorpIndustryData](./bitburner.corpindustrydata.md)\n\n", "ns.corporation.getindustrydata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getIndustryData](./bitburner.corporation.getindustrydata.md)\n\n## Corporation.getIndustryData() method\n\nGet constant industry definition data for a specific industry\n\n**Signature:**\n\n```typescript\ngetIndustryData(industryName: CorpIndustryName): CorpIndustryData;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  industryName | [CorpIndustryName](./bitburner.corpindustryname.md) |  |\n\n**Returns:**\n\n[CorpIndustryData](./bitburner.corpindustrydata.md)\n\n", "bitburner.warehouseapi.setmaterialmarketta1.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setMaterialMarketTA1](./bitburner.warehouseapi.setmaterialmarketta1.md)\n\n## WarehouseAPI.setMaterialMarketTA1() method\n\nSet market TA 1 for a material.\n\n**Signature:**\n\n```typescript\nsetMaterialMarketTA1(divisionName: string, city: CityName | `${CityName}`, materialName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.setmaterialmarketta1.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [setMaterialMarketTA1](./bitburner.warehouseapi.setmaterialmarketta1.md)\n\n## WarehouseAPI.setMaterialMarketTA1() method\n\nSet market TA 1 for a material.\n\n**Signature:**\n\n```typescript\nsetMaterialMarketTA1(divisionName: string, city: CityName | `${CityName}`, materialName: string, on: boolean): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  materialName | string | Name of the material |\n|  on | boolean | market ta enabled |\n\n**Returns:**\n\nvoid\n\n", "bitburner.ns.getporthandle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPortHandle](./bitburner.ns.getporthandle.md)\n\n## NS.getPortHandle() method\n\nGet all data on a port.\n\n**Signature:**\n\n```typescript\ngetPortHandle(port: number): NetscriptPort;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number | Port number. Must be an integer between 1 and 20. |\n\n**Returns:**\n\n[NetscriptPort](./bitburner.netscriptport.md)\n\n## Remarks\n\nRAM cost: 0 GB\n\nGet a handle to a Netscript Port.\n\nWARNING: Port Handles only work in NetscriptJS (Netscript 2.0). They will not work in Netscript 1.0.\n\n", "ns.ns.getporthandle.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getPortHandle](./bitburner.ns.getporthandle.md)\n\n## NS.getPortHandle() method\n\nGet all data on a port.\n\n**Signature:**\n\n```typescript\ngetPortHandle(port: number): NetscriptPort;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  port | number | Port number. Must be an integer between 1 and 20. |\n\n**Returns:**\n\n[NetscriptPort](./bitburner.netscriptport.md)\n\n## Remarks\n\nRAM cost: 0 GB\n\nGet a handle to a Netscript Port.\n\nWARNING: Port Handles only work in NetscriptJS (Netscript 2.0). They will not work in Netscript 1.0.\n\n", "bitburner.ganggeninfo.wantedlevelgainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [wantedLevelGainRate](./bitburner.ganggeninfo.wantedlevelgainrate.md)\n\n## GangGenInfo.wantedLevelGainRate property\n\nWanted level gained/lost per game cycle (negative for losses)\n\n**Signature:**\n\n```typescript\nwantedLevelGainRate: number;\n```\n", "ns.ganggeninfo.wantedlevelgainrate.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [wantedLevelGainRate](./bitburner.ganggeninfo.wantedlevelgainrate.md)\n\n## GangGenInfo.wantedLevelGainRate property\n\nWanted level gained/lost per game cycle (negative for losses)\n\n**Signature:**\n\n```typescript\nwantedLevelGainRate: number;\n```\n", "bitburner.equipmentstats.def.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [def](./bitburner.equipmentstats.def.md)\n\n## EquipmentStats.def property\n\nDefense multiplier\n\n**Signature:**\n\n```typescript\ndef?: number;\n```\n", "ns.equipmentstats.def.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [EquipmentStats](./bitburner.equipmentstats.md) &gt; [def](./bitburner.equipmentstats.def.md)\n\n## EquipmentStats.def property\n\nDefense multiplier\n\n**Signature:**\n\n```typescript\ndef?: number;\n```\n", "bitburner.ganggeninfo.wantedpenalty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [wantedPenalty](./bitburner.ganggeninfo.wantedpenalty.md)\n\n## GangGenInfo.wantedPenalty property\n\nNumber indicating the current wanted penalty\n\n**Signature:**\n\n```typescript\nwantedPenalty: number;\n```\n", "ns.ganggeninfo.wantedpenalty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangGenInfo](./bitburner.ganggeninfo.md) &gt; [wantedPenalty](./bitburner.ganggeninfo.wantedpenalty.md)\n\n## GangGenInfo.wantedPenalty property\n\nNumber indicating the current wanted penalty\n\n**Signature:**\n\n```typescript\nwantedPenalty: number;\n```\n", "bitburner.ns.sleeve.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sleeve](./bitburner.ns.sleeve.md)\n\n## NS.sleeve property\n\nNamespace for sleeve functions.\n\n**Signature:**\n\n```typescript\nreadonly sleeve: Sleeve;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "ns.ns.sleeve.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [sleeve](./bitburner.ns.sleeve.md)\n\n## NS.sleeve property\n\nNamespace for sleeve functions.\n\n**Signature:**\n\n```typescript\nreadonly sleeve: Sleeve;\n```\n\n## Remarks\n\nRAM cost: 0 GB\n\n", "bitburner.sleeve.travel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [travel](./bitburner.sleeve.travel.md)\n\n## Sleeve.travel() method\n\nMake a sleeve travel to another city.\n\n**Signature:**\n\n```typescript\ntravel(sleeveNumber: number, city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to travel. |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the destination city. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve reached destination, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve reached destination.\n\n", "ns.sleeve.travel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Sleeve](./bitburner.sleeve.md) &gt; [travel](./bitburner.sleeve.travel.md)\n\n## Sleeve.travel() method\n\nMake a sleeve travel to another city.\n\n**Signature:**\n\n```typescript\ntravel(sleeveNumber: number, city: CityName | `${CityName}`): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  sleeveNumber | number | Index of the sleeve to travel. |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the destination city. |\n\n**Returns:**\n\nboolean\n\nTrue if the sleeve reached destination, false otherwise.\n\n## Remarks\n\nRAM cost: 4 GB\n\nReturn a boolean indicating whether or not the sleeve reached destination.\n\n", "bitburner.stanek.giftwidth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [giftWidth](./bitburner.stanek.giftwidth.md)\n\n## Stanek.giftWidth() method\n\nStanek's Gift width.\n\n**Signature:**\n\n```typescript\ngiftWidth(): number;\n```\n**Returns:**\n\nnumber\n\nThe width of the gift.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\n", "ns.stanek.giftwidth.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md) &gt; [giftWidth](./bitburner.stanek.giftwidth.md)\n\n## Stanek.giftWidth() method\n\nStanek's Gift width.\n\n**Signature:**\n\n```typescript\ngiftWidth(): number;\n```\n**Returns:**\n\nnumber\n\nThe width of the gift.\n\n## Remarks\n\nRAM cost: 0.4 GB\n\n", "bitburner.runningscript.args.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [args](./bitburner.runningscript.args.md)\n\n## RunningScript.args property\n\nArguments the script was called with\n\n**Signature:**\n\n```typescript\nargs: (string | number | boolean)[];\n```\n", "ns.runningscript.args.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [RunningScript](./bitburner.runningscript.md) &gt; [args](./bitburner.runningscript.args.md)\n\n## RunningScript.args property\n\nArguments the script was called with\n\n**Signature:**\n\n```typescript\nargs: (string | number | boolean)[];\n```\n", "bitburner.officeapi.getoffice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getOffice](./bitburner.officeapi.getoffice.md)\n\n## OfficeAPI.getOffice() method\n\nGet data about an office\n\n**Signature:**\n\n```typescript\ngetOffice(divisionName: string, city: CityName | `${CityName}`): Office;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\n[Office](./bitburner.office.md)\n\nOffice data\n\n", "ns.officeapi.getoffice.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [OfficeAPI](./bitburner.officeapi.md) &gt; [getOffice](./bitburner.officeapi.getoffice.md)\n\n## OfficeAPI.getOffice() method\n\nGet data about an office\n\n**Signature:**\n\n```typescript\ngetOffice(divisionName: string, city: CityName | `${CityName}`): Office;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n\n**Returns:**\n\n[Office](./bitburner.office.md)\n\nOffice data\n\n", "bitburner.userinterfacetheme.hp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [hp](./bitburner.userinterfacetheme.hp.md)\n\n## UserInterfaceTheme.hp property\n\n**Signature:**\n\n```typescript\nhp: string;\n```\n", "ns.userinterfacetheme.hp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [UserInterfaceTheme](./bitburner.userinterfacetheme.md) &gt; [hp](./bitburner.userinterfacetheme.hp.md)\n\n## UserInterfaceTheme.hp property\n\n**Signature:**\n\n```typescript\nhp: string;\n```\n", "bitburner.ns.weaken.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [weaken](./bitburner.ns.weaken.md)\n\n## NS.weaken() method\n\nReduce a server's security level.\n\n**Signature:**\n\n```typescript\nweaken(host: string, opts?: BasicHGWOptions): Promise<number>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to weaken. |\n|  opts | [BasicHGWOptions](./bitburner.basichgwoptions.md) | _(Optional)_ Optional parameters for configuring function behavior. |\n\n**Returns:**\n\nPromise&lt;number&gt;\n\nThe amount by which the target server\u2019s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads.\n\n## Remarks\n\nRAM cost: 0.15 GB\n\nUse your hacking skills to attack a server\u2019s security, lowering the server\u2019s security level. The runtime for this function depends on your hacking level and the target server\u2019s security level when this function is called. This function lowers the security level of the target server by 0.05.\n\nLike [hack](./bitburner.ns.hack.md) and [grow](./bitburner.ns.grow.md)<!-- -->, `weaken` can be called on any server, regardless of where the script is running. This function requires root access to the target server, but there is no required hacking level to run the function.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar currentSecurity = getServerSecurityLevel(\"foodnstuff\");\ncurrentSecurity = currentSecurity - weaken(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nlet currentSecurity = ns.getServerSecurityLevel(\"foodnstuff\");\ncurrentSecurity -= await ns.weaken(\"foodnstuff\");\n```\n\n", "ns.ns.weaken.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [weaken](./bitburner.ns.weaken.md)\n\n## NS.weaken() method\n\nReduce a server's security level.\n\n**Signature:**\n\n```typescript\nweaken(host: string, opts?: BasicHGWOptions): Promise<number>;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server to weaken. |\n|  opts | [BasicHGWOptions](./bitburner.basichgwoptions.md) | _(Optional)_ Optional parameters for configuring function behavior. |\n\n**Returns:**\n\nPromise&lt;number&gt;\n\nThe amount by which the target server\u2019s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads.\n\n## Remarks\n\nRAM cost: 0.15 GB\n\nUse your hacking skills to attack a server\u2019s security, lowering the server\u2019s security level. The runtime for this function depends on your hacking level and the target server\u2019s security level when this function is called. This function lowers the security level of the target server by 0.05.\n\nLike [hack](./bitburner.ns.hack.md) and [grow](./bitburner.ns.grow.md)<!-- -->, `weaken` can be called on any server, regardless of where the script is running. This function requires root access to the target server, but there is no required hacking level to run the function.\n\n## Example 1\n\n\n```ts\n// NS1:\nvar currentSecurity = getServerSecurityLevel(\"foodnstuff\");\ncurrentSecurity = currentSecurity - weaken(\"foodnstuff\");\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nlet currentSecurity = ns.getServerSecurityLevel(\"foodnstuff\");\ncurrentSecurity -= await ns.weaken(\"foodnstuff\");\n```\n\n", "bitburner.office.maxmor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [maxMor](./bitburner.office.maxmor.md)\n\n## Office.maxMor property\n\nMaximum morale of the employees\n\n**Signature:**\n\n```typescript\nmaxMor: number;\n```\n", "ns.office.maxmor.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [maxMor](./bitburner.office.maxmor.md)\n\n## Office.maxMor property\n\nMaximum morale of the employees\n\n**Signature:**\n\n```typescript\nmaxMor: number;\n```\n", "bitburner.warehouseapi.makeproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [makeProduct](./bitburner.warehouseapi.makeproduct.md)\n\n## WarehouseAPI.makeProduct() method\n\nCreate a new product\n\n**Signature:**\n\n```typescript\nmakeProduct(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    productName: string,\n    designInvest: number,\n    marketingInvest: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  productName | string | Name of the product |\n|  designInvest | number | Amount to invest for the design of the product. |\n|  marketingInvest | number | Amount to invest for the marketing of the product. |\n\n**Returns:**\n\nvoid\n\n", "ns.warehouseapi.makeproduct.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [WarehouseAPI](./bitburner.warehouseapi.md) &gt; [makeProduct](./bitburner.warehouseapi.makeproduct.md)\n\n## WarehouseAPI.makeProduct() method\n\nCreate a new product\n\n**Signature:**\n\n```typescript\nmakeProduct(\n    divisionName: string,\n    city: CityName | `${CityName}`,\n    productName: string,\n    designInvest: number,\n    marketingInvest: number,\n  ): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  divisionName | string | Name of the division |\n|  city | [CityName](./bitburner.cityname.md) \\| \\`${[CityName](./bitburner.cityname.md)<!-- -->}\\` | Name of the city |\n|  productName | string | Name of the product |\n|  designInvest | number | Amount to invest for the design of the product. |\n|  marketingInvest | number | Amount to invest for the marketing of the product. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.ns.gethacktime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHackTime](./bitburner.ns.gethacktime.md)\n\n## NS.getHackTime() method\n\nGet the execution time of a hack() call.\n\n**Signature:**\n\n```typescript\ngetHackTime(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nReturns the amount of time in milliseconds it takes to execute the [hack](./bitburner.ns.hack.md) Netscript function.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nWhen `hack` completes an amount of money is stolen depending on the player's skills. Returns the amount of time in milliseconds it takes to execute the [hack](./bitburner.ns.hack.md) Netscript function on the target server. The required time is increased by the security level of the target server and decreased by the player's hacking level.\n\n", "ns.ns.gethacktime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHackTime](./bitburner.ns.gethacktime.md)\n\n## NS.getHackTime() method\n\nGet the execution time of a hack() call.\n\n**Signature:**\n\n```typescript\ngetHackTime(host: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of target server. |\n\n**Returns:**\n\nnumber\n\nReturns the amount of time in milliseconds it takes to execute the [hack](./bitburner.ns.hack.md) Netscript function.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nWhen `hack` completes an amount of money is stolen depending on the player's skills. Returns the amount of time in milliseconds it takes to execute the [hack](./bitburner.ns.hack.md) Netscript function on the target server. The required time is increased by the security level of the target server and decreased by the player's hacking level.\n\n", "bitburner.gangotherinfoobject.power.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfoObject](./bitburner.gangotherinfoobject.md) &gt; [power](./bitburner.gangotherinfoobject.power.md)\n\n## GangOtherInfoObject.power property\n\nGang power\n\n**Signature:**\n\n```typescript\npower: number;\n```\n", "ns.gangotherinfoobject.power.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangOtherInfoObject](./bitburner.gangotherinfoobject.md) &gt; [power](./bitburner.gangotherinfoobject.power.md)\n\n## GangOtherInfoObject.power property\n\nGang power\n\n**Signature:**\n\n```typescript\npower: number;\n```\n", "bitburner.gang.getbonustime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getBonusTime](./bitburner.gang.getbonustime.md)\n\n## Gang.getBonusTime() method\n\nGet bonus time.\n\n**Signature:**\n\n```typescript\ngetBonusTime(): number;\n```\n**Returns:**\n\nnumber\n\nBonus time for the Gang mechanic in milliseconds.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the amount of accumulated \u201cbonus time\u201d (milliseconds) for the Gang mechanic.\n\n\u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser.\n\n\u201cBonus time\u201d makes the game progress faster, up to 25x the normal speed.\n\n", "ns.gang.getbonustime.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [getBonusTime](./bitburner.gang.getbonustime.md)\n\n## Gang.getBonusTime() method\n\nGet bonus time.\n\n**Signature:**\n\n```typescript\ngetBonusTime(): number;\n```\n**Returns:**\n\nnumber\n\nBonus time for the Gang mechanic in milliseconds.\n\n## Remarks\n\nRAM cost: 0 GB\n\nReturns the amount of accumulated \u201cbonus time\u201d (milliseconds) for the Gang mechanic.\n\n\u201cBonus time\u201d is accumulated when the game is offline or if the game is inactive in the browser.\n\n\u201cBonus time\u201d makes the game progress faster, up to 25x the normal speed.\n\n", "bitburner.hacknetserverconstants.corebasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [CoreBaseCost](./bitburner.hacknetserverconstants.corebasecost.md)\n\n## HacknetServerConstants.CoreBaseCost property\n\nBase cost to increase cores\n\n**Signature:**\n\n```typescript\nCoreBaseCost: number;\n```\n", "ns.hacknetserverconstants.corebasecost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [CoreBaseCost](./bitburner.hacknetserverconstants.corebasecost.md)\n\n## HacknetServerConstants.CoreBaseCost property\n\nBase cost to increase cores\n\n**Signature:**\n\n```typescript\nCoreBaseCost: number;\n```\n", "bitburner.stanek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md)\n\n## Stanek interface\n\nStanek's Gift API.\n\n**Signature:**\n\n```typescript\ninterface Stanek \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [acceptGift()](./bitburner.stanek.acceptgift.md) | Accept Stanek's Gift by joining the Church of the Machine God |\n|  [activeFragments()](./bitburner.stanek.activefragments.md) | List of fragments in Stanek's Gift. |\n|  [canPlaceFragment(rootX, rootY, rotation, fragmentId)](./bitburner.stanek.canplacefragment.md) | Check if fragment can be placed at specified location. |\n|  [chargeFragment(rootX, rootY)](./bitburner.stanek.chargefragment.md) | Charge a fragment, increasing its power. |\n|  [clearGift()](./bitburner.stanek.cleargift.md) | Clear the board of all fragments. |\n|  [fragmentDefinitions()](./bitburner.stanek.fragmentdefinitions.md) | List possible fragments. |\n|  [getFragment(rootX, rootY)](./bitburner.stanek.getfragment.md) | Get placed fragment at location. |\n|  [giftHeight()](./bitburner.stanek.giftheight.md) | Stanek's Gift height. |\n|  [giftWidth()](./bitburner.stanek.giftwidth.md) | Stanek's Gift width. |\n|  [placeFragment(rootX, rootY, rotation, fragmentId)](./bitburner.stanek.placefragment.md) | Place fragment on Stanek's Gift. |\n|  [removeFragment(rootX, rootY)](./bitburner.stanek.removefragment.md) | Remove fragment at location. |\n\n", "ns.stanek.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Stanek](./bitburner.stanek.md)\n\n## Stanek interface\n\nStanek's Gift API.\n\n**Signature:**\n\n```typescript\ninterface Stanek \n```\n\n## Methods\n\n|  Method | Description |\n|  --- | --- |\n|  [acceptGift()](./bitburner.stanek.acceptgift.md) | Accept Stanek's Gift by joining the Church of the Machine God |\n|  [activeFragments()](./bitburner.stanek.activefragments.md) | List of fragments in Stanek's Gift. |\n|  [canPlaceFragment(rootX, rootY, rotation, fragmentId)](./bitburner.stanek.canplacefragment.md) | Check if fragment can be placed at specified location. |\n|  [chargeFragment(rootX, rootY)](./bitburner.stanek.chargefragment.md) | Charge a fragment, increasing its power. |\n|  [clearGift()](./bitburner.stanek.cleargift.md) | Clear the board of all fragments. |\n|  [fragmentDefinitions()](./bitburner.stanek.fragmentdefinitions.md) | List possible fragments. |\n|  [getFragment(rootX, rootY)](./bitburner.stanek.getfragment.md) | Get placed fragment at location. |\n|  [giftHeight()](./bitburner.stanek.giftheight.md) | Stanek's Gift height. |\n|  [giftWidth()](./bitburner.stanek.giftwidth.md) | Stanek's Gift width. |\n|  [placeFragment(rootX, rootY, rotation, fragmentId)](./bitburner.stanek.placefragment.md) | Place fragment on Stanek's Gift. |\n|  [removeFragment(rootX, rootY)](./bitburner.stanek.removefragment.md) | Remove fragment at location. |\n\n", "bitburner.gangmemberinfo.agi_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_exp](./bitburner.gangmemberinfo.agi_exp.md)\n\n## GangMemberInfo.agi\\_exp property\n\nCurrent agility experience\n\n**Signature:**\n\n```typescript\nagi_exp: number;\n```\n", "ns.gangmemberinfo.agi_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [agi\\_exp](./bitburner.gangmemberinfo.agi_exp.md)\n\n## GangMemberInfo.agi\\_exp property\n\nCurrent agility experience\n\n**Signature:**\n\n```typescript\nagi_exp: number;\n```\n", "bitburner.office.employees.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [employees](./bitburner.office.employees.md)\n\n## Office.employees property\n\nAmount of employees\n\n**Signature:**\n\n```typescript\nemployees: number;\n```\n", "ns.office.employees.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [employees](./bitburner.office.employees.md)\n\n## Office.employees property\n\nAmount of employees\n\n**Signature:**\n\n```typescript\nemployees: number;\n```\n", "bitburner.warehouse.size.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [size](./bitburner.warehouse.size.md)\n\n## Warehouse.size property\n\nTotal space in the warehouse\n\n**Signature:**\n\n```typescript\nsize: number;\n```\n", "ns.warehouse.size.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Warehouse](./bitburner.warehouse.md) &gt; [size](./bitburner.warehouse.size.md)\n\n## Warehouse.size property\n\nTotal space in the warehouse\n\n**Signature:**\n\n```typescript\nsize: number;\n```\n", "bitburner.corporation.getupgradelevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getUpgradeLevel](./bitburner.corporation.getupgradelevel.md)\n\n## Corporation.getUpgradeLevel() method\n\nGet the level of a levelable upgrade\n\n**Signature:**\n\n```typescript\ngetUpgradeLevel(upgradeName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nnumber\n\nthe level of the upgrade\n\n", "ns.corporation.getupgradelevel.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Corporation](./bitburner.corporation.md) &gt; [getUpgradeLevel](./bitburner.corporation.getupgradelevel.md)\n\n## Corporation.getUpgradeLevel() method\n\nGet the level of a levelable upgrade\n\n**Signature:**\n\n```typescript\ngetUpgradeLevel(upgradeName: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  upgradeName | string | Name of the upgrade |\n\n**Returns:**\n\nnumber\n\nthe level of the upgrade\n\n", "bitburner.stockorderobject.price.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [price](./bitburner.stockorderobject.price.md)\n\n## StockOrderObject.price property\n\nPrice per share\n\n**Signature:**\n\n```typescript\nprice: number;\n```\n", "ns.stockorderobject.price.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [StockOrderObject](./bitburner.stockorderobject.md) &gt; [price](./bitburner.stockorderobject.price.md)\n\n## StockOrderObject.price property\n\nPrice per share\n\n**Signature:**\n\n```typescript\nprice: number;\n```\n", "bitburner.bitnodemultipliers.homecomputerramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HomeComputerRamCost](./bitburner.bitnodemultipliers.homecomputerramcost.md)\n\n## BitNodeMultipliers.HomeComputerRamCost property\n\nInfluences how much money it costs to upgrade your home computer's RAM\n\n**Signature:**\n\n```typescript\nHomeComputerRamCost: number;\n```\n", "ns.bitnodemultipliers.homecomputerramcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [BitNodeMultipliers](./bitburner.bitnodemultipliers.md) &gt; [HomeComputerRamCost](./bitburner.bitnodemultipliers.homecomputerramcost.md)\n\n## BitNodeMultipliers.HomeComputerRamCost property\n\nInfluences how much money it costs to upgrade your home computer's RAM\n\n**Signature:**\n\n```typescript\nHomeComputerRamCost: number;\n```\n", "bitburner.ns.hasrootaccess.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hasRootAccess](./bitburner.ns.hasrootaccess.md)\n\n## NS.hasRootAccess() method\n\nCheck if you have root access on a server.\n\n**Signature:**\n\n```typescript\nhasRootAccess(host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nboolean\n\nTrue if player has root access to the specified target server, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nReturns a boolean indicating whether or not the player has root access to the specified target server.\n\n## Example 1\n\n\n```ts\n// NS1:\nif (hasRootAccess(\"foodnstuff\") == false) {\n   nuke(\"foodnstuff\");\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nif (ns.hasRootAccess(\"foodnstuff\") == false) {\n   ns.nuke(\"foodnstuff\");\n}\n```\n\n", "ns.ns.hasrootaccess.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [hasRootAccess](./bitburner.ns.hasrootaccess.md)\n\n## NS.hasRootAccess() method\n\nCheck if you have root access on a server.\n\n**Signature:**\n\n```typescript\nhasRootAccess(host: string): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  host | string | Hostname of the target server. |\n\n**Returns:**\n\nboolean\n\nTrue if player has root access to the specified target server, and false otherwise.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\nReturns a boolean indicating whether or not the player has root access to the specified target server.\n\n## Example 1\n\n\n```ts\n// NS1:\nif (hasRootAccess(\"foodnstuff\") == false) {\n   nuke(\"foodnstuff\");\n}\n```\n\n## Example 2\n\n\n```ts\n// NS2:\nif (ns.hasRootAccess(\"foodnstuff\") == false) {\n   ns.nuke(\"foodnstuff\");\n}\n```\n\n", "bitburner.material.prod.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [prod](./bitburner.material.prod.md)\n\n## Material.prod property\n\nAmount of material produced\n\n**Signature:**\n\n```typescript\nprod: number;\n```\n", "ns.material.prod.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Material](./bitburner.material.md) &gt; [prod](./bitburner.material.prod.md)\n\n## Material.prod property\n\nAmount of material produced\n\n**Signature:**\n\n```typescript\nprod: number;\n```\n", "bitburner.singularity.setfocus.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [setFocus](./bitburner.singularity.setfocus.md)\n\n## Singularity.setFocus() method\n\nSet the players focus.\n\n**Signature:**\n\n```typescript\nsetFocus(focus: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  focus | boolean |  |\n\n**Returns:**\n\nboolean\n\nTrue if the focus was changed.\n\n## Remarks\n\nRAM cost: 0.1 GB \\* 16/4/1\n\n", "ns.singularity.setfocus.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [setFocus](./bitburner.singularity.setfocus.md)\n\n## Singularity.setFocus() method\n\nSet the players focus.\n\n**Signature:**\n\n```typescript\nsetFocus(focus: boolean): boolean;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  focus | boolean |  |\n\n**Returns:**\n\nboolean\n\nTrue if the focus was changed.\n\n## Remarks\n\nRAM cost: 0.1 GB \\* 16/4/1\n\n", "bitburner.portdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [PortData](./bitburner.portdata.md)\n\n## PortData type\n\n\n**Signature:**\n\n```typescript\ntype PortData = string | number;\n```\n", "ns.portdata.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [PortData](./bitburner.portdata.md)\n\n## PortData type\n\n\n**Signature:**\n\n```typescript\ntype PortData = string | number;\n```\n", "bitburner.corpconstants.materialnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [materialNames](./bitburner.corpconstants.materialnames.md)\n\n## CorpConstants.materialNames property\n\nNames of all materials\n\n**Signature:**\n\n```typescript\nmaterialNames: CorpMaterialName[];\n```\n", "ns.corpconstants.materialnames.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [CorpConstants](./bitburner.corpconstants.md) &gt; [materialNames](./bitburner.corpconstants.materialnames.md)\n\n## CorpConstants.materialNames property\n\nNames of all materials\n\n**Signature:**\n\n```typescript\nmaterialNames: CorpMaterialName[];\n```\n", "bitburner.moneysource.servers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [servers](./bitburner.moneysource.servers.md)\n\n## MoneySource.servers property\n\n**Signature:**\n\n```typescript\nservers: number;\n```\n", "ns.moneysource.servers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [MoneySource](./bitburner.moneysource.md) &gt; [servers](./bitburner.moneysource.servers.md)\n\n## MoneySource.servers property\n\n**Signature:**\n\n```typescript\nservers: number;\n```\n", "bitburner.product.pcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [pCost](./bitburner.product.pcost.md)\n\n## Product.pCost property\n\nProduction cost\n\n**Signature:**\n\n```typescript\npCost: number;\n```\n", "ns.product.pcost.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Product](./bitburner.product.md) &gt; [pCost](./bitburner.product.pcost.md)\n\n## Product.pCost property\n\nProduction cost\n\n**Signature:**\n\n```typescript\npCost: number;\n```\n", "bitburner.gangtaskstats.difficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [difficulty](./bitburner.gangtaskstats.difficulty.md)\n\n## GangTaskStats.difficulty property\n\nNumber representing the difficulty of the task\n\n**Signature:**\n\n```typescript\ndifficulty: number;\n```\n", "ns.gangtaskstats.difficulty.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangTaskStats](./bitburner.gangtaskstats.md) &gt; [difficulty](./bitburner.gangtaskstats.difficulty.md)\n\n## GangTaskStats.difficulty property\n\nNumber representing the difficulty of the task\n\n**Signature:**\n\n```typescript\ndifficulty: number;\n```\n", "bitburner.ns.gethostname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHostname](./bitburner.ns.gethostname.md)\n\n## NS.getHostname() method\n\nReturns a string with the hostname of the server that the script is running on.\n\n**Signature:**\n\n```typescript\ngetHostname(): string;\n```\n**Returns:**\n\nstring\n\nHostname of the server that the script runs on.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "ns.ns.gethostname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [getHostname](./bitburner.ns.gethostname.md)\n\n## NS.getHostname() method\n\nReturns a string with the hostname of the server that the script is running on.\n\n**Signature:**\n\n```typescript\ngetHostname(): string;\n```\n**Returns:**\n\nstring\n\nHostname of the server that the script runs on.\n\n## Remarks\n\nRAM cost: 0.05 GB\n\n", "bitburner.gang.canrecruitmember.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [canRecruitMember](./bitburner.gang.canrecruitmember.md)\n\n## Gang.canRecruitMember() method\n\nCheck if you can recruit a new gang member.\n\n**Signature:**\n\n```typescript\ncanRecruitMember(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if a member can currently be recruited, false otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns a boolean indicating whether a member can currently be recruited.\n\nOnce you have successfully created a gang by using the function [createGang](./bitburner.gang.creategang.md)<!-- -->, you can immediately recruit a small number of members to your gang. After you have recruited the founding members, to recruit another member you must increase your respect. The more members you want to recruit, the more respect you require. If your gang has the maximum number of members, then this function would return false.\n\n", "ns.gang.canrecruitmember.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Gang](./bitburner.gang.md) &gt; [canRecruitMember](./bitburner.gang.canrecruitmember.md)\n\n## Gang.canRecruitMember() method\n\nCheck if you can recruit a new gang member.\n\n**Signature:**\n\n```typescript\ncanRecruitMember(): boolean;\n```\n**Returns:**\n\nboolean\n\nTrue if a member can currently be recruited, false otherwise.\n\n## Remarks\n\nRAM cost: 1 GB\n\nReturns a boolean indicating whether a member can currently be recruited.\n\nOnce you have successfully created a gang by using the function [createGang](./bitburner.gang.creategang.md)<!-- -->, you can immediately recruit a small number of members to your gang. After you have recruited the founding members, to recruit another member you must increase your respect. The more members you want to recruit, the more respect you require. If your gang has the maximum number of members, then this function would return false.\n\n", "bitburner.gangmemberinfo.def.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def](./bitburner.gangmemberinfo.def.md)\n\n## GangMemberInfo.def property\n\nDefense skill level\n\n**Signature:**\n\n```typescript\ndef: number;\n```\n", "ns.gangmemberinfo.def.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def](./bitburner.gangmemberinfo.def.md)\n\n## GangMemberInfo.def property\n\nDefense skill level\n\n**Signature:**\n\n```typescript\ndef: number;\n```\n", "bitburner.ns.toast.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [toast](./bitburner.ns.toast.md)\n\n## NS.toast() method\n\nQueue a toast (bottom-right notification).\n\n**Signature:**\n\n```typescript\ntoast(msg: string, variant?: ToastVariant | `${ToastVariant}`, duration?: number | null): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  msg | string | Message in the toast. |\n|  variant | [ToastVariant](./bitburner.toastvariant.md) \\| \\`${[ToastVariant](./bitburner.toastvariant.md)<!-- -->}\\` | _(Optional)_ Type of toast. Must be one of success, info, warning, error. Defaults to success. |\n|  duration | number \\| null | _(Optional)_ Duration of toast in ms. Can also be <code>null</code> to create a persistent toast. Defaults to 2000. |\n\n**Returns:**\n\nvoid\n\n", "ns.ns.toast.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [NS](./bitburner.ns.md) &gt; [toast](./bitburner.ns.toast.md)\n\n## NS.toast() method\n\nQueue a toast (bottom-right notification).\n\n**Signature:**\n\n```typescript\ntoast(msg: string, variant?: ToastVariant | `${ToastVariant}`, duration?: number | null): void;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  msg | string | Message in the toast. |\n|  variant | [ToastVariant](./bitburner.toastvariant.md) \\| \\`${[ToastVariant](./bitburner.toastvariant.md)<!-- -->}\\` | _(Optional)_ Type of toast. Must be one of success, info, warning, error. Defaults to success. |\n|  duration | number \\| null | _(Optional)_ Duration of toast in ms. Can also be <code>null</code> to create a persistent toast. Defaults to 2000. |\n\n**Returns:**\n\nvoid\n\n", "bitburner.office.avghap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [avgHap](./bitburner.office.avghap.md)\n\n## Office.avgHap property\n\nAverage happiness of the employees\n\n**Signature:**\n\n```typescript\navgHap: number;\n```\n", "ns.office.avghap.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Office](./bitburner.office.md) &gt; [avgHap](./bitburner.office.avghap.md)\n\n## Office.avgHap property\n\nAverage happiness of the employees\n\n**Signature:**\n\n```typescript\navgHap: number;\n```\n", "bitburner.multipliers.hacking_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_exp](./bitburner.multipliers.hacking_exp.md)\n\n## Multipliers.hacking\\_exp property\n\nMultiplier to hacking experience gain rate\n\n**Signature:**\n\n```typescript\nhacking_exp: number;\n```\n", "ns.multipliers.hacking_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Multipliers](./bitburner.multipliers.md) &gt; [hacking\\_exp](./bitburner.multipliers.hacking_exp.md)\n\n## Multipliers.hacking\\_exp property\n\nMultiplier to hacking experience gain rate\n\n**Signature:**\n\n```typescript\nhacking_exp: number;\n```\n", "bitburner.singularity.getfactionfavorgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getFactionFavorGain](./bitburner.singularity.getfactionfavorgain.md)\n\n## Singularity.getFactionFavorGain() method\n\nGet faction favor gain.\n\n**Signature:**\n\n```typescript\ngetFactionFavorGain(faction: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you will gain for the specified faction when you reset by installing Augmentations.\n\n## Remarks\n\nRAM cost: 0.75 GB \\* 16/4/1\n\nThis function returns the amount of favor you will gain for the specified faction when you reset by installing Augmentations.\n\n", "ns.singularity.getfactionfavorgain.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [Singularity](./bitburner.singularity.md) &gt; [getFactionFavorGain](./bitburner.singularity.getfactionfavorgain.md)\n\n## Singularity.getFactionFavorGain() method\n\nGet faction favor gain.\n\n**Signature:**\n\n```typescript\ngetFactionFavorGain(faction: string): number;\n```\n\n## Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  faction | string | Name of faction. |\n\n**Returns:**\n\nnumber\n\nAmount of favor you will gain for the specified faction when you reset by installing Augmentations.\n\n## Remarks\n\nRAM cost: 0.75 GB \\* 16/4/1\n\nThis function returns the amount of favor you will gain for the specified faction when you reset by installing Augmentations.\n\n", "bitburner.gangmemberinfo.def_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_exp](./bitburner.gangmemberinfo.def_exp.md)\n\n## GangMemberInfo.def\\_exp property\n\nCurrent defense experience\n\n**Signature:**\n\n```typescript\ndef_exp: number;\n```\n", "ns.gangmemberinfo.def_exp.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [GangMemberInfo](./bitburner.gangmemberinfo.md) &gt; [def\\_exp](./bitburner.gangmemberinfo.def_exp.md)\n\n## GangMemberInfo.def\\_exp property\n\nCurrent defense experience\n\n**Signature:**\n\n```typescript\ndef_exp: number;\n```\n", "bitburner.jobname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [JobName](./bitburner.jobname.md)\n\n## JobName enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum JobName \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  agent0 | <code>&quot;Field Agent&quot;</code> |  |\n|  agent1 | <code>&quot;Secret Agent&quot;</code> |  |\n|  agent2 | <code>&quot;Special Operative&quot;</code> |  |\n|  business0 | <code>&quot;Business Intern&quot;</code> |  |\n|  business1 | <code>&quot;Business Analyst&quot;</code> |  |\n|  business2 | <code>&quot;Business Manager&quot;</code> |  |\n|  business3 | <code>&quot;Operations Manager&quot;</code> |  |\n|  business4 | <code>&quot;Chief Financial Officer&quot;</code> |  |\n|  business5 | <code>&quot;Chief Executive Officer&quot;</code> |  |\n|  businessConsult0 | <code>&quot;Business Consultant&quot;</code> |  |\n|  businessConsult1 | <code>&quot;Senior Business Consultant&quot;</code> |  |\n|  employee | <code>&quot;Employee&quot;</code> |  |\n|  employeePT | <code>&quot;Part-time Employee&quot;</code> |  |\n|  IT0 | <code>&quot;IT Intern&quot;</code> |  |\n|  IT1 | <code>&quot;IT Analyst&quot;</code> |  |\n|  IT2 | <code>&quot;IT Manager&quot;</code> |  |\n|  IT3 | <code>&quot;Systems Administrator&quot;</code> |  |\n|  networkEng0 | <code>&quot;Network Engineer&quot;</code> |  |\n|  networkEng1 | <code>&quot;Network Administrator&quot;</code> |  |\n|  security0 | <code>&quot;Police Officer&quot;</code> |  |\n|  security1 | <code>&quot;Police Chief&quot;</code> |  |\n|  security2 | <code>&quot;Security Guard&quot;</code> |  |\n|  security3 | <code>&quot;Security Officer&quot;</code> |  |\n|  security4 | <code>&quot;Security Supervisor&quot;</code> |  |\n|  security5 | <code>&quot;Head of Security&quot;</code> |  |\n|  securityEng | <code>&quot;Security Engineer&quot;</code> |  |\n|  software0 | <code>&quot;Software Engineering Intern&quot;</code> |  |\n|  software1 | <code>&quot;Junior Software Engineer&quot;</code> |  |\n|  software2 | <code>&quot;Senior Software Engineer&quot;</code> |  |\n|  software3 | <code>&quot;Lead Software Developer&quot;</code> |  |\n|  software4 | <code>&quot;Head of Software&quot;</code> |  |\n|  software5 | <code>&quot;Head of Engineering&quot;</code> |  |\n|  software6 | <code>&quot;Vice President of Technology&quot;</code> |  |\n|  software7 | <code>&quot;Chief Technology Officer&quot;</code> |  |\n|  softwareConsult0 | <code>&quot;Software Consultant&quot;</code> |  |\n|  softwareConsult1 | <code>&quot;Senior Software Consultant&quot;</code> |  |\n|  waiter | <code>&quot;Waiter&quot;</code> |  |\n|  waiterPT | <code>&quot;Part-time Waiter&quot;</code> |  |\n\n", "ns.jobname.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [JobName](./bitburner.jobname.md)\n\n## JobName enum\n\n\n**Signature:**\n\n```typescript\ndeclare enum JobName \n```\n\n## Enumeration Members\n\n|  Member | Value | Description |\n|  --- | --- | --- |\n|  agent0 | <code>&quot;Field Agent&quot;</code> |  |\n|  agent1 | <code>&quot;Secret Agent&quot;</code> |  |\n|  agent2 | <code>&quot;Special Operative&quot;</code> |  |\n|  business0 | <code>&quot;Business Intern&quot;</code> |  |\n|  business1 | <code>&quot;Business Analyst&quot;</code> |  |\n|  business2 | <code>&quot;Business Manager&quot;</code> |  |\n|  business3 | <code>&quot;Operations Manager&quot;</code> |  |\n|  business4 | <code>&quot;Chief Financial Officer&quot;</code> |  |\n|  business5 | <code>&quot;Chief Executive Officer&quot;</code> |  |\n|  businessConsult0 | <code>&quot;Business Consultant&quot;</code> |  |\n|  businessConsult1 | <code>&quot;Senior Business Consultant&quot;</code> |  |\n|  employee | <code>&quot;Employee&quot;</code> |  |\n|  employeePT | <code>&quot;Part-time Employee&quot;</code> |  |\n|  IT0 | <code>&quot;IT Intern&quot;</code> |  |\n|  IT1 | <code>&quot;IT Analyst&quot;</code> |  |\n|  IT2 | <code>&quot;IT Manager&quot;</code> |  |\n|  IT3 | <code>&quot;Systems Administrator&quot;</code> |  |\n|  networkEng0 | <code>&quot;Network Engineer&quot;</code> |  |\n|  networkEng1 | <code>&quot;Network Administrator&quot;</code> |  |\n|  security0 | <code>&quot;Police Officer&quot;</code> |  |\n|  security1 | <code>&quot;Police Chief&quot;</code> |  |\n|  security2 | <code>&quot;Security Guard&quot;</code> |  |\n|  security3 | <code>&quot;Security Officer&quot;</code> |  |\n|  security4 | <code>&quot;Security Supervisor&quot;</code> |  |\n|  security5 | <code>&quot;Head of Security&quot;</code> |  |\n|  securityEng | <code>&quot;Security Engineer&quot;</code> |  |\n|  software0 | <code>&quot;Software Engineering Intern&quot;</code> |  |\n|  software1 | <code>&quot;Junior Software Engineer&quot;</code> |  |\n|  software2 | <code>&quot;Senior Software Engineer&quot;</code> |  |\n|  software3 | <code>&quot;Lead Software Developer&quot;</code> |  |\n|  software4 | <code>&quot;Head of Software&quot;</code> |  |\n|  software5 | <code>&quot;Head of Engineering&quot;</code> |  |\n|  software6 | <code>&quot;Vice President of Technology&quot;</code> |  |\n|  software7 | <code>&quot;Chief Technology Officer&quot;</code> |  |\n|  softwareConsult0 | <code>&quot;Software Consultant&quot;</code> |  |\n|  softwareConsult1 | <code>&quot;Senior Software Consultant&quot;</code> |  |\n|  waiter | <code>&quot;Waiter&quot;</code> |  |\n|  waiterPT | <code>&quot;Part-time Waiter&quot;</code> |  |\n\n", "bitburner.hacknetserverconstants.maxservers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxServers](./bitburner.hacknetserverconstants.maxservers.md)\n\n## HacknetServerConstants.MaxServers property\n\nMax number of servers\n\n**Signature:**\n\n```typescript\nMaxServers: number;\n```\n", "ns.hacknetserverconstants.maxservers.md": "<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n\n[Home](./index.md) &gt; [bitburner](./bitburner.md) &gt; [HacknetServerConstants](./bitburner.hacknetserverconstants.md) &gt; [MaxServers](./bitburner.hacknetserverconstants.maxservers.md)\n\n## HacknetServerConstants.MaxServers property\n\nMax number of servers\n\n**Signature:**\n\n```typescript\nMaxServers: number;\n```\n"}

export class Jeekipedia {
	constructor(ns, Game) {
		this.ns = ns;
		this.Game = Game ? Game : new WholeGame(ns);
	}
	async lookup(functionName) {
		eval('window').typethis = function (text) {
			const doc = eval("document");
		    const terminalInput = doc.getElementById("terminal-input");
		    terminalInput.value = text;
		    const handler = Object.keys(terminalInput)[1];
		    terminalInput[handler].onChange({ target: terminalInput });
			terminalInput[handler].onKeyDown({
				key: "Enter",
				preventDefault: () => null
			});		};
		this.ns.iKnowWhatImDoing();
		let fileName = (Object.keys(DOCS).map(x => [levenshteinDistance(x, functionName), x]).sort((a, b) => a[0] - b[0]))[0][1]
		eval('window').tprintRaw(await this.render(DOCS[fileName]));
        this.ns.exit();
		return;
	}
	async render(text) {
		let result = [];
		let lines = text.split("\n");
		while (lines.length > 0) {
			let line = lines.shift();
			while (line.indexOf("<!--") > -1 && line.indexOf("-->") > line.indexOf("<!--")) {
				line = line.slice(0, line.indexOf("<!--")) + line.slice(line.indexOf("-->")+3, line.length-1);
			}
			let didSomething = false;
			if (line.slice(0, 2) === "# ") {
				result.push(React.createElement("h1", {}, line.slice(2)))
				didSomething = true;
			}
			if (line.slice(0, 3) === "## ") {
				result.push(React.createElement("h2", {}, line.slice(3)))
				didSomething = true;
			}
			if (line.slice(0, 4) === "### ") {
				result.push(React.createElement("h3", {}, line.slice(4)))
				didSomething = true;
			}
			if (line === "---") {
				result.push(React.createElement("hr", {}));
				didSomething = true;
			}
			if (line.slice(0, 2) === "> ") {
				result.push(React.createElement("blockquote", {}, line.slice(2)))
				didSomething = true;
			}
			if (line.slice(0, 1) === "`" && line.slice(line.length-2, 1) === "`") {
				result.push(React.createElement("table", {border: 1}, React.createElement("tr", {}, React.createElement("td", {}, line.slice(1, line.length-2)))));
				didSomething = true;
			}
			if (line.slice(0, 1) === "|") { // Oh hell. A Table.
                let rows = [line];
                while (lines.length > 0 && lines[0].slice(0, 1) === "|") {
					rows.push(lines.shift());
				}
				rows = rows.filter(x => x.replace(/[| -]/g, "").length > 0);
				rows = rows.map(x => x.split("|"));
				rows.forEach(x => x.shift());
				rows.forEach(x => x.pop());
				rows = rows.map(x => x.map(y => React.createElement("td", {}, y)));
				result.push(React.createElement("table", {cellPadding: 5, cellSpacing: 1, border: 1}, rows.map(x => React.createElement("tr", {}, x))));
				didSomething = true;
			}
			if (!didSomething) {
				result.push(React.createElement("span", {}, line));
			}
		}
		result.push(React.createElement("a", {onClick:"window.typethis('ls')"}, "Test"));
		return React.createElement("span", {}, result);
	}
}
/* Find the jobs array
export async function main(ns) {
	const objects = [];
	const payload_id = "payload" + String(Math.trunc(performance.now()));
	globalThis.webpackJsonp.push([payload_id, {
		[payload_id]: function (_e, _t, require) {
			for (const module of (Object.values(require.c))) {
				for (const object of Object.values(module?.exports ?? {})) {
					objects.push(object);
				}
			}
		}
	}, [[payload_id]]]);

	let player;
	let router;
	let jobs;
	let positionsraw;
	for (const obj of objects) {
		if (!player && typeof obj.whoAmI === "function" && obj.whoAmI() === "Player") {
			player = obj;
		} else {
			if (!router && typeof obj.toDevMenu === "function") {
				router = obj;
			} else {
				try {
					if (Object.keys(obj).includes("AevumAeroCorp")) {
						//ns.tprint(obj, " ", Object.keys(obj));
						//ns.tprint(" AeroCorp ", Object.keys(obj['AevumAerocorp']));
						locations = obj;
					}
				} catch { }
				try {
					if (Object.keys(obj).includes("AeroCorp") && Object.keys(obj["AeroCorp"]).includes("companyPositions")) {
						//ns.tprint(obj, " ", Object.keys(obj));
						//ns.tprint(" AeroCorp ", Object.keys(obj['AeroCorp']));
						jobs = obj;
					}
				} catch { }
				try {
					if (Object.keys(obj[0]).includes("charismaEffectiveness")) {
						positionsraw = obj;
					}
				} catch { }
			}
		}
	}
	let positions = {}
	positionsraw.map(x => positions[x.name] = x);
	//ns.tprint('Player: ' + player);
	//ns.tprint('Router: ' + router);
	//ns.tprint('Jobs: ' + jobs);
	for (let company of Object.keys(jobs).sort((a, b) => {return jobs[a]['jobStatReqOffset'] - jobs[b]['jobStatReqOffset']})) {
		for (let pos of Object.keys(jobs[company]["companyPositions"]).sort((a, b) => {return (positions[a]['reqdReputation'] ? positions[a]['reqdReputation'] : 0) - (positions[b]['reqdReputation'] ? positions[b]['reqdReputation'] : 0)})) {
			let rep = (positions[pos]['reqdReputation'] ? positions[pos]['reqdReputation'] : 0);
			let hackk = (positions[pos]["reqdHacking"] ? positions[pos]["reqdHacking"] + jobs[company]['jobStatReqOffset'] : 0);
			let cha = (positions[pos]["reqdCharisma"] ? positions[pos]["reqdCharisma"] + jobs[company]['jobStatReqOffset'] : 0);
			if (ns.getPlayer().skills.hacking >= hackk && ns.getPlayer().skills.charisma >= cha)
			ns.tprint(company, " ", pos, " ", rep, " ", hackk, " ", cha);
		}
//        ns.tprint(company, " ", jobs[company]);
	}
//    ns.tprint('Positions: ' + positions.map(x => [x.name, x]));
//    ns.tprint('Locations: ' + Object.keys(locations["Bachman & Associates"]));

	//    if (router) router.toDevMenu();
}
*/
/** @param {NS} ns */

const cmdlineflags = [
	["logbox", false], //box.js
	["roulettestart", false], // Play roulette and buy ram and reset until you can't buy RAM
	["roulette", false], // Play roulette
	["contracts", false], // Solve contracts
	["bn7", false],  // Bladeburner Loop
	["bn8", false],  // Main Stocks Loop
	["bn8b", false], // Stockhack Loop
	["bbdisplay", false], //Bladeburner Display
	["stockdisplay", false], // Display Stock Info
	["stockfilter", false], // Only show owned stocks
	["ps", false],  // Process List
	["augs", false], // Augmentations
	["popemall", false], // Get access to all possible servers
	["endlessass", false], // Endless Assassinations (CHEAT)
	["help", "none"],
];


async function displayloop(display) {
	while (true) {
        await (display.updateDisplay());
	}
}

/** @param {NS} ns */
export async function main(ns) {
	let Game = new WholeGame(ns);
	var cmdlineargs = ns.flags(cmdlineflags);
	let promises = [];
	if (cmdlineargs['help'] != "none") {
		Game.Jeekipedia.lookup(cmdlineargs['help']);
	}
	if (cmdlineargs['endlessass']) {
		promises.push(Game.Debug.endlessAss());
	}
	if (cmdlineargs['roulettestart']) {
		await Game.roulettestart();
	}
	if (cmdlineargs['popemall']) {
		promises.push(Game.Servers.pop_them_all());
	}
	if (cmdlineargs['roulette']) {
		promises.push(Game.Casino.roulette());
	}
	if (cmdlineargs['contracts']) {
		promises.push(Game.Contracts.solve());
	}
	if (cmdlineargs['bn7']) {
		promises.push(Game.bn2 ());
		promises.push(Game.bn7());
		promises.push(Game.Hacknet.loop());
	}
	if (cmdlineargs['bn8']) {
		promises.push(Game.Gang.Start());
		promises.push(Game.bn8());
	}
	if (cmdlineargs['bn7'] || cmdlineargs['bn8']) {
    	promises.push(Game.Contracts.loop());
    	promises.push(Game.Sleeves.SleeveInfoLog());
    	promises.push(Game.Servers.serverbox());
	}
	let displays = [];
	if (cmdlineargs['stockdisplay']) {
		displays.push(Game.StockMarket);
		await (displays[displays.length - 1].createDisplay());
		promises.push(displayloop(displays[displays.length-1]));
	}
	if (cmdlineargs['bbdisplay']) {
		displays.push(Game.Bladeburner);
		await (displays[displays.length - 1].createDisplay());
		promises.push(displayloop(displays[displays.length-1]));
	}
	if (cmdlineargs['ps']) {
		displays.push(Game.ProcessList);
		await (displays[displays.length - 1].createDisplay());
		promises.push(displayloop(displays[displays.length-1]));
	}
	if (cmdlineargs['augs']) {
		displays.push(Game.Augmentations);
		await (displays[displays.length - 1].createDisplay());
		promises.push(displayloop(displays[displays.length-1]));
	}
	ns.tprint(await Promise.race(promises));
}

export class Player {
	constructor(ns, game) {
		this.ns = ns;
		this.game = game ? game : new WholeGame(ns);
	}
	get hacking() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getPlayer")).skills.hacking;
			} catch (e) {
				return [];
			}
		})();
	}
	get money() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServerMoneyAvailable", "home"));
			} catch (e) {
				return [];
			}
		})();
	}
	async hospitalizeIfNeeded() {
		let hp = (await Do(this.ns, "ns.getPlayer")).hp;
		if (hp.current / hp.max < 1) {
			await Do(this.ns, "ns.singularity.hospitalize");
			return true;
		}
		return false;
	}
	get skills() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getPlayer")).skills;
			} catch (e) {
				return [];
			}
		})();
	}
	get bitNodeN() {
		return (async () => {
			try {
				return ((await Do(this.ns, "ns.getPlayer")).bitNodeN);
			} catch (e) {
				return [];
			}
		})();
	}
	get city() {
		return (async () => {
			try {
				return ((await Do(this.ns, "ns.getPlayer")).city);
			} catch (e) {
				return [];
			}
		})();
	}
	get factions() {
		return (async () => {
			try {
				return ((await Do(this.ns, "ns.getPlayer")).factions);
			} catch (e) {
				return [];
			}
		})();
	}
	async Gym(stat, gymName = "Powerhouse Gym", focus = false) {
		let city = await (this.city);
		if (gymName == null) {
			if (["Ishima", "New Tokyo", "Chongqing", "Sector-12"].includes(city)) {
				gymName = "Powerhouse Gym";
			} else {
				gymName = { "Aevum": "Snap Fitness Gym", "Volhaven": "Millenium Fitness Gym" }[city];
			}
		}
		if (["Powerhouse Gym", "Iron Gym"].includes(gymName) && (await (this.city)) != "Sector-12") {
			if (!await Do(this.ns, "ns.singularity.travelToCity", "Sector-12")) {
				if (city == "Aevum") {
					gymName = "Snap Fitness Gym";
				} else {
					if (city == "Volhaven") {
						gymName = "Millenium Fitness Gym";
					} else {
						return false;
					}
				}
			}
		}
		if (["Crush Fitness Gym", "Snap Fitness Gym"].includes(gymName) && (await (this.city)) != "Aevum") {
			if (!await Do(this.ns, "ns.singularity.travelToCity", "Aevum")) {
				if (city == "Sector-12") {
					gymName = "Powerhouse Gym";
				} else {
					if (city == "Volhaven") {
						gymName = "Millenium Fitness Gym";
					} else {
						return false;
					}
				}
			}
		}
		if (["Millenium Fitness Gym"].includes(gymName) && (await (this.city)) != "Volhaven") {
			if (!await Do(this.ns, "ns.singularity.travelToCity", "Volhaven")) {
				if (city == "Sector-12") {
					gymName = "Powerhouse Gym";
				} else {
					if (city == "Aevum") {
						gymName = "Snap Fitness Gym";
					} else {
						return false;
					}
				}
			}
		}
		await Do(this.ns, "ns.singularity.gymWorkout", gymName, stat, focus);
		return;
	}
	async hasAug(aug) {
		let augs = await Do(this.ns, "ns.singularity.getOwnedAugmentations");
		return augs.includes(aug);
	}
	async joinFactionIfInvited(faction) {
		if ((await Do(this.ns, "ns.singularity.checkFactionInvitations")).includes(faction)) {
			await Do(this.ns, "ns.singularity.joinFaction", faction);
			return true;
		}
		return false;
	}
	async trainCombatStatsUpTo(goal, withSleeves = false) {
		let didSomething = false;
		for (let stat of ["Strength", "Defense", "Dexterity", "Agility"]) {
			if (withSleeves && (await (this.game.Sleeves.numSleeves)) > 0) {
				if (goal > ((await Do(this.ns, "ns.getPlayer")).skills[stat.toLowerCase()])) {
					await (this.game.Sleeves.trainWithMe(stat));
					await this.Gym(stat, "Powerhouse Gym", false);
					didSomething = true;
				}
			}
			while (goal > ((await Do(this.ns, "ns.getPlayer")).skills[stat.toLowerCase()])) {
				await this.ns.asleep(0);
				didSomething = true;
			}
			await this.ns.asleep(1000);
		}
		if (withSleeves) {
			await this.game.Sleeves.deShock();
		}
		return didSomething;
	}
}

export class ProcessList {
	constructor(ns, game) {
		this.ns = ns;
		this.game = game ? game : new WholeGame(ns);
	}
	async createDisplay() {
		this.psWindow = await makeNewWindow("Process List", this.ns.ui.getTheme());

		eval('window').listenUp = (message) => { globalThis.psQueue.push(message); };
		if (typeof globalThis.psQueue === 'undefined') {
			globalThis.psQueue = [];
		}
	}
	async updateDisplay() {
		let servers = ["home"];
		for (let i = 0; i < servers.length; i++) {
			let newservers = await Do(this.ns, "ns.scan", servers[i]);
			for (let server of newservers) {
				if (!servers.includes(server)) {
					servers.push(server);
				}
			}
		}

		while (globalThis.psQueue.length > 0) {
			let cmd = globalThis.psQueue.shift();
			try { await eval(cmd) } catch (e) { this.ns.tprint(e) }
		}
		let update = "<TABLE WIDTH=100% BORDER=1 CELLPADDING=1 CELLSPACING=1><TH>Server</TH><TH>PID</TH><TH>Filename</TH><TH>Threads</TH><TH>Filesize</TH><TH>Proc Size</TH><TH>Args</TH><TH>KILL?</TH></TR>"
		let procs = await DoAll(this.ns, "ns.ps", servers);
		for (let server of servers) {
			for (let proc of procs[server]) {
				let scriptRam = await Do(this.ns, "ns.getScriptRam", proc.filename, server);
				try {
					update += "<TR VALIGN=TOP><TD>" + server + "</TD><TD ALIGN=RIGHT>" + proc.pid.toString() + "</TD><TD>" + proc.filename + "</TD><TD ALIGN=RIGHT>" + proc.threads.toString() + "</TD><TD ALIGN=RIGHT>" + scriptRam.toString() + "</TD><TD ALIGN=RIGHT>" + (proc.threads * scriptRam).toString() + "</TD><TD>" + proc.args.toString().replaceAll(',', ', ') + "</TD><TD ALIGN=CENTER>" + "<a href=\"#\" onClick='window.opener.listenUp(\"Do(this.ns, \\\"ns.kill\\\", " + proc.pid.toString() + ")\")'>KILL</A></TD></TR>";
				} catch (e) { this.ns.tprint(e.message); }
			}
		}
		update += "</TABLE>";
		this.psWindow.update(update);
		await this.ns.asleep(1000);
	}
}

export class Server {
	constructor(ns, name = "home", game) {
		this.ns = ns;
		this.name = name;
		this.game = game ? game : new WholeGame(ns);
	}
	get backdoorInstalled() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).backdoorInstalled;
			} catch (e) {
				return false;
			}
		})();
	}
	get baseDifficulty() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerBaseSecurityLevel", this.name);
			} catch (e) {
				return false;
			}
		})();
	}
	get cpuCores() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).cpuCores;
			} catch (e) {
				return false;
			}
		})();
	}
	get ftpPortOpen() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).ftpPortOpen;
			} catch (e) {
				return false;
			}
		})();
	}
	get hackDifficulty() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerSecurityLevel", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get hasAdminRights() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.hasRootAccess", this.name);
			} catch (e) {
				return false;
			}
		})();
	}
	get hostname() {
		return this.name;
	}
	get httpPortOpen() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).httpPortOpen;
			} catch (e) {
				return false;
			}
		})();
	}
	get ip() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).ip;
			} catch (e) {
				return "0.0.0.0";
			}
		})();
	}
	get isConnectedTo() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).isConnectedTo;
			} catch (e) {
				return false;
			}
		})();
	}
	get maxRam() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerMaxRam", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get minDifficulty() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerMinSecurityLevel", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get moneyAvailable() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerMoneyAvailable", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get moneyMax() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerMaxMoney", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get numOpenPortsRequired() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).numOpenPortsRequired;
			} catch (e) {
				return 6;
			}
		})();
	}
	get openPortCount() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).openPortCount;
			} catch (e) {
				return -1;
			}
		})();
	}
	get purchasedByPlayer() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).purchasedByPlayer;
			} catch (e) {
				return -1;
			}
		})();
	}
	get ramUsed() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerUsedRam", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get requiredHackingSkill() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerRequiredHackingLevel", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get serverGrowth() {
		return (async () => {
			try {
				return await Do(this.ns, "ns.getServerGrowth", this.name);
			} catch (e) {
				return -1;
			}
		})();
	}
	get smtpPortOpen() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).smtpPortOpen;
			} catch (e) {
				return false;
			}
		})();
	}
	get sqlPortOpen() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).smtpPortOpen;
			} catch (e) {
				return false;
			}
		})();
	}
	get sshPortOpen() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.getServer", this.name)).sshPortOpen;
			} catch (e) {
				return false;
			}
		})();
	}
	// HeinousTugboat https://discord.com/channels/415207508303544321/933455928051789944/974657897596334130
	/*  const serverNames = [
	'command-one',
	'command-two'
  ];

  const foo = await serverNames.reduce(async (prevArrPromise, serverName) => {
	const workList = await prevArrPromise;
	const serverObject = await bmCommand(ns, 'ns.getServer', serverName);

	workList.push(serverObject.x);
	return workList;
  }, []);

  console.log(foo); // [ "0.322", "0.133" ] */
	async prep() {
		let Game = this.game;
		let serverList = await Game["Servers"].pop_them_all();
		let pids = [];
		while ((await this.moneyAvailable) < (await this.moneyMax)) {
			while ((await this.hackDifficulty) > (await this.minDifficulty)) {
				pids = await serverList.reduce(async (promise, server) => {
					let w = await promise;
					if (server != "home") {
						await Do(this.ns, "ns.scp", "/temp/weaken.js", server);
						let usedRam = await Do(this.ns, "ns.getServerUsedRam", server);
						let maxRam = await Do(this.ns, "ns.getServerMaxRam", server);
						if ((maxRam - usedRam) >= 1.75) {
							let newPid = await Do(this.ns, "ns.exec", "/temp/weaken.js", server, Math.floor((maxRam - usedRam) / 1.75), this.name);
							return w.concat(newPid);
						}
					}
					return w.concat(0);
				}, []);
				pids = pids.filter(x => x != 0);
				while (pids.length > 0) {
					await this.ns.asleep(0);
					if (!await Do(this.ns, "ns.isRunning", pids[0])) {
						pids.shift();
					}
				}
			}
			pids = await serverList.reduce(async (promise, server) => {
				let w = await promise;
				if (server != "home") {
					await Do(this.ns, "ns.scp", "/temp/grow.js", server);
					let usedRam = await Do(this.ns, "ns.getServerUsedRam", server);
					let maxRam = await Do(this.ns, "ns.getServerMaxRam", server);
					if ((maxRam - usedRam) >= 1.75) {
						let newPid = await Do(this.ns, "ns.exec", "/temp/grow.js", server, Math.floor((maxRam - usedRam) / 1.75), this.name);
						return w.concat(newPid);
					}
				}
				return w.concat(0);
			}, []);
			pids = pids.filter(x => x != 0);
			while (pids.length > 0) {
				await this.ns.asleep(0);
				if (!await Do(this.ns, "ns.isRunning", pids[0])) {
					pids.shift();
				}
			}
		}
		while ((await this.hackDifficulty) > (await this.minDifficulty)) {
			pids = await serverList.reduce(async (promise, server) => {
				let w = await promise;
				if (server != "home") {
					await Do(this.ns, "ns.scp", "/temp/weaken.js", server);
					let usedRam = await Do(this.ns, "ns.getServerUsedRam", server);
					let maxRam = await Do(this.ns, "ns.getServerMaxRam", server);
					if ((maxRam - usedRam) >= 1.75) {
						let newPid = await Do(this.ns, "ns.exec", "/temp/weaken.js", server, Math.floor((maxRam - usedRam) / 1.75), this.name);
						return w.concat(newPid);
					}
				}
				return w.concat(0);
			}, []);
			pids = pids.filter(x => x != 0);
			while (pids.length > 0) {
				await this.ns.asleep(0);
				if (!await Do(this.ns, "ns.isRunning", pids[0])) {
					pids.shift();
				}
			}
		}
	}
}

export class Servers {
	constructor(ns, Game) {
		this.ns = ns;
		this.Game = Game ? Game : new WholeGame(ns);
		this.serverlist = ["home", "n00dles", "foodnstuff", "sigma-cosmetics", "joesguns", "hong-fang-tea", "harakiri-sushi", "iron-gym", "CSEC", "zer0", "nectar-net", "max-hardware", "phantasy", "neo-net", "omega-net", "silver-helix", "netlink", "crush-fitness", "computek", "johnson-ortho", "the-hub", "avmnite-02h", "rothman-uni", "I.I.I.I", "syscore", "summit-uni", "catalyst", "zb-institute", "aevum-police", "lexo-corp", "alpha-ent", "millenium-fitness", "rho-construction", "aerocorp", "global-pharm", "galactic-cyber", "snap-fitness", "omnia", "unitalife", "deltaone", "univ-energy", "zeus-med", "solaris", "defcomm", "icarus", "infocomm", "zb-def", "nova-med", "taiyang-digital", "titan-labs", "microdyne", "applied-energetics", "run4theh111z", "stormtech", "fulcrumtech", "helios", "vitalife", "omnitek", "kuai-gong", "4sigma", ".", "powerhouse-fitness", "nwo", "b-and-a", "blade", "clarkinc", "ecorp", "The-Cave", "megacorp", "fulcrumassets"];
		["home", "n00dles", "foodnstuff", "sigma-cosmetics", "joesguns", "hong-fang-tea", "harakiri-sushi", "iron-gym", "CSEC", "zer0", "nectar-net", "max-hardware", "phantasy", "neo-net", "omega-net", "silver-helix", "netlink", "crush-fitness", "computek", "johnson-ortho", "the-hub", "avmnite-02h", "rothman-uni", "I.I.I.I", "syscore", "summit-uni", "catalyst", "zb-institute", "aevum-police", "lexo-corp", "alpha-ent", "millenium-fitness", "rho-construction", "aerocorp", "global-pharm", "galactic-cyber", "snap-fitness", "omnia", "unitalife", "deltaone", "univ-energy", "zeus-med", "solaris", "defcomm", "icarus", "infocomm", "zb-def", "nova-med", "taiyang-digital", "titan-labs", "microdyne", "applied-energetics", "run4theh111z", "stormtech", "fulcrumtech", "helios", "vitalife", "omnitek", "kuai-gong", "4sigma", ".", "powerhouse-fitness", "nwo", "b-and-a", "blade", "clarkinc", "ecorp", "The-Cave", "megacorp", "fulcrumassets"].map(x => this[x] = new Server(ns, x, Game));
		this.log = ns.tprint.bind(ns);
		if (ns.flags(cmdlineflags)['logbox']) {
			this.log = this.Game.sidebar.querySelector(".servers") || this.Game.createSidebarItem("Servers", "", "S", "servers");
			this.body = this.log.body;
			this.body.innerHTML = "<canvas width=1000 height=1000 id='serverbox'></canvas>";
			this.log.recalcHeight();
			this.log = this.log.log;
		}
	}
	async serverbox() {
		if (this.ns.flags(cmdlineflags)['logbox']) {
			let layout = [[],['home']];
			let purchasedServers = await Do(this.ns, "ns.getPurchasedServers");
			let scans = {};
			for (let i = 1 ; i < layout.length ; i++) {
				for (let j = 0 ; j < layout[i].length ; j++) {
                    scans[layout[i][j]] = await Do(this.ns, "ns.scan", layout[i][j]);
					let possible = await Do(this.ns, "ns.scan", layout[i][j]);
					for (let server of possible) {
						let addThis = true;
						if (i > 0 && layout[i-1].includes(server)) {
							addThis = false;
						}
						if (layout[i].includes(server)) {
							addThis = false;
						}
						if (i + 1 < layout.length && layout[i + 1].includes(server)) {
							addThis = false;
						}
						if (server.indexOf("hacknet") > -1) {
							addThis = false;
						}
						if (purchasedServers.includes(server)) {
							addThis = false;
						}
						if (addThis) {
							if (i + 1 >= layout.length) {
								layout.push([]);
							}
							if (layout[i][j] == 'home' && (await Do(this.ns, "ns.scan", server)).length==1) {
    							layout[i-1].push(server);
								scans[server] = await Do(this.ns, "ns.scan", server);
							} else {
    							layout[i+1].push(server);
	    					}
		    			}
					}
				}
			}
			let heights = [0];
			while (heights.length < layout.length) {
				heights.push(heights[heights.length-1] + 950/layout.length);
			}
			let c = eval("document").getElementById("serverbox");
			let ctx = c.getContext("2d");
			let minsec = {};
			let sec = {};
			let maxmon = {};
			let mon = {};
			await Promise.all(Object.values(scans));
			while (true) {
				Object.keys(scans).map(x => minsec[x] = Do(this.ns, "ns.getServerMinSecurityLevel", x));
				Object.keys(scans).map(x => sec[x] = Do(this.ns, "ns.getServerSecurityLevel", x));
				Object.keys(scans).map(x => mon[x] = Do(this.ns, "ns.getServerMoneyAvailable", x));
				Object.keys(scans).map(x => maxmon[x] = Do(this.ns, "ns.getServerMaxMoney", x));
				for (let server of Object.keys(scans)) {
					await minsec[server];
					await sec[server];
					await mon[server];
					await maxmon[server]; 
				}

				ctx = c.getContext("2d");
				ctx.beginPath();
				ctx.fillStyle = "#000000";
    			ctx.rect(0,0,1000,1000);
				ctx.fill();
				for (let i = 0 ; i < layout.length ; i++) {
	    			for (let j = 0 ; j < layout[i].length ; j++) {
		    			let server = layout[i][j];
			    		let myX = 375;
				    	if (layout[i].length > 1) {
					    	myX = 750 / (layout[i].length - 1) * layout[i].findIndex(x => x === server);
					    }
					    let myY = heights[i];
				    	if (i + 1 < layout.length) {
    				    	let connectTo = scans[server].filter(x => layout[i+1].includes(x));
	    				    for (let target of connectTo) {
		    				    let theirX = 375;
			    	    		if (layout[i + 1].length > 1) {
				    	    		theirX = 750 / (layout[i+1].length - 1) * layout[i+1].findIndex(x => x === target);
					        	}
						        let theirY = heights[i+1];
								ctx = c.getContext("2d");
								ctx.beginPath();
					    	    ctx.strokeStyle = "#00FFFF";
						        ctx.moveTo(115+myX, 25+myY);
                                ctx.lineTo(115+theirX, 25+theirY);
                                ctx.stroke();
					    	}
				    	}
						ctx = c.getContext("2d");
				        let security = ((await (sec[server]))-(await (minsec[server]))) / (99 - (await minsec[server]));
					    ctx.beginPath();
					    ctx.strokeStyle = "#FF0000";
					    ctx.fillStyle = "#FF0000";
					    ctx.arc(myX+115, myY+25, 15, -Math.PI / 2 + Math.PI * (1 - security), Math.PI / 2);
						ctx.lineTo(myX+115, myY+25);
					    ctx.fill();

						ctx = c.getContext("2d");
				        let money = (await (mon[server])) / (await (maxmon[server]));
					    ctx.beginPath();
					    ctx.strokeStyle = "#00FF00";
					    ctx.fillStyle = "#00FF00";
					    ctx.arc(myX+115, myY+25, 15, Math.PI / 2, Math.PI / 2 + Math.PI * money);
						ctx.lineTo(myX+115, myY+25);
					    ctx.fill();

						if (isNaN(money) || money === Infinity) {
							ctx = c.getContext("2d");
							ctx.beginPath();
							ctx.strokeStyle = "#00FFFF";
							ctx.fillStyle = "#00FFFF";
							ctx.arc(myX+115, myY+25, 15, 0, 2 * Math.PI);
							ctx.lineTo(myX+115, myY+25);
							ctx.fill();	
						}

						ctx = c.getContext("2d");
                        ctx.font = "15px Hack";
						ctx.fillStyle = "#FFFFFF";
						ctx.strokeStyle = "#FFFFFF";
						ctx.textAlign = "center";
						ctx.fillText(server, myX + 115, myY + 25 + 30);
    				}
				}
				await this.ns.asleep(60000);
			}
		}
	}
	async pop_them_all() {
		let result = [];
		for (let program of [
			["BruteSSH.exe", "ns.brutessh"],
			["FTPCrack.exe", "ns.ftpcrack"],
			["relaySMTP.exe", "ns.relaysmtp"],
			["HTTPWorm.exe", "ns.httpworm"],
			["SQLInject.exe", "ns.sqlinject"]]) {
			if (await Do(this.ns, "ns.singularity.purchaseTor", "")) {
				let cost = await Do(this.ns, "ns.singularity.getDarkwebProgramCost", program[0]);
				if ((0 < cost) && (cost < ((await Do(this.ns, "ns.getPlayer", "")).money))) {
					await Do(this.ns, "ns.singularity.purchaseProgram", program[0]);
				}
			}
			if ((await Do(this.ns, "ns.ls", "home")).includes(program[0])) {
				for (let server of await this.serverlist) { //FFIGNORE
					await Do(this.ns, program[1], server); //FFIGNORE
				}
			}
		}
		for (let server of await (this.serverlist)) {
			if ((await Do(this.ns, "ns.getServer", server)).openPortCount >= (await Do(this.ns, "ns.getServerNumPortsRequired", server))) {
				await Do(this.ns, "ns.nuke", server);
			}
			if (await Do(this.ns, "ns.hasRootAccess", server)) {
				result.push(server);
			}
		}
		return result;
	}
	async buyDubs() {
		let servers = await Do(this.ns, "ns.getPurchasedServers", "");
		let maxRam = await Do(this.ns, "ns.getPurchasedServerMaxRam", "");
		if (servers.length == await Do(this.ns, "ns.getPurchasedServerLimit", "")) {
		    if (maxRam > await Do(this.ns, "ns.getServerMaxRam", servers[0])) {
				if ((await (this.Game.Player.money)) > (await Do(this.ns, "ns.getPurchasedServerCost", maxRam))) {
					await Do(this.ns, "ns.killall", servers[0]);
					await Do(this.ns, "ns.deleteServer", servers[0]);
					return await this.buyDubs();
				}
			}
		}
		if (servers.length < await Do(this.ns, "ns.getPurchasedServerLimit", "")) {
			let rams = Object.values(await DoAll(this.ns, "ns.getServerMaxRam", servers)).reduce((a, b) => a > b ? a : b, 4);
		    return await Do(this.ns, "ns.purchaseServer", "pserv-" + servers.length.toString(), rams * 2 < maxRam ? rams * 2 : maxRam);
		}
		return false;
	}
	async display() {
		this['window'] = this['window'] || await makeNewWindow("Servers", this.ns.ui.getTheme());
		let text = "<TABLE CELLPADDING=0 CELLSPACING = 0 BORDER=1><TR><TH>Name</TD><TH>Popped</TD></TR>";
		for (let server of this.serverlist) {
			text += "<TR><TD>" + server + "</TD><TD ALIGN=CENTER>" + ((await Do(this.ns, "ns.hasRootAccess", server)) ? "✅" : "❌") + "</TD></TR>";
		}
		text += "</TABLE>"
		this['window'].update(text);
	}
}import { Do, DoAll } from "Do.js";

export class Sleeves {
	constructor(ns, Game) {
		this.ns = ns;
		this.Game = Game ? Game : new WholeGame(ns);
		this.startingAGang = false;
		if (this.ns.flags(cmdlineflags)['logbox']) {
			this.log = this.Game.sidebar.querySelector(".sleevelog") || this.Game.createSidebarItem("Sleeve Log", "", "S", "sleevelog");
			this.log = this.log.log;
			this.log2 = this.Game.sidebar.querySelector(".sleeveinfobox") || this.Game.createSidebarItem("Sleeves Info", "", "S", "sleeveinfobox");
			this.log2.sizeM = 16;
			this.log2 = this.log2.log;
		}
	}
	get numSleeves() {
		return (async () => {
			try {
				if ((await Do(this.ns, "ns.singularity.getOwnedSourceFiles")).filter(x => x.n == 10).length > 0)
					return await Do(this.ns, "ns.sleeve.getNumSleeves");
				if ((await Do(this.ns, "ns.getPlayer")).bitNodeN == 10)
					return await Do(this.ns, "ns.sleeve.getNumSleeves");;
				return 0;
			} catch (e) {
				return 0;
			}
		})();
	}
	async SleeveInfoLog() {
		while (true) {
			if (this.ns.flags(cmdlineflags)['logbox']) {
				for (let i = 0; i < await (this.numSleeves); i++) {
					let me = await Do(this.ns, "ns.sleeve.getSleeve", i);
					this.log2([me.skills.hacking.toString(), me.skills.strength.toString(), me.skills.defense.toString(), me.skills.dexterity.toString(), me.skills.agility.toString(), me.skills.intelligence.toString(), me.shock.toString()].join("/"), false);
					try { this.log2(JSON.stringify(Object.values(await Do(this.ns, "ns.sleeve.getTask", i)).join("/")), false) } catch { };
				}
				await this.ns.asleep(10000);
			} else {
				await this.ns.asleep(123456789);
			}
		}
	}
	async trainWithMe(stat) {
		for (let i = 0; i < await (this.numSleeves); i++) {
			await Do(this.ns, "ns.sleeve.travel", i, "Sector-12");
			await Do(this.ns, "ns.sleeve.setToGymWorkout", i, "Powerhouse Gym", stat);
		}
	}
	async startAGangFirst() {
		this.log("Starting a Gang")
		this.startingAGang = true;
		this.Game.Hacknet.goal = "Improve Gym Training";
		let thresh = 0;
		if (this.Game.bitNodeN == 2) {
			return;
		}
		if (0 == await (this.numSleeves)) {
			return;
		}
		let done = false;
		this.log("Shock Recovery...")
		while (!done) {
			done = true;
			for (let i = 0; i < await (this.numSleeves); i++) {
				if ((await Do(this.ns, "ns.sleeve.getSleeve", i)).shock > 90) {
					for (let j = 0; j < await (this.numSleeves); j++) {
						done = false;
						Do(this.ns, "ns.sleeve.setToShockRecovery", j);
					}
				}
				while ((await Do(this.ns, "ns.sleeve.getSleeve", i)).shock > 90) {
					done = false;
					await this.ns.asleep(1000);
				}
			}
		}
		done = false;
		while (!done) {
			done = true;
			for (let i = 0; i < await (this.numSleeves); i++) {
				if (.75 > await Do(this.ns, "ns.formulas.work.crimeSuccessChance", await Do(this.ns, "ns.sleeve.getSleeve", i), "Homicide")) {
					this.log(i.toString() + " Success Rate: " + (await Do(this.ns, "ns.formulas.work.crimeSuccessChance", await Do(this.ns, "ns.sleeve.getSleeve", i), "Homicide")).toString() + " ");
					done = false;
					thresh += 10;
					this.log("Raising threshold to: " + thresh.toString());
					await this.trainCombatStatsUpTo(thresh, true, true);
				}
			}
		}
		this.startingAGang = false;
		for (let i = 0; i < await (this.numSleeves); i++) {
			await Do(this.ns, "ns.sleeve.setToCommitCrime", i, "Homicide");
		}
		while (-54000 < await Do(this.ns, "ns.heart.break")) {
			await this.ns.asleep(10000);
			this.log("Homiciding, Karma: " + (await Do(this.ns, "ns.heart.break")).toString());
		}
		this.Game.Hacknet.goal = "Sell for Money";
		this.log("You have -54000 Karma. Start a Gang.");
		for (let i = 0; i < await (this.numSleeves); i++) {
			await Do(this.ns, "ns.sleeve.setToShockRecovery", i);
		}
	}
	async trainCombatStatsUpTo(goal, withSleeves = false, halfdexagi = false) {
		this.log("Training Player stats up to " + goal.toString());
		let didSomething = false;
		for (let stat of ["Strength", "Defense", "Dexterity", "Agility"]) {
			for (let i = 0; i < await (this.numSleeves); i++) {
				if ((halfdexagi && ["Dexterity", "Agility"].includes(stat) ? goal / 4 : goal) > ((await Do(this.ns, "ns.sleeve.getSleeve", i)).skills[stat.toLowerCase()])) {
					(this.Game.Sleeves.trainWithMe(stat));
					this.Game.Player.Gym(stat, "Powerhouse Gym", false);
					didSomething = true;
				}
				while ((halfdexagi && ["Dexterity", "Agility"].includes(stat) ? goal / 4 : goal) > ((await Do(this.ns, "ns.sleeve.getSleeve", i)).skills[stat.toLowerCase()])) {
					await this.ns.asleep(0);
					didSomething = true;
				}
			}
		}
		if (withSleeves) {
			await this.Game.Sleeves.deShock();
		}
		return didSomething;
	}
	async bbCombatSort() {
		return (async () => {
			try {
				let sleeves = [];
				for (let i = 0; i < await (this.numSleeves); i++) {
					sleeves.push(i);
				}
				if (sleeves.length == 0) {
					return [];
				}
				let sleevestats = await DoAll(this.ns, "ns.sleeve.getSleeve", sleeves);
				if (sleeves.length == 0) {
					return [];
				}
				sleeves = sleeves.sort((b, a) => (100 - sleevestats[a].shock) * sleevestats[a].skills.strength * sleevestats[a].skills.defense * sleevestats[a].skills.dexterity * sleevestats[a].skills.agility - (100 - sleevestats[b].shock) * sleevestats[b].skills.strength * sleevestats[b].skills.defense * sleevestats[b].skills.dexterity * sleevestats[b].skills.agility);
				return sleeves;
			} catch (e) {
				return [];
			}
		})();
	}
	async bbCombatAugs() {
		let sleeves = [];
		for (let i = 0; i < await (this.numSleeves); i++) {
			sleeves.push(i);
		}
		if (sleeves.length == 0) {
			return false;
		}
		let sleevestats = await DoAll(this.ns, "ns.sleeve.getSleeve", sleeves);
		sleeves = sleeves.filter(x => sleevestats[x].shock == 0);
		if (sleeves.length == 0) {
			return false;
		}
		sleeves = sleeves.sort((a, b) => sleevestats[a].strength * sleevestats[a].defense * sleevestats[a].dexterity * sleevestats[a].agility - sleevestats[b].strength * sleevestats[b].defense * sleevestats[b].dexterity * sleevestats[b].agility);
		for (let i of sleeves) {
			let augs = (await Do(this.ns, "ns.sleeve.getSleevePurchasableAugs", i)).map(x => x.name);
			let augstats = await DoAll(this.ns, "ns.singularity.getAugmentationStats", augs);
			augs = augs.filter(x => augstats[x].strength > 1 || augstats[x].strength_exp > 1 || augstats[x].defense > 1 || augstats[x].defense_exp > 1 || augstats[x].dexterity > 1 || augstats[x].dexterity_exp > 1 || augstats[x].agility > 1 || augstats[x].agility_exp > 1);
			augs = augs.sort((a, b) => -augstats[a].strength * augstats[a].strength_exp * augstats[a].defense * augstats[a].defense_exp * augstats[a].dexterity * augstats[a].dexterity_exp * augstats[a].agility * augstats[a].agility_exp + augstats[b].strength * augstats[b].strength_exp * augstats[b].defense * augstats[b].defense_exp * augstats[b].dexterity * augstats[b].dexterity_exp * augstats[b].agility * augstats[b].agility_exp);
			// "strength":1,"strength_exp":1,"defense":1,"defense_exp":1,"dexterity":1.05,"dexterity_exp":1,"agility":1.05,"agility_exp":1
			for (let aug of augs) {
				if (await Do(this.ns, "ns.sleeve.purchaseSleeveAug", i, aug)) {
					this.log("Sleeve " + i.toString() + " got " + aug)
					return [i, aug];
				}
			}
		}
	}
	async deShock() {
		for (let i = 0; i < await (this.numSleeves); i++) {
			await Do(this.ns, "ns.sleeve.setToShockRecovery", i);
		}
	}
	async bbDo(i, action, contract = null) {
		if (contract != null) {
			await Do(this.ns, "ns.sleeve.setToBladeburnerAction", i, action, contract);
		} else {
			await Do(this.ns, "ns.sleeve.setToBladeburnerAction", i, action);
		}
	}
	async bbEverybody(action, contract = null) {
		for (let i = 0; i < await (this.Game.Sleeves.numSleeves); i++) {
			await this.bbDo(i, action, contract);
		}
	}
}import { Do, DoAll, DoAllComplex } from "Do.js";

const stockMapping = {
	"ECP": "ecorp",
	"MGCP": "megacorp",
	"BLD": "blade",
	"CLRK": "clarkinc",
	"OMTK": "omnitek",
	"FSIG": "4sigma",
	"KGI": "kuai-gong",
	"FLCM": "fulcrumtech",
	"STM": "stormtech",
	"DCOMM": "defcomm",
	"HLS": "helios",
	"VITA": "vitalife",
	"ICRS": "icarus",
	"UNV": "univ-energy",
	"AERO": "aerocorp",
	"OMN": "omnia",
	"SLRS": "solaris",
	"GPH": "global-pharm",
	"NVMD": "nova-med",
	"LXO": "lexo-corp",
	"RHOC": "rho-construction",
	"APHE": "alpha-ent",
	"SYSC": "syscore",
	"CTK": "computek",
	"NTLK": "netlink",
	"OMGA": "omega-net",
	"FNS": "foodnstuff",
	"JGN": "joesguns",
	"SGC": "sigma-cosmetics",
	"CTYS": "catalyst",
	"MDYN": "microdyne",
	"TITN": "titan-labs"
}

export class StockMarket {
	constructor(ns, game) {
		helperScripts(ns);
		this.ns = ns;
		this.game = game ? game : new WholeGame(ns);
		this.liquidate = false;
		this.log = ns.tprint.bind(ns);
        if (ns.flags(cmdlineflags)['logbox']) {
            this.log = this.game.sidebar.querySelector(".stockbox") || this.game.createSidebarItem("Stocks", "", "S", "stockbox");
			this.log = this.log.log;
        }
	}
	get symbols() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.stock.getSymbols"));
			} catch (e) {
				return [];
			}
		})();
	}
	async price(stock) {
		return await Do(this.ns, "ns.stock.getPrice", stock);
	}
	async askprice(stock) {
		return await Do(this.ns, "ns.stock.getAskPrice", stock);
	}
	async bidprice(stock) {
		return await Do(this.ns, "ns.stock.getBidPrice", stock);
	}
	async volatility(stock) {
		return await Do(this.ns, "ns.stock.getVolatility", stock);
	}
	async forecast(stock) {
		return await Do(this.ns, "ns.stock.getForecast", stock);
	}
	company(stock) {
		return stockSymbolToCompany[stock];
	}
	async position(stock) {
		return await Do(this.ns, "ns.stock.getPosition", stock);
	}
	async longsalevalue(stock) {
		return await Do(this.ns, "ns.stock.getSaleGain", stock, this.position(stock)[0], "Long");
	}
	async shortsalevalue(stock) {
		return await Do(this.ns, "ns.stock.getSaleGain", stock, this.position(stock)[2], "Short");
	}
	async value(stock) {
		let pos = await this.position(stock);
		return await Do(this.ns, "ns.stock.getSaleGain", stock, pos[0], "Long") + await Do(this.ns, "ns.stock.getSaleGain", stock, pos[2], "Short");
	}
	async profit(stock) {
		let pos = await this.position(stock);
		return await Do(this.ns, "ns.stock.getSaleGain", stock, pos[0], "Long") + await Do(this.ns, "ns.stock.getSaleGain", stock, pos[2], "Short") - pos[0] * pos[1] - pos[2] * pos[3];
	}
	server(stock) {
		if (Object.keys(stockMapping).includes(stock))
			return stockMapping[stock];
		return null;
	}
	async stockData(stock) {
		let answer = {
			'symbol': stock,
			'company': this.company(stock),
			'price': await this.price(stock),
			'askprice': await this.askprice(stock),
			'bidprice': await this.bidprice(stock),
			'position': await this.position(stock),
			'volatility': await this.volatility(stock),
			'forecast': await this.forecast(stock)
		}
		answer['longsalevalue'] = await Do(this.ns, "ns.stock.getSaleGain", stock, answer['position'][0], "Long");
		answer['shortsalevalue'] = await Do(this.ns, "ns.stock.getSaleGain", stock, answer['position'][2], "Short");
		answer['value'] = answer['longsalevalue'] + answer['shortsalevalue'];

		answer['profit'] = answer['longsalevalue'] + answer['shortsalevalue'] - answer['position'][0] * answer['position'][1] - answer['position'][2] * answer['position'][3];
		answer['server'] = this.server(stock);
		return answer;
	}
	get portfolioValue() {
		return (async () => {
			try {
				let value = 0;
				let data = await this.market;
				return Object.keys(data).map(x => data[x]['value']).reduce((a, b) => a + b);
			} catch (e) {
				return 0;
			}
		})();
	}
	get market() {
		return (async () => {
			try {
				let answer = {};
				let symbols = await this.symbols;
				Object.entries(stockSymbolToCompany).map(x => answer[x[0]] = { 'company': x[1] });
				Object.entries(await DoAll(this.ns, "ns.stock.getPosition", symbols)).map(x => answer[x[0]]['position'] = x[1]);
				Object.entries(await DoAll(this.ns, "ns.stock.getPrice", symbols)).map(x => answer[x[0]]['price'] = x[1]);
				Object.entries(await DoAll(this.ns, "ns.stock.getAskPrice", symbols)).map(x => answer[x[0]]['askprice'] = x[1]);
				Object.entries(await DoAll(this.ns, "ns.stock.getBidPrice", symbols)).map(x => answer[x[0]]['bidprice'] = x[1]);
				if (await Do(this.ns, "ns.stock.has4SDataTIXAPI", "")) {
					Object.entries(await DoAll(this.ns, "ns.stock.getVolatility", symbols)).map(x => answer[x[0]]['volatility'] = x[1]);
					Object.entries(await DoAll(this.ns, "ns.stock.getForecast", symbols)).map(x => answer[x[0]]['forecast'] = x[1]);
				}
				Object.entries(await DoAllComplex(this.ns, "ns.stock.getSaleGain", symbols.map(x => [x, answer[x]['position'][0], "Long"]))).map(x => [x[0].split(',')[0], x[1]]).map(x => answer[x[0]]['longsalevalue'] = x[1]);
				Object.entries(await DoAllComplex(this.ns, "ns.stock.getSaleGain", symbols.map(x => [x, answer[x]['position'][2], "Short"]))).map(x => [x[0].split(',')[0], x[1]]).map(x => answer[x[0]]['shortsalevalue'] = x[1]);
				symbols.map(x => answer[x]['value'] = answer[x]['longsalevalue'] + answer[x]['shortsalevalue']);
				symbols.map(x => answer[x]['profit'] = answer[x]['value'] - answer[x]['position'][0] * answer[x]['position'][1] - answer[x]['position'][2] * answer[x]['position'][3]);
				symbols.map(x => answer[x]['server'] = stockMapping[x] ? stockMapping[x] : null);
				return answer;
			} catch (e) {
				this.ns.tprint(e);
				return [];
			}
		})();
	}
	get symbols() {
		return (async () => {
			try {
				return (await Do(this.ns, "ns.stock.getSymbols"));
			} catch (e) {
				return [];
			}
		})();
	}
	async createDisplay() {
		if (!(await Do(this.ns, "ns.stock.hasTIXAPIAccess"))) {
			return;
		}
		eval('window').listenUpStonk = (message) => { globalThis.stockQueue.push(message); };
		if (typeof globalThis.stockQueue === 'undefined') {
			globalThis.stockQueue = [];
		}
		this.stockWindow = await makeNewWindow("Stocks", this.ns.ui.getTheme());
		this.lastPrice = await Do(this.ns, "ns.stock.getPrice", "ECP");
	}
	async updateDisplay() {
		if (this.lastPrice == await Do(this.ns, "ns.stock.getPrice", "ECP")) {
			await this.ns.asleep(0);
			return;
		}
		this.lastPrice = await Do(this.ns, "ns.stock.getPrice", "ECP");
		while (globalThis.stockQueue.length > 0) {
			let cmd = globalThis.stockQueue.shift();
			try { await eval(cmd) } catch (e) { this.ns.tprint(e) }
		}
		let bn = (await Do(this.ns, "ns.getPlayer")).bitNodeN;
		if (this.liquidate) {
			let data = await this.market;
			for (let stock of Object.keys(data)) {
				if (data[stock]['position'][0] > 0) {
					await Do(this.ns, "ns.stock.sellStock", stock, data[stock]['position'][0]);
				}
				if (data[stock]['position'][2] > 0) {
					await Do(this.ns, "ns.stock.sellShort", stock, data[stock]['position'][2]);
				}
			}
		}
		let sourcefiles = [];
		let servermoneyavailable = await DoAll(this.ns, "ns.getServerMoneyAvailable", Object.values(stockMapping));
		let servermaxmoney = await DoAll(this.ns, "ns.getServerMaxMoney", Object.values(stockMapping));
		let serverminsecuritylevel = await DoAll(this.ns, "ns.getServerMinSecurityLevel", Object.values(stockMapping));
		let serversecuritylevel = await DoAll(this.ns, "ns.getServerSecurityLevel", Object.values(stockMapping));
		if (bn != 8) {
			sourcefiles = await Do(this.ns, "ns.singularity.getOwnedSourceFiles");
		}
		let totalProfit = 0;
		let update = "";
		update += "<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 WIDTH=100%>";
		update += "<TR><TH>Company</TH><TH>Price</TH><TH>Long</TH>";
		if ((bn == 8) || ((sourcefiles).filter(x => x.n == 8 && x.lvl >= 2))) {
			update += "<TH>Short</TH>"
		}
		update += "<TH>Profit</TH>"
		let has4s = await Do(this.ns, "ns.stock.has4SDataTIXAPI");
		if (has4s) {
			update += "<TH>Volatility</TH><TH>Forecast</TH>";
		}
		update += "<TH>Server</TH></TR>"
		let updates = [];
		let data = await this.market;
		for (let stock of Object.keys(data)) {
			let myupdate = "";
			myupdate += "<TR VALIGN=TOP><TD>" + stock + "<BR><SMALL>"
			myupdate += data[stock]['company'] + "</TD>";
			myupdate += td(jFormat(data[stock]['price'], "$") + "<BR><SMALL>" + jFormat(data[stock]['askprice'], "$") + "<BR>" + jFormat(data[stock]['bidprice'], "$"), "RIGHT");
			if (data[stock]['position'][0] > 0) {
				myupdate += td(jFormat(data[stock]['position'][0]) + "<BR><SMALL>" + jFormat(data[stock]['position'][1], "$") + (data[stock]['longsalevalue'] != 0 ? "<BR><a href=\"#\" onClick='window.opener.listenUpStonk(\"Do(this.ns, \\\"ns.stock.sellStock\\\", \\\"" + stock + "\\\", " + data[stock]['position'][0] + ")\")'>" + jFormat(data[stock]['longsalevalue'], "$") + "</A>" : ""), "RIGHT");
			} else {
				myupdate += td("&nbsp;");
			}
			if ((bn == 8) || (sourcefiles.filter(x => x.n == 8 && x.lvl >= 2))) {
				if (data[stock]['position'][2] > 0) {
					myupdate += td(jFormat(data[stock]['position'][2]) + "<BR><SMALL>" + jFormat(data[stock]['position'][3], "$") + (data[stock]['shortsalevalue'] != 0 ? "<BR>" + "<a href=\"#\" onClick='window.opener.listenUpStonk(\"Do(this.ns, \\\"ns.stock.sellShort\\\", \\\"" + stock + "\\\", " + data[stock]['position'][2] + ")\")'>" + jFormat(data[stock]['shortsalevalue'], "$") + "</A>" : ""), "RIGHT");
				} else {
					myupdate += td("&nbsp;");
				}
			}
			if (data[stock]['profit'] != 0) {
				myupdate += td((data[stock]['profit'] < 0 ? "<FONT COLOR='" + this.ns.ui.getTheme()['error'] + "'>" : "") + jFormat(data[stock]['profit'], "$"), "RIGHT");
			} else {
				myupdate += td("&nbsp;");
			}
			if (has4s) {
				myupdate += td((this.ns.nFormat(100 * data[stock]['volatility'], "0.00")), "RIGHT");
				let forecast = -100 + 200 * data[stock]['forecast'];
				myupdate += td((forecast < 0 ? "<FONT COLOR='" + this.ns.ui.getTheme()['error'] + "'>" : "") + jFormat(forecast), "RIGHT");
			}
			if (Object.keys(stockMapping).includes(stock)) {
				myupdate += "<TD>" + stockMapping[stock] + "<BR><SMALL>";
				myupdate += "$$$: " + Math.floor(100 * (servermoneyavailable[stockMapping[stock]]) / (servermaxmoney[stockMapping[stock]])).toString() + "%<BR>";
				myupdate += "Sec: " + Math.floor((100 * serverminsecuritylevel[stockMapping[stock]]) / (serversecuritylevel[stockMapping[stock]])).toString() + "%</TD>";
			} else {
				myupdate += td("&nbsp;");
			}
			myupdate += "</TR>";
			if (!this.ns.flags(cmdlineflags)['stockfilter'] || (data[stock]['position'][0] + data[stock]['position'][2]) > 0) {
				if (has4s) {
					updates.push([-data[stock]['forecast'], myupdate])
				} else {
					updates.push([data[stock]['price'], myupdate]);
				}
				totalProfit += data[stock]['profit'];
			}
		}
		updates = updates.sort((a, b) => { return a[0] - b[0]; })
		for (let anUpdate of updates) {
			update += anUpdate[1];
		}
		update += "</TABLE>";
		update = "<H1>Holdings: " + jFormat(await this.portfolioValue, "$") + (totalProfit < 0 ? "<FONT COLOR='" + this.ns.ui.getTheme()['error'] + "'>" : "<FONT>") + " (Profit: " + jFormat(totalProfit, "$") + ")</FONT></H1> " + "<a href=\"#\" onClick='window.opener.listenUpStonk(\"this.liquidate=!this.liquidate\")'>" + (this.liquidate ? "Liquidating" : "<FONT COLOR='" + this.ns.ui.getTheme()['error'] + "'>Click to liquidate</FONT>") + "</A>" + "<BR>" + update;
		this.stockWindow.update(update);
		await this.ns.asleep(1000);
	}
}
// import { Corp } from "Corp.js";

export class WholeGame {
	constructor(ns) {
		this.ns = ns;
		if (ns.flags(cmdlineflags)['logbox']) {
			this.sidebar = this.doc.querySelector(".sb");
			this.css = `body{--prilt:` + this.ns.ui.getTheme()['primarylight'] + `;--pri:` + this.ns.ui.getTheme()['primary'] + `;--pridk:` + this.ns.ui.getTheme()['primarydark'] + `;--successlt:` + this.ns.ui.getTheme()['successlight'] + `;--success:` + this.ns.ui.getTheme()['success'] + `;--successdk:` + this.ns.ui.getTheme()['successdark'] + `;--errlt:` + this.ns.ui.getTheme()['errorlight'] + `;--err:` + this.ns.ui.getTheme()['error'] + `;--errdk:` + this.ns.ui.getTheme()['errordark'] + `;--seclt:` + this.ns.ui.getTheme()['secondarylight'] + `;--sec:` + this.ns.ui.getTheme()['secondary'] + `;--secdk:` + this.ns.ui.getTheme()['secondarydark'] + `;--warnlt:` + this.ns.ui.getTheme()['warninglight'] + `;--warn:` + this.ns.ui.getTheme()['warning'] + `;--warndk:` + this.ns.ui.getTheme()['warningdark'] + `;--infolt:` + this.ns.ui.getTheme()['infolight'] + `;--info:` + this.ns.ui.getTheme()['info'] + `;--infodk:` + this.ns.ui.getTheme()['infodark'] + `;--welllt:` + this.ns.ui.getTheme()['welllight'] + `;--well:` + this.ns.ui.getTheme()['well'] + `;--white:#fff;--black:#000;--hp:` + this.ns.ui.getTheme()['hp'] + `;--money:` + this.ns.ui.getTheme()['money'] + `;--hack:` + this.ns.ui.getTheme()['hack'] + `;--combat:` + this.ns.ui.getTheme()['combat'] + `;--cha:` + this.ns.ui.getTheme()['cha'] + `;--int:` + this.ns.ui.getTheme()['int'] + `;--rep:` + this.ns.ui.getTheme()['rep'] + `;--disabled:` + this.ns.ui.getTheme()['disabled'] + `;--bgpri:` + this.ns.ui.getTheme()['backgroundprimary'] + `;--bgsec:` + this.ns.ui.getTheme()['backgroundsecondary'] + `;--button:` + this.ns.ui.getTheme()['button'] + `;--ff:"` + this.ns.ui.getStyles()['fontFamily'] + `";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 500px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:399px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px;max-height:90%}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{display:flex;white-space:pre;font-weight:bold;user-select:none;height:28px;align-items:center}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:0px 3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 31px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto;font-size:14px;line-height:}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px "codicon";line-height:0.9;display:flex;align-items:center}.sb .icon span{display:inline-block;font:25px -ff;width:25px;text-align:center}.sb .icon svg{height:21px;width:21px;margin:2px}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:""}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;
			if (!this.sidebar) {
				// {"primarylight":"#0f0","primary":"#0c0","primarydark":"#090","successlight":"#0f0","success":"#0c0","successdark":"#090","errorlight":"#f00","error":"#c00","errordark":"#900","secondarylight":"#AAA","secondary":"#888","secondarydark":"#666","warninglight":"#ff0","warning":"#cc0","warningdark":"#990","infolight":"#69f","info":"#36c","infodark":"#039","welllight":"#444","well":"#222","white":"#fff","black":"#000","hp":"#dd3434","money":"#ffd700","hack":"#adff2f","combat":"#faffdf","cha":"#a671d1","int":"#6495ed","rep":"#faffdf","disabled":"#66cfbc","backgroundprimary":"#000","backgroundsecondary":"#000","button":"#333"};
				this.sidebar = this.doc.body.appendChild(this.elemFromHTML(`<div class="sb"><style>${this.css}</style><div class="head"><a class="icon collapser">\ueab6</a><span class=title>box.sidebar v1.1j</span></div>`));
				this.sidebar.addEventListener('keydown', e => e.stopPropagation());
				this.sidebar.querySelector('.head').addEventListener('click', () => {
					this.transition(() => this.sidebar.classList.toggle('c'));
					setTimeout(() => this.doc.querySelector(".monaco-editor") && Object.assign(this.doc.querySelector(".monaco-editor").style, { width: "0px" }), 255);
				});
				this.win._boxEdgeDetect = () => this.doc.querySelectorAll('.sb .box').forEach(box => Object.assign(box.style, { left: Math.max(Math.min(this.win.innerWidth - box.offsetWidth, box.offsetLeft), 0) + "px", top: Math.max(Math.min(this.win.innerHeight - box.offsetHeight, box.offsetTop), 0) + "px" }));
				this.win.addEventListener("resize", this.win._boxEdgeDetect);
			}
		}
		this.slp = ms => new Promise(r => setTimeout(r, ms));
		this.Servers = new Servers(ns, this);
		this.Debug = new DebugStuff(ns, this);
		this.Contracts = new Contracts(ns, this);
		this.Hacknet = new Hacknet(ns, this);
		this.StockMarket = new StockMarket(ns, this);
		this.ProcessList = new ProcessList(ns, this);
		this.Augmentations = new Augmentations(ns, this);
		this.Player = new Player(ns, this);
		this.Grafting = new Grafting(ns, this);
		this.Infiltrations = new Infiltrations(ns, this);
		// this.Corp = new Corp(ns, this);
		this.Jeekipedia = new Jeekipedia(ns, this);
		this.Casino = new Casino(ns, this);
		this.Bladeburner = new Bladeburner(ns, this, {"raid": false, "sting": false});
		this.Sleeves = new Sleeves(ns, this);
		this.Gang = new Gang(ns, this);
	}
	css = `body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:"Lucida Console";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 400px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:399px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px;max-height:90%}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{display:flex;white-space:pre;font-weight:bold;user-select:none;height:28px;align-items:center}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:0px 3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 31px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto;font-size:14px;line-height:}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px "codicon";line-height:0.9;display:flex;align-items:center}.sb .icon span{display:inline-block;font:25px -ff;width:25px;text-align:center}.sb .icon svg{height:21px;width:21px;margin:2px}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:""}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;
	win = globalThis;
	doc = this.win["document"];
	ts = () => `[<span class=ts>${new Date().toLocaleTimeString("en-gb")}</span>]`;
	elemFromHTML = html => new Range().createContextualFragment(html).firstElementChild;
	createItem = (title, content, icon, ...classes) => {
		let sidebar = this.doc.querySelector(".sb");
		let item = sidebar.appendChild(this.elemFromHTML(`<div class="${classes.join(" ")}"><div class="head"><a class="icon">${icon}</a><span class=title>${title}</span><a class="icon collapser">\ueab7</a><a class="icon close">\ueab8</a></div><div class="body">${content}</div></div>`));
		Object.assign(item, {
			head: item.querySelector(".head"),
			body: item.querySelector(".body"),
			toggleType: () => ["box", "sbitem"].forEach(cl => item.classList.toggle(cl)),
			logTarget: item.querySelector(".log"),
			log: (html, timestamp = true) => {
				if (!item.logTarget || !this.doc.contains(item.logTarget)) item.logTarget = item.body.appendChild(this.elemFromHTML("<div class=log></div>"));
				let logEntry = item.logTarget.appendChild(this.elemFromHTML(`<p>${timestamp ? this.ts() : ""} ${html}</p>`));
				try {
					while ((item.logTarget.innerHTML.match(/\<p\>/g) || []).length>item.sizeM) {
					    item.logTarget.innerHTML = item.logTarget.innerHTML.slice(item.logTarget.innerHTML.indexOf("<p>", 3));
					}
				} catch { }
				item.logTarget.scrollTop = item.logTarget.scrollHeight;
				item.recalcHeight();
				return logEntry;
			},
			sizeM: 10,
			recalcHeight: () => { item.style.height = ""; item.style.height = item.offsetHeight + "px" },
			contextItems: {},
			addContextItem: (name, fn, cFn = () => 1) => item.contextItems[name] = { fn: fn, cFn: cFn },
		});

		[["Remove Item", () => item["remove"]()],
		["Cancel", () => 0],
		["Float to Top", () => this.sidebar.querySelector(".head").insertAdjacentElement("afterEnd", item), () => item.classList.contains("sbitem")],
		["Sink to Bottom", () => this.sidebar.appendChild(item), () => item.classList.contains("sbitem")],
		["Toggle Type", () => item.toggleType()],
		["Recalculate Height", item.recalcHeight]].forEach(zargs => item.addContextItem(...zargs));

		item.addEventListener('mousedown', e => item.classList.contains("box") && Object.assign(item.style, { zIndex: this.zIndex() }));
		item.head.addEventListener('mousedown', e => {
			if (item.classList.contains("sbitem")) return e.button || this.transition(() => item.classList.toggle("c"));
			if (e.target.tagName === "A") return;
			let x = e.clientX, y = e.clientY, l = item.offsetLeft, t = item.offsetTop;
			let boxDrag = e => Object.assign(item.style, { left: Math.max(Math.min(this.win.innerWidth - item.offsetWidth, l + e.clientX - x), 0) + "px", top: Math.max(Math.min(this.win.innerHeight - item.offsetHeight, t + e.clientY - y), 0) + "px" });
			let boxDragEnd = e => this.doc.removeEventListener('mouseup', boxDragEnd) || this.doc.removeEventListener('mousemove', boxDrag);
			this.doc.addEventListener('mouseup', boxDragEnd) || this.doc.addEventListener('mousemove', boxDrag);
		});
		item.head.querySelector(".close").addEventListener('click', e => item["remove"]());
		item.head.querySelector(".collapser").addEventListener('click', e => item.classList.contains("box") && this.transition(() => item.classList.toggle("c") || this.win._boxEdgeDetect()));
		item.head.addEventListener("contextmenu", e => e.preventDefault() || this.contextMenu(item, e.clientX, e.clientY));
		Object.assign(item.style, { left: Math.floor(this.win.innerWidth / 2 - item.offsetWidth / 2) + "px", top: Math.floor(this.win.innerHeight / 2 - item.offsetHeight / 2) + "px", height: (item.offsetHeight || 200) + "px", width: (item.offsetWidth || 200) + "px", zIndex: this.zIndex() });
		return item;
	}
	createBox = (title, content, icon = "\uea74", ...classes) => this.createItem(title, content, icon, ...classes, "box");
	createSidebarItem = (title, content, icon = "\uea74", ...classes) => this.createItem(title, content, icon, ...classes, "sbitem");
	confirm = text => {
		let box = this.createBox("Confirmation Prompt", `<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`, "", "prompt");
		box.querySelector("button").focus();
		box.addEventListener('keyup', e => (e.key.toLowerCase() === "y" && box.querySelector("button").click()) || (e.key.toLowerCase() === "n" && box.querySelectorAll("button")[1].click()));
		return new Promise(r => box.querySelectorAll("button").forEach((button, i) => button.addEventListener('click', () => box["remove"](r(i == 0)))));
	};
	prompt = text => {
		let box = this.createBox("Input Prompt", `<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`, "", "prompt");
		box.querySelector("input").focus();
		box.querySelector("input").addEventListener('keyup', e => e.key == 'Enter' && box.querySelector("button").click());
		return new Promise(r => box.querySelector("button").addEventListener('click', () => box["remove"](r(box.querySelector("input").value))));
	};
	select = (text, options) => {
		let box = this.createBox("Selection Prompt", `<div class=g2><div class=f>${text}</div><select class=r>${options.map(option => `<option value="${option}">${option}</option>`).join("")}</select><button class=l>Submit</button></div>`, "", "prompt");
		box.querySelector("select").focus();
		return new Promise(r => box.querySelector("button").addEventListener('click', () => box["remove"](r(box.querySelector("select").value))));
	};
	alert = text => {
		let box = this.createBox("Alert Message", `<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`, "", "prompt");
		box.querySelector("button").focus();
		return new Promise(r => box.querySelector("button").addEventListener('click', () => r(box["remove"]())));
	};
	contextMenu = (item, x, y) => {
		if (item.classList.contains("prompt")) return;
		let options = Object.entries(item.contextItems).filter(([name, entry]) => entry.cFn());
		let box = this.createBox("", `<div class=g2><div class=f>${item.querySelector(".title").innerText}.context</div>${options.map(([name, entry]) => `<button class=n>${name}</button>`).join("")}</div>`, "", "contextMenu");
		box.querySelector("button").focus();
		Object.assign(box.style, { left: Math.max(Math.min(this.win.innerWidth - box.offsetWidth / 2, x), box.offsetWidth / 2) + "px", top: Math.max(Math.min(this.win.innerHeight - box.offsetHeight / 2, y), box.offsetHeight / 2) + "px", transform: "translate(-50%, -50%)" });
		box.querySelectorAll("button").forEach(button => button.addEventListener("click", () => box["remove"](item.contextItems[button.innerText].fn())));
		box.addEventListener("mousedown", e => e.stopPropagation());
		let docFunction = () => box["remove"](this.doc.removeEventListener("mousedown", docFunction));
		setTimeout(() => this.doc.addEventListener("mousedown", docFunction), 10);
	};
	transition = fn => {
		let sidebar = this.doc.querySelector(".sb");
		sidebar.classList.add("t");
		fn();
		setTimeout(() => this.sidebar.classList["remove"]("t"), 200);
	}
	zIndex = () => Math.max(9000, ...[...this.doc.querySelectorAll(".sb .box")].map(box => box.style.zIndex)) + 1;

	get bitNodeN() {
		return (async () => {
			try {
				return (await (this.Player.bitNodeN));
			} catch (e) {
				return 1;
			}
		})();
	}
	async winGame() {
		let parent = {};
		let path = ["The-Cave"];
		while (path[0] != "home") {
			path.unshift((await Do(this.ns, "ns.scan", path[0]))[0]);
			this.ns.tprint(path);
		}
		while (path.length > 0) {
			await Do(this.ns, "ns.singularity.connect", path.shift());
		}
		await Do(this.ns, "ns.singularity.connect", "w0r1d_d43m0n");
		for (let i of ["ns.brutessh", "ns.ftpcrack", "ns.sqlinject", "ns.relaysmtp", "ns.httpworm", "ns.nuke"]) {
			await Do(this.ns, i, "w0r1d_d43m0n"); // FFIGNORE
		}
		await Do(this.ns, "await ns.singularity.installBackdoor");
	}
	async SoftReset() {
		writeIfNotSame(this.ns, "/temp/restart.js", "export async function main(ns) {ns.spawn('jeek.js', 1, \"" + this.ns.args.join('","') + "\");}")
		await Do(this.ns, "ns.singularity.softReset", "/temp/restart.js");
	}
	async roulettestart() {
		return await roulettestart(this);
	}
	async bn2() {
		return await bn2(this);
	}
	async bn7() {
		return await bn7(this);
	}
	async bn8() {
		return await bn8(this);
	}
	async bn8hackloop() {
		return await bn8hackloop(this);
	}
}
// Thanks to omuretsu
let slp = ms => new Promise(r => setTimeout(r, ms));
export let makeNewWindow = async (title = "Default Window Title", theme) => {
  let win = open("", title.replaceAll(" ", "_"), "popup=yes,height=200,width=500,left=100,top=100,resizable=yes,scrollbars=no,toolbar=no,menubar=no,location=no,directories=no,status=no");
//  let win = open("main.bundle.js", title.replaceAll(" ", "_"), "popup=yes,height=200,width=500,left=100,top=100,resizable=yes,scrollbars=no,toolbar=no,menubar=no,location=no,directories=no,status=no");
  let good = false;
  let doc = 0;
  while (!good) {
    await slp(1000);
    try {
      doc = win["document"];
      doc.head.innerHTML = "No.";
      good = true;
    } catch {
      good = false;
    }
  }
  await slp(200);
  doc.head.innerHTML = `
  <title>${title}</title>
  <style>
    *{
      margin:0;
    }
    body{
      background:` + theme['backgroundprimary'] + `;
      color:` + theme['primary'] + `;
      overflow:hidden;
      height:100vh;
      width:100vw;
      font-family: "Hack Regular Nerd Font Complete", "Lucida Console", "Lucida Sans Unicode", "Fira Mono", Consolas, "Courier New", Courier, monospace, "Times New Roman";
      display:flex;
      flex-direction:column;
    }
    td{
      background:` + theme['backgroundsecondary'] + `;
      color:` + theme['primary'] + `;
      font-family: "Hack Regular Nerd Font Complete", "Lucida Console", "Lucida Sans Unicode", "Fira Mono", Consolas, "Courier New", Courier, monospace, "Times New Roman";
    }
    a{
      color:` + theme['primary'] + `;
      font-family: "Hack Regular Nerd Font Complete", "Lucida Console", "Lucida Sans Unicode", "Fira Mono", Consolas, "Courier New", Courier, monospace, "Times New Roman";
    }
    warning{
      color:` + theme['error'] + `;
      font-family: "Hack Regular Nerd Font Complete", "Lucida Console", "Lucida Sans Unicode", "Fira Mono", Consolas, "Courier New", Courier, monospace, "Times New Roman";
    }
    .title{
      font-size:20px;
      text-align:center;
      flex: 0 0;
      display:flex;
      align-items:center;
      border-bottom:1px solid white;
    }
    .scrollQuery{
      font-size:12px;
      margin-left:auto;
    }
    .logs{
      width:100%;
      flex: 1;
      overflow-y:scroll;
      font-size:14px;
    }
    .logs::-webkit-scrollbar,::-webkit-scrollbar-corner{
      background:` + theme['button'] + `;
      width:10px;
      height:10px;
    }
    .logs::-webkit-scrollbar-button{
      width:0px;
      height:0px;
    }
    .logs::-webkit-scrollbar-thumb{
      background:` + theme['primary'] + `;
    }
  </style>`;
  doc.body.innerHTML = `<div class=title>${title}</div><div class=logs><p></p></div>`;
  let logs = doc.body.querySelector(".logs");
  win.update = (content) => {
    logs.innerHTML = content;
  }
  win.reopen = () => open("", title.replaceAll(" ", "_"), "popup=yes,height=200,width=500,left=100,top=100,resizable=yes,scrollbars=no,toolbar=no,menubar=no,location=no,directories=no,status=no");
  return win;
}
/* Worker Test Code
let workerCode = "postMessage(`I'm working before postMessage('ali').`); console.log('BOOTED'); onmessage = (event) => { postMessage(`Hi, ${event.data}`);};";

export async function main(ns) {
  var win=eval("window");
  var blob = new Blob([workerCode], {type: "application/javascript"});
  const myWorker = new Worker(URL.createObjectURL(blob));
  let data = [];
  myWorker.postMessage('ali');
  myWorker.onmessage = (event) => {
	data.push(`Worker said : ${event.data}`);
  };
  while (data.length == 0) {
	await ns.asleep(0);
  }
  ns.tprint(data.pop());
  while (data.length == 0) {
	await ns.asleep(0);
  }
  ns.tprint(data.pop());
} */

// https://discord.com/channels/415207508303544321/944647347625930762/1046962547582058496
// (()=>{let times=[],fn=(off)=>{if (times.length >= 100) {if (times.length == 100) {console.log(times.join("\n"))}; return}; let n=Date.now(); let m=n%4==off?4:8-(n-off)%4; times.push(off+","+m+","+n); setTimeout(fn, m, off)};[0,1,2,3].forEach(fn)})()
